{
    "name": "dart:io",
    "href": "dart-io\/dart-io-library.html",
    "cn": [
        {
            "type": "",
            "href": "dart-io\/APPEND-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "APPEND",
            "memberOf": "dart:io"
        },
        {
            "name": "dart:io.BadCertificateCallback",
            "type": "dart:core.bool",
            "desc": "",
            "static": false,
            "memberOf": "dart:io",
            "sig": "",
            "params": [
                {
                    "name": "cr",
                    "type": "dart:io.X509Certificate",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/BadCertificateCallback.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef bool BadCertificateCallback(X509Certificate cr, String host, int port);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef"
        },
        {
            "name": "dart:io.BytesBuilder",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "BytesBuilder",
                    "type": "",
                    "desc": "<p>Construct a new empty <a href=\"dart-io\/BytesBuilder-class.html\">BytesBuilder<\/a>.<\/p>\n<p>If <code>copy<\/code> is true, the data is always copied when added to the list. If\nit <code>copy<\/code> is false, the data is only copied if needed. That means that if\nthe lists are changed after added to the <a href=\"dart-io\/BytesBuilder-class.html\">BytesBuilder<\/a>, it may effect the\noutput. Default is <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.BytesBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "copy",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/BytesBuilder\/BytesBuilder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory BytesBuilder({bool copy: true}) {\n  if (copy) {\n    return new _CopyingBytesBuilder();\n  } else {\n    return new _BytesBuilder();\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Appends <code>bytes<\/code> to the current contents of the builder.<\/p>\n<p>Each value of <code>bytes<\/code> will be bit-representation truncated to the range\n0 .. 255.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.BytesBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/BytesBuilder\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; bytes);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addByte",
                    "type": "",
                    "desc": "<p>Append <code>byte<\/code> to the current contents of the builder.<\/p>\n<p>The <code>byte<\/code> will be bit-representation truncated to the range 0 .. 255.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.BytesBuilder",
                    "sig": "",
                    "params": [
                        {
                            "name": "byte",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/BytesBuilder\/addByte.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addByte(int byte);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Clear the contents of the builder.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.BytesBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/BytesBuilder\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "takeBytes",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Returns the contents of <code>this<\/code> and clears <code>this<\/code>.<\/p>\n<p>The list returned is a view of the internal buffer, limited to the\n<a href=\"dart-io\/BytesBuilder\/length.html\">length<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.BytesBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/BytesBuilder\/takeBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; takeBytes();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "toBytes",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Returns a copy of the current contents of the builder.<\/p>\n<p>Leaves the contents of the builder intact.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.BytesBuilder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/BytesBuilder\/toBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; toBytes();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                }
            ],
            "props": [
                {
                    "name": "isEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if the buffer is empty.<\/p>\n        ",
                    "memberOf": "dart:io.BytesBuilder",
                    "isConstant": false,
                    "href": "dart-io\/BytesBuilder\/isEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNotEmpty",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns <code>true<\/code> if the buffer is not empty.<\/p>\n        ",
                    "memberOf": "dart:io.BytesBuilder",
                    "isConstant": false,
                    "href": "dart-io\/BytesBuilder\/isNotEmpty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of bytes in the builder.<\/p>\n        ",
                    "memberOf": "dart:io.BytesBuilder",
                    "isConstant": false,
                    "href": "dart-io\/BytesBuilder\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/BytesBuilder-class.html",
            "desc": "<p>Builds a list of bytes, allowing bytes and lists of bytes to be added at the\nend.<\/p>\n<p>Used to efficiently collect bytes and lists of bytes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BytesBuilder"
        },
        {
            "name": "dart:io.CertificateException",
            "extends": [
                "dart:io.TlsException",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "CertificateException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.CertificateException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/CertificateException\/CertificateException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst CertificateException([String message = \"\", OSError osError])\n    : super._(\"CertificateException\", message, osError);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/CertificateException-class.html",
            "desc": "<p>An exception that happens in the handshake phase of establishing\na secure network connection, when looking up or verifying a\ncertificate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CertificateException"
        },
        {
            "name": "dart:io.CompressionOptions",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "CompressionOptions",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.CompressionOptions",
                    "sig": "",
                    "params": [
                        {
                            "name": "clientNoContextTakeover",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "serverNoContextTakeover",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clientMaxWindowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "serverMaxWindowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "enabled",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/CompressionOptions\/CompressionOptions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CompressionOptions(\n    {this.clientNoContextTakeover: false,\n    this.serverNoContextTakeover: false,\n    this.clientMaxWindowBits,\n    this.serverMaxWindowBits,\n    this.enabled: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/CompressionOptions\/DEFAULT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CompressionOptions DEFAULT = compressionDefault\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DEFAULT",
                    "memberOf": "dart:io.CompressionOptions"
                },
                {
                    "type": "",
                    "href": "dart-io\/CompressionOptions\/OFF-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CompressionOptions OFF = compressionOff\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "OFF",
                    "memberOf": "dart:io.CompressionOptions"
                },
                {
                    "name": "clientMaxWindowBits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Determines the max window bits for the client.<\/p>\n        ",
                    "memberOf": "dart:io.CompressionOptions",
                    "isConstant": false,
                    "href": "dart-io\/CompressionOptions\/clientMaxWindowBits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int clientMaxWindowBits\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "clientNoContextTakeover",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Controls whether the client will reuse its compression instances.<\/p>\n        ",
                    "memberOf": "dart:io.CompressionOptions",
                    "isConstant": false,
                    "href": "dart-io\/CompressionOptions\/clientNoContextTakeover.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool clientNoContextTakeover\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/CompressionOptions\/compressionDefault-constant.html",
                    "desc": "<p>Default WebSocket Compression options.<\/p>\n<p>Compression will be enabled with the following options:<\/p>\n<ul>\n<li>\n<code>clientNoContextTakeover<\/code>: false<\/li>\n<li>\n<code>serverNoContextTakeover<\/code>: false<\/li>\n<li>\n<code>clientMaxWindowBits<\/code>: 15<\/li>\n<li>\n<code>serverMaxWindowBits<\/code>: 15<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CompressionOptions compressionDefault =\n    const CompressionOptions()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "compressionDefault",
                    "memberOf": "dart:io.CompressionOptions"
                },
                {
                    "type": "",
                    "href": "dart-io\/CompressionOptions\/compressionOff-constant.html",
                    "desc": "<p>Disables WebSocket Compression.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CompressionOptions compressionOff =\n    const CompressionOptions(enabled: false)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "compressionOff",
                    "memberOf": "dart:io.CompressionOptions"
                },
                {
                    "name": "enabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Enables or disables WebSocket compression.<\/p>\n        ",
                    "memberOf": "dart:io.CompressionOptions",
                    "isConstant": false,
                    "href": "dart-io\/CompressionOptions\/enabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "serverMaxWindowBits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Determines the max window bits for the server.<\/p>\n        ",
                    "memberOf": "dart:io.CompressionOptions",
                    "isConstant": false,
                    "href": "dart-io\/CompressionOptions\/serverMaxWindowBits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int serverMaxWindowBits\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "serverNoContextTakeover",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Controls whether the server will reuse its compression instances.<\/p>\n        ",
                    "memberOf": "dart:io.CompressionOptions",
                    "isConstant": false,
                    "href": "dart-io\/CompressionOptions\/serverNoContextTakeover.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool serverNoContextTakeover\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/CompressionOptions-class.html",
            "desc": "<p>The <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a> class allows you to control\nthe options of WebSocket compression.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CompressionOptions"
        },
        {
            "name": "dart:io.ConnectionTask",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "cancel",
                    "type": "",
                    "desc": "<p>Cancels the connection attempt.<\/p>\n<p>This also causes the <a href=\"dart-io\/ConnectionTask\/socket.html\">socket<\/a> <code>Future<\/code> to complete with a\n<a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> error.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ConnectionTask",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/ConnectionTask\/cancel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void cancel() {\n  _onCancel();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "socket",
                    "type": "dart:async.Future",
                    "types": [],
                    "desc": "<p>A <code>Future<\/code> that completes with value that <code>S.connect()<\/code> would return\nunless <a href=\"dart-io\/ConnectionTask\/cancel.html\">cancel<\/a> is called on this <a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a>.<\/p>\n<p>If <a href=\"dart-io\/ConnectionTask\/cancel.html\">cancel<\/a> is called, the <code>Future<\/code> completes with a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a>\nerror whose message indicates that the connection attempt was cancelled.<\/p>\n        ",
                    "memberOf": "dart:io.ConnectionTask",
                    "isConstant": false,
                    "href": "dart-io\/ConnectionTask\/socket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Future&lt;S&gt; socket\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ConnectionTask-class.html",
            "desc": "<p>Returned by the <code>startConnect<\/code> methods on client-side socket types <code>S<\/code>,\n<code>ConnectionTask&lt;S&gt;<\/code> allows cancelling an attempt to connect to a host.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ConnectionTask"
        },
        {
            "name": "dart:io.ContentType",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ContentType",
                    "type": "",
                    "desc": "<p>Creates a new content type object setting the primary type and\nsub type. The charset and additional parameters can also be set\nusing <code>charset<\/code> and <code>parameters<\/code>. If charset is passed and\n<code>parameters<\/code> contains charset as well the passed <code>charset<\/code> will\noverride the value in parameters. Keys passed in parameters will be\nconverted to lower case. The <code>charset<\/code> entry, whether passed as <code>charset<\/code>\nor in <code>parameters<\/code>, will have its value converted to lower-case.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ContentType",
                    "sig": "",
                    "params": [
                        {
                            "name": "primaryType",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "subType",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "charset",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "parameters",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/ContentType\/ContentType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory ContentType(String primaryType, String subType,\n    {String charset, Map&lt;String, String&gt; parameters}) {\n  return new _ContentType(primaryType, subType, charset, parameters);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parse",
                    "type": "dart:io.ContentType",
                    "desc": "<p>Creates a new content type object from parsing a Content-Type\nheader value. As primary type, sub type and parameter names and\nvalues are not case sensitive all these values will be converted\nto lower case. Parsing this string<\/p>\n<pre class=\"language-dart\"><code>text\/html; charset=utf-8\n<\/code><\/pre>\n<p>will create a content type object with primary type <code>text<\/code>, sub\ntype <code>html<\/code> and parameter <code>charset<\/code> with value <code>utf-8<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ContentType",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/ContentType\/parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ContentType parse(String value) {\n  return _ContentType.parse(value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "BINARY",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/BINARY.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final BINARY = binary\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "HTML",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/HTML.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final HTML = html\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "JSON",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/JSON.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final JSON = json\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "TEXT",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/TEXT.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final TEXT = text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "binary",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "<p>Content type for binary data.<\/p>\n<pre class=\"language-dart\"><code>application\/octet-stream\n<\/code><\/pre>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/binary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final binary = new ContentType(\"application\", \"octet-stream\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "charset",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the character set.<\/p>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/charset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get charset;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "html",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "<p>Content type for HTML using UTF-8 encoding.<\/p>\n<pre class=\"language-dart\"><code>text\/html; charset=utf-8\n<\/code><\/pre>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/html.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final html = new ContentType(\"text\", \"html\", charset: \"utf-8\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "json",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "<p>Content type for JSON using UTF-8 encoding.<\/p>\n<pre class=\"language-dart\"><code>application\/json; charset=utf-8\n<\/code><\/pre>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/json.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final json = new ContentType(\"application\", \"json\", charset: \"utf-8\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "mimeType",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the mime-type, without any parameters.<\/p>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/mimeType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get mimeType;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "primaryType",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the primary type.<\/p>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/primaryType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get primaryType;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "subType",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the sub type.<\/p>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/subType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get subType;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "<p>Content type for plain text using UTF-8 encoding.<\/p>\n<pre class=\"language-dart\"><code>text\/plain; charset=utf-8\n<\/code><\/pre>\n        ",
                    "memberOf": "dart:io.ContentType",
                    "isConstant": false,
                    "href": "dart-io\/ContentType\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final text = new ContentType(\"text\", \"plain\", charset: \"utf-8\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ContentType-class.html",
            "desc": "<p>Representation of a content type. An instance of <a href=\"dart-io\/ContentType-class.html\">ContentType<\/a> is\nimmutable.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ContentType"
        },
        {
            "name": "dart:io.Cookie",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Cookie",
                    "type": "",
                    "desc": "<p>Creates a new cookie optionally setting the name and value.<\/p>\n<p>By default the value of <code>httpOnly<\/code> will be set to <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Cookie",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Cookie\/Cookie.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Cookie([String name, String value]) =&gt; new _Cookie(name, value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Cookie.fromSetCookieValue",
                    "type": "",
                    "desc": "<p>Creates a new cookie by parsing a header value from a 'set-cookie'\nheader.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Cookie",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Cookie\/Cookie.fromSetCookieValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Cookie.fromSetCookieValue(String value) {\n  return new _Cookie.fromSetCookieValue(value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the formatted string representation of the cookie. The\nstring representation can be used for for setting the Cookie or\n'set-cookie' headers<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Cookie",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Cookie\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "domain",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the domain.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/domain.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String domain\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "expires",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>Gets and sets the expiry date.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/expires.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateTime expires\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "httpOnly",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets whether this cookie is HTTP only.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/httpOnly.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool httpOnly\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxAge",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the max age. A value of <code>0<\/code> means delete cookie\nnow.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/maxAge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maxAge\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the name.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the path.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String path\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "secure",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets whether this cookie is secure.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/secure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool secure\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the value.<\/p>\n        ",
                    "memberOf": "dart:io.Cookie",
                    "isConstant": false,
                    "href": "dart-io\/Cookie\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Cookie-class.html",
            "desc": "<p>Representation of a cookie. For cookies received by the server as\nCookie header values only <code>name<\/code> and <code>value<\/code> fields will be\nset. When building a cookie for the 'set-cookie' header in the server\nand when receiving cookies in the client as 'set-cookie' headers all\nfields can be used.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Cookie"
        },
        {
            "name": "dart:io.Datagram",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Datagram",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.Datagram",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "address",
                            "type": "dart:io.InternetAddress",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Datagram\/Datagram.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Datagram(this.data, this.address, this.port);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.Datagram",
                    "isConstant": false,
                    "href": "dart-io\/Datagram\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress address\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "data",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "",
                    "memberOf": "dart:io.Datagram",
                    "isConstant": false,
                    "href": "dart-io\/Datagram\/data.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; data\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.Datagram",
                    "isConstant": false,
                    "href": "dart-io\/Datagram\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int port\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Datagram-class.html",
            "desc": "<p>Datagram package. Data send to and received from datagram sockets\ncontains the internet address and port of the destination or source\ntogeter with the data.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Datagram"
        },
        {
            "name": "dart:io.DetachedSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "DetachedSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.DetachedSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/DetachedSocket\/DetachedSocket.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "socket",
                    "type": "dart:io.Socket",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.DetachedSocket",
                    "isConstant": false,
                    "href": "dart-io\/DetachedSocket\/socket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Socket get socket;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "unparsedData",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "",
                    "memberOf": "dart:io.DetachedSocket",
                    "isConstant": false,
                    "href": "dart-io\/DetachedSocket\/unparsedData.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; get unparsedData;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/DetachedSocket-class.html",
            "desc": "<p>When detaching a socket from either the <code>HttpServer<\/code> or the\n<code>HttpClient<\/code> due to a HTTP connection upgrade there might be\nunparsed data already read from the socket. This unparsed data\ntogether with the detached socket is returned in an instance of\nthis class.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DetachedSocket"
        },
        {
            "name": "dart:io.Directory",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Directory",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-io\/Directory-class.html\">Directory<\/a> object.<\/p>\n<p>If <code>path<\/code> is a relative path, it will be interpreted relative to the\ncurrent working directory (see <a href=\"dart-io\/Directory\/current.html\">Directory.current<\/a>), when used.<\/p>\n<p>If <code>path<\/code> is an absolute path, it will be immune to changes to the\ncurrent working directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Directory\/Directory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Directory(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return new _Directory(path);\n  }\n  return overrides.createDirectory(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<dart:io.Directory>",
                    "desc": "<p>Creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with this\ndirectory once it has been created. If the directory cannot be\ncreated the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Directory&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Directory"
                    ]
                },
                {
                    "name": "createSync",
                    "type": "",
                    "desc": "<p>Synchronously creates the directory with this name.<\/p>\n<p>If <code>recursive<\/code> is false, only the last directory in the path is\ncreated. If <code>recursive<\/code> is true, all non-existing path components\nare created. If the directory already exists nothing is done.<\/p>\n<p>If the directory cannot be created an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/createSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void createSync({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "createTemp",
                    "type": "dart:async.Future<dart:io.Directory>",
                    "desc": "<p>Creates a temporary directory in this directory. Additional random\ncharacters are appended to <code>prefix<\/code> to produce a unique directory\nname. If <code>prefix<\/code> is missing or null, the empty string is used\nfor <code>prefix<\/code>.<\/p>\n<p>Returns a <code>Future&lt;Directory&gt;<\/code> that completes with the newly\ncreated temporary directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/createTemp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Directory&gt; createTemp([String prefix]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Directory"
                    ]
                },
                {
                    "name": "createTempSync",
                    "type": "dart:io.Directory",
                    "desc": "<p>Synchronously creates a temporary directory in this directory.\nAdditional random characters are appended to <code>prefix<\/code> to produce\na unique directory name. If <code>prefix<\/code> is missing or null, the empty\nstring is used for <code>prefix<\/code>.<\/p>\n<p>Returns the newly created temporary directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/createTempSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory createTempSync([String prefix]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Directory.fromRawPath",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Directory\/Directory.fromRawPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Directory.fromRawPath(Uint8List path) {\n  \/\/ TODO(bkonyi): Handle overrides.\n  return new _Directory.fromRawPath(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Directory.fromUri",
                    "type": "",
                    "desc": "<p>Create a Directory object from a URI.<\/p>\n<p>If <code>uri<\/code> cannot reference a directory this throws <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "uri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Directory\/Directory.fromUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Directory.fromUri(Uri uri) =&gt; new Directory(uri.toFilePath());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "list",
                    "type": "dart:async.Stream<dart:io.FileSystemEntity>",
                    "desc": "<p>Lists the sub-directories and files of this <a href=\"dart-io\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects.\nIf a symbolic link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"dart-io\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>The result is a stream of <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects\nfor the directories, files, and links.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/list.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;FileSystemEntity&gt; list(\n    {bool recursive: false, bool followLinks: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:io.FileSystemEntity"
                    ]
                },
                {
                    "name": "listSync",
                    "type": "dart:core.List<dart:io.FileSystemEntity>",
                    "desc": "<p>Lists the sub-directories and files of this <a href=\"dart-io\/Directory-class.html\">Directory<\/a>.\nOptionally recurses into sub-directories.<\/p>\n<p>If <code>followLinks<\/code> is false, then any symbolic links found\nare reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects, rather than as directories or files,\nand are not recursed into.<\/p>\n<p>If <code>followLinks<\/code> is true, then working links are reported as\ndirectories or files, depending on\ntheir type, and links to directories are recursed into.\nBroken links are reported as <a href=\"dart-io\/Link-class.html\">Link<\/a> objects.\nIf a link makes a loop in the file system, then a recursive\nlisting will not follow a link twice in the\nsame recursive descent, but will report it as a <a href=\"dart-io\/Link-class.html\">Link<\/a>\nthe second time it is seen.<\/p>\n<p>Returns a <a href=\"dart-core\/List-class.html\">List<\/a> containing <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects for the\ndirectories, files, and links.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/listSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;FileSystemEntity&gt; listSync(\n    {bool recursive: false, bool followLinks: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:io.FileSystemEntity"
                    ]
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<dart:io.Directory>",
                    "desc": "<p>Renames this directory. Returns a <code>Future&lt;Directory&gt;<\/code> that completes\nwith a <a href=\"dart-io\/Directory-class.html\">Directory<\/a> instance for the renamed directory.<\/p>\n<p>If newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file, the operation\nfails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Directory&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Directory"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "dart:io.Directory",
                    "desc": "<p>Synchronously renames this directory. Returns a <a href=\"dart-io\/Directory-class.html\">Directory<\/a>\ninstance for the renamed directory.<\/p>\n<p>If newPath identifies an existing directory, that directory is\nreplaced. If newPath identifies an existing file the operation\nfails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolveSymbolicLinks",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Directory\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/resolveSymbolicLinks.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; resolveSymbolicLinks();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "resolveSymbolicLinksSync",
                    "type": "dart:core.String",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Directory\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/resolveSymbolicLinksSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String resolveSymbolicLinksSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a human readable string for this Directory instance.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Directory",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Directory\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "dart:io.Directory",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-io\/Directory-class.html\">Directory<\/a> instance whose path is the absolute path to <a href=\"dart-io\/Directory-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "dart:io.Directory",
                    "isConstant": false,
                    "href": "dart-io\/Directory\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "current",
                    "type": "dart:io.Directory",
                    "types": [],
                    "desc": "<p>Creates a directory object pointing to the current working\ndirectory.<\/p>\n        ",
                    "memberOf": "dart:io.Directory",
                    "isConstant": false,
                    "href": "dart-io\/Directory\/current.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Directory get current {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _Directory.current;\n  }\n  return overrides.getCurrentDirectory();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the path of this directory.<\/p>\n        ",
                    "memberOf": "dart:io.Directory",
                    "isConstant": false,
                    "href": "dart-io\/Directory\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "systemTemp",
                    "type": "dart:io.Directory",
                    "types": [],
                    "desc": "<p>Gets the system temp directory.<\/p>\n<p>Gets the directory provided by the operating system for creating\ntemporary files and directories in.\nThe location of the system temp directory is platform-dependent,\nand may be set by an environment variable.<\/p>\n        ",
                    "memberOf": "dart:io.Directory",
                    "isConstant": false,
                    "href": "dart-io\/Directory\/systemTemp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Directory get systemTemp {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _Directory.systemTemp;\n  }\n  return overrides.getSystemTempDirectory();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> representing the directory's location.<\/p>\n<p>The returned URI's scheme is always \"file\" if the entity's <a href=\"dart-io\/Directory\/path.html\">path<\/a> is\nabsolute, otherwise the scheme will be empty.\nThe returned URI's path always ends in a slash ('\/').<\/p>\n        ",
                    "memberOf": "dart:io.Directory",
                    "isConstant": false,
                    "href": "dart-io\/Directory\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Directory-class.html",
            "desc": "<p>A reference to a directory (or <em>folder<\/em>) on the file system.<\/p>\n<p>A Directory instance is an object holding a <a href=\"dart-io\/Directory\/path.html\">path<\/a> on which operations can\nbe performed. The path to the directory can be <a href=\"dart-io\/Directory\/absolute.html\">absolute<\/a> or relative.\nYou can get the parent directory using the getter <a href=\"dart-io\/FileSystemEntity\/parent.html\">parent<\/a>,\na property inherited from <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>In addition to being used as an instance to access the file system,\nDirectory has a number of static properties, such as <a href=\"dart-io\/Directory\/systemTemp.html\">systemTemp<\/a>,\nwhich gets the system's temporary directory, and the getter and setter\n<a href=\"dart-io\/Directory\/current.html\">current<\/a>, which you can use to access or change the current directory.<\/p>\n<p>Create a new Directory object with a pathname to access the specified\ndirectory on the file system from your program.<\/p>\n<pre class=\"language-dart\"><code>var myDir = new Directory('myDir');\n<\/code><\/pre>\n<p>Most methods in this class occur in synchronous and asynchronous pairs,\nfor example, <a href=\"dart-io\/Directory\/create.html\">create<\/a> and <a href=\"dart-io\/Directory\/createSync.html\">createSync<\/a>.\nUnless you have a specific reason for using the synchronous version\nof a method, prefer the asynchronous version to avoid blocking your program.<\/p>\n<h2 id=\"create-a-directory\">Create a directory<\/h2>\n<p>The following code sample creates a directory using the <a href=\"dart-io\/Directory\/create.html\">create<\/a> method.\nBy setting the <code>recursive<\/code> parameter to true, you can create the\nnamed directory and all its necessary parent directories,\nif they do not already exist.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  \/\/ Creates dir\/ and dir\/subdir\/.\n  new Directory('dir\/subdir').create(recursive: true)\n    \/\/ The created directory is returned as a Future.\n    .then((Directory directory) {\n      print(directory.path);\n  });\n}\n<\/code><\/pre>\n<h2 id=\"list-a-directory\">List a directory<\/h2>\n<p>Use the <a href=\"dart-io\/Directory\/list.html\">list<\/a> or <a href=\"dart-io\/Directory\/listSync.html\">listSync<\/a> methods to get the files and directories\ncontained by a directory.\nSet <code>recursive<\/code> to true to recursively list all subdirectories.\nSet <code>followLinks<\/code> to true to follow symbolic links.\nThe list method returns a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> that provides FileSystemEntity\nobjects. Use the listen callback function to process each object\nas it become available.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  \/\/ Get the system temp directory.\n  var systemTempDir = Directory.systemTemp;\n\n  \/\/ List directory contents, recursing into sub-directories,\n  \/\/ but not following symbolic links.\n  systemTempDir.list(recursive: true, followLinks: false)\n    .listen((FileSystemEntity entity) {\n      print(entity.path);\n    });\n}\n<\/code><\/pre>\n<h2 id=\"the-use-of-futures\">The use of Futures<\/h2>\n<p>I\/O operations can block a program for some period of time while it waits for\nthe operation to complete. To avoid this, all\nmethods involving I\/O have an asynchronous variant which returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>.\nThis future completes when the I\/O operation finishes. While the I\/O\noperation is in progress, the Dart program is not blocked,\nand can perform other operations.<\/p>\n<p>For example,\nthe <a href=\"dart-io\/FileSystemEntity\/exists.html\">exists<\/a> method, which determines whether the directory exists,\nreturns a boolean value using a Future.\nUse <code>then<\/code> to register a callback function, which is called when\nthe value is ready.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  final myDir = new Directory('dir');\n  myDir.exists().then((isThere) {\n    isThere ? print('exists') : print('non-existent');\n  });\n}\n<\/code><\/pre>\n<p>In addition to exists, the <a href=\"dart-io\/FileSystemEntity\/stat.html\">stat<\/a>, <a href=\"dart-io\/Directory\/rename.html\">rename<\/a>, and\nother methods, return Futures.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<ul>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#files-directories-and-symlinks\">Dart by Example<\/a>\nprovides additional task-oriented code samples that show how to use\nvarious API from the Directory class and the related <a href=\"dart-io\/File-class.html\">File<\/a> class.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#dartio---io-for-command-line-apps\">I\/O for Command-Line\nApps<\/a>\na section from <em>A Tour of the Dart Libraries<\/em> covers files and directories.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/tutorials\/cmdline\/\">Write Command-Line Apps<\/a>,\na tutorial about writing command-line apps, includes information about\nfiles and directories.<\/p>\n<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Directory"
        },
        {
            "name": "dart:io.File",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "File",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-io\/File-class.html\">File<\/a> object.<\/p>\n<p>If <code>path<\/code> is a relative path, it will be interpreted relative to the\ncurrent working directory (see <a href=\"dart-io\/Directory\/current.html\">Directory.current<\/a>), when used.<\/p>\n<p>If <code>path<\/code> is an absolute path, it will be immune to changes to the\ncurrent working directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/File\/File.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory File(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return new _File(path);\n  }\n  return overrides.createFile(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copy",
                    "type": "dart:async.Future<dart:io.File>",
                    "desc": "<p>Copy this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"dart-io\/File-class.html\">File<\/a> instance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/copy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; copy(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.File"
                    ]
                },
                {
                    "name": "copySync",
                    "type": "dart:io.File",
                    "desc": "<p>Synchronously copy this file. Returns a <a href=\"dart-io\/File-class.html\">File<\/a>\ninstance for the copied file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/copySync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File copySync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<dart:io.File>",
                    "desc": "<p>Create the file. Returns a <code>Future&lt;File&gt;<\/code> that completes with\nthe file when it has been created.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created only if\nall directories in the path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created.<\/p>\n<p>Existing files are left untouched by <a href=\"dart-io\/File\/create.html\">create<\/a>. Calling <a href=\"dart-io\/File\/create.html\">create<\/a> on an\nexisting file might fail if there are restrictive permissions on\nthe file.<\/p>\n<p>Completes the future with a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; create({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.File"
                    ]
                },
                {
                    "name": "createSync",
                    "type": "",
                    "desc": "<p>Synchronously create the file. Existing files are left untouched\nby <a href=\"dart-io\/File\/createSync.html\">createSync<\/a>. Calling <a href=\"dart-io\/File\/createSync.html\">createSync<\/a> on an existing file might fail\nif there are restrictive permissions on the file.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the file is created\nonly if all directories in the path exist.\nIf <code>recursive<\/code> is true, all non-existing path components are created.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/createSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void createSync({bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "File.fromRawPath",
                    "type": "",
                    "desc": "<p>Creates a File object from a raw path, that is, a sequence of bytes\nas represented by the OS.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "rawPath",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/File\/File.fromRawPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory File.fromRawPath(Uint8List rawPath) {\n  \/\/ TODO(bkonyi): Handle overrides.\n  return new _File.fromRawPath(rawPath);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "File.fromUri",
                    "type": "",
                    "desc": "<p>Create a File object from a URI.<\/p>\n<p>If <code>uri<\/code> cannot reference a file this throws <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "uri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/File\/File.fromUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory File.fromUri(Uri uri) =&gt; new File(uri.toFilePath());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastAccessed",
                    "type": "dart:async.Future<dart:core.DateTime>",
                    "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last accessed, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/lastAccessed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;DateTime&gt; lastAccessed();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.DateTime"
                    ]
                },
                {
                    "name": "lastAccessedSync",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Get the last-accessed time of the file.<\/p>\n<p>Returns the date and time when the file was last accessed,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/lastAccessedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime lastAccessedSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lastModified",
                    "type": "dart:async.Future<dart:core.DateTime>",
                    "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns a <code>Future&lt;DateTime&gt;<\/code> that completes with the date and time when the\nfile was last modified, if the information is available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/lastModified.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;DateTime&gt; lastModified();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.DateTime"
                    ]
                },
                {
                    "name": "lastModifiedSync",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Get the last-modified time of the file.<\/p>\n<p>Returns the date and time when the file was last modified,\nif the information is available. Blocks until the information can be returned\nor it is determined that the information is not available.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/lastModifiedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime lastModifiedSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Get the length of the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the length in bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; length();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "lengthSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously get the length of the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/lengthSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lengthSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "open",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Open the file for random access operations. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with the opened\nrandom access file. <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using the\n<a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>Files can be opened in three modes:<\/p>\n<p><a href=\"dart-io\/FileMode\/read-constant.html\">FileMode.read<\/a>: open the file for reading.<\/p>\n<p><a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: open the file for both reading and writing and\ntruncate the file to length zero. If the file does not exist the\nfile is created.<\/p>\n<p><a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: same as <a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a> except that the file is\nnot truncated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/open.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; open({FileMode mode: FileMode.read});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "openRead",
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "desc": "<p>Create a new independent <a href=\"dart-async\/Stream-class.html\">Stream<\/a> for the contents of this file.<\/p>\n<p>If <code>start<\/code> is present, the file will be read from byte-offset <code>start<\/code>.\nOtherwise from the beginning (index 0).<\/p>\n<p>If <code>end<\/code> is present, only up to byte-index <code>end<\/code> will be read. Otherwise,\nuntil end of file.<\/p>\n<p>In order to make sure that system resources are freed, the stream\nmust be read to completion or the subscription on the stream must\nbe cancelled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/openRead.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; openRead([int start, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "openSync",
                    "type": "dart:io.RandomAccessFile",
                    "desc": "<p>Synchronously open the file for random access operations. The\nresult is a <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> on which random access operations\ncan be performed. Opened <a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a>s must be closed using\nthe <a href=\"dart-io\/RandomAccessFile\/close.html\">RandomAccessFile.close<\/a> method.<\/p>\n<p>See <a href=\"dart-io\/File\/open.html\">open<\/a> for information on the <code>mode<\/code> argument.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/openSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RandomAccessFile openSync({FileMode mode: FileMode.read});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "openWrite",
                    "type": "dart:io.IOSink",
                    "desc": "<p>Creates a new independent <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for the file. The\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> must be closed when no longer used, to free\nsystem resources.<\/p>\n<p>An <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for a file can be opened in two modes:<\/p>\n<ul>\n<li>\n<a href=\"dart-io\/FileMode\/write-constant.html\">FileMode.write<\/a>: truncates the file to length zero.<\/li>\n<li>\n<a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a>: sets the initial write position to the end\nof the file.<\/li>\n<\/ul>\n<p> When writing strings through the returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> the encoding\n specified using <code>encoding<\/code> will be used. The returned <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>\n has an <code>encoding<\/code> property which can be changed after the\n <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> has been created.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/openWrite.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IOSink openWrite({FileMode mode: FileMode.write, Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readAsBytes",
                    "type": "dart:async.Future<dart:core.List<dart:core.int>>",
                    "desc": "<p>Read the entire file contents as a list of bytes. Returns a\n<code>Future&lt;List&lt;int&gt;&gt;<\/code> that completes with the list of bytes that\nis the contents of the file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/readAsBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;int&gt;&gt; readAsBytes();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readAsBytesSync",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Synchronously read the entire file contents as a list of bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/File\/readAsBytesSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; readAsBytesSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readAsLines",
                    "type": "dart:async.Future<dart:core.List<dart:core.String>>",
                    "desc": "<p>Read the entire file contents as lines of text using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;List&lt;String&gt;&gt;<\/code> that completes with the lines\nonce the file contents has been read.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/readAsLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;String&gt;&gt; readAsLines({Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "readAsLinesSync",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "<p>Synchronously read the entire file contents as lines of text\nusing the given <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/readAsLinesSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; readAsLinesSync({Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "readAsString",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Read the entire file contents as a string using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Returns a <code>Future&lt;String&gt;<\/code> that completes with the string once\nthe file contents has been read.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/readAsString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; readAsString({Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "readAsStringSync",
                    "type": "dart:core.String",
                    "desc": "<p>Synchronously read the entire file contents as a string using the\ngiven <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/readAsStringSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String readAsStringSync({Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<dart:io.File>",
                    "desc": "<p>Renames this file. Returns a <code>Future&lt;File&gt;<\/code> that completes\nwith a <a href=\"dart-io\/File-class.html\">File<\/a> instance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory, the\noperation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.File"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "dart:io.File",
                    "desc": "<p>Synchronously renames this file. Returns a <a href=\"dart-io\/File-class.html\">File<\/a>\ninstance for the renamed file.<\/p>\n<p>If <code>newPath<\/code> identifies an existing file, that file is\nreplaced. If <code>newPath<\/code> identifies an existing directory the\noperation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLastAccessed",
                    "type": "dart:async.Future",
                    "desc": "<p>Modifies the time the file was last accessed.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/setLastAccessed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future setLastAccessed(DateTime time);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLastAccessedSync",
                    "type": "",
                    "desc": "<p>Synchronously modifies the time the file was last accessed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/setLastAccessedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setLastAccessedSync(DateTime time);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setLastModified",
                    "type": "dart:async.Future",
                    "desc": "<p>Modifies the time the file was last modified.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once the operation has completed.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the time cannot be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/setLastModified.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future setLastModified(DateTime time);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setLastModifiedSync",
                    "type": "",
                    "desc": "<p>Synchronously modifies the time the file was last modified.<\/p>\n<p>If the attributes cannot be set, throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "time",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/setLastModifiedSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setLastModifiedSync(DateTime time);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeAsBytes",
                    "type": "dart:async.Future<dart:io.File>",
                    "desc": "<p>Write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it, and closes the file.\nReturns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"dart-io\/File-class.html\">File<\/a> object once\nthe entire operation has completed.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsBytes.html\">writeAsBytes<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/writeAsBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; writeAsBytes(List&lt;int&gt; bytes,\n    {FileMode mode: FileMode.write, bool flush: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.File"
                    ]
                },
                {
                    "name": "writeAsBytesSync",
                    "type": "",
                    "desc": "<p>Synchronously write a list of bytes to a file.<\/p>\n<p>Opens the file, writes the list of bytes to it and closes the file.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsBytesSync.html\">writeAsBytesSync<\/a> creates the file for writing and truncates\nthe file if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/writeAsBytesSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAsBytesSync(List&lt;int&gt; bytes,\n    {FileMode mode: FileMode.write, bool flush: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeAsString",
                    "type": "dart:async.Future<dart:io.File>",
                    "desc": "<p>Write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile. Returns a <code>Future&lt;File&gt;<\/code> that completes with this <a href=\"dart-io\/File-class.html\">File<\/a> object\nonce the entire operation has completed.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsString.html\">writeAsString<\/a> creates the file for writing and truncates the\nfile if it already exists. In order to append the bytes to an existing\nfile, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode parameter.<\/p>\n<p>If the argument <code>flush<\/code> is set to <code>true<\/code>, the data written will be\nflushed to the file system before the returned future completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "contents",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/writeAsString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;File&gt; writeAsString(String contents,\n    {FileMode mode: FileMode.write,\n    Encoding encoding: utf8,\n    bool flush: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.File"
                    ]
                },
                {
                    "name": "writeAsStringSync",
                    "type": "",
                    "desc": "<p>Synchronously write a string to a file.<\/p>\n<p>Opens the file, writes the string in the given encoding, and closes the\nfile.<\/p>\n<p>By default <a href=\"dart-io\/File\/writeAsStringSync.html\">writeAsStringSync<\/a> creates the file for writing and\ntruncates the file if it already exists. In order to append the bytes\nto an existing file, pass <a href=\"dart-io\/FileMode\/append-constant.html\">FileMode.append<\/a> as the optional mode\nparameter.<\/p>\n<p>If the <code>flush<\/code> argument is set to <code>true<\/code> data written will be\nflushed to the file system before returning.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.File",
                    "sig": "",
                    "params": [
                        {
                            "name": "contents",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.FileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/File\/writeAsStringSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAsStringSync(String contents,\n    {FileMode mode: FileMode.write,\n    Encoding encoding: utf8,\n    bool flush: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "dart:io.File",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-io\/File-class.html\">File<\/a> instance whose path is the absolute path to <a href=\"dart-io\/File-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "dart:io.File",
                    "isConstant": false,
                    "href": "dart-io\/File\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">File get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Get the path of the file.<\/p>\n        ",
                    "memberOf": "dart:io.File",
                    "isConstant": false,
                    "href": "dart-io\/File\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/File-class.html",
            "desc": "<p>A reference to a file on the file system.<\/p>\n<p>A File instance is an object that holds a <a href=\"dart-io\/File\/path.html\">path<\/a> on which operations can\nbe performed.\nYou can get the parent directory of the file using the getter <a href=\"dart-io\/FileSystemEntity\/parent.html\">parent<\/a>,\na property inherited from <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Create a new File object with a pathname to access the specified file on the\nfile system from your program.<\/p>\n<pre class=\"language-dart\"><code>var myFile = new File('file.txt');\n<\/code><\/pre>\n<p>The File class contains methods for manipulating files and their contents.\nUsing methods in this class, you can open and close files, read to and write\nfrom them, create and delete them, and check for their existence.<\/p>\n<p>When reading or writing a file, you can use streams (with <a href=\"dart-io\/File\/openRead.html\">openRead<\/a>),\nrandom access operations (with <a href=\"dart-io\/File\/open.html\">open<\/a>),\nor convenience methods such as <a href=\"dart-io\/File\/readAsString.html\">readAsString<\/a>,<\/p>\n<p>Most methods in this class occur in synchronous and asynchronous pairs,\nfor example, <a href=\"dart-io\/File\/readAsString.html\">readAsString<\/a> and <a href=\"dart-io\/File\/readAsStringSync.html\">readAsStringSync<\/a>.\nUnless you have a specific reason for using the synchronous version\nof a method, prefer the asynchronous version to avoid blocking your program.<\/p>\n<h2 id=\"if-path-is-a-link\">If path is a link<\/h2>\n<p>If <a href=\"dart-io\/File\/path.html\">path<\/a> is a symbolic link, rather than a file,\nthen the methods of File operate on the ultimate target of the\nlink, except for <a href=\"dart-io\/FileSystemEntity\/delete.html\">delete<\/a> and <a href=\"dart-io\/FileSystemEntity\/deleteSync.html\">deleteSync<\/a>, which operate on\nthe link.<\/p>\n<h2 id=\"read-from-a-file\">Read from a file<\/h2>\n<p>The following code sample reads the entire contents from a file as a string\nusing the asynchronous <a href=\"dart-io\/File\/readAsString.html\">readAsString<\/a> method:<\/p>\n<pre class=\"language-dart\"><code>import 'dart:async';\nimport 'dart:io';\n\nvoid main() {\n  new File('file.txt').readAsString().then((String contents) {\n    print(contents);\n  });\n}\n<\/code><\/pre>\n<p>A more flexible and useful way to read a file is with a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.\nOpen the file with <a href=\"dart-io\/File\/openRead.html\">openRead<\/a>, which returns a stream that\nprovides the data in the file as chunks of bytes.\nListen to the stream for data and process as needed.\nYou can use various transformers in succession to manipulate the\ndata into the required format or to prepare it for output.<\/p>\n<p>You might want to use a stream to read large files,\nto manipulate the data with transformers,\nor for compatibility with another API, such as <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a>s.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\nimport 'dart:convert';\nimport 'dart:async';\n\nmain() {\n  final file = new File('file.txt');\n  Stream&lt;List&lt;int&gt;&gt; inputStream = file.openRead();\n\n  inputStream\n    .transform(utf8.decoder)       \/\/ Decode bytes to UTF-8.\n    .transform(new LineSplitter()) \/\/ Convert stream to individual lines.\n    .listen((String line) {        \/\/ Process results.\n        print('$line: ${line.length} bytes');\n      },\n      onDone: () { print('File is now closed.'); },\n      onError: (e) { print(e.toString()); });\n}\n<\/code><\/pre>\n<h2 id=\"write-to-a-file\">Write to a file<\/h2>\n<p>To write a string to a file, use the <a href=\"dart-io\/File\/writeAsString.html\">writeAsString<\/a> method:<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  final filename = 'file.txt';\n  new File(filename).writeAsString('some content')\n    .then((File file) {\n      \/\/ Do something with the file.\n    });\n}\n<\/code><\/pre>\n<p>You can also write to a file using a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>. Open the file with\n<a href=\"dart-io\/File\/openWrite.html\">openWrite<\/a>, which returns an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> to which you can write data.\nBe sure to close the sink with the <a href=\"dart-io\/IOSink\/close.html\">IOSink.close<\/a> method.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nvoid main() {\n  var file = new File('file.txt');\n  var sink = file.openWrite();\n  sink.write('FILE ACCESSED ${new DateTime.now()}\\n');\n\n  \/\/ Close the IOSink to free system resources.\n  sink.close();\n}\n<\/code><\/pre>\n<h2 id=\"the-use-of-futures\">The use of Futures<\/h2>\n<p>To avoid unintentional blocking of the program,\nseveral methods use a <a href=\"dart-async\/Future-class.html\">Future<\/a> to return a value. For example,\nthe <a href=\"dart-io\/File\/length.html\">length<\/a> method, which gets the length of a file, returns a Future.\nUse <code>then<\/code> to register a callback function, which is called when\nthe value is ready.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  final file = new File('file.txt');\n\n  file.length().then((len) {\n    print(len);\n  });\n}\n<\/code><\/pre>\n<p>In addition to length, the <a href=\"dart-io\/FileSystemEntity\/exists.html\">exists<\/a>, <a href=\"dart-io\/File\/lastModified.html\">lastModified<\/a>, <a href=\"dart-io\/FileSystemEntity\/stat.html\">stat<\/a>, and\nother methods, return Futures.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<ul>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#files-directories-and-symlinks\">Dart by Example<\/a>\nprovides additional task-oriented code samples that show how to use\nvarious API from the Directory class and the related <a href=\"dart-io\/File-class.html\">File<\/a> class.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#dartio---io-for-command-line-apps\">I\/O for Command-Line\nApps<\/a>\na section from <em>A Tour of the Dart Libraries<\/em> covers files and directories.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/tutorials\/cmdline\/\">Write Command-Line Apps<\/a>,\na tutorial about writing command-line apps, includes information about\nfiles and directories.<\/p>\n<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "File"
        },
        {
            "name": "dart:io.FileLock",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/BLOCKING_EXCLUSIVE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BLOCKING_EXCLUSIVE = blockingExclusive\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "BLOCKING_EXCLUSIVE",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/BLOCKING_SHARED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BLOCKING_SHARED = blockingShared\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "BLOCKING_SHARED",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/EXCLUSIVE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const EXCLUSIVE = exclusive\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "EXCLUSIVE",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/SHARED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SHARED = shared\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SHARED",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/blockingExclusive-constant.html",
                    "desc": "<p>Blocking exclusive file lock.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const blockingExclusive = const FileLock._internal(4)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "blockingExclusive",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/blockingShared-constant.html",
                    "desc": "<p>Blocking shared file lock.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const blockingShared = const FileLock._internal(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "blockingShared",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/exclusive-constant.html",
                    "desc": "<p>Exclusive file lock.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const exclusive = const FileLock._internal(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "exclusive",
                    "memberOf": "dart:io.FileLock"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileLock\/shared-constant.html",
                    "desc": "<p>Shared file lock.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const shared = const FileLock._internal(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "shared",
                    "memberOf": "dart:io.FileLock"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileLock-class.html",
            "desc": "<p>Type of lock when requesting a lock on a file.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileLock"
        },
        {
            "name": "dart:io.FileMode",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/APPEND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const APPEND = append\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "APPEND",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/READ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const READ = read\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "READ",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/WRITE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const WRITE = write\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WRITE",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/WRITE_ONLY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const WRITE_ONLY = writeOnly\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WRITE_ONLY",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/WRITE_ONLY_APPEND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const WRITE_ONLY_APPEND = writeOnlyAppend\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WRITE_ONLY_APPEND",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/append-constant.html",
                    "desc": "<p>Mode for opening a file for reading and writing to the\nend of it. The file is created if it does not already exist.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const append = const FileMode._internal(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "append",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/read-constant.html",
                    "desc": "<p>The mode for opening a file only for reading.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const read = const FileMode._internal(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "read",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/write-constant.html",
                    "desc": "<p>Mode for opening a file for reading and writing. The file is\noverwritten if it already exists. The file is created if it does not\nalready exist.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const write = const FileMode._internal(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "write",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/writeOnly-constant.html",
                    "desc": "<p>Mode for opening a file for writing <em>only<\/em>. The file is\noverwritten if it already exists. The file is created if it does not\nalready exist.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const writeOnly = const FileMode._internal(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "writeOnly",
                    "memberOf": "dart:io.FileMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileMode\/writeOnlyAppend-constant.html",
                    "desc": "<p>Mode for opening a file for writing <em>only<\/em> to the\nend of it. The file is created if it does not already exist.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const writeOnlyAppend = const FileMode._internal(4)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "writeOnlyAppend",
                    "memberOf": "dart:io.FileMode"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileMode-class.html",
            "desc": "<p>The modes in which a File can be opened.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileMode"
        },
        {
            "name": "dart:io.FileStat",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "modeString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the mode value as a human-readable string.<\/p>\n<p>The string is in the format \"rwxrwxrwx\", reflecting the user, group, and\nworld permissions to read, write, and execute the file system object, with\n\"-\" replacing the letter for missing permissions.  Extra permission bits\nmay be represented by prepending \"(suid)\", \"(guid)\", and\/or \"(sticky)\" to\nthe mode string.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileStat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileStat\/modeString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String modeString() {\n  var permissions = mode &amp; 0xFFF;\n  var codes = const ['---', '--x', '-w-', '-wx', 'r--', 'r-x', 'rw-', 'rwx'];\n  var result = [];\n  if ((permissions &amp; 0x800) != 0) result.add(\"(suid) \");\n  if ((permissions &amp; 0x400) != 0) result.add(\"(guid) \");\n  if ((permissions &amp; 0x200) != 0) result.add(\"(sticky) \");\n  result\n    ..add(codes[(permissions &gt;&gt; 6) &amp; 0x7])\n    ..add(codes[(permissions &gt;&gt; 3) &amp; 0x7])\n    ..add(codes[permissions &amp; 0x7]);\n  return result.join();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "stat",
                    "type": "dart:async.Future<dart:io.FileStat>",
                    "desc": "<p>Asynchronously calls the operating system's stat() function on <code>path<\/code>.<\/p>\n<p>Returns a Future which completes with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing\nthe data returned by stat(). If the call fails, completes the future with a\n<a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with <code>.type<\/code> set to FileSystemEntityType.notFound and\nthe other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileStat",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileStat\/stat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;FileStat&gt; stat(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _stat(path);\n  }\n  return overrides.stat(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileStat"
                    ]
                },
                {
                    "name": "statSync",
                    "type": "dart:io.FileStat",
                    "desc": "<p>Calls the operating system's stat() function on <code>path<\/code>.<\/p>\n<p>Returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().\nIf the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileStat",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileStat\/statSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FileStat statSync(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _statSyncInternal(path);\n  }\n  return overrides.statSync(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileStat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileStat\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"\"\"\nFileStat: type $type\n        changed $changed\n        modified $modified\n        accessed $accessed\n        mode ${modeString()}\n        size $size\"\"\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "accessed",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>The time of the last access to the data of the file system object.<\/p>\n<p>On Windows platforms, this may have 1 day granularity, and be\nout of date by an hour.<\/p>\n        ",
                    "memberOf": "dart:io.FileStat",
                    "isConstant": false,
                    "href": "dart-io\/FileStat\/accessed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime accessed\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "changed",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>The time of the last change to the data or metadata of the file system\nobject.<\/p>\n<p>On Windows platforms, this is instead the file creation time.<\/p>\n        ",
                    "memberOf": "dart:io.FileStat",
                    "isConstant": false,
                    "href": "dart-io\/FileStat\/changed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime changed\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "mode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The mode of the file system object.<\/p>\n<p>Permissions are encoded in the lower 16 bits of this number, and can be\ndecoded using the <a href=\"dart-io\/FileStat\/modeString.html\">modeString<\/a> getter.<\/p>\n        ",
                    "memberOf": "dart:io.FileStat",
                    "isConstant": false,
                    "href": "dart-io\/FileStat\/mode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int mode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "modified",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>The time of the last change to the data of the file system object.<\/p>\n        ",
                    "memberOf": "dart:io.FileStat",
                    "isConstant": false,
                    "href": "dart-io\/FileStat\/modified.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime modified\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The size of the file system object.<\/p>\n        ",
                    "memberOf": "dart:io.FileStat",
                    "isConstant": false,
                    "href": "dart-io\/FileStat\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int size\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:io.FileSystemEntityType",
                    "types": [],
                    "desc": "<p>The type of the object (file, directory, or link).<\/p>\n<p>If the call to stat() fails, the type of the returned object is notFound.<\/p>\n        ",
                    "memberOf": "dart:io.FileStat",
                    "isConstant": false,
                    "href": "dart-io\/FileStat\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FileSystemEntityType type\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileStat-class.html",
            "desc": "<p>A FileStat object represents the result of calling the POSIX stat() function\non a file system object.  It is an immutable object, representing the\nsnapshotted values returned by the stat() call.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileStat"
        },
        {
            "name": "dart:io.FileSystemCreateEvent",
            "extends": [
                "dart:io.FileSystemEvent",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemCreateEvent",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemCreateEvent\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"FileSystemCreateEvent('$path')\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemCreateEvent-class.html",
            "desc": "<p>File system event for newly created file system objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemCreateEvent"
        },
        {
            "name": "dart:io.FileSystemDeleteEvent",
            "extends": [
                "dart:io.FileSystemEvent",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemDeleteEvent",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemDeleteEvent\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"FileSystemDeleteEvent('$path')\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemDeleteEvent-class.html",
            "desc": "<p>File system event for deletion of file system objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemDeleteEvent"
        },
        {
            "name": "dart:io.FileSystemEntity",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "FileSystemEntity",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/FileSystemEntity\/FileSystemEntity.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "delete",
                    "type": "dart:async.Future<dart:io.FileSystemEntity>",
                    "desc": "<p>Deletes this <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"dart-io\/FileSystemEntity\/delete.html\">delete<\/a> to be used to unconditionally delete any file\nsystem object.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with this\n<a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> when the deletion is done. If the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>\ncannot be deleted, the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/delete.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;FileSystemEntity&gt; delete({bool recursive: false}) =&gt;\n    _delete(recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileSystemEntity"
                    ]
                },
                {
                    "name": "deleteSync",
                    "type": "",
                    "desc": "<p>Synchronously deletes this <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>If the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is a directory, and if <code>recursive<\/code> is false,\nthe directory must be empty. Otherwise, if <code>recursive<\/code> is true, the\ndirectory and all sub-directories and files in the directories are\ndeleted. Links are not followed when deleting recursively. Only the link\nis deleted, not its target.<\/p>\n<p>If <code>recursive<\/code> is true, the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> is deleted even if the type\nof the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> doesn't match the content of the file system.\nThis behavior allows <a href=\"dart-io\/FileSystemEntity\/deleteSync.html\">deleteSync<\/a> to be used to unconditionally delete any\nfile system object.<\/p>\n<p>Throws an exception if the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> cannot be deleted.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/deleteSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void deleteSync({bool recursive: false}) =&gt; _deleteSync(recursive: recursive);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "exists",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks whether the file system entity with this path exists. Returns\na <code>Future&lt;bool&gt;<\/code> that completes with the result.<\/p>\n<p>Since FileSystemEntity is abstract, every FileSystemEntity object\nis actually an instance of one of the subclasses <a href=\"dart-io\/File-class.html\">File<\/a>,\n<a href=\"dart-io\/Directory-class.html\">Directory<\/a>, and <a href=\"dart-io\/Link-class.html\">Link<\/a>.  Calling <a href=\"dart-io\/FileSystemEntity\/exists.html\">exists<\/a> on an instance of one\nof these subclasses checks whether the object exists in the file\nsystem object exists and is of the correct type (file, directory,\nor link).  To check whether a path points to an object on the\nfile system, regardless of the object's type, use the <a href=\"dart-io\/FileSystemEntity\/type.html\">type<\/a>\nstatic method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/exists.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; exists();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "existsSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks whether the file system entity with this path\nexists.<\/p>\n<p>Since FileSystemEntity is abstract, every FileSystemEntity object\nis actually an instance of one of the subclasses <a href=\"dart-io\/File-class.html\">File<\/a>,\n<a href=\"dart-io\/Directory-class.html\">Directory<\/a>, and <a href=\"dart-io\/Link-class.html\">Link<\/a>.  Calling <a href=\"dart-io\/FileSystemEntity\/existsSync.html\">existsSync<\/a> on an instance of\none of these subclasses checks whether the object exists in the\nfile system object exists and is of the correct type (file,\ndirectory, or link).  To check whether a path points to an object\non the file system, regardless of the object's type, use the\n<a href=\"dart-io\/FileSystemEntity\/typeSync.html\">typeSync<\/a> static method.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/existsSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool existsSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "identical",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks whether two paths refer to the same object in the\nfile system.<\/p>\n<p>Returns a <code>Future&lt;bool&gt;<\/code> that completes with the result.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Completes the returned Future with an error if one of the paths points\nto an object that does not exist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/identical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;bool&gt; identical(String path1, String path2) {\n  IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _identical(path1, path2);\n  }\n  return overrides.fseIdentical(path1, path2);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "identicalSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks whether two paths refer to the same object in the\nfile system.<\/p>\n<p>Comparing a link to its target returns false, as does comparing two links\nthat point to the same target.  To check the target of a link, use\nLink.target explicitly to fetch it.  Directory links appearing\ninside a path are followed, though, to find the file system object.<\/p>\n<p>Throws an error if one of the paths points to an object that does not\nexist.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/identicalSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool identicalSync(String path1, String path2) {\n  IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _identicalSync(path1, path2);\n  }\n  return overrides.fseIdenticalSync(path1, path2);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isDirectory",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks if type(path) returns FileSystemEntityType.directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/isDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;bool&gt; isDirectory(String path) =&gt;\n    _getType(_toUtf8Array(path), true)\n        .then((type) =&gt; (type == FileSystemEntityType.directory));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "isDirectorySync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks if typeSync(path) returns\nFileSystemEntityType.directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/isDirectorySync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isDirectorySync(String path) =&gt;\n    (_getTypeSync(_toUtf8Array(path), true) ==\n        FileSystemEntityType.directory);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isFile",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks if type(path) returns FileSystemEntityType.file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/isFile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;bool&gt; isFile(String path) =&gt; _getType(_toUtf8Array(path), true)\n    .then((type) =&gt; (type == FileSystemEntityType.file));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "isFileSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks if typeSync(path) returns\nFileSystemEntityType.file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/isFileSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isFileSync(String path) =&gt;\n    (_getTypeSync(_toUtf8Array(path), true) == FileSystemEntityType.file);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isLink",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Checks if type(path, followLinks: false) returns FileSystemEntityType.link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/isLink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;bool&gt; isLink(String path) =&gt; _isLinkRaw(_toUtf8Array(path));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "isLinkSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Synchronously checks if typeSync(path, followLinks: false) returns\nFileSystemEntityType.link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/isLinkSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isLinkSync(String path) =&gt; _isLinkRawSync(_toUtf8Array(path));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parentOf",
                    "type": "dart:core.String",
                    "desc": "<p>Removes the final path component of a path, using the platform's\npath separator to split the path.<\/p>\n<p>Will not remove the root component of a Windows path, like \"C:\\\" or\n\"\\\\server_name\\\". Ignores trailing path separators, and leaves no\ntrailing path separators.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/parentOf.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String parentOf(String path) {\n  int rootEnd = -1;\n  if (Platform.isWindows) {\n    if (path.startsWith(_absoluteWindowsPathPattern)) {\n      \/\/ Root ends at first \/ or \\ after the first two characters.\n      rootEnd = path.indexOf(new RegExp(r'[\/\\\\]'), 2);\n      if (rootEnd == -1) return path;\n    } else if (path.startsWith('\\\\') || path.startsWith('\/')) {\n      rootEnd = 0;\n    }\n  } else if (path.startsWith('\/')) {\n    rootEnd = 0;\n  }\n  \/\/ Ignore trailing slashes.\n  \/\/ All non-trivial cases have separators between two non-separators.\n  int pos = path.lastIndexOf(_parentRegExp);\n  if (pos &gt; rootEnd) {\n    return path.substring(0, pos + 1);\n  } else if (rootEnd &gt; -1) {\n    return path.substring(0, rootEnd + 1);\n  } else {\n    return '.';\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<dart:io.FileSystemEntity>",
                    "desc": "<p>Renames this file system entity.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntity&gt;<\/code> that completes with a\n<a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> instance for the renamed file system entity.<\/p>\n<p>If <code>newPath<\/code> identifies an existing entity of the same type, that entity\nis replaced. If <code>newPath<\/code> identifies an existing entity of a different\ntype, the operation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;FileSystemEntity&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileSystemEntity"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "dart:io.FileSystemEntity",
                    "desc": "<p>Synchronously renames this file system entity.<\/p>\n<p>Returns a <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> instance for the renamed entity.<\/p>\n<p>If <code>newPath<\/code> identifies an existing entity of the same type, that entity\nis replaced. If <code>newPath<\/code> identifies an existing entity of a different\ntype, the operation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSystemEntity renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolveSymbolicLinks",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/FileSystemEntity\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/resolveSymbolicLinks.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; resolveSymbolicLinks() {\n  return _File._dispatchWithNamespace(\n      _IOService.fileResolveSymbolicLinks, [null, _rawPath]).then((response) {\n    if (_isErrorResponse(response)) {\n      throw _exceptionFromResponse(\n          response, \"Cannot resolve symbolic links\", path);\n    }\n    return response;\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "resolveSymbolicLinksSync",
                    "type": "dart:core.String",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/FileSystemEntity\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/resolveSymbolicLinksSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String resolveSymbolicLinksSync() {\n  var result = _resolveSymbolicLinks(_Namespace._namespace, _rawPath);\n  _throwIfError(result, \"Cannot resolve symbolic links\", path);\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "stat",
                    "type": "dart:async.Future<dart:io.FileStat>",
                    "desc": "<p>Calls the operating system's stat() function on the <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> of this\n<a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Identical to <code>FileStat.stat(this.path)<\/code>.<\/p>\n<p>Returns a <code>Future&lt;FileStat&gt;<\/code> object containing the data returned by\nstat().<\/p>\n<p>If the call fails, completes the future with a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object\nwith .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/stat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;FileStat&gt; stat() =&gt; FileStat.stat(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileStat"
                    ]
                },
                {
                    "name": "statSync",
                    "type": "dart:io.FileStat",
                    "desc": "<p>Synchronously calls the operating system's stat() function on the\n<a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> of this <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a>.<\/p>\n<p>Identical to <code>FileStat.statSync(this.path)<\/code>.<\/p>\n<p>Returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object containing the data returned by stat().<\/p>\n<p>If the call fails, returns a <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> object with .type set to\nFileSystemEntityType.notFound and the other fields invalid.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/statSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileStat statSync() =&gt; FileStat.statSync(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:async.Future<dart:io.FileSystemEntityType>",
                    "desc": "<p>Finds the type of file system object that a path points to.<\/p>\n<p>Returns a <code>Future&lt;FileSystemEntityType&gt;<\/code> that completes with the result.<\/p>\n<p><a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a> has the constant instances file, directory,\nlink, and notFound.  <a href=\"dart-io\/FileSystemEntity\/type.html\">type<\/a> will return link only if the optional\nnamed argument <code>followLinks<\/code> is false, and <code>path<\/code> points to a link.\nIf the path does not point to a file system object, or any other error\noccurs in looking up the path, notFound is returned.  The only\nerror or exception that may be put on the returned future is ArgumentError,\ncaused by passing the wrong type of arguments to the function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;FileSystemEntityType&gt; type(String path,\n    {bool followLinks: true}) {\n  return _getType(_toUtf8Array(path), followLinks);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileSystemEntityType"
                    ]
                },
                {
                    "name": "typeSync",
                    "type": "dart:io.FileSystemEntityType",
                    "desc": "<p>Synchronously finds the type of file system object that a path points to.<\/p>\n<p>Returns a <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a>.<\/p>\n<p><a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a> has the constant instances file, directory,\nlink, and notFound.  <a href=\"dart-io\/FileSystemEntity\/type.html\">type<\/a> will return link only if the optional\nnamed argument <code>followLinks<\/code> is false, and <code>path<\/code> points to a link.\nIf the path does not point to a file system object, or any other error\noccurs in looking up the path, notFound is returned.  The only\nerror or exception that may be thrown is ArgumentError,\ncaused by passing the wrong type of arguments to the function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/typeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FileSystemEntityType typeSync(String path, {bool followLinks: true}) {\n  return _getTypeSync(_toUtf8Array(path), followLinks);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "watch",
                    "type": "dart:async.Stream<dart:io.FileSystemEvent>",
                    "desc": "<p>Start watching the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> for changes.<\/p>\n<p>The implementation uses platform-dependent event-based APIs for receiving\nfile-system notifications, thus behavior depends on the platform.<\/p>\n<ul>\n<li>\n<code>Windows<\/code>: Uses <code>ReadDirectoryChangesW<\/code>. The implementation only\nsupports watching directories. Recursive watching is supported.<\/li>\n<li>\n<code>Linux<\/code>: Uses <code>inotify<\/code>. The implementation supports watching both\nfiles and directories. Recursive watching is not supported.\nNote: When watching files directly, delete events might not happen\nas expected.<\/li>\n<li>\n<code>OS X<\/code>: Uses <code>FSEvents<\/code>. The implementation supports watching both\nfiles and directories. Recursive watching is supported.<\/li>\n<\/ul>\n<p>The system will start listening for events once the returned <a href=\"dart-async\/Stream-class.html\">Stream<\/a> is\nbeing listened to, not when the call to <a href=\"dart-io\/FileSystemEntity\/watch.html\">watch<\/a> is issued.<\/p>\n<p>The returned value is an endless broadcast <a href=\"dart-async\/Stream-class.html\">Stream<\/a>, that only stops when\none of the following happens:<\/p>\n<ul>\n<li>The <a href=\"dart-async\/Stream-class.html\">Stream<\/a> is canceled, e.g. by calling <code>cancel<\/code> on the\n <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a>.<\/li>\n<li>The <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> being watches, is deleted.<\/li>\n<\/ul>\n<p>Use <code>events<\/code> to specify what events to listen for. The constants in\n<a href=\"dart-io\/FileSystemEvent-class.html\">FileSystemEvent<\/a> can be or'ed together to mix events. Default is\n<a class=\"deprecated\" href=\"dart-io\/FileSystemEvent\/ALL-constant.html\">FileSystemEvent.ALL<\/a>.<\/p>\n<p>A move event may be reported as seperate delete and create events.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntity",
                    "sig": "",
                    "params": [
                        {
                            "name": "events",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntity\/watch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;FileSystemEvent&gt; watch(\n    {int events: FileSystemEvent.all, bool recursive: false}) {\n  \/\/ FIXME(bkonyi): find a way to do this using the raw path.\n  final String trimmedPath = _trimTrailingPathSeparators(path);\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _FileSystemWatcher._watch(trimmedPath, events, recursive);\n  }\n  return overrides.fsWatch(trimmedPath, events, recursive);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:io.FileSystemEvent"
                    ]
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "dart:io.FileSystemEntity",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> whose path is the absolute path to <a href=\"dart-io\/FileSystemEntity-class.html\">this<\/a>.<\/p>\n<p>The type of the returned instance is the type of <a href=\"dart-io\/FileSystemEntity-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEntity",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEntity\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">FileSystemEntity get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAbsolute",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-core\/bool-class.html\">bool<\/a> indicating whether this object's path is absolute.<\/p>\n<p>On Windows, a path is absolute if it starts with \\\\ or a drive letter\nbetween a and z (upper or lower case) followed by :\\ or :\/.\nOn non-Windows, a path is absolute if it starts with \/.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEntity",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEntity\/isAbsolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAbsolute {\n  if (Platform.isWindows) {\n    return path.startsWith(_absoluteWindowsPathPattern);\n  } else {\n    return path.startsWith('\/');\n  }\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isWatchSupported",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Test if <a href=\"dart-io\/FileSystemEntity\/watch.html\">watch<\/a> is supported on the current system.<\/p>\n<p>OS X 10.6 and below is not supported.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEntity",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEntity\/isWatchSupported.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static bool get isWatchSupported {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return _FileSystemWatcher.isSupported;\n  }\n  return overrides.fsWatchIsSupported();\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "parent",
                    "type": "dart:io.Directory",
                    "types": [],
                    "desc": "<p>The directory containing <a href=\"dart-io\/FileSystemEntity-class.html\">this<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEntity",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEntity\/parent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Directory get parent =&gt; new Directory(parentOf(path));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.FileSystemEntity",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEntity\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-core\/Uri-class.html\">Uri<\/a> representing the file system entity's location.<\/p>\n<p>The returned URI's scheme is always \"file\" if the entity's <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> is\nabsolute, otherwise the scheme will be empty.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEntity",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEntity\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri =&gt; new Uri.file(path);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemEntity-class.html",
            "desc": "<p>The common super class for <a href=\"dart-io\/File-class.html\">File<\/a>, <a href=\"dart-io\/Directory-class.html\">Directory<\/a>, and <a href=\"dart-io\/Link-class.html\">Link<\/a> objects.<\/p>\n<p><a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> objects are returned from directory listing\noperations. To determine if a FileSystemEntity is a <a href=\"dart-io\/File-class.html\">File<\/a>, a\n<a href=\"dart-io\/Directory-class.html\">Directory<\/a>, or a <a href=\"dart-io\/Link-class.html\">Link<\/a> perform a type check:<\/p>\n<pre class=\"language-dart\"><code>if (entity is File) (entity as File).readAsStringSync();\n<\/code><\/pre>\n<p>You can also use the <a href=\"dart-io\/FileSystemEntity\/type.html\">type<\/a> or <a href=\"dart-io\/FileSystemEntity\/typeSync.html\">typeSync<\/a> methods to determine\nthe type of a file system object.<\/p>\n<p>Most methods in this class occur in synchronous and asynchronous pairs,\nfor example, <a href=\"dart-io\/FileSystemEntity\/exists.html\">exists<\/a> and <a href=\"dart-io\/FileSystemEntity\/existsSync.html\">existsSync<\/a>.\nUnless you have a specific reason for using the synchronous version\nof a method, prefer the asynchronous version to avoid blocking your program.<\/p>\n<p>Here's the exists method in action:<\/p>\n<pre class=\"language-dart\"><code>entity.exists().then((isThere) {\n  isThere ? print('exists') : print('non-existent');\n});\n<\/code><\/pre>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<ul>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#files-directories-and-symlinks\">Dart by\nExample<\/a>\nprovides additional task-oriented code samples that show how to use various\nAPI from the <a href=\"dart-io\/Directory-class.html\">Directory<\/a> class and the <a href=\"dart-io\/File-class.html\">File<\/a> class, both subclasses of\nFileSystemEntity.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#dartio---io-for-command-line-apps\">I\/O for Command-Line\nApps<\/a>,\na section from <em>A Tour of the Dart Libraries<\/em> covers files and directories.<\/p>\n<\/li>\n<li>\n<p><a href=\"https:\/\/www.dartlang.org\/docs\/tutorials\/cmdline\/\">Write Command-Line Apps<\/a>,\na tutorial about writing command-line apps, includes information about\nfiles and directories.<\/p>\n<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemEntity"
        },
        {
            "name": "dart:io.FileSystemEntityType",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemEntityType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemEntityType\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; const ['file', 'directory', 'link', 'notFound'][_type];<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/DIRECTORY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const DIRECTORY = directory\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DIRECTORY",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/FILE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FILE = file\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "FILE",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/LINK-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LINK = link\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LINK",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/NOT_FOUND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const NOT_FOUND = notFound\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NOT_FOUND",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/directory-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const directory = const FileSystemEntityType._internal(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "directory",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/file-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const file = const FileSystemEntityType._internal(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "file",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/link-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const link = const FileSystemEntityType._internal(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "link",
                    "memberOf": "dart:io.FileSystemEntityType"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEntityType\/notFound-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const notFound = const FileSystemEntityType._internal(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "notFound",
                    "memberOf": "dart:io.FileSystemEntityType"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemEntityType-class.html",
            "desc": "<p>The type of an entity on the file system, such as a file, directory, or link.<\/p>\n<p>These constants are used by the <a href=\"dart-io\/FileSystemEntity-class.html\">FileSystemEntity<\/a> class\nto indicate the object's type.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemEntityType"
        },
        {
            "name": "dart:io.FileSystemEvent",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/ALL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int ALL = create | modify | delete | move\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ALL",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/CREATE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CREATE = 1 &lt;&lt; 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CREATE",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/DELETE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DELETE = 1 &lt;&lt; 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DELETE",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/MODIFY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MODIFY = 1 &lt;&lt; 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MODIFY",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/MOVE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MOVE = 1 &lt;&lt; 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MOVE",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/all-constant.html",
                    "desc": "<p>Bitfield for <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a>, for enabling all of <a href=\"dart-io\/FileSystemEvent\/create-constant.html\">create<\/a>,\n<a href=\"dart-io\/FileSystemEvent\/modify-constant.html\">modify<\/a>, <a href=\"dart-io\/FileSystemEvent\/delete-constant.html\">delete<\/a> and <a href=\"dart-io\/FileSystemEvent\/move-constant.html\">move<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int all = create | modify | delete | move\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "all",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/create-constant.html",
                    "desc": "<p>Bitfield for <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a>, to enable <a href=\"dart-io\/FileSystemCreateEvent-class.html\">FileSystemCreateEvent<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int create = 1 &lt;&lt; 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "create",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/delete-constant.html",
                    "desc": "<p>Bitfield for <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a>, to enable <a href=\"dart-io\/FileSystemDeleteEvent-class.html\">FileSystemDeleteEvent<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int delete = 1 &lt;&lt; 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "delete",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "name": "isDirectory",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Is <code>true<\/code> if the event target was a directory.<\/p>\n<p>Note that if the file has been deleted by the time the event has arrived,\nthis will always be <code>false<\/code> on Windows. In particular, it will always be\n<code>false<\/code> for <code>delete<\/code> events.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEvent",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEvent\/isDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDirectory\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/modify-constant.html",
                    "desc": "<p>Bitfield for <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a>, to enable <a href=\"dart-io\/FileSystemModifyEvent-class.html\">FileSystemModifyEvent<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int modify = 1 &lt;&lt; 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "modify",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/FileSystemEvent\/move-constant.html",
                    "desc": "<p>Bitfield for <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a>, to enable <a href=\"dart-io\/FileSystemMoveEvent-class.html\">FileSystemMoveEvent<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int move = 1 &lt;&lt; 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "move",
                    "memberOf": "dart:io.FileSystemEvent"
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The path that triggered the event.<\/p>\n<p>Depending on the platform and the FileSystemEntity, the path may be\nrelative.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEvent",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEvent\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String path\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The type of event. See <a href=\"dart-io\/FileSystemEvent-class.html\">FileSystemEvent<\/a> for a list of events.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemEvent",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemEvent\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int type\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "dart:io.FileSystemCreateEvent",
                "dart:io.FileSystemDeleteEvent",
                "dart:io.FileSystemModifyEvent",
                "dart:io.FileSystemMoveEvent"
            ],
            "realImplementors": [
                "dart:io.FileSystemCreateEvent",
                "dart:io.FileSystemDeleteEvent",
                "dart:io.FileSystemModifyEvent",
                "dart:io.FileSystemMoveEvent"
            ],
            "cn": [],
            "href": "dart-io\/FileSystemEvent-class.html",
            "desc": "<p>Base event class emitted by <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemEvent"
        },
        {
            "name": "dart:io.FileSystemException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "FileSystemException",
                    "type": "",
                    "desc": "<p>Creates a new FileSystemException with an optional error message\n<code>message<\/code>, optional file system path <code>path<\/code> and optional OS error\n<code>osError<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/FileSystemException\/FileSystemException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst FileSystemException([this.message = \"\", this.path = \"\", this.osError]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  StringBuffer sb = new StringBuffer();\n  sb.write(\"FileSystemException\");\n  if (message.isNotEmpty) {\n    sb.write(\": $message\");\n    if (path != null) {\n      sb.write(\", path = '$path'\");\n    }\n    if (osError != null) {\n      sb.write(\" ($osError)\");\n    }\n  } else if (osError != null) {\n    sb.write(\": $osError\");\n    if (path != null) {\n      sb.write(\", path = '$path'\");\n    }\n  } else if (path != null) {\n    sb.write(\": $path\");\n  }\n  return sb.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Message describing the error. This does not include any detailed\ninformation form the underlying OS error. Check <a href=\"dart-io\/FileSystemException\/osError.html\">osError<\/a> for\nthat information.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemException",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "osError",
                    "type": "dart:io.OSError",
                    "types": [],
                    "desc": "<p>The underlying OS error. Can be <code>null<\/code> if the exception is not\nraised due to an OS error.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemException",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemException\/osError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OSError osError\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The file system path on which the error occurred. Can be <code>null<\/code>\nif the exception does not relate directly to a file system path.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemException",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemException\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String path\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemException-class.html",
            "desc": "<p>Exception thrown when a file operation fails.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemException"
        },
        {
            "name": "dart:io.FileSystemModifyEvent",
            "extends": [
                "dart:io.FileSystemEvent",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemModifyEvent",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemModifyEvent\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt;\n    \"FileSystemModifyEvent('$path', contentChanged=$contentChanged)\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "contentChanged",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>If the content was changed and not only the attributes, <a href=\"dart-io\/FileSystemModifyEvent\/contentChanged.html\">contentChanged<\/a>\nis <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemModifyEvent",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemModifyEvent\/contentChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool contentChanged\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemModifyEvent-class.html",
            "desc": "<p>File system event for modifications of file system objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemModifyEvent"
        },
        {
            "name": "dart:io.FileSystemMoveEvent",
            "extends": [
                "dart:io.FileSystemEvent",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.FileSystemMoveEvent",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/FileSystemMoveEvent\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  var buffer = new StringBuffer();\n  buffer.write(\"FileSystemMoveEvent('$path'\");\n  if (destination != null) buffer.write(\", '$destination'\");\n  buffer.write(')');\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "destination",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>If the underlying implementation is able to identify the destination of\nthe moved file, <a href=\"dart-io\/FileSystemMoveEvent\/destination.html\">destination<\/a> will be set. Otherwise, it will be <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.FileSystemMoveEvent",
                    "isConstant": false,
                    "href": "dart-io\/FileSystemMoveEvent\/destination.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String destination\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/FileSystemMoveEvent-class.html",
            "desc": "<p>File system event for moving of file system objects.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileSystemMoveEvent"
        },
        {
            "type": "",
            "href": "dart-io\/GZIP-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "GZIP",
            "memberOf": "dart:io"
        },
        {
            "name": "dart:io.GZipCodec",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "GZipCodec",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.GZipCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "windowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "memLevel",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strategy",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dictionary",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "raw",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "gzip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/GZipCodec\/GZipCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GZipCodec(\n    {this.level: ZLibOption.defaultLevel,\n    this.windowBits: ZLibOption.defaultWindowBits,\n    this.memLevel: ZLibOption.defaultMemLevel,\n    this.strategy: ZLibOption.strategyDefault,\n    this.dictionary,\n    this.raw: false,\n    this.gzip: true}) {\n  _validateZLibeLevel(level);\n  _validateZLibMemLevel(memLevel);\n  _validateZLibStrategy(strategy);\n  _validateZLibWindowBits(windowBits);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "decoder",
                    "type": "dart:io.ZLibDecoder",
                    "types": [],
                    "desc": "<p>Get a <a href=\"dart-io\/ZLibDecoder-class.html\">ZLibDecoder<\/a> for decoding <code>GZip<\/code> compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/decoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ZLibDecoder get decoder =&gt;\n    new ZLibDecoder(windowBits: windowBits, dictionary: dictionary, raw: raw);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dictionary",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Initial compression dictionary.<\/p>\n<p>It should consist of strings (byte sequences) that are likely to be\nencountered later in the data to be compressed, with the most commonly used\nstrings preferably put towards the end of the dictionary. Using a\ndictionary is most useful when the data to be compressed is short and can\nbe predicted with good accuracy; the data can then be compressed better\nthan with the default empty dictionary.<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/dictionary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; dictionary\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoder",
                    "type": "dart:io.ZLibEncoder",
                    "types": [],
                    "desc": "<p>Get a <a href=\"dart-io\/ZLibEncoder-class.html\">ZLibEncoder<\/a> for encoding to <code>GZip<\/code> compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/encoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ZLibEncoder get encoder =&gt; new ZLibEncoder(\n    gzip: true,\n    level: level,\n    windowBits: windowBits,\n    memLevel: memLevel,\n    strategy: strategy,\n    dictionary: dictionary,\n    raw: raw);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "gzip",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, <code>GZip<\/code> frames will be added to the compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/gzip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool gzip\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The compression-<a href=\"dart-io\/GZipCodec\/level.html\">level<\/a> can be set in the range of <code>-1..9<\/code>, with <code>6<\/code> being\nthe default compression level. Levels above <code>6<\/code> will have higher\ncompression rates at the cost of more CPU and memory usage. Levels below\n<code>6<\/code> will use less CPU and memory at the cost of lower compression rates.<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int level\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "memLevel",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Specifies how much memory should be allocated for the internal compression\nstate. <code>1<\/code> uses minimum memory but is slow and reduces compression ratio;\n<code>9<\/code> uses maximum memory for optimal speed. The default value is <code>8<\/code>.<\/p>\n<p>The memory requirements for deflate are (in bytes):<\/p>\n<pre class=\"language-dart\"><code>(1 &lt;&lt; (windowBits + 2)) +  (1 &lt;&lt; (memLevel + 9))\n<\/code><\/pre>\n<p>that is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values)<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/memLevel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int memLevel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "raw",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, deflate generates raw data with no zlib header or trailer, and\nwill not compute an adler32 check value<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/raw.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool raw\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strategy",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Tunes the compression algorithm. Use the value\n<a href=\"dart-io\/ZLibOption\/strategyDefault-constant.html\">ZLibOption.strategyDefault<\/a> for normal data,\n<a href=\"dart-io\/ZLibOption\/strategyFiltered-constant.html\">ZLibOption.strategyFiltered<\/a> for data produced by a filter\n(or predictor), <a href=\"dart-io\/ZLibOption\/strategyHuffmanOnly-constant.html\">ZLibOption.strategyHuffmanOnly<\/a> to force Huffman\nencoding only (no string match), or <a href=\"dart-io\/ZLibOption\/strategyRle-constant.html\">ZLibOption.strategyRle<\/a> to limit\nmatch distances to one (run-length encoding).<\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/strategy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int strategy\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "windowBits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Base two logarithm of the window size (the size of the history buffer). It\nshould be in the range <code>8..15<\/code>. Larger values result in better compression\nat the expense of memory usage. The default value is <code>15<\/code><\/p>\n        ",
                    "memberOf": "dart:io.GZipCodec",
                    "isConstant": false,
                    "href": "dart-io\/GZipCodec\/windowBits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int windowBits\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/GZipCodec-class.html",
            "desc": "<p>The <a href=\"dart-io\/GZipCodec-class.html\">GZipCodec<\/a> encodes raw bytes to GZip compressed bytes and decodes GZip\ncompressed bytes to raw bytes.<\/p>\n<p>The difference between <a href=\"dart-io\/ZLibCodec-class.html\">ZLibCodec<\/a> and <a href=\"dart-io\/GZipCodec-class.html\">GZipCodec<\/a> is that the <a href=\"dart-io\/GZipCodec-class.html\">GZipCodec<\/a>\nwraps the <code>ZLib<\/code> compressed bytes in <code>GZip<\/code> frames.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "GZipCodec"
        },
        {
            "name": "dart:io.HandshakeException",
            "extends": [
                "dart:io.TlsException",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HandshakeException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HandshakeException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HandshakeException\/HandshakeException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst HandshakeException([String message = \"\", OSError osError])\n    : super._(\"HandshakeException\", message, osError);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HandshakeException-class.html",
            "desc": "<p>An exception that happens in the handshake phase of establishing\na secure network connection.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HandshakeException"
        },
        {
            "name": "dart:io.HeaderValue",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HeaderValue",
                    "type": "",
                    "desc": "<p>Creates a new header value object setting the value and parameters.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HeaderValue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "parameters",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HeaderValue\/HeaderValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HeaderValue([String value = \"\", Map&lt;String, String&gt; parameters]) {\n  return new _HeaderValue(value, parameters);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parse",
                    "type": "dart:io.HeaderValue",
                    "desc": "<p>Creates a new header value object from parsing a header value\nstring with both value and optional parameters.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HeaderValue",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "parameterSeparator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "valueSeparator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "preserveBackslash",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HeaderValue\/parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static HeaderValue parse(String value,\n    {String parameterSeparator: \";\",\n    String valueSeparator: null,\n    bool preserveBackslash: false}) {\n  return _HeaderValue.parse(value,\n      parameterSeparator: parameterSeparator,\n      valueSeparator: valueSeparator,\n      preserveBackslash: preserveBackslash);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the formatted string representation in the form:<\/p>\n<pre class=\"language-dart\"><code>value; parameter1=value1; parameter2=value2\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HeaderValue",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HeaderValue\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "parameters",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ],
                    "desc": "<p>Gets the map of parameters.<\/p>\n<p>This map cannot be modified. Invoking any operation which would\nmodify the map will throw <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.HeaderValue",
                    "isConstant": false,
                    "href": "dart-io\/HeaderValue\/parameters.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, String&gt; get parameters;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the header value.<\/p>\n        ",
                    "memberOf": "dart:io.HeaderValue",
                    "isConstant": false,
                    "href": "dart-io\/HeaderValue\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get value;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HeaderValue-class.html",
            "desc": "<p>Representation of a header value in the form:<\/p>\n<p>  <code>value; parameter1=value1; parameter2=value2<\/code><\/p>\n<p><a href=\"dart-io\/HeaderValue-class.html\">HeaderValue<\/a> can be used to conveniently build and parse header\nvalues on this form.<\/p>\n<p>To build an <code>accepts<\/code> header with the value<\/p>\n<pre class=\"language-dart\"><code>text\/plain; q=0.3, text\/html\n<\/code><\/pre>\n<p>use code like this:<\/p>\n<pre class=\"language-dart\"><code>HttpClientRequest request = ...;\nvar v = new HeaderValue(\"text\/plain\", {\"q\": \"0.3\"});\nrequest.headers.add(HttpHeaders.acceptHeader, v);\nrequest.headers.add(HttpHeaders.acceptHeader, \"text\/html\");\n<\/code><\/pre>\n<p>To parse the header values use the <code>parse<\/code> static method.<\/p>\n<pre class=\"language-dart\"><code>HttpRequest request = ...;\nList&lt;String&gt; values = request.headers[HttpHeaders.acceptHeader];\nvalues.forEach((value) {\n  HeaderValue v = HeaderValue.parse(value);\n  \/\/ Use v.value and v.parameters\n});\n<\/code><\/pre>\n<p>An instance of <a href=\"dart-io\/HeaderValue-class.html\">HeaderValue<\/a> is immutable.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HeaderValue"
        },
        {
            "name": "dart:io.HttpClient",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpClient",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HttpClient\/HttpClient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HttpClient({SecurityContext context}) {\n  HttpOverrides overrides = HttpOverrides.current;\n  if (overrides == null) {\n    return new _HttpClient(context);\n  }\n  return overrides.createHttpClient(context);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addCredentials",
                    "type": "",
                    "desc": "<p>Add credentials to be used for authorizing HTTP requests.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "realm",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "credentials",
                            "type": "dart:io.HttpClientCredentials",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/addCredentials.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addCredentials(Uri url, String realm, HttpClientCredentials credentials);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addProxyCredentials",
                    "type": "",
                    "desc": "<p>Add credentials to be used for authorizing HTTP proxies.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "realm",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "credentials",
                            "type": "dart:io.HttpClientCredentials",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/addProxyCredentials.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addProxyCredentials(\n    String host, int port, String realm, HttpClientCredentials credentials);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Shuts down the HTTP client.<\/p>\n<p>If <code>force<\/code> is <code>false<\/code> (the default) the <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a> will be kept alive\nuntil all active connections are done. If <code>force<\/code> is <code>true<\/code> any active\nconnections will be closed to immediately release all resources. These\nclosed connections will receive an error event to indicate that the client\nwas shut down. In both cases trying to establish a new connection after\ncalling <a href=\"dart-io\/HttpClient\/close.html\">close<\/a> will throw an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "force",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close({bool force: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "delete",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the DELETE method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/delete.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; delete(String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "deleteUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the DELETE method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/deleteUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; deleteUrl(Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "findProxyFromEnvironment",
                    "type": "dart:core.String",
                    "desc": "<p>Function for resolving the proxy server to be used for a HTTP\nconnection from the proxy configuration specified through\nenvironment variables.<\/p>\n<p>The following environment variables are taken into account:<\/p>\n<pre class=\"language-dart\"><code>http_proxy\nhttps_proxy\nno_proxy\nHTTP_PROXY\nHTTPS_PROXY\nNO_PROXY\n<\/code><\/pre>\n<p><code>http_proxy<\/code> and <code>HTTP_PROXY<\/code> specify the proxy server to use for\nhttp:\/\/ urls. Use the format <code>hostname:port<\/code>. If no port is used a\ndefault of 1080 will be used. If both are set the lower case one takes\nprecedence.<\/p>\n<p><code>https_proxy<\/code> and <code>HTTPS_PROXY<\/code> specify the proxy server to use for\nhttps:\/\/ urls. Use the format <code>hostname:port<\/code>. If no port is used a\ndefault of 1080 will be used. If both are set the lower case one takes\nprecedence.<\/p>\n<p><code>no_proxy<\/code> and <code>NO_PROXY<\/code> specify a comma separated list of\npostfixes of hostnames for which not to use the proxy\nserver. E.g. the value \"localhost,127.0.0.1\" will make requests\nto both \"localhost\" and \"127.0.0.1\" not use a proxy. If both are set\nthe lower case one takes precedence.<\/p>\n<p>To activate this way of resolving proxies assign this function to\nthe <a href=\"dart-io\/HttpClient\/findProxy.html\">findProxy<\/a> property on the <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.findProxy = HttpClient.findProxyFromEnvironment;\n<\/code><\/pre>\n<p>If you don't want to use the system environment you can use a\ndifferent one by wrapping the function.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.findProxy = (url) {\n  return HttpClient.findProxyFromEnvironment(\n      url, environment: {\"http_proxy\": ..., \"no_proxy\": ...});\n}\n<\/code><\/pre>\n<p>If a proxy requires authentication it is possible to configure\nthe username and password as well. Use the format\n<code>username:password@hostname:port<\/code> to include the username and\npassword. Alternatively the API <a href=\"dart-io\/HttpClient\/addProxyCredentials.html\">addProxyCredentials<\/a> can be used\nto set credentials for proxies which require authentication.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/findProxyFromEnvironment.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String findProxyFromEnvironment(Uri url,\n    {Map&lt;String, String&gt; environment}) {\n  HttpOverrides overrides = HttpOverrides.current;\n  if (overrides == null) {\n    return _HttpClient._findProxyFromEnvironment(url, environment);\n  }\n  return overrides.findProxyFromEnvironment(url, environment);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "get",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the GET method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using\n<code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; get(String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "getUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the GET method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/getUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; getUrl(Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "head",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the HEAD method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/head.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; head(String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "headUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the HEAD method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/headUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; headUrl(Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "open",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection.<\/p>\n<p>The HTTP method to use is specified in <code>method<\/code>, the server is\nspecified using <code>host<\/code> and <code>port<\/code>, and the path (including\na possible query) is specified using <code>path<\/code>.\nThe path may also contain a URI fragment, which will be ignored.<\/p>\n<p>The <code>Host<\/code> header for the request will be set to the value <code>host<\/code>:<code>port<\/code>\n(if <code>host<\/code> is an IP address, it will still be used in the <code>Host<\/code> header).\nThis can be overridden through the <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> interface before\nthe request is sent.<\/p>\n<p>For additional information on the sequence of events during an\nHTTP transaction, and the objects returned by the futures, see\nthe overall documentation for the class <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/open.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; open(\n    String method, String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "openUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection.<\/p>\n<p>The HTTP method is specified in <code>method<\/code> and the URL to use in\n<code>url<\/code>.<\/p>\n<p>The <code>Host<\/code> header for the request will be set to the value\n<a href=\"dart-core\/Uri\/host.html\">Uri.host<\/a>:<a href=\"dart-core\/Uri\/port.html\">Uri.port<\/a> from <code>url<\/code> (if <code>url.host<\/code> is an IP address, it will\nstill be used in the <code>Host<\/code> header). This can be overridden through the\n<a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> interface before the request is sent.<\/p>\n<p>For additional information on the sequence of events during an\nHTTP transaction, and the objects returned by the futures, see\nthe overall documentation for the class <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/openUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; openUrl(String method, Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "patch",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the PATCH method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/patch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; patch(String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "patchUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the PATCH method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/patchUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; patchUrl(Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "post",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the POST method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using\n<code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/post.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; post(String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "postUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the POST method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/postUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; postUrl(Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "put",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the PUT method.<\/p>\n<p>The server is specified using <code>host<\/code> and <code>port<\/code>, and the path\n(including a possible query) is specified using <code>path<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/open.html\">open<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/put.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; put(String host, int port, String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                },
                {
                    "name": "putUrl",
                    "type": "dart:async.Future<dart:io.HttpClientRequest>",
                    "desc": "<p>Opens a HTTP connection using the PUT method.<\/p>\n<p>The URL to use is specified in <code>url<\/code>.<\/p>\n<p>See <a href=\"dart-io\/HttpClient\/openUrl.html\">openUrl<\/a> for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClient",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClient\/putUrl.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientRequest&gt; putUrl(Uri url);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientRequest"
                    ]
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/HttpClient\/DEFAULT_HTTPS_PORT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_HTTPS_PORT = defaultHttpsPort\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DEFAULT_HTTPS_PORT",
                    "memberOf": "dart:io.HttpClient"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpClient\/DEFAULT_HTTP_PORT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_HTTP_PORT = defaultHttpPort\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DEFAULT_HTTP_PORT",
                    "memberOf": "dart:io.HttpClient"
                },
                {
                    "name": "authenticate",
                    "type": "",
                    "types": [],
                    "desc": "<p>Sets the function to be called when a site is requesting\nauthentication. The URL requested and the security realm from the\nserver are passed in the arguments <code>url<\/code> and <code>realm<\/code>.<\/p>\n<p>The function returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which should complete when the\nauthentication has been resolved. If credentials cannot be\nprovided the <a href=\"dart-async\/Future-class.html\">Future<\/a> should complete with <code>false<\/code>. If\ncredentials are available the function should add these using\n<a href=\"dart-io\/HttpClient\/addCredentials.html\">addCredentials<\/a> before completing the <a href=\"dart-async\/Future-class.html\">Future<\/a> with the value\n<code>true<\/code>.<\/p>\n<p>If the <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with <code>true<\/code> the request will be retried\nusing the updated credentials, however, the retried request will not\ncarry the original request payload. Otherwise response processing will\ncontinue normally.<\/p>\n<p>If it is known that the remote server requires authentication for all\nrequests, it is advisable to use <a href=\"dart-io\/HttpClient\/addCredentials.html\">addCredentials<\/a> directly, or manually\nset the <code>'authorization'<\/code> header on the request to avoid the overhead\nof a failed request, or issues due to missing request payload on retried\nrequest.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/authenticate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set authenticate(Future&lt;bool&gt; f(Uri url, String scheme, String realm));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "authenticateProxy",
                    "type": "",
                    "types": [],
                    "desc": "<p>Sets the function to be called when a proxy is requesting\nauthentication. Information on the proxy in use and the security\nrealm for the authentication are passed in the arguments <code>host<\/code>,\n<code>port<\/code> and <code>realm<\/code>.<\/p>\n<p>The function returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which should complete when the\nauthentication has been resolved. If credentials cannot be\nprovided the <a href=\"dart-async\/Future-class.html\">Future<\/a> should complete with <code>false<\/code>. If\ncredentials are available the function should add these using\n<a href=\"dart-io\/HttpClient\/addProxyCredentials.html\">addProxyCredentials<\/a> before completing the <a href=\"dart-async\/Future-class.html\">Future<\/a> with the value\n<code>true<\/code>.<\/p>\n<p>If the <a href=\"dart-async\/Future-class.html\">Future<\/a> completes with <code>true<\/code> the request will be retried\nusing the updated credentials. Otherwise response processing will\ncontinue normally.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/authenticateProxy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set authenticateProxy(\n    Future&lt;bool&gt; f(String host, int port, String scheme, String realm));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "autoUncompress",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets whether the body of a response will be automatically\nuncompressed.<\/p>\n<p>The body of an HTTP response can be compressed. In most\nsituations providing the un-compressed body is most\nconvenient. Therefore the default behavior is to un-compress the\nbody. However in some situations (e.g. implementing a transparent\nproxy) keeping the uncompressed stream is required.<\/p>\n<p>NOTE: Headers in the response are never modified. This means\nthat when automatic un-compression is turned on the value of the\nheader <code>Content-Length<\/code> will reflect the length of the original\ncompressed body. Likewise the header <code>Content-Encoding<\/code> will also\nhave the original value indicating compression.<\/p>\n<p>NOTE: Automatic un-compression is only performed if the\n<code>Content-Encoding<\/code> header value is <code>gzip<\/code>.<\/p>\n<p>This value affects all responses produced by this client after the\nvalue is changed.<\/p>\n<p>To disable, set to <code>false<\/code>.<\/p>\n<p>Default is <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/autoUncompress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool autoUncompress\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "badCertificateCallback",
                    "type": "",
                    "types": [],
                    "desc": "<p>Sets a callback that will decide whether to accept a secure connection\nwith a server certificate that cannot be authenticated by any of our\ntrusted root certificates.<\/p>\n<p>When an secure HTTP request if made, using this HttpClient, and the\nserver returns a server certificate that cannot be authenticated, the\ncallback is called asynchronously with the <a href=\"dart-io\/X509Certificate-class.html\">X509Certificate<\/a> object and\nthe server's hostname and port.  If the value of <a href=\"dart-io\/HttpClient\/badCertificateCallback.html\">badCertificateCallback<\/a>\nis <code>null<\/code>, the bad certificate is rejected, as if the callback\nreturned <code>false<\/code><\/p>\n<p>If the callback returns true, the secure connection is accepted and the\n<code>Future&lt;HttpClientRequest&gt;<\/code> that was returned from the call making the\nrequest completes with a valid HttpRequest object. If the callback returns\nfalse, the <code>Future&lt;HttpClientRequest&gt;<\/code> completes with an exception.<\/p>\n<p>If a bad certificate is received on a connection attempt, the library calls\nthe function that was the value of badCertificateCallback at the time\nthe request is made, even if the value of badCertificateCallback\nhas changed since then.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/badCertificateCallback.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set badCertificateCallback(\n    bool callback(X509Certificate cert, String host, int port));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "connectionTimeout",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>Gets and sets the connection timeout.<\/p>\n<p>When connecting to a new host exceeds this timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a>\nis thrown. The timeout applies only to connections initiated after the\ntimeout is set.<\/p>\n<p>When this is <code>null<\/code>, the OS default timeout is used. The default is\n<code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/connectionTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration connectionTimeout\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpClient\/defaultHttpPort-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultHttpPort = 80\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "defaultHttpPort",
                    "memberOf": "dart:io.HttpClient"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpClient\/defaultHttpsPort-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultHttpsPort = 443\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "defaultHttpsPort",
                    "memberOf": "dart:io.HttpClient"
                },
                {
                    "name": "findProxy",
                    "type": "",
                    "types": [],
                    "desc": "<p>Sets the function used to resolve the proxy server to be used for\nopening a HTTP connection to the specified <code>url<\/code>. If this\nfunction is not set, direct connections will always be used.<\/p>\n<p>The string returned by <code>f<\/code> must be in the format used by browser\nPAC (proxy auto-config) scripts. That is either<\/p>\n<pre class=\"language-dart\"><code>\"DIRECT\"\n<\/code><\/pre>\n<p>for using a direct connection or<\/p>\n<pre class=\"language-dart\"><code>\"PROXY host:port\"\n<\/code><\/pre>\n<p>for using the proxy server <code>host<\/code> on port <code>port<\/code>.<\/p>\n<p>A configuration can contain several configuration elements\nseparated by semicolons, e.g.<\/p>\n<pre class=\"language-dart\"><code>\"PROXY host:port; PROXY host2:port2; DIRECT\"\n<\/code><\/pre>\n<p>The static function <a href=\"dart-io\/HttpClient\/findProxyFromEnvironment.html\">findProxyFromEnvironment<\/a> on this class can\nbe used to implement proxy server resolving based on environment\nvariables.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/findProxy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set findProxy(String f(Uri url));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "idleTimeout",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>Gets and sets the idle timeout of non-active persistent (keep-alive)\nconnections.<\/p>\n<p>The default value is 15 seconds.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/idleTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration idleTimeout\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxConnectionsPerHost",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the maximum number of live connections, to a single host.<\/p>\n<p>Increasing this number may lower performance and take up unwanted\nsystem resources.<\/p>\n<p>To disable, set to <code>null<\/code>.<\/p>\n<p>Default is <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/maxConnectionsPerHost.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maxConnectionsPerHost\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "userAgent",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the default value of the <code>User-Agent<\/code> header for all requests\ngenerated by this <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a>.<\/p>\n<p>The default value is <code>Dart\/&lt;version&gt; (dart:io)<\/code>.<\/p>\n<p>If the userAgent is set to <code>null<\/code>, no default <code>User-Agent<\/code> header will be\nadded to each request.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClient",
                    "isConstant": false,
                    "href": "dart-io\/HttpClient\/userAgent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String userAgent\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpClient-class.html",
            "desc": "<p>A client that receives content, such as web pages, from\na server using the HTTP protocol.<\/p>\n<p>HttpClient contains a number of methods to send an <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a>\nto an Http server and receive an <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> back.\nFor example, you can use the <a href=\"dart-io\/HttpClient\/get.html\">get<\/a>, <a href=\"dart-io\/HttpClient\/getUrl.html\">getUrl<\/a>, <a href=\"dart-io\/HttpClient\/post.html\">post<\/a>, and <a href=\"dart-io\/HttpClient\/postUrl.html\">postUrl<\/a> methods\nfor GET and POST requests, respectively.<\/p>\n<h2 id=\"making-a-simple-get-request-an-example\">Making a simple GET request: an example<\/h2>\n<p>A <code>getUrl<\/code> request is a two-step process, triggered by two <a href=\"dart-async\/Future-class.html\">Future<\/a>s.\nWhen the first future completes with a <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a>, the underlying\nnetwork connection has been established, but no data has been sent.\nIn the callback function for the first future, the HTTP headers and body\ncan be set on the request. Either the first write to the request object\nor a call to <a href=\"dart-io\/HttpClient\/close.html\">close<\/a> sends the request to the server.<\/p>\n<p>When the HTTP response is received from the server,\nthe second future, which is returned by close,\ncompletes with an <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> object.\nThis object provides access to the headers and body of the response.\nThe body is available as a stream implemented by HttpClientResponse.\nIf a body is present, it must be read. Otherwise, it leads to resource\nleaks. Consider using <a href=\"dart-async\/Stream\/drain.html\">HttpClientResponse.drain<\/a> if the body is unused.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.getUrl(Uri.parse(\"http:\/\/www.example.com\/\"))\n    .then((HttpClientRequest request) {\n      \/\/ Optionally set up headers...\n      \/\/ Optionally write to the request object...\n      \/\/ Then call close.\n      ...\n      return request.close();\n    })\n    .then((HttpClientResponse response) {\n      \/\/ Process the response.\n      ...\n    });\n<\/code><\/pre>\n<p>The future for <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> is created by methods such as\n<a href=\"dart-io\/HttpClient\/getUrl.html\">getUrl<\/a> and <a href=\"dart-io\/HttpClient\/open.html\">open<\/a>.<\/p>\n<h2 id=\"https-connections\">HTTPS connections<\/h2>\n<p>An HttpClient can make HTTPS requests, connecting to a server using\nthe TLS (SSL) secure networking protocol. Calling <a href=\"dart-io\/HttpClient\/getUrl.html\">getUrl<\/a> with an\nhttps: scheme will work automatically, if the server's certificate is\nsigned by a root CA (certificate authority) on the default list of\nwell-known trusted CAs, compiled by Mozilla.<\/p>\n<p>To add a custom trusted certificate authority, or to send a client\ncertificate to servers that request one, pass a <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> object\nas the optional <code>context<\/code> argument to the <code>HttpClient<\/code> constructor.\nThe desired security options can be set on the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> object.<\/p>\n<h2 id=\"headers\">Headers<\/h2>\n<p>All HttpClient requests set the following header by default:<\/p>\n<pre class=\"language-dart\"><code>Accept-Encoding: gzip\n<\/code><\/pre>\n<p>This allows the HTTP server to use gzip compression for the body if\npossible. If this behavior is not desired set the\n<code>Accept-Encoding<\/code> header to something else.\nTo turn off gzip compression of the response, clear this header:<\/p>\n<pre class=\"language-dart\"><code> request.headers.removeAll(HttpHeaders.acceptEncodingHeader)\n<\/code><\/pre>\n<h2 id=\"closing-the-httpclient\">Closing the HttpClient<\/h2>\n<p>The HttpClient supports persistent connections and caches network\nconnections to reuse them for multiple requests whenever\npossible. This means that network connections can be kept open for\nsome time after a request has completed. Use HttpClient.close\nto force the HttpClient object to shut down and to close the idle\nnetwork connections.<\/p>\n<h2 id=\"turning-proxies-on-and-off\">Turning proxies on and off<\/h2>\n<p>By default the HttpClient uses the proxy configuration available\nfrom the environment, see <a href=\"dart-io\/HttpClient\/findProxyFromEnvironment.html\">findProxyFromEnvironment<\/a>. To turn off\nthe use of proxies set the <a href=\"dart-io\/HttpClient\/findProxy.html\">findProxy<\/a> property to\n<code>null<\/code>.<\/p>\n<pre class=\"language-dart\"><code>HttpClient client = new HttpClient();\nclient.findProxy = null;\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpClient"
        },
        {
            "name": "dart:io.HttpClientBasicCredentials",
            "extends": [
                "dart:io.HttpClientCredentials",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpClientBasicCredentials",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpClientBasicCredentials",
                    "sig": "",
                    "params": [
                        {
                            "name": "username",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HttpClientBasicCredentials\/HttpClientBasicCredentials.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HttpClientBasicCredentials(String username, String password) =&gt;\n    new _HttpClientBasicCredentials(username, password);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpClientBasicCredentials-class.html",
            "desc": "<p>Represents credentials for basic authentication.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpClientBasicCredentials"
        },
        {
            "name": "dart:io.HttpClientCredentials",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpClientCredentials",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpClientCredentials",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpClientCredentials\/HttpClientCredentials.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "dart:io.HttpClientBasicCredentials",
                "dart:io.HttpClientDigestCredentials"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpClientCredentials-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpClientCredentials"
        },
        {
            "name": "dart:io.HttpClientDigestCredentials",
            "extends": [
                "dart:io.HttpClientCredentials",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpClientDigestCredentials",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpClientDigestCredentials",
                    "sig": "",
                    "params": [
                        {
                            "name": "username",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HttpClientDigestCredentials\/HttpClientDigestCredentials.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HttpClientDigestCredentials(String username, String password) =&gt;\n    new _HttpClientDigestCredentials(username, password);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpClientDigestCredentials-class.html",
            "desc": "<p>Represents credentials for digest authentication. Digest\nauthentication is only supported for servers using the MD5\nalgorithm and quality of protection (qop) of either \"none\" or\n\"auth\".<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpClientDigestCredentials"
        },
        {
            "name": "dart:io.HttpClientRequest",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpClientRequest",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpClientRequest",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpClientRequest\/HttpClientRequest.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "close",
                    "type": "dart:async.Future<dart:io.HttpClientResponse>",
                    "desc": "<p>Close the request for input. Returns the value of <a href=\"dart-io\/HttpClientRequest\/done.html\">done<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClientRequest",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClientRequest\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientResponse&gt; close();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientResponse"
                    ]
                }
            ],
            "props": [
                {
                    "name": "bufferOutput",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets or sets if the <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a> should buffer output.<\/p>\n<p>Default value is <code>true<\/code>.<\/p>\n<p><strong>Note<\/strong>: Disabling buffering of the output can result in very poor\nperformance, when writing many small chunks.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/bufferOutput.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool bufferOutput\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "connectionInfo",
                    "type": "dart:io.HttpConnectionInfo",
                    "types": [],
                    "desc": "<p>Gets information about the client connection.<\/p>\n<p>Returns <code>null<\/code> if the socket is not available.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/connectionInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpConnectionInfo get connectionInfo;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "contentLength",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the content length of the request.<\/p>\n<p>If the size of the request is not known in advance set content length to\n-1, which is also the default.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/contentLength.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int contentLength\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "cookies",
                    "type": "dart:core.List<dart:io.Cookie>",
                    "types": [
                        "dart:core.List",
                        "dart:io.Cookie"
                    ],
                    "desc": "<p>Cookies to present to the server (in the 'cookie' header).<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/cookies.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Cookie&gt; get cookies;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "done",
                    "type": "dart:async.Future<dart:io.HttpClientResponse>",
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientResponse"
                    ],
                    "desc": "<p>A <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> future that will complete once the response is\navailable.<\/p>\n<p>If an error occurs before the response is available, this future will\ncomplete with an error.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/done.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientResponse&gt; get done;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "followRedirects",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set this property to <code>true<\/code> if this request should\nautomatically follow redirects. The default is <code>true<\/code>.<\/p>\n<p>Automatic redirect will only happen for \"GET\" and \"HEAD\" requests\nand only for the status codes <code>HttpStatus.movedPermanently<\/code>\n(301), <code>HttpStatus.found<\/code> (302),\n<code>HttpStatus.movedTemporarily<\/code> (302, alias for\n<code>HttpStatus.found<\/code>), <code>HttpStatus.seeOther<\/code> (303) and\n<code>HttpStatus.temporaryRedirect<\/code> (307). For\n<code>HttpStatus.seeOther<\/code> (303) automatic redirect will also happen\nfor \"POST\" requests with the method changed to \"GET\" when\nfollowing the redirect.<\/p>\n<p>All headers added to the request will be added to the redirection\nrequest(s). However, any body send with the request will not be\npart of the redirection request(s).<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/followRedirects.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool followRedirects\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "headers",
                    "type": "dart:io.HttpHeaders",
                    "types": [],
                    "desc": "<p>Returns the client request headers.<\/p>\n<p>The client request headers can be modified until the client\nrequest body is written to or closed. After that they become\nimmutable.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/headers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpHeaders get headers;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxRedirects",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Set this property to the maximum number of redirects to follow\nwhen <a href=\"dart-io\/HttpClientRequest\/followRedirects.html\">followRedirects<\/a> is <code>true<\/code>. If this number is exceeded\nan error event will be added with a <a href=\"dart-io\/RedirectException-class.html\">RedirectException<\/a>.<\/p>\n<p>The default value is 5.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/maxRedirects.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maxRedirects\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The method of the request.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/method.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get method;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "persistentConnection",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets the requested persistent connection state.<\/p>\n<p>The default value is <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/persistentConnection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool persistentConnection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The uri of the request.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientRequest\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpClientRequest-class.html",
            "desc": "<p>HTTP request for a client connection.<\/p>\n<p>To set up a request, set the headers using the headers property\nprovided in this class and write the data to the body of the request.\nHttpClientRequest is an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>. Use the methods from IOSink,\nsuch as writeCharCode(), to write the body of the HTTP\nrequest. When one of the IOSink methods is used for the first\ntime, the request header is sent. Calling any methods that\nchange the header after it is sent throws an exception.<\/p>\n<p>When writing string data through the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> the\nencoding used is determined from the \"charset\" parameter of\nthe \"Content-Type\" header.<\/p>\n<pre class=\"language-dart\"><code>HttpClientRequest request = ...\nrequest.headers.contentType\n    = new ContentType(\"application\", \"json\", charset: \"utf-8\");\nrequest.write(...);  \/\/ Strings written will be UTF-8 encoded.\n<\/code><\/pre>\n<p>If no charset is provided the default of ISO-8859-1 (Latin 1) is\nbe used.<\/p>\n<pre class=\"language-dart\"><code>HttpClientRequest request = ...\nrequest.headers.add(HttpHeaders.contentTypeHeader, \"text\/plain\");\nrequest.write(...);  \/\/ Strings written will be ISO-8859-1 encoded.\n<\/code><\/pre>\n<p>An exception is thrown if you use an unsupported encoding and the\n<code>write()<\/code> method being used takes a string parameter.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpClientRequest"
        },
        {
            "name": "dart:io.HttpClientResponse",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpClientResponse",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpClientResponse",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpClientResponse\/HttpClientResponse.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "detachSocket",
                    "type": "dart:async.Future<dart:io.Socket>",
                    "desc": "<p>Detach the underlying socket from the HTTP client. When the\nsocket is detached the HTTP client will no longer perform any\noperations on it.<\/p>\n<p>This is normally used when a HTTP upgrade is negotiated and the\ncommunication should continue with a different protocol.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClientResponse",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClientResponse\/detachSocket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Socket&gt; detachSocket();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Socket"
                    ]
                },
                {
                    "name": "redirect",
                    "type": "dart:async.Future<dart:io.HttpClientResponse>",
                    "desc": "<p>Redirects this connection to a new URL. The default value for\n<code>method<\/code> is the method for the current request. The default value\nfor <code>url<\/code> is the value of the <a href=\"dart-io\/HttpHeaders\/locationHeader-constant.html\">HttpHeaders.locationHeader<\/a> header of\nthe current response. All body data must have been read from the\ncurrent response before calling <a href=\"dart-io\/HttpClientResponse\/redirect.html\">redirect<\/a>.<\/p>\n<p>All headers added to the request will be added to the redirection\nrequest. However, any body sent with the request will not be\npart of the redirection request.<\/p>\n<p>If <code>followLoops<\/code> is set to <code>true<\/code>, redirect will follow the redirect,\neven if the URL was already visited. The default value is <code>false<\/code>.<\/p>\n<p>The method will ignore <a href=\"dart-io\/HttpClientRequest\/maxRedirects.html\">HttpClientRequest.maxRedirects<\/a>\nand will always perform the redirect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpClientResponse",
                    "sig": "",
                    "params": [
                        {
                            "name": "method",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLoops",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpClientResponse\/redirect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;HttpClientResponse&gt; redirect(\n    [String method, Uri url, bool followLoops]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpClientResponse"
                    ]
                }
            ],
            "props": [
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "types": [],
                    "desc": "<p>Returns the certificate of the HTTPS server providing the response.\nReturns null if the connection is not a secure TLS or SSL connection.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/certificate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">X509Certificate get certificate;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "connectionInfo",
                    "type": "dart:io.HttpConnectionInfo",
                    "types": [],
                    "desc": "<p>Gets information about the client connection. Returns <code>null<\/code> if the socket\nis not available.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/connectionInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpConnectionInfo get connectionInfo;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "contentLength",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the content length of the response body. Returns -1 if the size of\nthe response body is not known in advance.<\/p>\n<p>If the content length needs to be set, it must be set before the\nbody is written to. Setting the content length after writing to the body\nwill throw a <code>StateError<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/contentLength.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get contentLength;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "cookies",
                    "type": "dart:core.List<dart:io.Cookie>",
                    "types": [
                        "dart:core.List",
                        "dart:io.Cookie"
                    ],
                    "desc": "<p>Cookies set by the server (from the 'set-cookie' header).<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/cookies.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Cookie&gt; get cookies;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "headers",
                    "type": "dart:io.HttpHeaders",
                    "types": [],
                    "desc": "<p>Returns the client response headers.<\/p>\n<p>The client response headers are immutable.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/headers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpHeaders get headers;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isRedirect",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns whether the status code is one of the normal redirect\ncodes <a href=\"dart-io\/HttpStatus\/movedPermanently-constant.html\">HttpStatus.movedPermanently<\/a>, <a href=\"dart-io\/HttpStatus\/found-constant.html\">HttpStatus.found<\/a>,\n<a href=\"dart-io\/HttpStatus\/movedTemporarily-constant.html\">HttpStatus.movedTemporarily<\/a>, <a href=\"dart-io\/HttpStatus\/seeOther-constant.html\">HttpStatus.seeOther<\/a> and\n<a href=\"dart-io\/HttpStatus\/temporaryRedirect-constant.html\">HttpStatus.temporaryRedirect<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/isRedirect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRedirect;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "persistentConnection",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets the persistent connection state returned by the server.<\/p>\n<p>If the persistent connection state needs to be set, it must be\nset before the body is written to. Setting the persistent connection state\nafter writing to the body will throw a <code>StateError<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/persistentConnection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get persistentConnection;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "reasonPhrase",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the reason phrase associated with the status code.<\/p>\n<p>The reason phrase must be set before the body is written\nto. Setting the reason phrase after writing to the body will throw\na <code>StateError<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/reasonPhrase.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get reasonPhrase;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "redirects",
                    "type": "dart:core.List<dart:io.RedirectInfo>",
                    "types": [
                        "dart:core.List",
                        "dart:io.RedirectInfo"
                    ],
                    "desc": "<p>Returns the series of redirects this connection has been through. The\nlist will be empty if no redirects were followed. <a href=\"dart-io\/HttpClientResponse\/redirects.html\">redirects<\/a> will be\nupdated both in the case of an automatic and a manual redirect.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/redirects.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;RedirectInfo&gt; get redirects;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "statusCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the status code.<\/p>\n<p>The status code must be set before the body is written\nto. Setting the status code after writing to the body will throw\na <code>StateError<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpClientResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpClientResponse\/statusCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get statusCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpClientResponse-class.html",
            "desc": "<p>HTTP response for a client connection.<\/p>\n<p>The body of a <a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> object is a\n<a href=\"dart-async\/Stream-class.html\">Stream<\/a> of data from the server. Listen to the body to handle\nthe data and be notified when the entire body is received.<\/p>\n<pre class=\"language-dart\"><code>new HttpClient().get('localhost', 80, '\/file.txt')\n     .then((HttpClientRequest request) =&gt; request.close())\n     .then((HttpClientResponse response) {\n       response.transform(utf8.decoder).listen((contents) {\n         \/\/ handle data\n       });\n     });\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpClientResponse"
        },
        {
            "name": "dart:io.HttpConnectionInfo",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpConnectionInfo",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpConnectionInfo",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpConnectionInfo\/HttpConnectionInfo.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "localPort",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.HttpConnectionInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionInfo\/localPort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get localPort;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remoteAddress",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.HttpConnectionInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionInfo\/remoteAddress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get remoteAddress;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remotePort",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.HttpConnectionInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionInfo\/remotePort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get remotePort;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpConnectionInfo-class.html",
            "desc": "<p>Information about an <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a>, <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a>, <a href=\"dart-io\/HttpClientRequest-class.html\">HttpClientRequest<\/a>, or\n<a href=\"dart-io\/HttpClientResponse-class.html\">HttpClientResponse<\/a> connection.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpConnectionInfo"
        },
        {
            "name": "dart:io.HttpConnectionsInfo",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpConnectionsInfo",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpConnectionsInfo",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpConnectionsInfo\/HttpConnectionsInfo.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "active",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Number of active connections where actual request\/response\nprocessing is active.<\/p>\n        ",
                    "memberOf": "dart:io.HttpConnectionsInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionsInfo\/active.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int active = 0\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "closing",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Number of connections which are preparing to close. Note: These\nconnections are also part of the <code>active<\/code> count as they might\nstill be sending data to the client before finally closing.<\/p>\n        ",
                    "memberOf": "dart:io.HttpConnectionsInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionsInfo\/closing.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int closing = 0\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "idle",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Number of idle connections held by clients as persistent connections.<\/p>\n        ",
                    "memberOf": "dart:io.HttpConnectionsInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionsInfo\/idle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int idle = 0\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "total",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Total number of socket connections.<\/p>\n        ",
                    "memberOf": "dart:io.HttpConnectionsInfo",
                    "isConstant": false,
                    "href": "dart-io\/HttpConnectionsInfo\/total.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int total = 0\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpConnectionsInfo-class.html",
            "desc": "<p>Summary statistics about an <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a>s current socket connections.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpConnectionsInfo"
        },
        {
            "name": "dart:io.HttpDate",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpDate",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpDate",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpDate\/HttpDate.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "format",
                    "type": "dart:core.String",
                    "desc": "<p>Format a date according to\n<a href=\"http:\/\/tools.ietf.org\/html\/rfc1123\" title=\"RFC-1123\">RFC-1123<\/a>,\ne.g. <code>Thu, 1 Jan 1970 00:00:00 GMT<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpDate",
                    "sig": "",
                    "params": [
                        {
                            "name": "date",
                            "type": "dart:core.DateTime",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpDate\/format.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String format(DateTime date) {\n  const List wkday = const [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const List month = const [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n\n  DateTime d = date.toUtc();\n  StringBuffer sb = new StringBuffer()\n    ..write(wkday[d.weekday - 1])\n    ..write(\", \")\n    ..write(d.day &lt;= 9 ? \"0\" : \"\")\n    ..write(d.day.toString())\n    ..write(\" \")\n    ..write(month[d.month - 1])\n    ..write(\" \")\n    ..write(d.year.toString())\n    ..write(d.hour &lt;= 9 ? \" 0\" : \" \")\n    ..write(d.hour.toString())\n    ..write(d.minute &lt;= 9 ? \":0\" : \":\")\n    ..write(d.minute.toString())\n    ..write(d.second &lt;= 9 ? \":0\" : \":\")\n    ..write(d.second.toString())\n    ..write(\" GMT\");\n  return sb.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "parse",
                    "type": "dart:core.DateTime",
                    "desc": "<p>Parse a date string in either of the formats\n<a href=\"http:\/\/tools.ietf.org\/html\/rfc1123\" title=\"RFC-1123\">RFC-1123<\/a>,\n<a href=\"http:\/\/tools.ietf.org\/html\/rfc850\" title=\"RFC-850\">RFC-850<\/a> or\nANSI C's asctime() format. These formats are listed here.<\/p>\n<pre class=\"language-dart\"><code>Thu, 1 Jan 1970 00:00:00 GMT\nThursday, 1-Jan-1970 00:00:00 GMT\nThu Jan  1 00:00:00 1970\n<\/code><\/pre>\n<p>For more information see <a href=\"http:\/\/tools.ietf.org\/html\/rfc2616#section-3.3.1\" title=\"RFC-2616 section 3.1.1\">RFC-2616 section\n3.1.1<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpDate",
                    "sig": "",
                    "params": [
                        {
                            "name": "date",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpDate\/parse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static DateTime parse(String date) {\n  final int SP = 32;\n  const List wkdays = const [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const List weekdays = const [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n  ];\n  const List months = const [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ];\n  const List wkdaysLowerCase = const [\n    \"mon\",\n    \"tue\",\n    \"wed\",\n    \"thu\",\n    \"fri\",\n    \"sat\",\n    \"sun\"\n  ];\n  const List weekdaysLowerCase = const [\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\",\n    \"sunday\"\n  ];\n  const List monthsLowerCase = const [\n    \"jan\",\n    \"feb\",\n    \"mar\",\n    \"apr\",\n    \"may\",\n    \"jun\",\n    \"jul\",\n    \"aug\",\n    \"sep\",\n    \"oct\",\n    \"nov\",\n    \"dec\"\n  ];\n\n  final int formatRfc1123 = 0;\n  final int formatRfc850 = 1;\n  final int formatAsctime = 2;\n\n  int index = 0;\n  String tmp;\n  int format;\n\n  void expect(String s) {\n    if (date.length - index &lt; s.length) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n    String tmp = date.substring(index, index + s.length);\n    if (tmp != s) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n    index += s.length;\n  }\n\n  int expectWeekday() {\n    int weekday;\n    \/\/ The formatting of the weekday signals the format of the date string.\n    int pos = date.indexOf(\",\", index);\n    if (pos == -1) {\n      int pos = date.indexOf(\" \", index);\n      if (pos == -1) throw new HttpException(\"Invalid HTTP date $date\");\n      tmp = date.substring(index, pos);\n      index = pos + 1;\n      weekday = wkdays.indexOf(tmp);\n      if (weekday != -1) {\n        format = formatAsctime;\n        return weekday;\n      }\n    } else {\n      tmp = date.substring(index, pos);\n      index = pos + 1;\n      weekday = wkdays.indexOf(tmp);\n      if (weekday != -1) {\n        format = formatRfc1123;\n        return weekday;\n      }\n      weekday = weekdays.indexOf(tmp);\n      if (weekday != -1) {\n        format = formatRfc850;\n        return weekday;\n      }\n    }\n    throw new HttpException(\"Invalid HTTP date $date\");\n  }\n\n  int expectMonth(String separator) {\n    int pos = date.indexOf(separator, index);\n    if (pos - index != 3) throw new HttpException(\"Invalid HTTP date $date\");\n    tmp = date.substring(index, pos);\n    index = pos + 1;\n    int month = months.indexOf(tmp);\n    if (month != -1) return month;\n    throw new HttpException(\"Invalid HTTP date $date\");\n  }\n\n  int expectNum(String separator) {\n    int pos;\n    if (separator.length &gt; 0) {\n      pos = date.indexOf(separator, index);\n    } else {\n      pos = date.length;\n    }\n    String tmp = date.substring(index, pos);\n    index = pos + separator.length;\n    try {\n      int value = int.parse(tmp);\n      return value;\n    } on FormatException catch (e) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n  }\n\n  void expectEnd() {\n    if (index != date.length) {\n      throw new HttpException(\"Invalid HTTP date $date\");\n    }\n  }\n\n  int weekday = expectWeekday();\n  int day;\n  int month;\n  int year;\n  int hours;\n  int minutes;\n  int seconds;\n  if (format == formatAsctime) {\n    month = expectMonth(\" \");\n    if (date.codeUnitAt(index) == SP) index++;\n    day = expectNum(\" \");\n    hours = expectNum(\":\");\n    minutes = expectNum(\":\");\n    seconds = expectNum(\" \");\n    year = expectNum(\"\");\n  } else {\n    expect(\" \");\n    day = expectNum(format == formatRfc1123 ? \" \" : \"-\");\n    month = expectMonth(format == formatRfc1123 ? \" \" : \"-\");\n    year = expectNum(\" \");\n    hours = expectNum(\":\");\n    minutes = expectNum(\":\");\n    seconds = expectNum(\" \");\n    expect(\"GMT\");\n  }\n  expectEnd();\n  return new DateTime.utc(year, month + 1, day, hours, minutes, seconds, 0);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpDate-class.html",
            "desc": "<p>Utility functions for working with dates with HTTP specific date\nformats.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpDate"
        },
        {
            "name": "dart:io.HttpException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "uri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HttpException\/HttpException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HttpException(this.message, {this.uri});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HttpException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  var b = new StringBuffer()..write('HttpException: ')..write(message);\n  if (uri != null) {\n    b.write(', uri = $uri');\n  }\n  return b.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.HttpException",
                    "isConstant": false,
                    "href": "dart-io\/HttpException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.HttpException",
                    "isConstant": false,
                    "href": "dart-io\/HttpException\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uri uri\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpException"
        },
        {
            "name": "dart:io.HttpHeaders",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpHeaders",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpHeaders\/HttpHeaders.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "<p>Returns the list of values for the header named <code>name<\/code>. If there\nis no header with the provided name, <code>null<\/code> will be returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; operator [](String name);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds a header value. The header named <code>name<\/code> will have the value\n<code>value<\/code> added to its list of values. Some headers are single\nvalued, and for these adding a value will replace the previous\nvalue. If the value is of type DateTime a HTTP date format will be\napplied. If the value is a <code>List<\/code> each element of the list will\nbe added separately. For all other types the default <code>toString<\/code>\nmethod will be used.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(String name, Object value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Remove all headers. Some headers have system supplied values and\nfor these the system supplied values will still be added to the\ncollection of values for the header.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "forEach",
                    "type": "",
                    "desc": "<p>Enumerates the headers, applying the function <code>f<\/code> to each\nheader. The header name passed in <code>name<\/code> will be all lower\ncase.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "values",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "values",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/forEach.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(String name, List&lt;String&gt; values));<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "noFolding",
                    "type": "",
                    "desc": "<p>Disables folding for the header named <code>name<\/code> when sending the HTTP\nheader. By default, multiple header values are folded into a\nsingle header line by separating the values with commas. The\n'set-cookie' header has folding disabled by default.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/noFolding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void noFolding(String name);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "remove",
                    "type": "",
                    "desc": "<p>Removes a specific value for a header name. Some headers have\nsystem supplied values and for these the system supplied values\nwill still be added to the collection of values for the header.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void remove(String name, Object value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeAll",
                    "type": "",
                    "desc": "<p>Removes all values for the specified header name. Some headers\nhave system supplied values and for these the system supplied\nvalues will still be added to the collection of values for the\nheader.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/removeAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(String name);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "set",
                    "type": "",
                    "desc": "<p>Sets a header. The header named <code>name<\/code> will have all its values\ncleared before the value <code>value<\/code> is added as its value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/set.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void set(String name, Object value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "value",
                    "type": "dart:core.String",
                    "desc": "<p>Convenience method for the value for a single valued header. If\nthere is no header with the provided name, <code>null<\/code> will be\nreturned. If the header has more than one value an exception is\nthrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpHeaders",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpHeaders\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String value(String name);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ACCEPT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ACCEPT = acceptHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ACCEPT",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ACCEPT_CHARSET-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ACCEPT_CHARSET = acceptCharsetHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ACCEPT_CHARSET",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ACCEPT_ENCODING-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ACCEPT_ENCODING = acceptEncodingHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ACCEPT_ENCODING",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ACCEPT_LANGUAGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ACCEPT_LANGUAGE = acceptLanguageHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ACCEPT_LANGUAGE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ACCEPT_RANGES-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ACCEPT_RANGES = acceptRangesHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ACCEPT_RANGES",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/AGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AGE = ageHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "AGE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ALLOW-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ALLOW = allowHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ALLOW",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/AUTHORIZATION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AUTHORIZATION = authorizationHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "AUTHORIZATION",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CACHE_CONTROL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CACHE_CONTROL = cacheControlHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CACHE_CONTROL",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONNECTION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONNECTION = connectionHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONNECTION",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_ENCODING-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_ENCODING = contentEncodingHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_ENCODING",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_LANGUAGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_LANGUAGE = contentLanguageHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_LANGUAGE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_LENGTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_LENGTH = contentLengthHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_LENGTH",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_LOCATION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_LOCATION = contentLocationHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_LOCATION",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_MD5-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_MD5 = contentMD5Header\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_MD5",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_RANGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_RANGE = contentRangeHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_RANGE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/CONTENT_TYPE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const CONTENT_TYPE = contentTypeHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTENT_TYPE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/COOKIE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const COOKIE = cookieHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "COOKIE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/DATE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const DATE = dateHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DATE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ENTITY_HEADERS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ENTITY_HEADERS = entityHeaders\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ENTITY_HEADERS",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ETAG-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ETAG = etagHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ETAG",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/EXPECT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const EXPECT = expectHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "EXPECT",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/EXPIRES-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const EXPIRES = expiresHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "EXPIRES",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/FROM-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FROM = fromHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "FROM",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/GENERAL_HEADERS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const GENERAL_HEADERS = generalHeaders\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "GENERAL_HEADERS",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/HOST-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const HOST = hostHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HOST",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/IF_MATCH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IF_MATCH = ifMatchHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IF_MATCH",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/IF_MODIFIED_SINCE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IF_MODIFIED_SINCE = ifModifiedSinceHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IF_MODIFIED_SINCE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/IF_NONE_MATCH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IF_NONE_MATCH = ifNoneMatchHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IF_NONE_MATCH",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/IF_RANGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IF_RANGE = ifRangeHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IF_RANGE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/IF_UNMODIFIED_SINCE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IF_UNMODIFIED_SINCE = ifUnmodifiedSinceHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IF_UNMODIFIED_SINCE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/LAST_MODIFIED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LAST_MODIFIED = lastModifiedHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LAST_MODIFIED",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/LOCATION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LOCATION = locationHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LOCATION",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/MAX_FORWARDS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const MAX_FORWARDS = maxForwardsHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MAX_FORWARDS",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/PRAGMA-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PRAGMA = pragmaHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PRAGMA",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/PROXY_AUTHENTICATE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PROXY_AUTHENTICATE = proxyAuthenticateHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PROXY_AUTHENTICATE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/PROXY_AUTHORIZATION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const PROXY_AUTHORIZATION = proxyAuthorizationHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PROXY_AUTHORIZATION",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/RANGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RANGE = rangeHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RANGE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/REFERER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const REFERER = refererHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "REFERER",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/REQUEST_HEADERS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const REQUEST_HEADERS = requestHeaders\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "REQUEST_HEADERS",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/RESPONSE_HEADERS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RESPONSE_HEADERS = responseHeaders\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RESPONSE_HEADERS",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/RETRY_AFTER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RETRY_AFTER = retryAfterHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RETRY_AFTER",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/SERVER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SERVER = serverHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SERVER",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/SET_COOKIE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SET_COOKIE = setCookieHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SET_COOKIE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/TE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TE = teHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "TE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/TRAILER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TRAILER = trailerHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "TRAILER",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/TRANSFER_ENCODING-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const TRANSFER_ENCODING = transferEncodingHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "TRANSFER_ENCODING",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/UPGRADE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const UPGRADE = upgradeHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "UPGRADE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/USER_AGENT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const USER_AGENT = userAgentHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "USER_AGENT",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/VARY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const VARY = varyHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "VARY",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/VIA-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const VIA = viaHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "VIA",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/WARNING-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const WARNING = warningHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WARNING",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/WWW_AUTHENTICATE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const WWW_AUTHENTICATE = wwwAuthenticateHeader\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WWW_AUTHENTICATE",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/acceptCharsetHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const acceptCharsetHeader = \"accept-charset\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "acceptCharsetHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/acceptEncodingHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const acceptEncodingHeader = \"accept-encoding\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "acceptEncodingHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/acceptHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const acceptHeader = \"accept\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "acceptHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/acceptLanguageHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const acceptLanguageHeader = \"accept-language\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "acceptLanguageHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/acceptRangesHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const acceptRangesHeader = \"accept-ranges\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "acceptRangesHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ageHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ageHeader = \"age\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ageHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/allowHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const allowHeader = \"allow\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "allowHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/authorizationHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const authorizationHeader = \"authorization\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "authorizationHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/cacheControlHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const cacheControlHeader = \"cache-control\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "cacheControlHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "chunkedTransferEncoding",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets the chunked transfer encoding header value.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/chunkedTransferEncoding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool chunkedTransferEncoding\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/connectionHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const connectionHeader = \"connection\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "connectionHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentEncodingHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentEncodingHeader = \"content-encoding\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentEncodingHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentLanguageHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentLanguageHeader = \"content-language\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentLanguageHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "contentLength",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the content length header value.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/contentLength.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int contentLength\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentLengthHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentLengthHeader = \"content-length\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentLengthHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentLocationHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentLocationHeader = \"content-location\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentLocationHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentMD5Header-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentMD5Header = \"content-md5\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentMD5Header",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentRangeHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentRangeHeader = \"content-range\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentRangeHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "contentType",
                    "type": "dart:io.ContentType",
                    "types": [],
                    "desc": "<p>Gets and sets the content type. Note that the content type in the\nheader will only be updated if this field is set\ndirectly. Mutating the returned current value will have no\neffect.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/contentType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ContentType contentType\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/contentTypeHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const contentTypeHeader = \"content-type\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "contentTypeHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/cookieHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const cookieHeader = \"cookie\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "cookieHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "date",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>Gets and sets the date. The value of this property will\nreflect the 'date' header.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/date.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateTime date\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/dateHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const dateHeader = \"date\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "dateHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/entityHeaders-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const entityHeaders = const [\n  allowHeader,\n  contentEncodingHeader,\n  contentLanguageHeader,\n  contentLengthHeader,\n  contentLocationHeader,\n  contentMD5Header,\n  contentRangeHeader,\n  contentTypeHeader,\n  expiresHeader,\n  lastModifiedHeader\n]\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "entityHeaders",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/etagHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const etagHeader = \"etag\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "etagHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/expectHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const expectHeader = \"expect\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "expectHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "expires",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>Gets and sets the expiry date. The value of this property will\nreflect the 'expires' header.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/expires.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateTime expires\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/expiresHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const expiresHeader = \"expires\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "expiresHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/fromHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const fromHeader = \"from\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "fromHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/generalHeaders-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const generalHeaders = const [\n  cacheControlHeader,\n  connectionHeader,\n  dateHeader,\n  pragmaHeader,\n  trailerHeader,\n  transferEncodingHeader,\n  upgradeHeader,\n  viaHeader,\n  warningHeader\n]\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "generalHeaders",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the host part of the 'host' header for the\nconnection.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/host.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String host\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/hostHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const hostHeader = \"host\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "hostHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ifMatchHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ifMatchHeader = \"if-match\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ifMatchHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "ifModifiedSince",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "<p>Gets and sets the \"if-modified-since\" date. The value of this property will\nreflect the \"if-modified-since\" header.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/ifModifiedSince.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateTime ifModifiedSince\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ifModifiedSinceHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ifModifiedSinceHeader = \"if-modified-since\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ifModifiedSinceHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ifNoneMatchHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ifNoneMatchHeader = \"if-none-match\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ifNoneMatchHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ifRangeHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ifRangeHeader = \"if-range\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ifRangeHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/ifUnmodifiedSinceHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ifUnmodifiedSinceHeader = \"if-unmodified-since\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ifUnmodifiedSinceHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/lastModifiedHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const lastModifiedHeader = \"last-modified\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lastModifiedHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/locationHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const locationHeader = \"location\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "locationHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/maxForwardsHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const maxForwardsHeader = \"max-forwards\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "maxForwardsHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "name": "persistentConnection",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets the persistent connection header value.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/persistentConnection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool persistentConnection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the port part of the 'host' header for the\nconnection.<\/p>\n        ",
                    "memberOf": "dart:io.HttpHeaders",
                    "isConstant": false,
                    "href": "dart-io\/HttpHeaders\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int port\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/pragmaHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const pragmaHeader = \"pragma\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pragmaHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/proxyAuthenticateHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const proxyAuthenticateHeader = \"proxy-authenticate\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "proxyAuthenticateHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/proxyAuthorizationHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const proxyAuthorizationHeader = \"proxy-authorization\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "proxyAuthorizationHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/rangeHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const rangeHeader = \"range\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "rangeHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/refererHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const refererHeader = \"referer\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "refererHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/requestHeaders-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const requestHeaders = const [\n  acceptHeader,\n  acceptCharsetHeader,\n  acceptEncodingHeader,\n  acceptLanguageHeader,\n  authorizationHeader,\n  expectHeader,\n  fromHeader,\n  hostHeader,\n  ifMatchHeader,\n  ifModifiedSinceHeader,\n  ifNoneMatchHeader,\n  ifRangeHeader,\n  ifUnmodifiedSinceHeader,\n  maxForwardsHeader,\n  proxyAuthorizationHeader,\n  rangeHeader,\n  refererHeader,\n  teHeader,\n  userAgentHeader\n]\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "requestHeaders",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/responseHeaders-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const responseHeaders = const [\n  acceptRangesHeader,\n  ageHeader,\n  etagHeader,\n  locationHeader,\n  proxyAuthenticateHeader,\n  retryAfterHeader,\n  serverHeader,\n  varyHeader,\n  wwwAuthenticateHeader\n]\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "responseHeaders",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/retryAfterHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const retryAfterHeader = \"retry-after\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "retryAfterHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/serverHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const serverHeader = \"server\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "serverHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/setCookieHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const setCookieHeader = \"set-cookie\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "setCookieHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/teHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const teHeader = \"te\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "teHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/trailerHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const trailerHeader = \"trailer\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "trailerHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/transferEncodingHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const transferEncodingHeader = \"transfer-encoding\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "transferEncodingHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/upgradeHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const upgradeHeader = \"upgrade\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "upgradeHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/userAgentHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const userAgentHeader = \"user-agent\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "userAgentHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/varyHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const varyHeader = \"vary\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "varyHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/viaHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const viaHeader = \"via\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "viaHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/warningHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const warningHeader = \"warning\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "warningHeader",
                    "memberOf": "dart:io.HttpHeaders"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpHeaders\/wwwAuthenticateHeader-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const wwwAuthenticateHeader = \"www-authenticate\"\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "wwwAuthenticateHeader",
                    "memberOf": "dart:io.HttpHeaders"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpHeaders-class.html",
            "desc": "<p>Headers for HTTP requests and responses.<\/p>\n<p>In some situations, headers are immutable:<\/p>\n<ul>\n<li>\n<p>HttpRequest and HttpClientResponse always have immutable headers.<\/p>\n<\/li>\n<li>\n<p>HttpResponse and HttpClientRequest have immutable headers\nfrom the moment the body is written to.<\/p>\n<\/li>\n<\/ul>\n<p>In these situations, the mutating methods throw exceptions.<\/p>\n<p>For all operations on HTTP headers the header name is\ncase-insensitive.<\/p>\n<p>To set the value of a header use the <code>set()<\/code> method:<\/p>\n<pre class=\"language-dart\"><code>request.headers.set(HttpHeaders.cacheControlHeader,\n                    'max-age=3600, must-revalidate');\n<\/code><\/pre>\n<p>To retrieve the value of a header use the <code>value()<\/code> method:<\/p>\n<pre class=\"language-dart\"><code>print(request.headers.value(HttpHeaders.userAgentHeader));\n<\/code><\/pre>\n<p>An HttpHeaders object holds a list of values for each name\nas the standard allows. In most cases a name holds only a single value,\nThe most common mode of operation is to use <code>set()<\/code> for setting a value,\nand <code>value()<\/code> for retrieving a value.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpHeaders"
        },
        {
            "name": "dart:io.HttpOverrides",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpOverrides",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpOverrides",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpOverrides\/HttpOverrides.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "createHttpClient",
                    "type": "dart:io.HttpClient",
                    "desc": "<p>Returns a new <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a> using the given <code>context<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>new HttpClient<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpOverrides\/createHttpClient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HttpClient createHttpClient(SecurityContext context) {\n  return new _HttpClient(context);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "findProxyFromEnvironment",
                    "type": "dart:core.String",
                    "desc": "<p>Resolves the proxy server to be used for HTTP connections.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>HttpClient.findProxyFromEnvironment<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpOverrides\/findProxyFromEnvironment.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String findProxyFromEnvironment(Uri url, Map&lt;String, String&gt; environment) {\n  return _HttpClient._findProxyFromEnvironment(url, environment);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runWithHttpOverrides",
                    "type": "",
                    "desc": "<p>Runs <code>body<\/code> in a fresh <a href=\"dart-async\/Zone-class.html\">Zone<\/a> using the overrides found in <code>overrides<\/code>.<\/p>\n<p>Note that <code>overrides<\/code> should be an instance of a class that extends\n<a href=\"dart-io\/HttpOverrides-class.html\">HttpOverrides<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "body",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "overrides",
                            "type": "dart:io.HttpOverrides",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "zoneSpecification",
                            "type": "dart:async.ZoneSpecification",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpOverrides\/runWithHttpOverrides.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static R runWithHttpOverrides&lt;R&gt;(R body(), HttpOverrides overrides,\n    {ZoneSpecification zoneSpecification, Function onError}) {\n  return _asyncRunZoned&lt;R&gt;(body,\n      zoneValues: {_httpOverridesToken: overrides},\n      zoneSpecification: zoneSpecification,\n      onError: onError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "runZoned",
                    "type": "",
                    "desc": "<p>Runs <code>body<\/code> in a fresh <a href=\"dart-async\/Zone-class.html\">Zone<\/a> using the provided overrides.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "body",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "createHttpClient",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "uri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "zoneSpecification",
                            "type": "dart:async.ZoneSpecification",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpOverrides\/runZoned.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static R runZoned&lt;R&gt;(R body(),\n    {HttpClient Function(SecurityContext) createHttpClient,\n    String Function(Uri uri, Map&lt;String, String&gt; environment)\n        findProxyFromEnvironment,\n    ZoneSpecification zoneSpecification,\n    Function onError}) {\n  HttpOverrides overrides =\n      new _HttpOverridesScope(createHttpClient, findProxyFromEnvironment);\n  return _asyncRunZoned&lt;R&gt;(body,\n      zoneValues: {_httpOverridesToken: overrides},\n      zoneSpecification: zoneSpecification,\n      onError: onError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "current",
                    "type": "dart:io.HttpOverrides",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.HttpOverrides",
                    "isConstant": false,
                    "href": "dart-io\/HttpOverrides\/current.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static HttpOverrides get current {\n  return Zone.current[_httpOverridesToken] ?? _global;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "global",
                    "type": "",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-io\/HttpOverrides-class.html\">HttpOverrides<\/a> to use in the root <a href=\"dart-async\/Zone-class.html\">Zone<\/a>.<\/p>\n<p>These are the <a href=\"dart-io\/HttpOverrides-class.html\">HttpOverrides<\/a> that will be used in the root Zone, and in\nZone's that do not set <a href=\"dart-io\/HttpOverrides-class.html\">HttpOverrides<\/a> and whose ancestors up to the root\nZone do not set <a href=\"dart-io\/HttpOverrides-class.html\">HttpOverrides<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpOverrides",
                    "isConstant": false,
                    "href": "dart-io\/HttpOverrides\/global.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static set global(HttpOverrides overrides) {\n  _global = overrides;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpOverrides-class.html",
            "desc": "<p>This class facilitates overriding <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a> with a mock implementation.\nIt should be extended by another class in client code with overrides\nthat construct a mock implementation. The implementation in this base class\ndefaults to the actual <a href=\"dart-io\/HttpClient-class.html\">HttpClient<\/a> implementation. For example:<\/p>\n<pre class=\"language-dart\"><code>class MyHttpClient implements HttpClient {\n  ...\n  \/\/ An implementation of the HttpClient interface\n  ...\n}\n\nmain() {\n  HttpOverrides.runZoned(() {\n    ...\n    \/\/ Operations will use MyHttpClient instead of the real HttpClient\n    \/\/ implementation whenever HttpClient is used.\n    ...\n  }, createHttpClient: (SecurityContext c) =&gt; new MyHttpClient(c));\n}\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpOverrides"
        },
        {
            "name": "dart:io.HttpRequest",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpRequest",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpRequest",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpRequest\/HttpRequest.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "certificate",
                    "type": "dart:io.X509Certificate",
                    "types": [],
                    "desc": "<p>The client certificate of the client making the request.<\/p>\n<p>This value is null if the connection is not a secure TLS or SSL connection,\nor if the server does not request a client certificate, or if the client\ndoes not provide one.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/certificate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">X509Certificate get certificate;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "connectionInfo",
                    "type": "dart:io.HttpConnectionInfo",
                    "types": [],
                    "desc": "<p>Information about the client connection.<\/p>\n<p>Returns <code>null<\/code> if the socket is not available.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/connectionInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpConnectionInfo get connectionInfo;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "contentLength",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The content length of the request body.<\/p>\n<p>If the size of the request body is not known in advance,\nthis value is -1.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/contentLength.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get contentLength;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "cookies",
                    "type": "dart:core.List<dart:io.Cookie>",
                    "types": [
                        "dart:core.List",
                        "dart:io.Cookie"
                    ],
                    "desc": "<p>The cookies in the request, from the Cookie headers.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/cookies.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Cookie&gt; get cookies;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "headers",
                    "type": "dart:io.HttpHeaders",
                    "types": [],
                    "desc": "<p>The request headers.<\/p>\n<p>The returned <a href=\"dart-io\/HttpHeaders-class.html\">HttpHeaders<\/a> are immutable.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/headers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpHeaders get headers;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The method, such as 'GET' or 'POST', for the request.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/method.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get method;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "persistentConnection",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>The persistent connection state signaled by the client.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/persistentConnection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get persistentConnection;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "protocolVersion",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The HTTP protocol version used in the request,\neither \"1.0\" or \"1.1\".<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/protocolVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get protocolVersion;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "requestedUri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The requested URI for the request.<\/p>\n<p>The returned URI is reconstructed by using http-header fields, to access\notherwise lost information, e.g. host and scheme.<\/p>\n<p>To reconstruct the scheme, first 'X-Forwarded-Proto' is checked, and then\nfalling back to server type.<\/p>\n<p>To reconstruct the host, first 'X-Forwarded-Host' is checked, then 'Host'\nand finally calling back to server.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/requestedUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get requestedUri;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "response",
                    "type": "dart:io.HttpResponse",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a> object, used for sending back the response to the\nclient.<\/p>\n<p>If the <a href=\"dart-io\/HttpRequest\/contentLength.html\">contentLength<\/a> of the body isn't 0, and the body isn't being read,\nany write calls on the <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a> automatically drain the request\nbody.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/response.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpResponse get response;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "session",
                    "type": "dart:io.HttpSession",
                    "types": [],
                    "desc": "<p>The session for the given request.<\/p>\n<p>If the session is\nbeing initialized by this call, <code>isNew<\/code> is true for the returned\nsession.\nSee <a href=\"dart-io\/HttpServer\/sessionTimeout.html\">HttpServer.sessionTimeout<\/a> on how to change default timeout.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/session.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpSession get session;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The URI for the request.<\/p>\n<p>This provides access to the\npath and query string for the request.<\/p>\n        ",
                    "memberOf": "dart:io.HttpRequest",
                    "isConstant": false,
                    "href": "dart-io\/HttpRequest\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpRequest-class.html",
            "desc": "<p>A server-side object\nthat contains the content of and information about an HTTP request.<\/p>\n<p><strong>Note<\/strong>: Check out the\n<a href=\"https:\/\/pub.dartlang.org\/packages\/http_server\">http_server<\/a>\npackage, which makes working with the low-level\ndart:io HTTP server subsystem easier.<\/p>\n<p><code>HttpRequest<\/code> objects are generated by an <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a>,\nwhich listens for HTTP requests on a specific host and port.\nFor each request received, the HttpServer, which is a <a href=\"dart-async\/Stream-class.html\">Stream<\/a>,\ngenerates an <code>HttpRequest<\/code> object and adds it to the stream.<\/p>\n<p>An <code>HttpRequest<\/code> object delivers the body content of the request\nas a stream of byte lists.\nThe object also contains information about the request,\nsuch as the method, URI, and headers.<\/p>\n<p>In the following code, an HttpServer listens\nfor HTTP requests. When the server receives a request,\nit uses the HttpRequest object's <code>method<\/code> property to dispatch requests.<\/p>\n<pre class=\"language-dart\"><code>final HOST = InternetAddress.loopbackIPv4;\nfinal PORT = 80;\n\nHttpServer.bind(HOST, PORT).then((_server) {\n  _server.listen((HttpRequest request) {\n    switch (request.method) {\n      case 'GET':\n        handleGetRequest(request);\n        break;\n      case 'POST':\n        ...\n    }\n  },\n  onError: handleError);    \/\/ listen() failed.\n}).catchError(handleError);\n<\/code><\/pre>\n<p>An HttpRequest object provides access to the associated <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a>\nobject through the response property.\nThe server writes its response to the body of the HttpResponse object.\nFor example, here's a function that responds to a request:<\/p>\n<pre class=\"language-dart\"><code>void handleGetRequest(HttpRequest req) {\n  HttpResponse res = req.response;\n  res.write('Received request ${req.method}: ${req.uri.path}');\n  res.close();\n}\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpRequest"
        },
        {
            "name": "dart:io.HttpResponse",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpResponse",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpResponse",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpResponse\/HttpResponse.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "detachSocket",
                    "type": "dart:async.Future<dart:io.Socket>",
                    "desc": "<p>Detaches the underlying socket from the HTTP server. When the\nsocket is detached the HTTP server will no longer perform any\noperations on it.<\/p>\n<p>This is normally used when a HTTP upgrade request is received\nand the communication should continue with a different protocol.<\/p>\n<p>If <code>writeHeaders<\/code> is <code>true<\/code>, the status line and <a href=\"dart-io\/HttpResponse\/headers.html\">headers<\/a> will be written\nto the socket before it's detached. If <code>false<\/code>, the socket is detached\nimmediately, without any data written to the socket. Default is <code>true<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpResponse",
                    "sig": "",
                    "params": [
                        {
                            "name": "writeHeaders",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpResponse\/detachSocket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Socket&gt; detachSocket({bool writeHeaders: true});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Socket"
                    ]
                },
                {
                    "name": "redirect",
                    "type": "dart:async.Future",
                    "desc": "<p>Respond with a redirect to <code>location<\/code>.<\/p>\n<p>The URI in <code>location<\/code> should be absolute, but there are no checks\nto enforce that.<\/p>\n<p>By default the HTTP status code <code>HttpStatus.movedTemporarily<\/code>\n(<code>302<\/code>) is used for the redirect, but an alternative one can be\nspecified using the <code>status<\/code> argument.<\/p>\n<p>This method will also call <code>close<\/code>, and the returned future is\nthe future returned by <code>close<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpResponse",
                    "sig": "",
                    "params": [
                        {
                            "name": "location",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "status",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpResponse\/redirect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future redirect(Uri location, {int status: HttpStatus.movedTemporarily});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bufferOutput",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets or sets if the <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a> should buffer output.<\/p>\n<p>Default value is <code>true<\/code>.<\/p>\n<p><strong>Note<\/strong>: Disabling buffering of the output can result in very poor\nperformance, when writing many small chunks.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/bufferOutput.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool bufferOutput\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "connectionInfo",
                    "type": "dart:io.HttpConnectionInfo",
                    "types": [],
                    "desc": "<p>Gets information about the client connection. Returns <code>null<\/code> if the\nsocket is not available.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/connectionInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpConnectionInfo get connectionInfo;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "contentLength",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the content length of the response. If the size of\nthe response is not known in advance set the content length to\n-1, which is also the default if not set.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/contentLength.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int contentLength\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "cookies",
                    "type": "dart:core.List<dart:io.Cookie>",
                    "types": [
                        "dart:core.List",
                        "dart:io.Cookie"
                    ],
                    "desc": "<p>Cookies to set in the client (in the 'set-cookie' header).<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/cookies.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Cookie&gt; get cookies;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "deadline",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>Set and get the <a href=\"dart-io\/HttpResponse\/deadline.html\">deadline<\/a> for the response. The deadline is timed from the\ntime it's set. Setting a new deadline will override any previous deadline.\nWhen a deadline is exceeded, the response will be closed and any further\ndata ignored.<\/p>\n<p>To disable a deadline, set the <a href=\"dart-io\/HttpResponse\/deadline.html\">deadline<\/a> to <code>null<\/code>.<\/p>\n<p>The <a href=\"dart-io\/HttpResponse\/deadline.html\">deadline<\/a> is <code>null<\/code> by default.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/deadline.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration deadline\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "headers",
                    "type": "dart:io.HttpHeaders",
                    "types": [],
                    "desc": "<p>Returns the response headers.<\/p>\n<p>The response headers can be modified until the response body is\nwritten to or closed. After that they become immutable.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/headers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpHeaders get headers;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "persistentConnection",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Gets and sets the persistent connection state. The initial value\nof this property is the persistent connection state from the\nrequest.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/persistentConnection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool persistentConnection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "reasonPhrase",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the reason phrase. If no reason phrase is explicitly\nset a default reason phrase is provided.<\/p>\n<p>The reason phrase must be set before the body is written\nto. Setting the reason phrase after writing to the response body\nor closing the response will throw a <code>StateError<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/reasonPhrase.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String reasonPhrase\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "statusCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Gets and sets the status code. Any integer value is accepted. For\nthe official HTTP status codes use the fields from\n<a href=\"dart-io\/HttpStatus-class.html\">HttpStatus<\/a>. If no status code is explicitly set the default\nvalue <a href=\"dart-io\/HttpStatus\/ok-constant.html\">HttpStatus.ok<\/a> is used.<\/p>\n<p>The status code must be set before the body is written\nto. Setting the status code after writing to the response body or\nclosing the response will throw a <code>StateError<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpResponse",
                    "isConstant": false,
                    "href": "dart-io\/HttpResponse\/statusCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int statusCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpResponse-class.html",
            "desc": "<p>An HTTP response, which returns the headers and data\nfrom the server to the client in response to an HTTP request.<\/p>\n<p>Every HttpRequest object provides access to the associated <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a>\nobject through the <code>response<\/code> property.\nThe server sends its response to the client by writing to the\nHttpResponse object.<\/p>\n<h2 id=\"writing-the-response\">Writing the response<\/h2>\n<p>This class implements <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>.\nAfter the header has been set up, the methods\nfrom IOSink, such as <code>writeln()<\/code>, can be used to write\nthe body of the HTTP response.\nUse the <code>close()<\/code> method to close the response and send it to the client.<\/p>\n<pre class=\"language-dart\"><code>server.listen((HttpRequest request) {\n  request.response.write('Hello, world!');\n  request.response.close();\n});\n<\/code><\/pre>\n<p>When one of the IOSink methods is used for the\nfirst time, the request header is sent. Calling any methods that\nchange the header after it is sent throws an exception.<\/p>\n<h2 id=\"setting-the-headers\">Setting the headers<\/h2>\n<p>The HttpResponse object has a number of properties for setting up\nthe HTTP headers of the response.\nWhen writing string data through the IOSink, the encoding used\nis determined from the \"charset\" parameter of the\n\"Content-Type\" header.<\/p>\n<pre class=\"language-dart\"><code>HttpResponse response = ...\nresponse.headers.contentType\n    = new ContentType(\"application\", \"json\", charset: \"utf-8\");\nresponse.write(...);  \/\/ Strings written will be UTF-8 encoded.\n<\/code><\/pre>\n<p>If no charset is provided the default of ISO-8859-1 (Latin 1) will\nbe used.<\/p>\n<pre class=\"language-dart\"><code>HttpResponse response = ...\nresponse.headers.add(HttpHeaders.contentTypeHeader, \"text\/plain\");\nresponse.write(...);  \/\/ Strings written will be ISO-8859-1 encoded.\n<\/code><\/pre>\n<p>An exception is thrown if you use the <code>write()<\/code> method\nwhile an unsupported content-type is set.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpResponse"
        },
        {
            "name": "dart:io.HttpServer",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "bind",
                    "type": "dart:async.Future<dart:io.HttpServer>",
                    "desc": "<p>Starts listening for HTTP requests on the specified <code>address<\/code> and\n<code>port<\/code>.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/HttpServer\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <code>v6Only<\/code> to set\nversion 6 only. However, if the address is\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>, only IP version 6 (IPv6) connections\nwill be accepted.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional HttpServer\nobjects can bind to the same combination of <code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.\nIf <code>shared<\/code> is <code>true<\/code> and more <code>HttpServer<\/code>s from this isolate or other\nisolates are bound to the port, then the incoming connections will be\ndistributed among all the bound <code>HttpServer<\/code>s. Connections can be\ndistributed over multiple isolates this way.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backlog",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "v6Only",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shared",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpServer\/bind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;HttpServer&gt; bind(address, int port,\n        {int backlog: 0, bool v6Only: false, bool shared: false}) =&gt;\n    _HttpServer.bind(address, port, backlog, v6Only, shared);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpServer"
                    ]
                },
                {
                    "name": "bindSecure",
                    "type": "dart:async.Future<dart:io.HttpServer>",
                    "desc": "<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/HttpServer\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <code>v6Only<\/code> to set\nversion 6 only.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>If <code>requestClientCertificate<\/code> is true, the server will\nrequest clients to authenticate with a client certificate.\nThe server will advertise the names of trusted issuers of client\ncertificates, getting them from a <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a>, where they have been\nset using <a href=\"dart-io\/SecurityContext\/setClientAuthorities.html\">SecurityContext.setClientAuthorities<\/a>.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional HttpServer\nobjects can bind to the same combination of <code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.\nIf <code>shared<\/code> is <code>true<\/code> and more <code>HttpServer<\/code>s from this isolate or other\nisolates are bound to the port, then the incoming connections will be\ndistributed among all the bound <code>HttpServer<\/code>s. Connections can be\ndistributed over multiple isolates this way.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backlog",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "v6Only",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shared",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpServer\/bindSecure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;HttpServer&gt; bindSecure(\n        address, int port, SecurityContext context,\n        {int backlog: 0,\n        bool v6Only: false,\n        bool requestClientCertificate: false,\n        bool shared: false}) =&gt;\n    _HttpServer.bindSecure(address, port, context, backlog, v6Only,\n        requestClientCertificate, shared);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.HttpServer"
                    ]
                },
                {
                    "name": "close",
                    "type": "dart:async.Future",
                    "desc": "<p>Permanently stops this <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a> from listening for new\nconnections.  This closes the <a href=\"dart-async\/Stream-class.html\">Stream<\/a> of <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a>s with a\ndone event. The returned future completes when the server is\nstopped. For a server started using <a href=\"dart-io\/HttpServer\/bind.html\">bind<\/a> or <a href=\"dart-io\/HttpServer\/bindSecure.html\">bindSecure<\/a> this\nmeans that the port listened on no longer in use.<\/p>\n<p>If <code>force<\/code> is <code>true<\/code>, active connections will be closed immediately.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "force",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpServer\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close({bool force: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "connectionsInfo",
                    "type": "dart:io.HttpConnectionsInfo",
                    "desc": "<p>Returns an <a href=\"dart-io\/HttpConnectionsInfo-class.html\">HttpConnectionsInfo<\/a> object summarizing the number of\ncurrent connections handled by the server.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpServer",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HttpServer\/connectionsInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HttpConnectionsInfo connectionsInfo();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HttpServer.listenOn",
                    "type": "",
                    "desc": "<p>Attaches the HTTP server to an existing <a href=\"dart-io\/ServerSocket-class.html\">ServerSocket<\/a>. When the\n<a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a> is closed, the <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a> will just detach itself,\nclosing current connections but not closing <code>serverSocket<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpServer",
                    "sig": "",
                    "params": [
                        {
                            "name": "serverSocket",
                            "type": "dart:io.ServerSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/HttpServer\/HttpServer.listenOn.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HttpServer.listenOn(ServerSocket serverSocket) =&gt;\n    new _HttpServer.listenOn(serverSocket);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the address that the server is listening on. This can be\nused to get the actual address used, when the address is fetched by\na lookup from a hostname.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "autoCompress",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a> should compress the content, if possible.<\/p>\n<p>The content can only be compressed when the response is using\nchunked Transfer-Encoding and the incoming request has <code>gzip<\/code>\nas an accepted encoding in the Accept-Encoding header.<\/p>\n<p>The default value is <code>false<\/code> (compression disabled).\nTo enable, set <code>autoCompress<\/code> to <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/autoCompress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool autoCompress\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultResponseHeaders",
                    "type": "dart:io.HttpHeaders",
                    "types": [],
                    "desc": "<p>Default set of headers added to all response objects.<\/p>\n<p>By default the following headers are in this set:<\/p>\n<pre class=\"language-dart\"><code>Content-Type: text\/plain; charset=utf-8\nX-Frame-Options: SAMEORIGIN\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 1; mode=block\n<\/code><\/pre>\n<p>If the <code>Server<\/code> header is added here and the <code>serverHeader<\/code> is set as\nwell then the value of <code>serverHeader<\/code> takes precedence.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/defaultResponseHeaders.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">HttpHeaders get defaultResponseHeaders;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "idleTimeout",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>Gets or sets the timeout used for idle keep-alive connections. If no\nfurther request is seen within <a href=\"dart-io\/HttpServer\/idleTimeout.html\">idleTimeout<\/a> after the previous request was\ncompleted, the connection is dropped.<\/p>\n<p>Default is 120 seconds.<\/p>\n<p>Note that it may take up to <code>2 * idleTimeout<\/code> before a idle connection is\naborted.<\/p>\n<p>To disable, set <a href=\"dart-io\/HttpServer\/idleTimeout.html\">idleTimeout<\/a> to <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/idleTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration idleTimeout\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port that the server is listening on. This can be\nused to get the actual port used when a value of 0 for <code>port<\/code> is\nspecified in the <a href=\"dart-io\/HttpServer\/bind.html\">bind<\/a> or <a href=\"dart-io\/HttpServer\/bindSecure.html\">bindSecure<\/a> call.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "serverHeader",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets and sets the default value of the <code>Server<\/code> header for all responses\ngenerated by this <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a>.<\/p>\n<p>If <a href=\"dart-io\/HttpServer\/serverHeader.html\">serverHeader<\/a> is <code>null<\/code>, no <code>Server<\/code> header will be added to each\nresponse.<\/p>\n<p>The default value is <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/serverHeader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String serverHeader\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "sessionTimeout",
                    "type": "",
                    "types": [],
                    "desc": "<p>Sets the timeout, in seconds, for sessions of this <a href=\"dart-io\/HttpServer-class.html\">HttpServer<\/a>.\nThe default timeout is 20 minutes.<\/p>\n        ",
                    "memberOf": "dart:io.HttpServer",
                    "isConstant": false,
                    "href": "dart-io\/HttpServer\/sessionTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">set sessionTimeout(int timeout);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpServer-class.html",
            "desc": "<p>A server that delivers content, such as web pages, using the HTTP protocol.<\/p>\n<p>The HttpServer is a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> that provides <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> objects. Each\nHttpRequest has an associated <a href=\"dart-io\/HttpResponse-class.html\">HttpResponse<\/a> object.\nThe server responds to a request by writing to that HttpResponse object.\nThe following example shows how to bind an HttpServer to an IPv6\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> on port 80 (the standard port for HTTP servers)\nand how to listen for requests.\nPort 80 is the default HTTP port. However, on most systems accessing\nthis requires super-user privileges. For local testing consider\nusing a non-reserved port (1024 and above).<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  HttpServer\n      .bind(InternetAddress.anyIPv6, 80)\n      .then((server) {\n        server.listen((HttpRequest request) {\n          request.response.write('Hello, world!');\n          request.response.close();\n        });\n      });\n}\n<\/code><\/pre>\n<p>Incomplete requests, in which all or part of the header is missing, are\nignored, and no exceptions or HttpRequest objects are generated for them.\nLikewise, when writing to an HttpResponse, any <a href=\"dart-io\/Socket-class.html\">Socket<\/a> exceptions are\nignored and any future writes are ignored.<\/p>\n<p>The HttpRequest exposes the request headers and provides the request body,\nif it exists, as a Stream of data. If the body is unread, it is drained\nwhen the server writes to the HttpResponse or closes it.<\/p>\n<h2 id=\"bind-with-a-secure-https-connection\">Bind with a secure HTTPS connection<\/h2>\n<p>Use <a href=\"dart-io\/HttpServer\/bindSecure.html\">bindSecure<\/a> to create an HTTPS server.<\/p>\n<p>The server presents a certificate to the client. The certificate\nchain and the private key are set in the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a>\nobject that is passed to <a href=\"dart-io\/HttpServer\/bindSecure.html\">bindSecure<\/a>.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\nimport \"dart:isolate\";\n\nmain() {\n  SecurityContext context = new SecurityContext();\n  var chain =\n      Platform.script.resolve('certificates\/server_chain.pem')\n      .toFilePath();\n  var key =\n      Platform.script.resolve('certificates\/server_key.pem')\n      .toFilePath();\n  context.useCertificateChain(chain);\n  context.usePrivateKey(key, password: 'dartdart');\n\n  HttpServer\n      .bindSecure(InternetAddress.anyIPv6,\n                  443,\n                  context)\n      .then((server) {\n        server.listen((HttpRequest request) {\n          request.response.write('Hello, world!');\n          request.response.close();\n        });\n      });\n}\n<\/code><\/pre>\n<p> The certificates and keys are PEM files, which can be created and\n managed with the tools in OpenSSL.<\/p>\n<h2 id=\"connect-to-a-server-socket\">Connect to a server socket<\/h2>\n<p>You can use the <a href=\"dart-io\/HttpServer\/HttpServer.listenOn.html\">listenOn<\/a> constructor to attach an HTTP server to\na <a href=\"dart-io\/ServerSocket-class.html\">ServerSocket<\/a>.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  ServerSocket.bind(InternetAddress.anyIPv6, 80)\n    .then((serverSocket) {\n      HttpServer httpserver = new HttpServer.listenOn(serverSocket);\n      serverSocket.listen((Socket socket) {\n        socket.write('Hello, client.');\n      });\n    });\n}\n<\/code><\/pre>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<ul>\n<li>\n<p>HttpServer is a Stream. Refer to the <a href=\"dart-async\/Stream-class.html\">Stream<\/a> class for information\nabout the streaming qualities of an HttpServer.\nPausing the subscription of the stream, pauses at the OS level.<\/p>\n<\/li>\n<li>\n<p>The <a href=\"https:\/\/pub.dartlang.org\/packages\/shelf\">shelf<\/a>\npackage on pub.dartlang.org contains a set of high-level classes that,\ntogether with this class, makes it easy to provide content through HTTP\nservers.<\/p>\n<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpServer"
        },
        {
            "name": "dart:io.HttpSession",
            "extends": [],
            "memberOf": "dart:io",
            "events": [
                {
                    "name": "onTimeout",
                    "type": "",
                    "desc": "<p>Sets a callback that will be called when the session is timed out.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [
                        {
                            "name": "callback",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/HttpSession\/onTimeout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">void set onTimeout(void callback());<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false,
                    "types": []
                }
            ],
            "methods": [
                {
                    "name": "HttpSession",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpSession",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpSession\/HttpSession.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "destroy",
                    "type": "",
                    "desc": "<p>Destroys the session. This will terminate the session and any further\nconnections with this id will be given a new id and session.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.HttpSession",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/HttpSession\/destroy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void destroy();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "id",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the id for the current session.<\/p>\n        ",
                    "memberOf": "dart:io.HttpSession",
                    "isConstant": false,
                    "href": "dart-io\/HttpSession\/id.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get id;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNew",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Is true if the session has not been sent to the client yet.<\/p>\n        ",
                    "memberOf": "dart:io.HttpSession",
                    "isConstant": false,
                    "href": "dart-io\/HttpSession\/isNew.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNew;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpSession-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpSession"
        },
        {
            "name": "dart:io.HttpStatus",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "HttpStatus",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.HttpStatus",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/HttpStatus\/HttpStatus.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/ACCEPTED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int ACCEPTED = accepted\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ACCEPTED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/BAD_GATEWAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int BAD_GATEWAY = badGateway\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "BAD_GATEWAY",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/BAD_REQUEST-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int BAD_REQUEST = badRequest\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "BAD_REQUEST",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/CONFLICT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CONFLICT = conflict\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONFLICT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/CONTINUE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CONTINUE = continue_\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONTINUE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/CREATED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CREATED = created\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CREATED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/EXPECTATION_FAILED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int EXPECTATION_FAILED = expectationFailed\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "EXPECTATION_FAILED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/FORBIDDEN-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int FORBIDDEN = forbidden\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "FORBIDDEN",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/FOUND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int FOUND = found\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "FOUND",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/GATEWAY_TIMEOUT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int GATEWAY_TIMEOUT = gatewayTimeout\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "GATEWAY_TIMEOUT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/GONE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int GONE = gone\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "GONE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/HTTP_VERSION_NOT_SUPPORTED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int HTTP_VERSION_NOT_SUPPORTED = httpVersionNotSupported\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "HTTP_VERSION_NOT_SUPPORTED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/INTERNAL_SERVER_ERROR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int INTERNAL_SERVER_ERROR = internalServerError\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "INTERNAL_SERVER_ERROR",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/LENGTH_REQUIRED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int LENGTH_REQUIRED = lengthRequired\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "LENGTH_REQUIRED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/METHOD_NOT_ALLOWED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int METHOD_NOT_ALLOWED = methodNotAllowed\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "METHOD_NOT_ALLOWED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/MOVED_PERMANENTLY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MOVED_PERMANENTLY = movedPermanently\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MOVED_PERMANENTLY",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/MOVED_TEMPORARILY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MOVED_TEMPORARILY = movedTemporarily\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MOVED_TEMPORARILY",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/MULTIPLE_CHOICES-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MULTIPLE_CHOICES = multipleChoices\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MULTIPLE_CHOICES",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NETWORK_CONNECT_TIMEOUT_ERROR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NETWORK_CONNECT_TIMEOUT_ERROR = networkConnectTimeoutError\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NETWORK_CONNECT_TIMEOUT_ERROR",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NON_AUTHORITATIVE_INFORMATION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NON_AUTHORITATIVE_INFORMATION = nonAuthoritativeInformation\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NON_AUTHORITATIVE_INFORMATION",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NOT_ACCEPTABLE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NOT_ACCEPTABLE = notAcceptable\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NOT_ACCEPTABLE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NOT_FOUND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NOT_FOUND = notFound\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NOT_FOUND",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NOT_IMPLEMENTED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NOT_IMPLEMENTED = notImplemented\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NOT_IMPLEMENTED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NOT_MODIFIED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NOT_MODIFIED = notModified\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NOT_MODIFIED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/NO_CONTENT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NO_CONTENT = noContent\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NO_CONTENT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/OK-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int OK = ok\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "OK",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/PARTIAL_CONTENT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int PARTIAL_CONTENT = partialContent\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PARTIAL_CONTENT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/PAYMENT_REQUIRED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int PAYMENT_REQUIRED = paymentRequired\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PAYMENT_REQUIRED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/PRECONDITION_FAILED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int PRECONDITION_FAILED = preconditionFailed\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PRECONDITION_FAILED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/PROXY_AUTHENTICATION_REQUIRED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int PROXY_AUTHENTICATION_REQUIRED = proxyAuthenticationRequired\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PROXY_AUTHENTICATION_REQUIRED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/REQUESTED_RANGE_NOT_SATISFIABLE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int REQUESTED_RANGE_NOT_SATISFIABLE =\n    requestedRangeNotSatisfiable\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "REQUESTED_RANGE_NOT_SATISFIABLE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/REQUEST_ENTITY_TOO_LARGE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int REQUEST_ENTITY_TOO_LARGE = requestEntityTooLarge\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "REQUEST_ENTITY_TOO_LARGE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/REQUEST_TIMEOUT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int REQUEST_TIMEOUT = requestTimeout\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "REQUEST_TIMEOUT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/REQUEST_URI_TOO_LONG-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int REQUEST_URI_TOO_LONG = requestUriTooLong\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "REQUEST_URI_TOO_LONG",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/RESET_CONTENT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int RESET_CONTENT = resetContent\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RESET_CONTENT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/SEE_OTHER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int SEE_OTHER = seeOther\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SEE_OTHER",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/SERVICE_UNAVAILABLE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int SERVICE_UNAVAILABLE = serviceUnavailable\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SERVICE_UNAVAILABLE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/SWITCHING_PROTOCOLS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int SWITCHING_PROTOCOLS = switchingProtocols\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SWITCHING_PROTOCOLS",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/TEMPORARY_REDIRECT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int TEMPORARY_REDIRECT = temporaryRedirect\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "TEMPORARY_REDIRECT",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/UNAUTHORIZED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int UNAUTHORIZED = unauthorized\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "UNAUTHORIZED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/UNSUPPORTED_MEDIA_TYPE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int UNSUPPORTED_MEDIA_TYPE = unsupportedMediaType\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "UNSUPPORTED_MEDIA_TYPE",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/UPGRADE_REQUIRED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int UPGRADE_REQUIRED = upgradeRequired\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "UPGRADE_REQUIRED",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/USE_PROXY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int USE_PROXY = useProxy\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "USE_PROXY",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/accepted-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int accepted = 202\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "accepted",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/alreadyReported-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int alreadyReported = 208\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "alreadyReported",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/badGateway-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int badGateway = 502\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "badGateway",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/badRequest-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int badRequest = 400\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "badRequest",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/clientClosedRequest-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int clientClosedRequest = 499\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "clientClosedRequest",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/conflict-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int conflict = 409\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "conflict",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/connectionClosedWithoutResponse-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int connectionClosedWithoutResponse = 444\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "connectionClosedWithoutResponse",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/continue_-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int continue_ = 100\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "continue_",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/created-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int created = 201\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "created",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/expectationFailed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int expectationFailed = 417\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "expectationFailed",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/failedDependency-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int failedDependency = 424\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "failedDependency",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/forbidden-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int forbidden = 403\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "forbidden",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/found-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int found = 302\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "found",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/gatewayTimeout-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int gatewayTimeout = 504\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "gatewayTimeout",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/gone-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int gone = 410\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "gone",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/httpVersionNotSupported-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int httpVersionNotSupported = 505\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "httpVersionNotSupported",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/imUsed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int imUsed = 226\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "imUsed",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/insufficientStorage-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int insufficientStorage = 507\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "insufficientStorage",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/internalServerError-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int internalServerError = 500\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "internalServerError",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/lengthRequired-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int lengthRequired = 411\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "lengthRequired",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/locked-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int locked = 423\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "locked",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/loopDetected-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int loopDetected = 508\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "loopDetected",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/methodNotAllowed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int methodNotAllowed = 405\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "methodNotAllowed",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/misdirectedRequest-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int misdirectedRequest = 421\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "misdirectedRequest",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/movedPermanently-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int movedPermanently = 301\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "movedPermanently",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/movedTemporarily-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int movedTemporarily = 302\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "movedTemporarily",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/multiStatus-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int multiStatus = 207\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "multiStatus",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/multipleChoices-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int multipleChoices = 300\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "multipleChoices",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/networkAuthenticationRequired-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int networkAuthenticationRequired = 511\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "networkAuthenticationRequired",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/networkConnectTimeoutError-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int networkConnectTimeoutError = 599\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "networkConnectTimeoutError",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/noContent-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int noContent = 204\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "noContent",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/nonAuthoritativeInformation-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int nonAuthoritativeInformation = 203\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "nonAuthoritativeInformation",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/notAcceptable-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int notAcceptable = 406\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "notAcceptable",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/notExtended-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int notExtended = 510\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "notExtended",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/notFound-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int notFound = 404\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "notFound",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/notImplemented-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int notImplemented = 501\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "notImplemented",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/notModified-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int notModified = 304\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "notModified",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/ok-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int ok = 200\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ok",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/partialContent-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int partialContent = 206\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "partialContent",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/paymentRequired-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int paymentRequired = 402\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "paymentRequired",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/permanentRedirect-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int permanentRedirect = 308\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "permanentRedirect",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/preconditionFailed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int preconditionFailed = 412\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "preconditionFailed",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/preconditionRequired-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int preconditionRequired = 428\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "preconditionRequired",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/processing-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int processing = 102\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "processing",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/proxyAuthenticationRequired-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int proxyAuthenticationRequired = 407\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "proxyAuthenticationRequired",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/requestEntityTooLarge-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int requestEntityTooLarge = 413\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "requestEntityTooLarge",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/requestHeaderFieldsTooLarge-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int requestHeaderFieldsTooLarge = 431\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "requestHeaderFieldsTooLarge",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/requestTimeout-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int requestTimeout = 408\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "requestTimeout",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/requestUriTooLong-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int requestUriTooLong = 414\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "requestUriTooLong",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/requestedRangeNotSatisfiable-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int requestedRangeNotSatisfiable = 416\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "requestedRangeNotSatisfiable",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/resetContent-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int resetContent = 205\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "resetContent",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/seeOther-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int seeOther = 303\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "seeOther",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/serviceUnavailable-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int serviceUnavailable = 503\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "serviceUnavailable",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/switchingProtocols-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int switchingProtocols = 101\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "switchingProtocols",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/temporaryRedirect-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int temporaryRedirect = 307\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "temporaryRedirect",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/tooManyRequests-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int tooManyRequests = 429\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "tooManyRequests",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/unauthorized-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int unauthorized = 401\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "unauthorized",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/unavailableForLegalReasons-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int unavailableForLegalReasons = 451\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "unavailableForLegalReasons",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/unprocessableEntity-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int unprocessableEntity = 422\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "unprocessableEntity",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/unsupportedMediaType-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int unsupportedMediaType = 415\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "unsupportedMediaType",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/upgradeRequired-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int upgradeRequired = 426\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "upgradeRequired",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/useProxy-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int useProxy = 305\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "useProxy",
                    "memberOf": "dart:io.HttpStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/HttpStatus\/variantAlsoNegotiates-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int variantAlsoNegotiates = 506\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "variantAlsoNegotiates",
                    "memberOf": "dart:io.HttpStatus"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/HttpStatus-class.html",
            "desc": "<p>HTTP status codes.  Exported in dart:io and dart:html.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HttpStatus"
        },
        {
            "name": "dart:io.IOException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "IOException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.IOException",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/IOException\/IOException.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/IOException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"IOException\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/IOException-class.html",
            "desc": "<p>Base class for all IO related exceptions.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IOException"
        },
        {
            "name": "dart:io.IOOverrides",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "IOOverrides",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/IOOverrides\/IOOverrides.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "createDirectory",
                    "type": "dart:io.Directory",
                    "desc": "<p>Creates a new <a href=\"dart-io\/Directory-class.html\">Directory<\/a> object for the given <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>new Directory()<\/code> and <code>new Directory.fromUri()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/createDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory createDirectory(String path) =&gt; new _Directory(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createFile",
                    "type": "dart:io.File",
                    "desc": "<p>Creates a new <a href=\"dart-io\/File-class.html\">File<\/a> object for the given <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>new File()<\/code> and <code>new File.fromUri()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/createFile.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">File createFile(String path) =&gt; new _File(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createLink",
                    "type": "dart:io.Link",
                    "desc": "<p>Returns a new <a href=\"dart-io\/Link-class.html\">Link<\/a> object for the given <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>new Link()<\/code> and <code>new Link.fromUri()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/createLink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Link createLink(String path) =&gt; new _Link(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "fsWatch",
                    "type": "dart:async.Stream<dart:io.FileSystemEvent>",
                    "desc": "<p>Returns a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> of <a href=\"dart-io\/FileSystemEvent-class.html\">FileSystemEvent<\/a>s.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileSystemEntity.watch()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "events",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/fsWatch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;FileSystemEvent&gt; fsWatch(String path, int events, bool recursive) {\n  return _FileSystemWatcher._watch(path, events, recursive);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:io.FileSystemEvent"
                    ]
                },
                {
                    "name": "fsWatchIsSupported",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> when <a href=\"dart-io\/FileSystemEntity\/watch.html\">FileSystemEntity.watch<\/a> is supported.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileSystemEntity.isWatchSupported<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/fsWatchIsSupported.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool fsWatchIsSupported() =&gt; _FileSystemWatcher.isSupported;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "fseGetType",
                    "type": "dart:async.Future<dart:io.FileSystemEntityType>",
                    "desc": "<p>Asynchronously returns the <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a> for <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileSystemEntity.type<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/fseGetType.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;FileSystemEntityType&gt; fseGetType(String path, bool followLinks) {\n  return FileSystemEntity._getTypeRequest(utf8.encode(path), followLinks);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileSystemEntityType"
                    ]
                },
                {
                    "name": "fseGetTypeSync",
                    "type": "dart:io.FileSystemEntityType",
                    "desc": "<p>Returns the <a href=\"dart-io\/FileSystemEntityType-class.html\">FileSystemEntityType<\/a> for <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileSystemEntity.typeSync<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "followLinks",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/fseGetTypeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileSystemEntityType fseGetTypeSync(String path, bool followLinks) {\n  return FileSystemEntity._getTypeSyncHelper(utf8.encode(path), followLinks);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "fseIdentical",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Asynchronously returns <code>true<\/code> if <code>path1<\/code> and <code>path2<\/code> are paths to the\nsame file system object.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileSystemEntity.identical<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/fseIdentical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; fseIdentical(String path1, String path2) {\n  return FileSystemEntity._identical(path1, path2);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "fseIdenticalSync",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if <code>path1<\/code> and <code>path2<\/code> are paths to the\nsame file system object.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileSystemEntity.identicalSync<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/fseIdenticalSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool fseIdenticalSync(String path1, String path2) {\n  return FileSystemEntity._identicalSync(path1, path2);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getCurrentDirectory",
                    "type": "dart:io.Directory",
                    "desc": "<p>Returns the current working directory.<\/p>\n<p>When this override is installed, this function overrides the behavior of\nthe static getter <code>Directory.current<\/code><\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/getCurrentDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory getCurrentDirectory() =&gt; _Directory.current;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getSystemTempDirectory",
                    "type": "dart:io.Directory",
                    "desc": "<p>Returns the system temporary directory.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>Directory.systemTemp<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/getSystemTempDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Directory getSystemTempDirectory() =&gt; _Directory.systemTemp;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "runWithIOOverrides",
                    "type": "",
                    "desc": "<p>Runs <code>body<\/code> in a fresh <a href=\"dart-async\/Zone-class.html\">Zone<\/a> using the overrides found in <code>overrides<\/code>.<\/p>\n<p>Note that <code>overrides<\/code> should be an instance of a class that extends\n<a href=\"dart-io\/IOOverrides-class.html\">IOOverrides<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "body",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "overrides",
                            "type": "dart:io.IOOverrides",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "zoneSpecification",
                            "type": "dart:async.ZoneSpecification",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/runWithIOOverrides.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static R runWithIOOverrides&lt;R&gt;(R body(), IOOverrides overrides,\n    {ZoneSpecification zoneSpecification, Function onError}) {\n  return _asyncRunZoned&lt;R&gt;(body,\n      zoneValues: {_ioOverridesToken: overrides},\n      zoneSpecification: zoneSpecification,\n      onError: onError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "runZoned",
                    "type": "",
                    "desc": "<p>Runs <code>body<\/code> in a fresh <a href=\"dart-async\/Zone-class.html\">Zone<\/a> using the provided overrides.<\/p>\n<p>See the documentation on the corresponding methods of IOOverrides for\ninformation about what the optional arguments do.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "body",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "createDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "getCurrentDirectory",
                            "type": "dart:io.Directory",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "setCurrentDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "getSystemTempDirectory",
                            "type": "dart:io.Directory",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "createFile",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stat",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:io.FileStat"
                            ]
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "statSync",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fseIdentical",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:core.bool"
                            ]
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fseIdenticalSync",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fseGetType",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:io.FileSystemEntityType"
                            ]
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fseGetTypeSync",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fsWatch",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Stream",
                                "dart:io.FileSystemEvent"
                            ]
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fsWatchIsSupported",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "createLink",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "zoneSpecification",
                            "type": "dart:async.ZoneSpecification",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/runZoned.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static R runZoned&lt;R&gt;(R body(),\n    {\n    \/\/ Directory\n    Directory Function(String) createDirectory,\n    Directory Function() getCurrentDirectory,\n    void Function(String) setCurrentDirectory,\n    Directory Function() getSystemTempDirectory,\n\n    \/\/ File\n    File Function(String) createFile,\n\n    \/\/ FileStat\n    Future&lt;FileStat&gt; Function(String) stat,\n    FileStat Function(String) statSync,\n\n    \/\/ FileSystemEntity\n    Future&lt;bool&gt; Function(String, String) fseIdentical,\n    bool Function(String, String) fseIdenticalSync,\n    Future&lt;FileSystemEntityType&gt; Function(String, bool) fseGetType,\n    FileSystemEntityType Function(String, bool) fseGetTypeSync,\n\n    \/\/ _FileSystemWatcher\n    Stream&lt;FileSystemEvent&gt; Function(String, int, bool) fsWatch,\n    bool Function() fsWatchIsSupported,\n\n    \/\/ Link\n    Link Function(String) createLink,\n\n    \/\/ Socket\n    Future&lt;Socket&gt; Function(dynamic, int,\n            {dynamic sourceAddress, Duration timeout})\n        socketConnect,\n    Future&lt;ConnectionTask&lt;Socket&gt;&gt; Function(dynamic, int,\n            {dynamic sourceAddress})\n        socketStartConnect,\n\n    \/\/ Optional Zone parameters\n    ZoneSpecification zoneSpecification,\n    Function onError}) {\n  IOOverrides overrides = new _IOOverridesScope(\n    \/\/ Directory\n    createDirectory,\n    getCurrentDirectory,\n    setCurrentDirectory,\n    getSystemTempDirectory,\n\n    \/\/ File\n    createFile,\n\n    \/\/ FileStat\n    stat,\n    statSync,\n\n    \/\/ FileSystemEntity\n    fseIdentical,\n    fseIdenticalSync,\n    fseGetType,\n    fseGetTypeSync,\n\n    \/\/ _FileSystemWatcher\n    fsWatch,\n    fsWatchIsSupported,\n\n    \/\/ Link\n    createLink,\n\n    \/\/ Socket\n    socketConnect,\n    socketStartConnect,\n  );\n  return _asyncRunZoned&lt;R&gt;(body,\n      zoneValues: {_ioOverridesToken: overrides},\n      zoneSpecification: zoneSpecification,\n      onError: onError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setCurrentDirectory",
                    "type": "",
                    "desc": "<p>Sets the current working directory to be <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\nthe setter <code>Directory.current<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/setCurrentDirectory.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCurrentDirectory(String path) {\n  _Directory.current = path;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "socketConnect",
                    "type": "dart:async.Future<dart:io.Socket>",
                    "desc": "<p>Asynchronously returns a <a href=\"dart-io\/Socket-class.html\">Socket<\/a> connected to the given host and port.<\/p>\n<p>When this override is installed, this functions overrides the behavior of\n<code>Socket.connect(...)<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/socketConnect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Socket&gt; socketConnect(host, int port,\n    {sourceAddress, Duration timeout}) {\n  return Socket._connect(host, port,\n      sourceAddress: sourceAddress, timeout: timeout);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Socket"
                    ]
                },
                {
                    "name": "socketStartConnect",
                    "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.Socket>>",
                    "desc": "<p>Asynchronously returns a <a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that connects to the given host\nand port when successful.<\/p>\n<p>When this override is installed, this functions overrides the behavior of\n<code>Socket.startConnect(...)<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/socketStartConnect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ConnectionTask&lt;Socket&gt;&gt; socketStartConnect(host, int port,\n    {sourceAddress}) {\n  return Socket._startConnect(host, port, sourceAddress: sourceAddress);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ConnectionTask",
                        "dart:io.Socket"
                    ]
                },
                {
                    "name": "stat",
                    "type": "dart:async.Future<dart:io.FileStat>",
                    "desc": "<p>Asynchronously returns <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> information for <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileStat.stat()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/stat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;FileStat&gt; stat(String path) {\n  return FileStat._stat(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.FileStat"
                    ]
                },
                {
                    "name": "statSync",
                    "type": "dart:io.FileStat",
                    "desc": "<p>Returns <a href=\"dart-io\/FileStat-class.html\">FileStat<\/a> information for <code>path<\/code>.<\/p>\n<p>When this override is installed, this function overrides the behavior of\n<code>FileStat.statSync()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOOverrides",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOOverrides\/statSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FileStat statSync(String path) {\n  return FileStat._statSyncInternal(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "current",
                    "type": "dart:io.IOOverrides",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.IOOverrides",
                    "isConstant": false,
                    "href": "dart-io\/IOOverrides\/current.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static IOOverrides get current {\n  return Zone.current[_ioOverridesToken] ?? _global;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "global",
                    "type": "",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-io\/IOOverrides-class.html\">IOOverrides<\/a> to use in the root <a href=\"dart-async\/Zone-class.html\">Zone<\/a>.<\/p>\n<p>These are the <a href=\"dart-io\/IOOverrides-class.html\">IOOverrides<\/a> that will be used in the root Zone, and in\nZone's that do not set <a href=\"dart-io\/IOOverrides-class.html\">IOOverrides<\/a> and whose ancestors up to the root\nZone do not set <a href=\"dart-io\/IOOverrides-class.html\">IOOverrides<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.IOOverrides",
                    "isConstant": false,
                    "href": "dart-io\/IOOverrides\/global.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static set global(IOOverrides overrides) {\n  _global = overrides;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/IOOverrides-class.html",
            "desc": "<p>This class facilitates overriding various APIs of dart:io with mock\nimplementations.<\/p>\n<p>This abstract base class should be extended with overrides for the\noperations needed to construct mocks. The implementations in this base class\ndefault to the actual dart:io implementation. For example:<\/p>\n<pre class=\"language-dart\"><code>class MyDirectory implements Directory {\n  ...\n  \/\/ An implementation of the Directory interface\n  ...\n}\n\nmain() {\n  IOOverrides.runZoned(() {\n    ...\n    \/\/ Operations will use MyDirectory instead of dart:io's Directory\n    \/\/ implementation whenever Directory is used.\n    ...\n  }, createDirectory: (String path) =&gt; new MyDirectory(path));\n}\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IOOverrides"
        },
        {
            "name": "dart:io.IOSink",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "IOSink",
                    "type": "",
                    "desc": "<p>Create an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> that outputs to a <code>target<\/code> <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a> of bytes.<\/p>\n<p>Text written to <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> methods is encoded to bytes using <code>encoding<\/code>\nbefore being output on <code>target<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:async.StreamConsumer<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.StreamConsumer",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/IOSink\/IOSink.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory IOSink(StreamConsumer&lt;List&lt;int&gt;&gt; target, {Encoding encoding: utf8}) =&gt;\n    new _IOSinkImpl(target, encoding);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds byte <code>data<\/code> to the target consumer, ignoring <a href=\"dart-io\/IOSink\/encoding.html\">encoding<\/a>.<\/p>\n<p>The <a href=\"dart-io\/IOSink\/encoding.html\">encoding<\/a> does not apply to this method, and the <code>data<\/code> list is passed\ndirectly to the target consumer as a stream event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n<p>The data list should not be modified after it has been passed to <code>add<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; data);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addError",
                    "type": "",
                    "desc": "<p>Passes the error to the target consumer as an error event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "error",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stackTrace",
                            "type": "dart:core.StackTrace",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/addError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addError(error, [StackTrace stackTrace]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addStream",
                    "type": "dart:async.Future",
                    "desc": "<p>Adds all elements of the given <code>stream<\/code> to <code>this<\/code>.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when\nall elements of the given <code>stream<\/code> are added to <code>this<\/code>.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing this function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "stream",
                            "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Stream",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/addStream.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;List&lt;int&gt;&gt; stream);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "close",
                    "type": "dart:async.Future",
                    "desc": "<p>Close the target consumer.<\/p>\n<p>NOTE: Writes to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> may be buffered, and may not be flushed by\na call to <code>close()<\/code>. To flush all buffered writes, call <code>flush()<\/code> before\ncalling <code>close()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "flush",
                    "type": "dart:async.Future",
                    "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once all buffered data is accepted by the\nunderlying <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a>.<\/p>\n<p>This method must not be called while an <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a> is incomplete.<\/p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/flush.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future flush();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "write",
                    "type": "",
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\n<a href=\"dart-io\/IOSink\/add.html\">add<\/a>s the encoding of the result to the target consumer.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "obj",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/write.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void write(Object obj);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeAll",
                    "type": "",
                    "desc": "<p>Iterates over the given <code>objects<\/code> and <a href=\"dart-io\/IOSink\/write.html\">write<\/a>s them in sequence.<\/p>\n<p>If <code>separator<\/code> is provided, a <code>write<\/code> with the <code>separator<\/code> is performed\nbetween any two elements of objects`.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "objects",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "separator",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/writeAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAll(Iterable objects, [String separator = \"\"]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeCharCode",
                    "type": "",
                    "desc": "<p>Writes the character of <code>charCode<\/code>.<\/p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))<\/code>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "charCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/writeCharCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeCharCode(int charCode);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeln",
                    "type": "",
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\nwrites the result to <code>this<\/code>, followed by a newline.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/IOSink\/flush.html\">flush<\/a> or <a href=\"dart-io\/IOSink\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.IOSink",
                    "sig": "",
                    "params": [
                        {
                            "name": "obj",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/IOSink\/writeln.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeln([Object obj = \"\"]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "done",
                    "type": "dart:async.Future",
                    "types": [],
                    "desc": "<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a href=\"dart-io\/IOSink\/close.html\">close<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.IOSink",
                    "isConstant": false,
                    "href": "dart-io\/IOSink\/done.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoding",
                    "type": "dart:convert.Encoding",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.<\/p>\n        ",
                    "memberOf": "dart:io.IOSink",
                    "isConstant": false,
                    "href": "dart-io\/IOSink\/encoding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Encoding encoding\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/IOSink-class.html",
            "desc": "<p>A combined byte and text output.<\/p>\n<p>An <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> combines a <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> of bytes with a <a href=\"dart-core\/StringSink-class.html\">StringSink<\/a>,\nand allows easy output of both bytes and text.<\/p>\n<p>Writing text (<a href=\"dart-io\/IOSink\/write.html\">write<\/a>) and adding bytes (<a href=\"dart-io\/IOSink\/add.html\">add<\/a>) may be interleaved freely.<\/p>\n<p>While a stream is being added using <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a>, any further attempts\nto add or write to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> will fail until the <a href=\"dart-io\/IOSink\/addStream.html\">addStream<\/a> completes.<\/p>\n<p>It is an error to add data to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> after the sink is closed.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "IOSink"
        },
        {
            "name": "dart:io.InternetAddress",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "InternetAddress",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> from a numeric address.<\/p>\n<p>If the address in <code>address<\/code> is not a numeric IPv4\n(dotted-decimal notation) or IPv6 (hexadecimal representation).\naddress <a href=\"dart-core\/ArgumentError-class.html\">ArgumentError<\/a> is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.InternetAddress",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/InternetAddress\/InternetAddress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory InternetAddress(String address);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lookup",
                    "type": "dart:async.Future<dart:core.List<dart:io.InternetAddress>>",
                    "desc": "<p>Lookup a host, returning a Future of a list of\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>s. If <code>type<\/code> is <a class=\"deprecated\" href=\"dart-io\/InternetAddressType\/ANY-constant.html\">InternetAddressType.ANY<\/a>, it\nwill lookup both IP version 4 (IPv4) and IP version 6 (IPv6)\naddresses. If <code>type<\/code> is either <a href=\"dart-io\/InternetAddressType\/IPv4-constant.html\">InternetAddressType.IPv4<\/a> or\n<a href=\"dart-io\/InternetAddressType\/IPv6-constant.html\">InternetAddressType.IPv6<\/a> it will only lookup addresses of the\nspecified type. The order of the list can, and most likely will,\nchange over time.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.InternetAddress",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "type",
                            "type": "dart:io.InternetAddressType",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/InternetAddress\/lookup.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;List&lt;InternetAddress&gt;&gt; lookup(String host,\n    {InternetAddressType type: InternetAddressType.any});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:io.InternetAddress"
                    ]
                },
                {
                    "name": "reverse",
                    "type": "dart:async.Future<dart:io.InternetAddress>",
                    "desc": "<p>Perform a reverse dns lookup on the <a href=\"dart-io\/InternetAddress\/address.html\">address<\/a>, creating a new\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> where the host field set to the result.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.InternetAddress",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/InternetAddress\/reverse.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;InternetAddress&gt; reverse();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.InternetAddress"
                    ]
                }
            ],
            "props": [
                {
                    "name": "ANY_IP_V4",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/ANY_IP_V4.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use anyIPv4 instead\")\nexternal static InternetAddress get ANY_IP_V4;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ANY_IP_V6",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/ANY_IP_V6.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use anyIPv6 instead\")\nexternal static InternetAddress get ANY_IP_V6;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "LOOPBACK_IP_V4",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/LOOPBACK_IP_V4.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use loopbackIPv4 instead\")\nexternal static InternetAddress get LOOPBACK_IP_V4;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "LOOPBACK_IP_V6",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/LOOPBACK_IP_V6.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use loopbackIPv6 instead\")\nexternal static InternetAddress get LOOPBACK_IP_V6;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "address",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The numeric address of the host. For IPv4 addresses this is using\nthe dotted-decimal notation. For IPv6 it is using the\nhexadecimal representation.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "anyIPv4",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>IP version 4 any address. Use this address when listening on\nall adapters IP addresses using IP version 4 (IPv4).<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/anyIPv4.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static InternetAddress get anyIPv4 =&gt; ANY_IP_V4;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "anyIPv6",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>IP version 6 any address. Use this address when listening on\nall adapters IP addresses using IP version 6 (IPv6).<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/anyIPv6.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static InternetAddress get anyIPv6 =&gt; ANY_IP_V6;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "host",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The host used to lookup the address. If there is no host\nassociated with the address this returns the numeric address.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/host.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get host;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isLinkLocal",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>s scope is a link-local.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/isLinkLocal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isLinkLocal;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isLoopback",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> is a loopback address.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/isLoopback.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isLoopback;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isMulticast",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>s scope is multicast.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/isMulticast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMulticast;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "loopbackIPv4",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>IP version 4 loopback address. Use this address when listening on\nor connecting to the loopback adapter using IP version 4 (IPv4).<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/loopbackIPv4.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static InternetAddress get loopbackIPv4 =&gt; LOOPBACK_IP_V4;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "loopbackIPv6",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>IP version 6 loopback address. Use this address when listening on\nor connecting to the loopback adapter using IP version 6 (IPv6).<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/loopbackIPv6.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static InternetAddress get loopbackIPv6 =&gt; LOOPBACK_IP_V6;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "rawAddress",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Get the raw address of this <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. The result is either a\n4 or 16 byte long list. The returned list is a copy, making it possible\nto change the list without modifying the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/rawAddress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; get rawAddress;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:io.InternetAddressType",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-io\/InternetAddress\/type.html\">type<\/a> of the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> specified what IP protocol.<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddress",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddress\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddressType get type;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/InternetAddress-class.html",
            "desc": "<p>An internet address.<\/p>\n<p>This object holds an internet address. If this internet address\nis the result of a DNS lookup, the address also holds the hostname\nused to make the lookup.\nAn Internet address combined with a port number represents an\nendpoint to which a socket can connect or a listening socket can\nbind.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "InternetAddress"
        },
        {
            "name": "dart:io.InternetAddressType",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.InternetAddressType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/InternetAddressType\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"InternetAddressType: $name\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/InternetAddressType\/ANY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const InternetAddressType ANY = any\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ANY",
                    "memberOf": "dart:io.InternetAddressType"
                },
                {
                    "type": "",
                    "href": "dart-io\/InternetAddressType\/IP_V4-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const InternetAddressType IP_V4 = IPv4\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IP_V4",
                    "memberOf": "dart:io.InternetAddressType"
                },
                {
                    "type": "",
                    "href": "dart-io\/InternetAddressType\/IP_V6-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const InternetAddressType IP_V6 = IPv6\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IP_V6",
                    "memberOf": "dart:io.InternetAddressType"
                },
                {
                    "type": "",
                    "href": "dart-io\/InternetAddressType\/IPv4-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const InternetAddressType IPv4 = const InternetAddressType._(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IPv4",
                    "memberOf": "dart:io.InternetAddressType"
                },
                {
                    "type": "",
                    "href": "dart-io\/InternetAddressType\/IPv6-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const InternetAddressType IPv6 = const InternetAddressType._(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "IPv6",
                    "memberOf": "dart:io.InternetAddressType"
                },
                {
                    "type": "",
                    "href": "dart-io\/InternetAddressType\/any-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const InternetAddressType any = const InternetAddressType._(-1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "any",
                    "memberOf": "dart:io.InternetAddressType"
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Get the name of the type, e.g. \"IPv4\" or \"IPv6\".<\/p>\n        ",
                    "memberOf": "dart:io.InternetAddressType",
                    "isConstant": false,
                    "href": "dart-io\/InternetAddressType\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name {\n  switch (_value) {\n    case -1:\n      return \"ANY\";\n    case 0:\n      return \"IPv4\";\n    case 1:\n      return \"IPv6\";\n    default:\n      throw new ArgumentError(\"Invalid InternetAddress\");\n  }\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/InternetAddressType-class.html",
            "desc": "<p><a href=\"dart-io\/InternetAddressType-class.html\">InternetAddressType<\/a> is the type an <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. Currently,\nIP version 4 (IPv4) and IP version 6 (IPv6) are supported.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "InternetAddressType"
        },
        {
            "name": "dart:io.Link",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Link",
                    "type": "",
                    "desc": "<p>Creates a Link object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Link\/Link.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Link(String path) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return new _Link(path);\n  }\n  return overrides.createLink(path);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "create",
                    "type": "dart:async.Future<dart:io.Link>",
                    "desc": "<p>Creates a symbolic link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with\nthe link when it has been created. If the link exists,\nthe future will complete with an error.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created\nonly if all directories in its path exist.\nIf <code>recursive<\/code> is true, all non-existing path\ncomponents are created. The directories in the path of <code>target<\/code> are\nnot affected, unless they are also in <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/create.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Link&gt; create(String target, {bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Link"
                    ]
                },
                {
                    "name": "createSync",
                    "type": "",
                    "desc": "<p>Synchronously create the link. Calling <a href=\"dart-io\/Link\/createSync.html\">createSync<\/a> on an existing link\nwill throw an exception.<\/p>\n<p>If <code>recursive<\/code> is false, the default, the link is created only if all\ndirectories in its path exist. If <code>recursive<\/code> is true, all\nnon-existing path components are created. The directories in\nthe path of <code>target<\/code> are not affected, unless they are also in <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a>.<\/p>\n<p>On the Windows platform, this call will create a true symbolic link\ninstead of a Junction. In order to create a symbolic link on Windows, Dart\nmust be run in Administrator mode or the system must have Developer Mode\nenabled, otherwise a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> will be raised with \n<code>ERROR_PRIVILEGE_NOT_HELD<\/code> set as the errno when this call is made.<\/p>\n<p>On other platforms, the posix symlink() call is used to make a symbolic\nlink containing the string <code>target<\/code>.  If <code>target<\/code> is a relative path,\nit will be interpreted relative to the directory containing the link.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "recursive",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/createSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void createSync(String target, {bool recursive: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "Link.fromRawPath",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "rawPath",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Link\/Link.fromRawPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nfactory Link.fromRawPath(Uint8List rawPath) {\n  \/\/ TODO(bkonyi): handle overrides\n  return new _Link.fromRawPath(rawPath);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Link.fromUri",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"dart-io\/Link-class.html\">Link<\/a> object.<\/p>\n<p>If <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> is a relative path, it will be interpreted relative to the\ncurrent working directory (see <a href=\"dart-io\/Directory\/current.html\">Directory.current<\/a>), when used.<\/p>\n<p>If <a href=\"dart-io\/FileSystemEntity\/path.html\">path<\/a> is an absolute path, it will be immune to changes to the\ncurrent working directory.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "uri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/Link\/Link.fromUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Link.fromUri(Uri uri) =&gt; new Link(uri.toFilePath());<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "rename",
                    "type": "dart:async.Future<dart:io.Link>",
                    "desc": "<p>Renames this link. Returns a <code>Future&lt;Link&gt;<\/code> that completes\nwith a <a href=\"dart-io\/Link-class.html\">Link<\/a> instance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory,\nthe operation fails and the future completes with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/rename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Link&gt; rename(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Link"
                    ]
                },
                {
                    "name": "renameSync",
                    "type": "dart:io.Link",
                    "desc": "<p>Synchronously renames this link. Returns a <a href=\"dart-io\/Link-class.html\">Link<\/a>\ninstance for the renamed link.<\/p>\n<p>If <code>newPath<\/code> identifies an existing link, that link is\nreplaced. If <code>newPath<\/code> identifies an existing file or directory\nthe operation fails and an exception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "newPath",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/renameSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Link renameSync(String newPath);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolveSymbolicLinks",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Link\/resolveSymbolicLinks.html\">resolveSymbolicLinks<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinks<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinks<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nnew File(path).resolveSymbolicLinks().then((resolved) {\n  print(resolved);\n});\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/resolveSymbolicLinks.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; resolveSymbolicLinks();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "resolveSymbolicLinksSync",
                    "type": "dart:core.String",
                    "desc": "<p>Resolves the path of a file system object relative to the\ncurrent working directory.<\/p>\n<p>Resolves all symbolic links on the path and resolves all <code>..<\/code> and <code>.<\/code> path\nsegments.<\/p>\n<p><a href=\"dart-io\/Link\/resolveSymbolicLinksSync.html\">resolveSymbolicLinksSync<\/a> uses the operating system's native\nfile system API to resolve the path, using the <code>realpath<\/code> function\non linux and OS X, and the <code>GetFinalPathNameByHandle<\/code> function on\nWindows. If the path does not point to an existing file system object,\n<code>resolveSymbolicLinksSync<\/code> throws a <code>FileSystemException<\/code>.<\/p>\n<p>On Windows the <code>..<\/code> segments are resolved <em>before<\/em> resolving the symbolic\nlink, and on other platforms the symbolic links are <em>resolved to their\ntarget<\/em> before applying a <code>..<\/code> that follows.<\/p>\n<p>To ensure the same behavior on all platforms resolve <code>..<\/code> segments before\ncalling <code>resolveSymbolicLinksSync<\/code>. One way of doing this is with the <code>Uri<\/code>\nclass:<\/p>\n<pre class=\"language-dart\"><code>var path = Uri.parse('.').resolveUri(new Uri.file(input)).toFilePath();\nif (path == '') path = '.';\nvar resolved = new File(path).resolveSymbolicLinksSync();\nprint(resolved);\n<\/code><\/pre>\n<p>since <code>Uri.resolve<\/code> removes <code>..<\/code> segments. This will result in the Windows\nbehavior.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/resolveSymbolicLinksSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String resolveSymbolicLinksSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "target",
                    "type": "dart:async.Future<dart:core.String>",
                    "desc": "<p>Gets the target of the link. Returns a future that completes with\nthe path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, the future completes with\na FileSystemException.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/target.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;String&gt; target();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "targetSync",
                    "type": "dart:core.String",
                    "desc": "<p>Synchronously gets the target of the link. Returns the path to the target.<\/p>\n<p>If the returned target is a relative path, it is relative to the\ndirectory containing the link.<\/p>\n<p>If the link does not exist, or is not a link, throws a FileSystemException.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/targetSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String targetSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "update",
                    "type": "dart:async.Future<dart:io.Link>",
                    "desc": "<p>Updates the link. Returns a <code>Future&lt;Link&gt;<\/code> that completes with the\nlink when it has been updated.  Calling <a href=\"dart-io\/Link\/update.html\">update<\/a> on a non-existing link\nwill complete its returned future with an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/update.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;Link&gt; update(String target);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Link"
                    ]
                },
                {
                    "name": "updateSync",
                    "type": "",
                    "desc": "<p>Synchronously updates the link. Calling <a href=\"dart-io\/Link\/updateSync.html\">updateSync<\/a> on a non-existing link\nwill throw an exception.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Link",
                    "sig": "",
                    "params": [
                        {
                            "name": "target",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Link\/updateSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateSync(String target);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "absolute",
                    "type": "dart:io.Link",
                    "types": [],
                    "desc": "<p>Returns a <a href=\"dart-io\/Link-class.html\">Link<\/a> instance whose path is the absolute path to <a href=\"dart-io\/Link-class.html\">this<\/a>.<\/p>\n<p>The absolute path is computed by prefixing\na relative path with the current working directory, and returning\nan absolute path unchanged.<\/p>\n        ",
                    "memberOf": "dart:io.Link",
                    "isConstant": false,
                    "href": "dart-io\/Link\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Link get absolute;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Link-class.html",
            "desc": "<p><a href=\"dart-io\/Link-class.html\">Link<\/a> objects are references to filesystem links.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Link"
        },
        {
            "name": "dart:io.NetworkInterface",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "NetworkInterface",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.NetworkInterface",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/NetworkInterface\/NetworkInterface.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "list",
                    "type": "dart:async.Future<dart:core.List<dart:io.NetworkInterface>>",
                    "desc": "<p>Query the system for <a href=\"dart-io\/NetworkInterface-class.html\">NetworkInterface<\/a>s.<\/p>\n<p>If <code>includeLoopback<\/code> is <code>true<\/code>, the returned list will include the\nloopback device. Default is <code>false<\/code>.<\/p>\n<p>If <code>includeLinkLocal<\/code> is <code>true<\/code>, the list of addresses of the returned\n<a href=\"dart-io\/NetworkInterface-class.html\">NetworkInterface<\/a>s, may include link local addresses. Default is <code>false<\/code>.<\/p>\n<p>If <code>type<\/code> is either <a href=\"dart-io\/InternetAddressType\/IPv4-constant.html\">InternetAddressType.IPv4<\/a> or\n<a href=\"dart-io\/InternetAddressType\/IPv6-constant.html\">InternetAddressType.IPv6<\/a> it will only lookup addresses of the\nspecified type. Default is <a href=\"dart-io\/InternetAddressType\/any-constant.html\">InternetAddressType.any<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.NetworkInterface",
                    "sig": "",
                    "params": [
                        {
                            "name": "includeLoopback",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "includeLinkLocal",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "type",
                            "type": "dart:io.InternetAddressType",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/NetworkInterface\/list.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;List&lt;NetworkInterface&gt;&gt; list(\n    {bool includeLoopback: false,\n    bool includeLinkLocal: false,\n    InternetAddressType type: InternetAddressType.any});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:io.NetworkInterface"
                    ]
                }
            ],
            "props": [
                {
                    "name": "addresses",
                    "type": "dart:core.List<dart:io.InternetAddress>",
                    "types": [
                        "dart:core.List",
                        "dart:io.InternetAddress"
                    ],
                    "desc": "<p>Get a list of <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es currently bound to this\n<a href=\"dart-io\/NetworkInterface-class.html\">NetworkInterface<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.NetworkInterface",
                    "isConstant": false,
                    "href": "dart-io\/NetworkInterface\/addresses.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;InternetAddress&gt; get addresses;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "index",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Get the index of the <a href=\"dart-io\/NetworkInterface-class.html\">NetworkInterface<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.NetworkInterface",
                    "isConstant": false,
                    "href": "dart-io\/NetworkInterface\/index.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get index;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "listSupported",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether <a href=\"dart-io\/NetworkInterface\/list.html\">list<\/a> is supported.<\/p>\n<p><a href=\"dart-io\/NetworkInterface\/list.html\">list<\/a> is currently unsupported on Android.<\/p>\n        ",
                    "memberOf": "dart:io.NetworkInterface",
                    "isConstant": false,
                    "href": "dart-io\/NetworkInterface\/listSupported.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static bool get listSupported;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Get the name of the <a href=\"dart-io\/NetworkInterface-class.html\">NetworkInterface<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.NetworkInterface",
                    "isConstant": false,
                    "href": "dart-io\/NetworkInterface\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/NetworkInterface-class.html",
            "desc": "<p>A <a href=\"dart-io\/NetworkInterface-class.html\">NetworkInterface<\/a> represents an active network interface on the current\nsystem. It contains a list of <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es that are bound to the\ninterface.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "NetworkInterface"
        },
        {
            "name": "dart:io.OSError",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "OSError",
                    "type": "",
                    "desc": "<p>Creates an OSError object from a message and an errorCode.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.OSError",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "errorCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/OSError\/OSError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst OSError([this.message = \"\", this.errorCode = noErrorCode]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Converts an OSError object to a string representation.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.OSError",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/OSError\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  StringBuffer sb = new StringBuffer();\n  sb.write(\"OS Error\");\n  if (message.isNotEmpty) {\n    sb..write(\": \")..write(message);\n    if (errorCode != noErrorCode) {\n      sb..write(\", errno = \")..write(errorCode.toString());\n    }\n  } else if (errorCode != noErrorCode) {\n    sb..write(\": errno = \")..write(errorCode.toString());\n  }\n  return sb.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "errorCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Error code supplied by the operating system.<\/p>\n<p>Will have the value <a href=\"dart-io\/OSError\/noErrorCode-constant.html\">OSError.noErrorCode<\/a> if there is no error code\nassociated with the error.<\/p>\n        ",
                    "memberOf": "dart:io.OSError",
                    "isConstant": false,
                    "href": "dart-io\/OSError\/errorCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int errorCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Error message supplied by the operating system. This may be <code>null<\/code> or\nempty if no message is associated with the error.<\/p>\n        ",
                    "memberOf": "dart:io.OSError",
                    "isConstant": false,
                    "href": "dart-io\/OSError\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/OSError\/noErrorCode-constant.html",
                    "desc": "<p>Constant used to indicate that no OS error code is available.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int noErrorCode = -1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "noErrorCode",
                    "memberOf": "dart:io.OSError"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/OSError-class.html",
            "desc": "<p>An <a href=\"dart-io\/OSError-class.html\">OSError<\/a> object holds information about an error from the\noperating system.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "OSError"
        },
        {
            "name": "dart:io.Platform",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Platform",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.Platform",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/Platform\/Platform.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "environment",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ],
                    "desc": "<p>The environment for this process as a map from string key to string value.<\/p>\n<p>The map is unmodifiable,\nand its content is retrieved from the operating system on its first use.<\/p>\n<p>Environment variables on Windows are case-insensitive,\nso on Windows the map is case-insensitive and will convert\nall keys to upper case.\nOn other platforms, keys can be distinguished by case.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/environment.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Map&lt;String, String&gt; get environment =&gt; _Platform.environment;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "executable",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The path of the executable used to run the script in this isolate.<\/p>\n<p>The literal path used to identify the script.\nThis path might be relative or just be a name from which the executable\nwas found by searching the system path.<\/p>\n<p>Use <a href=\"dart-io\/Platform\/resolvedExecutable.html\">resolvedExecutable<\/a> to get an absolute path to the executable.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/executable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get executable =&gt; _Platform.executable;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "executableArguments",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "<p>The flags passed to the executable used to run the script in this isolate.<\/p>\n<p>These are the command-line flags to the executable that precedes\nthe script name.\nProvides a new list every time the value is read.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/executableArguments.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;String&gt; get executableArguments =&gt; _Platform.executableArguments;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isAndroid",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the operating system is a version of\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Android_%28operating_system%29\">Android<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/isAndroid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final bool isAndroid = (_operatingSystem == \"android\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isFuchsia",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the operating system is a version of\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Google_Fuchsia\">Fuchsia<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/isFuchsia.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final bool isFuchsia = (_operatingSystem == \"fuchsia\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isIOS",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the operating system is a version of\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/IOS\">iOS<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/isIOS.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final bool isIOS = (_operatingSystem == \"ios\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isLinux",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the operating system is a version of\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Linux\">Linux<\/a>.<\/p>\n<p>This value is <code>false<\/code> if the operating system is a specialized\nversion of Linux that identifies itself by a different name,\nfor example Android (see <a href=\"dart-io\/Platform\/isAndroid.html\">isAndroid<\/a>).<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/isLinux.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final bool isLinux = (_operatingSystem == \"linux\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isMacOS",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the operating system is a version of\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/MacOS\">macOS<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/isMacOS.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final bool isMacOS = (_operatingSystem == \"macos\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isWindows",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the operating system is a version of\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/Microsoft_Windows\">Microsoft Windows<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/isWindows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final bool isWindows = (_operatingSystem == \"windows\")\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "localHostname",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The local hostname for the system.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/localHostname.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get localHostname =&gt; _localHostname;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "localeName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Get the name of the current locale.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/localeName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get localeName =&gt; _Platform.localeName();<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "numberOfProcessors",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The number of individual execution units of the machine.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/numberOfProcessors.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get numberOfProcessors =&gt; _numberOfProcessors;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "operatingSystem",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A string representing the operating system or platform.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/operatingSystem.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get operatingSystem =&gt; _operatingSystem;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "operatingSystemVersion",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A string representing the version of the operating system or platform.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/operatingSystemVersion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get operatingSystemVersion =&gt; _operatingSystemVersion;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "packageConfig",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The <code>--packages<\/code> flag passed to the executable used to run the script\nin this isolate.<\/p>\n<p>If present, it specifies a file describing how Dart packages are looked up.<\/p>\n<p>Is <code>null<\/code> if there is no <code>--packages<\/code> flag.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/packageConfig.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get packageConfig =&gt; _Platform.packageConfig;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "packageRoot",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>This returns <code>null<\/code>, as <code>packages\/<\/code> directories are no longer supported.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/packageRoot.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('packages\/ directory resolution is not supported in Dart 2')\nstatic String get packageRoot =&gt; null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pathSeparator",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The path separator used by the operating system to separate\ncomponents in file paths.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/pathSeparator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get pathSeparator =&gt; _pathSeparator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "resolvedExecutable",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The path of the executable used to run the script in this\nisolate after it has been resolved by the OS.<\/p>\n<p>This is the absolute path, with all symlinks resolved, to the\nexecutable used to run the script.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/resolvedExecutable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get resolvedExecutable =&gt; _Platform.resolvedExecutable;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "script",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>The absolute URI of the script being run in this isolate.<\/p>\n<p>If the script argument on the command line is relative,\nit is resolved to an absolute URI before fetching the script, and\nthat absolute URI is returned.<\/p>\n<p>URI resolution only does string manipulation on the script path, and this\nmay be different from the file system's path resolution behavior. For\nexample, a symbolic link immediately followed by '..' will not be\nlooked up.<\/p>\n<p>If the executable environment does not support <a href=\"dart-io\/Platform\/script.html\">script<\/a>,\nthe URI is empty.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/script.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static Uri get script =&gt; _Platform.script;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "version",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The version of the current Dart runtime.<\/p>\n<p>The value is a <a href=\"http:\/\/semver.org\">semantic versioning<\/a>\nstring representing the version of the current Dart runtime,\npossibly followed by whitespace and other version and\nbuild details.<\/p>\n        ",
                    "memberOf": "dart:io.Platform",
                    "isConstant": false,
                    "href": "dart-io\/Platform\/version.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get version =&gt; _version;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Platform-class.html",
            "desc": "<p>Information about the environment in which the current program is running.<\/p>\n<p>Platform provides information such as the operating system,\nthe hostname of the computer, the value of environment variables,\nthe path to the running program,\nand so on.<\/p>\n<h2 id=\"get-the-uri-to-the-current-dart-script\">Get the URI to the current Dart script<\/h2>\n<p>Use the <a href=\"dart-io\/Platform\/script.html\">script<\/a> getter to get the URI to the currently running\nDart script.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io' show Platform;\n\nvoid main() {\n  \/\/ Get the URI of the script being run.\n  var uri = Platform.script;\n  \/\/ Convert the URI to a path.\n  var path = uri.toFilePath();\n}\n<\/code><\/pre>\n<h2 id=\"get-the-value-of-an-environment-variable\">Get the value of an environment variable<\/h2>\n<p>The <a href=\"dart-io\/Platform\/environment.html\">environment<\/a> getter returns a the names and values of environment\nvariables in a <a href=\"dart-core\/Map-class.html\">Map<\/a> that contains key-value pairs of strings. The Map is\nunmodifiable. This sample shows how to get the value of the <code>PATH<\/code>\nenvironment variable.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io' show Platform;\n\nvoid main() {\n  Map&lt;String, String&gt; envVars = Platform.environment;\n  print(envVars['PATH']);\n}\n<\/code><\/pre>\n<h2 id=\"determine-the-os\">Determine the OS<\/h2>\n<p>You can get the name of the operating system as a string with the\n<a href=\"dart-io\/Platform\/operatingSystem.html\">operatingSystem<\/a> getter. You can also use one of the static boolean\ngetters: <a href=\"dart-io\/Platform\/isMacOS.html\">isMacOS<\/a>, <a href=\"dart-io\/Platform\/isLinux.html\">isLinux<\/a>, and <a href=\"dart-io\/Platform\/isWindows.html\">isWindows<\/a>.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io' show Platform, stdout;\n\nvoid main() {\n  \/\/ Get the operating system as a string.\n  String os = Platform.operatingSystem;\n  \/\/ Or, use a predicate getter.\n  if (Platform.isMacOS) {\n    print('is a Mac');\n  } else {\n    print('is not a Mac');\n  }\n}\n<\/code><\/pre>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#dart-io-and-command-line-apps\">Dart by Example<\/a>\nprovides additional task-oriented code samples that show how to use\nvarious API from the <a href=\"dart-io\/dart-io-library.html\">dart:io<\/a> library.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Platform"
        },
        {
            "name": "dart:io.Process",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Process",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.Process",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/Process\/Process.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "kill",
                    "type": "dart:core.bool",
                    "desc": "<p>Kills the process.<\/p>\n<p>Where possible, sends the <code>signal<\/code> to the process. This includes\nLinux and OS X. The default signal is <a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a>\nwhich will normally terminate the process.<\/p>\n<p>On platforms without signal support, including Windows, the call\njust terminates the process in a platform specific way, and the\n<code>signal<\/code> parameter is ignored.<\/p>\n<p>Returns <code>true<\/code> if the signal is successfully delivered to the\nprocess. Otherwise the signal could not be sent, usually meaning\nthat the process is already dead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Process",
                    "sig": "",
                    "params": [
                        {
                            "name": "signal",
                            "type": "dart:io.ProcessSignal",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Process\/kill.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool kill([ProcessSignal signal = ProcessSignal.sigterm]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "killPid",
                    "type": "dart:core.bool",
                    "desc": "<p>Kills the process with id <code>pid<\/code>.<\/p>\n<p>Where possible, sends the <code>signal<\/code> to the process with id\n<code>pid<\/code>. This includes Linux and OS X. The default signal is\n<a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a> which will normally terminate the\nprocess.<\/p>\n<p>On platforms without signal support, including Windows, the call\njust terminates the process with id <code>pid<\/code> in a platform specific\nway, and the <code>signal<\/code> parameter is ignored.<\/p>\n<p>Returns <code>true<\/code> if the signal is successfully delivered to the\nprocess. Otherwise the signal could not be sent, usually meaning\nthat the process is already dead.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Process",
                    "sig": "",
                    "params": [
                        {
                            "name": "pid",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "signal",
                            "type": "dart:io.ProcessSignal",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Process\/killPid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static bool killPid(int pid,\n    [ProcessSignal signal = ProcessSignal.sigterm]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "run",
                    "type": "dart:async.Future<dart:io.ProcessResult>",
                    "desc": "<p>Starts a process and runs it non-interactively to completion. The\nprocess run is <code>executable<\/code> with the specified <code>arguments<\/code>.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is true, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>The encoding used for decoding <code>stdout<\/code> and <code>stderr<\/code> into text is\ncontrolled through <code>stdoutEncoding<\/code> and <code>stderrEncoding<\/code>. The\ndefault encoding is <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>. If <code>null<\/code> is used no\ndecoding will happen and the <a href=\"dart-io\/ProcessResult-class.html\">ProcessResult<\/a> will hold binary\ndata.<\/p>\n<p>Returns a <code>Future&lt;ProcessResult&gt;<\/code> that completes with the\nresult of running the process, i.e., exit code, standard out and\nstandard in.<\/p>\n<p>The following code uses <code>Process.run<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>Process.run('grep', ['-i', 'main', 'test.dart']).then((result) {\n  stdout.write(result.stdout);\n  stderr.write(result.stderr);\n});\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Process",
                    "sig": "",
                    "params": [
                        {
                            "name": "executable",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdoutEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stderrEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Process\/run.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;ProcessResult&gt; run(\n    String executable, List&lt;String&gt; arguments,\n    {String workingDirectory,\n    Map&lt;String, String&gt; environment,\n    bool includeParentEnvironment: true,\n    bool runInShell: false,\n    Encoding stdoutEncoding: systemEncoding,\n    Encoding stderrEncoding: systemEncoding});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ProcessResult"
                    ]
                },
                {
                    "name": "runSync",
                    "type": "dart:io.ProcessResult",
                    "desc": "<p>Starts a process and runs it to completion. This is a synchronous\ncall and will block until the child process terminates.<\/p>\n<p>The arguments are the same as for <code>Process.run<\/code>.<\/p>\n<p>Returns a <code>ProcessResult<\/code> with the result of running the process,\ni.e., exit code, standard out and standard in.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Process",
                    "sig": "",
                    "params": [
                        {
                            "name": "executable",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdoutEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stderrEncoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Process\/runSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static ProcessResult runSync(\n    String executable, List&lt;String&gt; arguments,\n    {String workingDirectory,\n    Map&lt;String, String&gt; environment,\n    bool includeParentEnvironment: true,\n    bool runInShell: false,\n    Encoding stdoutEncoding: systemEncoding,\n    Encoding stderrEncoding: systemEncoding});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:async.Future<dart:io.Process>",
                    "desc": "<p>Starts a process running the <code>executable<\/code> with the specified\n<code>arguments<\/code>. Returns a <code>Future&lt;Process&gt;<\/code> that completes with a\nProcess instance when the process has been successfully\nstarted. That <a href=\"dart-io\/Process-class.html\">Process<\/a> object can be used to interact with the\nprocess. If the process cannot be started the returned <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompletes with an exception.<\/p>\n<p>Use <code>workingDirectory<\/code> to set the working directory for the process. Note\nthat the change of directory occurs before executing the process on some\nplatforms, which may have impact when using relative paths for the\nexecutable and the arguments.<\/p>\n<p>Use <code>environment<\/code> to set the environment variables for the process. If not\nset the environment of the parent process is inherited. Currently, only\nUS-ASCII environment variables are supported and errors are likely to occur\nif an environment variable with code-points outside the US-ASCII range is\npassed in.<\/p>\n<p>If <code>includeParentEnvironment<\/code> is <code>true<\/code>, the process's environment will\ninclude the parent process's environment, with <code>environment<\/code> taking\nprecedence. Default is <code>true<\/code>.<\/p>\n<p>If <code>runInShell<\/code> is <code>true<\/code>, the process will be spawned through a system\nshell. On Linux and OS X, <code>\/bin\/sh<\/code> is used, while\n<code>%WINDIR%\\system32\\cmd.exe<\/code> is used on Windows.<\/p>\n<p>Users must read all data coming on the <a href=\"dart-io\/Process\/stdout.html\">stdout<\/a> and <a href=\"dart-io\/Process\/stderr.html\">stderr<\/a>\nstreams of processes started with <code>Process.start<\/code>. If the user\ndoes not read all data on the streams the underlying system\nresources will not be released since there is still pending data.<\/p>\n<p>The following code uses <code>Process.start<\/code> to grep for <code>main<\/code> in the\nfile <code>test.dart<\/code> on Linux.<\/p>\n<pre class=\"language-dart\"><code>Process.start('grep', ['-i', 'main', 'test.dart']).then((process) {\n  stdout.addStream(process.stdout);\n  stderr.addStream(process.stderr);\n});\n<\/code><\/pre>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/normal-constant.html\">ProcessStartMode.normal<\/a> (the default) a child\nprocess will be started with <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nconnected.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detached-constant.html\">ProcessStartMode.detached<\/a> a detached process will\nbe created. A detached process has no connection to its parent,\nand can keep running on its own when the parent dies. The only\ninformation available from a detached process is its <code>pid<\/code>. There\nis no connection to its <code>stdin<\/code>, <code>stdout<\/code> or <code>stderr<\/code>, nor will\nthe process' exit code become available when it terminates.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/ProcessStartMode\/detachedWithStdio-constant.html\">ProcessStartMode.detachedWithStdio<\/a> a detached\nprocess will be created where the <code>stdin<\/code>, <code>stdout<\/code> and <code>stderr<\/code>\nare connected. The creator can communicate with the child through\nthese. The detached process will keep running even if these\ncommunication channels are closed. The process' exit code will\nnot become available when it terminated.<\/p>\n<p>The default value for <code>mode<\/code> is <code>ProcessStartMode.normal<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Process",
                    "sig": "",
                    "params": [
                        {
                            "name": "executable",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "workingDirectory",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "environment",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "includeParentEnvironment",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "runInShell",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "mode",
                            "type": "dart:io.ProcessStartMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Process\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;Process&gt; start(\n    String executable, List&lt;String&gt; arguments,\n    {String workingDirectory,\n    Map&lt;String, String&gt; environment,\n    bool includeParentEnvironment: true,\n    bool runInShell: false,\n    ProcessStartMode mode: ProcessStartMode.normal});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Process"
                    ]
                }
            ],
            "props": [
                {
                    "name": "exitCode",
                    "type": "dart:async.Future<dart:core.int>",
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns a <code>Future<\/code> which completes with the exit code of the process\nwhen the process completes.<\/p>\n<p>The handling of exit codes is platform specific.<\/p>\n<p>On Linux and OS X a normal exit code will be a positive value in\nthe range <code>0..255<\/code>. If the process was terminated due to a signal\nthe exit code will be a negative value in the range <code>-255..-1<\/code>,\nwhere the absolute value of the exit code is the signal\nnumber. For example, if a process crashes due to a segmentation\nviolation the exit code will be -11, as the signal SIGSEGV has the\nnumber 11.<\/p>\n<p>On Windows a process can report any 32-bit value as an exit\ncode. When returning the exit code this exit code is turned into\na signed value. Some special values are used to report\ntermination due to some system event. E.g. if a process crashes\ndue to an access violation the 32-bit exit code is <code>0xc0000005<\/code>,\nwhich will be returned as the negative number <code>-1073741819<\/code>. To\nget the original 32-bit value use <code>(0x100000000 + exitCode) &amp;\n0xffffffff<\/code>.<\/p>\n<p>There is no guarantee that <a href=\"dart-io\/Process\/stdout.html\">stdout<\/a> and <a href=\"dart-io\/Process\/stderr.html\">stderr<\/a> have finished reporting\nthe buffered output of the process when the returned future completes.\nTo be sure that all output is captured,\nwait for the done event on the streams.<\/p>\n        ",
                    "memberOf": "dart:io.Process",
                    "isConstant": false,
                    "href": "dart-io\/Process\/exitCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; get exitCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pid",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the process id of the process.<\/p>\n        ",
                    "memberOf": "dart:io.Process",
                    "isConstant": false,
                    "href": "dart-io\/Process\/pid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get pid;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stderr",
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "types": [
                        "dart:async.Stream",
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns the standard error stream of the process as a <code>Stream<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.Process",
                    "isConstant": false,
                    "href": "dart-io\/Process\/stderr.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; get stderr;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stdin",
                    "type": "dart:io.IOSink",
                    "types": [],
                    "desc": "<p>Returns the standard input stream of the process as an <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Process",
                    "isConstant": false,
                    "href": "dart-io\/Process\/stdin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IOSink get stdin;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stdout",
                    "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                    "types": [
                        "dart:async.Stream",
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns the standard output stream of the process as a <code>Stream<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.Process",
                    "isConstant": false,
                    "href": "dart-io\/Process\/stdout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;List&lt;int&gt;&gt; get stdout;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Process-class.html",
            "desc": "<p>The means to execute a program.<\/p>\n<p>Use the static <a href=\"dart-io\/Process\/start.html\">start<\/a> and <a href=\"dart-io\/Process\/run.html\">run<\/a> methods to start a new process.\nThe run method executes the process non-interactively to completion.\nIn contrast, the start method allows your code to interact with the\nrunning process.<\/p>\n<h2 id=\"start-a-process-with-the-run-method\">Start a process with the run method<\/h2>\n<p>The following code sample uses the run method to create a process\nthat runs the UNIX command <code>ls<\/code>, which lists the contents of a directory.\nThe run method completes with a <a href=\"dart-io\/ProcessResult-class.html\">ProcessResult<\/a> object when the process\nterminates. This provides access to the output and exit code from the\nprocess. The run method does not return a Process object; this prevents your\ncode from interacting with the running process.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  \/\/ List all files in the current directory in UNIX-like systems.\n  Process.run('ls', ['-l']).then((ProcessResult results) {\n    print(results.stdout);\n  });\n}\n<\/code><\/pre>\n<h2 id=\"start-a-process-with-the-start-method\">Start a process with the start method<\/h2>\n<p>The following example uses start to create the process.\nThe start method returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> for a Process object.\nWhen the future completes the process is started and\nyour code can interact with the\nProcess: writing to stdin, listening to stdout, and so on.<\/p>\n<p>The following sample starts the UNIX <code>cat<\/code> utility, which when given no\ncommand-line arguments, echos its input.\nThe program writes to the process's standard input stream\nand prints data from its standard output stream.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\nimport 'dart:convert';\n\nmain() {\n  Process.start('cat', []).then((Process process) {\n    process.stdout\n        .transform(utf8.decoder)\n        .listen((data) { print(data); });\n    process.stdin.writeln('Hello, world!');\n    process.stdin.writeln('Hello, galaxy!');\n    process.stdin.writeln('Hello, universe!');\n  });\n}\n<\/code><\/pre>\n<h2 id=\"standard-io-streams\">Standard I\/O streams<\/h2>\n<p>As seen in the previous code sample, you can interact with the Process's\nstandard output stream through the getter <a href=\"dart-io\/Process\/stdout.html\">stdout<\/a>,\nand you can interact with the Process's standard input stream through\nthe getter <a href=\"dart-io\/Process\/stdin.html\">stdin<\/a>.\nIn addition, Process provides a getter <a href=\"dart-io\/Process\/stderr.html\">stderr<\/a> for using the Process's\nstandard error stream.<\/p>\n<p>A Process's streams are distinct from the top-level streams\nfor the current program.<\/p>\n<h2 id=\"exit-codes\">Exit codes<\/h2>\n<p>Call the <a href=\"dart-io\/Process\/exitCode.html\">exitCode<\/a> method to get the exit code of the process.\nThe exit code indicates whether the program terminated successfully\n(usually indicated with an exit code of 0) or with an error.<\/p>\n<p>If the start method is used, the exitCode is available through a future\non the Process object (as shown in the example below).\nIf the run method is used, the exitCode is available\nthrough a getter on the ProcessResult instance.<\/p>\n<pre class=\"language-dart\"><code>import 'dart:io';\n\nmain() {\n  Process.start('ls', ['-l']).then((process) {\n    \/\/ Get the exit code from the new process.\n    process.exitCode.then((exitCode) {\n      print('exit code: $exitCode');\n    });\n  });\n}\n<\/code><\/pre>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<p><a href=\"https:\/\/www.dartlang.org\/dart-by-example\/#dart-io-and-command-line-apps\">Dart by Example<\/a>\nprovides additional task-oriented code samples that show how to use\nvarious API from the <a href=\"dart-io\/dart-io-library.html\">dart:io<\/a> library.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Process"
        },
        {
            "name": "dart:io.ProcessException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ProcessException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ProcessException",
                    "sig": "",
                    "params": [
                        {
                            "name": "executable",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "arguments",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "errorCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/ProcessException\/ProcessException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ProcessException(this.executable, this.arguments,\n    [this.message = \"\", this.errorCode = 0]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ProcessException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/ProcessException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  var msg = (message == null) ? 'OS error code: $errorCode' : message;\n  var args = arguments.join(' ');\n  return \"ProcessException: $msg\\n  Command: $executable $args\";\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "arguments",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "<p>Contains the arguments provided for the process.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessException",
                    "isConstant": false,
                    "href": "dart-io\/ProcessException\/arguments.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;String&gt; arguments\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "errorCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Contains the OS error code for the process exception if any.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessException",
                    "isConstant": false,
                    "href": "dart-io\/ProcessException\/errorCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int errorCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "executable",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Contains the executable provided for the process.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessException",
                    "isConstant": false,
                    "href": "dart-io\/ProcessException\/executable.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String executable\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Contains the system message for the process exception if any.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessException",
                    "isConstant": false,
                    "href": "dart-io\/ProcessException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ProcessException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessException"
        },
        {
            "name": "dart:io.ProcessInfo",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ProcessInfo",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ProcessInfo",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/ProcessInfo\/ProcessInfo.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "currentRss",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current resident set size of memory for the process.<\/p>\n<p>Note that the meaning of this field is platform dependent. For example,\nsome memory accounted for here may be shared with other processes, or if\nthe same page is mapped into a process's address space, it may be counted\ntwice.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessInfo",
                    "isConstant": false,
                    "href": "dart-io\/ProcessInfo\/currentRss.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static int get currentRss;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxRss",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The high-watermark in bytes for the resident set size of memory for the\nprocess.<\/p>\n<p>Note that the meaning of this field is platform dependent. For example,\nsome memory accounted for here may be shared with other processes, or if\nthe same page is mapped into a process's address space, it may be counted\ntwice.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessInfo",
                    "isConstant": false,
                    "href": "dart-io\/ProcessInfo\/maxRss.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static int get maxRss;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ProcessInfo-class.html",
            "desc": "<p><a href=\"dart-io\/ProcessInfo-class.html\">ProcessInfo<\/a> provides methods for retrieving information about the\ncurrent process.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessInfo"
        },
        {
            "name": "dart:io.ProcessResult",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ProcessResult",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ProcessResult",
                    "sig": "",
                    "params": [
                        {
                            "name": "pid",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "exitCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stdout",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "stderr",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/ProcessResult\/ProcessResult.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ProcessResult(this.pid, this.exitCode, this.stdout, this.stderr);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "exitCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Exit code for the process.<\/p>\n<p>See <a href=\"dart-io\/ProcessResult\/exitCode.html\">Process.exitCode<\/a> for more information in the exit code\nvalue.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessResult",
                    "isConstant": false,
                    "href": "dart-io\/ProcessResult\/exitCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int exitCode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pid",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Process id of the process.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessResult",
                    "isConstant": false,
                    "href": "dart-io\/ProcessResult\/pid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int pid\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stderr",
                    "type": "",
                    "types": [],
                    "desc": "<p>Standard error from the process. The value used for the\n<code>stderrEncoding<\/code> argument to <code>Process.run<\/code> determines the type. If\n<code>null<\/code> was used this value is of type <code>List&lt;int&gt;<\/code>\notherwise it is of type <code>String<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessResult",
                    "isConstant": false,
                    "href": "dart-io\/ProcessResult\/stderr.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final stderr\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stdout",
                    "type": "",
                    "types": [],
                    "desc": "<p>Standard output from the process. The value used for the\n<code>stdoutEncoding<\/code> argument to <code>Process.run<\/code> determines the type. If\n<code>null<\/code> was used this value is of type <code>List&lt;int&gt;<\/code> otherwise it is\nof type <code>String<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.ProcessResult",
                    "isConstant": false,
                    "href": "dart-io\/ProcessResult\/stdout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final stdout\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ProcessResult-class.html",
            "desc": "<p><a href=\"dart-io\/ProcessResult-class.html\">ProcessResult<\/a> represents the result of running a non-interactive\nprocess started with <a href=\"dart-io\/Process\/run.html\">Process.run<\/a> or <a href=\"dart-io\/Process\/runSync.html\">Process.runSync<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessResult"
        },
        {
            "name": "dart:io.ProcessSignal",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ProcessSignal",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/ProcessSignal\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _name;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "watch",
                    "type": "dart:async.Stream<dart:io.ProcessSignal>",
                    "desc": "<p>Watch for process signals.<\/p>\n<p>The following <a href=\"dart-io\/ProcessSignal-class.html\">ProcessSignal<\/a>s can be listened to:<\/p>\n<ul>\n<li>\n<a href=\"dart-io\/ProcessSignal\/sighup-constant.html\">ProcessSignal.sighup<\/a>.<\/li>\n<li>\n<a href=\"dart-io\/ProcessSignal\/sigint-constant.html\">ProcessSignal.sigint<\/a>. Signal sent by e.g. CTRL-C.<\/li>\n<li>\n<a href=\"dart-io\/ProcessSignal\/sigterm-constant.html\">ProcessSignal.sigterm<\/a>. Not available on Windows.<\/li>\n<li>\n<a href=\"dart-io\/ProcessSignal\/sigusr1-constant.html\">ProcessSignal.sigusr1<\/a>. Not available on Windows.<\/li>\n<li>\n<a href=\"dart-io\/ProcessSignal\/sigusr2-constant.html\">ProcessSignal.sigusr2<\/a>. Not available on Windows.<\/li>\n<li>\n<a href=\"dart-io\/ProcessSignal\/sigwinch-constant.html\">ProcessSignal.sigwinch<\/a>. Not available on Windows.<\/li>\n<\/ul>\n<p>Other signals are disallowed, as they may be used by the VM.<\/p>\n<p>A signal can be watched multiple times, from multiple isolates, where all\ncallbacks are invoked when signaled, in no specific order.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ProcessSignal",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/ProcessSignal\/watch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stream&lt;ProcessSignal&gt; watch() =&gt; _ProcessUtils._watchSignal(this);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Stream",
                        "dart:io.ProcessSignal"
                    ]
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGABRT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGABRT = sigabrt\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGABRT",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGALRM-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGALRM = sigalrm\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGALRM",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGBUS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGBUS = sigbus\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGBUS",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGCHLD-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGCHLD = sigchld\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGCHLD",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGCONT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGCONT = sigcont\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGCONT",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGFPE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGFPE = sigfpe\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGFPE",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGHUP-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGHUP = sighup\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGHUP",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGILL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGILL = sigill\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGILL",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGINT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGINT = sigint\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGINT",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGKILL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGKILL = sigkill\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGKILL",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGPIPE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGPIPE = sigpipe\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGPIPE",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGPOLL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGPOLL = sigpoll\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGPOLL",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGPROF-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGPROF = sigprof\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGPROF",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGQUIT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGQUIT = sigquit\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGQUIT",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGSEGV-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGSEGV = sigsegv\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGSEGV",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGSTOP-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGSTOP = sigstop\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGSTOP",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGSYS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGSYS = sigsys\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGSYS",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGTERM-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGTERM = sigterm\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGTERM",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGTRAP-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGTRAP = sigtrap\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGTRAP",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGTSTP-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGTSTP = sigtstp\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGTSTP",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGTTIN-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGTTIN = sigttin\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGTTIN",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGTTOU-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGTTOU = sigttou\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGTTOU",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGURG-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGURG = sigurg\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGURG",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGUSR1-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGUSR1 = sigusr1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGUSR1",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGUSR2-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGUSR2 = sigusr2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGUSR2",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGVTALRM-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGVTALRM = sigvtalrm\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGVTALRM",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGWINCH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGWINCH = sigwinch\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGWINCH",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGXCPU-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGXCPU = sigxcpu\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGXCPU",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/SIGXFSZ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal SIGXFSZ = sigxfsz\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SIGXFSZ",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigabrt-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigabrt = const ProcessSignal._(6, \"SIGABRT\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigabrt",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigalrm-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigalrm = const ProcessSignal._(14, \"SIGALRM\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigalrm",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigbus-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigbus = const ProcessSignal._(7, \"SIGBUS\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigbus",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigchld-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigchld = const ProcessSignal._(17, \"SIGCHLD\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigchld",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigcont-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigcont = const ProcessSignal._(18, \"SIGCONT\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigcont",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigfpe-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigfpe = const ProcessSignal._(8, \"SIGFPE\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigfpe",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sighup-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sighup = const ProcessSignal._(1, \"SIGHUP\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sighup",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigill-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigill = const ProcessSignal._(4, \"SIGILL\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigill",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigint-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigint = const ProcessSignal._(2, \"SIGINT\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigint",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigkill-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigkill = const ProcessSignal._(9, \"SIGKILL\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigkill",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigpipe-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigpipe = const ProcessSignal._(13, \"SIGPIPE\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigpipe",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigpoll-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigpoll = const ProcessSignal._(29, \"SIGPOLL\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigpoll",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigprof-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigprof = const ProcessSignal._(27, \"SIGPROF\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigprof",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigquit-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigquit = const ProcessSignal._(3, \"SIGQUIT\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigquit",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigsegv-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigsegv = const ProcessSignal._(11, \"SIGSEGV\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigsegv",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigstop-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigstop = const ProcessSignal._(19, \"SIGSTOP\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigstop",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigsys-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigsys = const ProcessSignal._(31, \"SIGSYS\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigsys",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigterm-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigterm = const ProcessSignal._(15, \"SIGTERM\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigterm",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigtrap-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigtrap = const ProcessSignal._(5, \"SIGTRAP\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigtrap",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigtstp-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigtstp = const ProcessSignal._(20, \"SIGTSTP\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigtstp",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigttin-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigttin = const ProcessSignal._(21, \"SIGTTIN\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigttin",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigttou-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigttou = const ProcessSignal._(22, \"SIGTTOU\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigttou",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigurg-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigurg = const ProcessSignal._(23, \"SIGURG\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigurg",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigusr1-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigusr1 = const ProcessSignal._(10, \"SIGUSR1\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigusr1",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigusr2-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigusr2 = const ProcessSignal._(12, \"SIGUSR2\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigusr2",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigvtalrm-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigvtalrm = const ProcessSignal._(26, \"SIGVTALRM\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigvtalrm",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigwinch-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigwinch = const ProcessSignal._(28, \"SIGWINCH\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigwinch",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigxcpu-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigxcpu = const ProcessSignal._(24, \"SIGXCPU\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigxcpu",
                    "memberOf": "dart:io.ProcessSignal"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessSignal\/sigxfsz-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ProcessSignal sigxfsz = const ProcessSignal._(25, \"SIGXFSZ\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "sigxfsz",
                    "memberOf": "dart:io.ProcessSignal"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ProcessSignal-class.html",
            "desc": "<p>On Posix systems, <a href=\"dart-io\/ProcessSignal-class.html\">ProcessSignal<\/a> is used to send a specific signal\nto a child process, see <code>Process.kill<\/code>.<\/p>\n<p>Some <a href=\"dart-io\/ProcessSignal-class.html\">ProcessSignal<\/a>s can also be watched, as a way to intercept the default\nsignal handler and implement another. See <a href=\"dart-io\/ProcessSignal\/watch.html\">ProcessSignal.watch<\/a> for more\ninformation.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessSignal"
        },
        {
            "name": "dart:io.ProcessStartMode",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ProcessStartMode",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/ProcessStartMode\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt;\n    const [\"normal\", \"inheritStdio\", \"detached\", \"detachedWithStdio\"][_mode];<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/DETACHED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const DETACHED = detached\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DETACHED",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/DETACHED_WITH_STDIO-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const DETACHED_WITH_STDIO = detachedWithStdio\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DETACHED_WITH_STDIO",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/INHERIT_STDIO-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const INHERIT_STDIO = inheritStdio\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "INHERIT_STDIO",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/NORMAL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const NORMAL = normal\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NORMAL",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/detached-constant.html",
                    "desc": "<p>Detached child process with no open communication channel.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const detached = const ProcessStartMode._internal(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "detached",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/detachedWithStdio-constant.html",
                    "desc": "<p>Detached child process with stdin, stdout and stderr still open\nfor communication with the child.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const detachedWithStdio = const ProcessStartMode._internal(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "detachedWithStdio",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/inheritStdio-constant.html",
                    "desc": "<p>Stdio handles are inherited by the child process.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const inheritStdio = const ProcessStartMode._internal(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "inheritStdio",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "type": "",
                    "href": "dart-io\/ProcessStartMode\/normal-constant.html",
                    "desc": "<p>Normal child process.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const normal = const ProcessStartMode._internal(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "normal",
                    "memberOf": "dart:io.ProcessStartMode"
                },
                {
                    "name": "values",
                    "type": "dart:core.List<dart:io.ProcessStartMode>",
                    "types": [
                        "dart:core.List",
                        "dart:io.ProcessStartMode"
                    ],
                    "desc": "",
                    "memberOf": "dart:io.ProcessStartMode",
                    "isConstant": false,
                    "href": "dart-io\/ProcessStartMode\/values.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;ProcessStartMode&gt; get values =&gt; const &lt;ProcessStartMode&gt;[\n      normal,\n      inheritStdio,\n      detached,\n      detachedWithStdio\n    ];<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ProcessStartMode-class.html",
            "desc": "<p>Modes for running a new process.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ProcessStartMode"
        },
        {
            "type": "",
            "href": "dart-io\/READ-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "READ",
            "memberOf": "dart:io"
        },
        {
            "name": "dart:io.RandomAccessFile",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RandomAccessFile",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RandomAccessFile\/RandomAccessFile.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "close",
                    "type": "dart:async.Future",
                    "desc": "<p>Closes the file. Returns a <code>Future<\/code> that\ncompletes when it has been closed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; close();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "closeSync",
                    "type": "",
                    "desc": "<p>Synchronously closes the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/closeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void closeSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "flush",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Flushes the contents of the file to disk. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the flush operation completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/flush.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; flush();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "flushSync",
                    "type": "",
                    "desc": "<p>Synchronously flushes the contents of the file to disk.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/flushSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void flushSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "length",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Gets the length of the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the length in bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; length();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "lengthSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously gets the length of the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/lengthSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lengthSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lock",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Locks the file or part of the file.<\/p>\n<p>By default an exclusive lock will be obtained, but that can be overridden\nby the <code>mode<\/code> argument.<\/p>\n<p>Locks the byte range from <code>start<\/code> to <code>end<\/code> of the file, with the\nbyte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is locked, If only <code>start<\/code> is specified\nthe file is locked from byte position <code>start<\/code> to the end of the\nfile, no matter how large it grows. It is possible to specify an\nexplicit value of <code>end<\/code> which is past the current length of the file.<\/p>\n<p>To obtain an exclusive lock on a file it must be opened for writing.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/FileLock\/exclusive-constant.html\">FileLock.exclusive<\/a> or <a href=\"dart-io\/FileLock\/shared-constant.html\">FileLock.shared<\/a>, an error is\nsignaled if the lock cannot be obtained. If <code>mode<\/code> is\n<a href=\"dart-io\/FileLock\/blockingExclusive-constant.html\">FileLock.blockingExclusive<\/a> or <a href=\"dart-io\/FileLock\/blockingShared-constant.html\">FileLock.blockingShared<\/a>, the\nreturned <a href=\"dart-async\/Future-class.html\">Future<\/a> is resolved only when the lock has been obtained.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>On Linux and OS X this uses advisory locks, which have the\nsurprising semantics that all locks associated with a given file\nare removed when <em>any<\/em> file descriptor for that file is closed by\nthe process. Note that this does not actually lock the file for\naccess. Also note that advisory locks are on a process\nlevel. This means that several isolates in the same process can\nobtain an exclusive lock on the same file.<\/p>\n<p>On Windows the regions used for lock and unlock needs to match. If that\nis not the case unlocking will result in the OS error \"The segment is\nalready unlocked\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileLock",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/lock.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; lock(\n    [FileLock mode = FileLock.exclusive, int start = 0, int end = -1]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "lockSync",
                    "type": "",
                    "desc": "<p>Synchronously locks the file or part of the file.<\/p>\n<p>By default an exclusive lock will be obtained, but that can be overridden\nby the <code>mode<\/code> argument.<\/p>\n<p>Locks the byte range from <code>start<\/code> to <code>end<\/code> of the file ,with the\nbyte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is locked, If only <code>start<\/code> is specified\nthe file is locked from byte position <code>start<\/code> to the end of the\nfile, no matter how large it grows. It is possible to specify an\nexplicit value of <code>end<\/code> which is past the current length of the file.<\/p>\n<p>To obtain an exclusive lock on a file it must be opened for writing.<\/p>\n<p>If <code>mode<\/code> is <a href=\"dart-io\/FileLock\/exclusive-constant.html\">FileLock.exclusive<\/a> or <a href=\"dart-io\/FileLock\/shared-constant.html\">FileLock.shared<\/a>, an exception is\nthrown if the lock cannot be obtained. If <code>mode<\/code> is\n<a href=\"dart-io\/FileLock\/blockingExclusive-constant.html\">FileLock.blockingExclusive<\/a> or <a href=\"dart-io\/FileLock\/blockingShared-constant.html\">FileLock.blockingShared<\/a>, the\ncall returns only after the lock has been obtained.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>On Linux and OS X this uses advisory locks, which have the\nsurprising semantics that all locks associated with a given file\nare removed when <em>any<\/em> file descriptor for that file is closed by\nthe process. Note that this does not actually lock the file for\naccess. Also note that advisory locks are on a process\nlevel. This means that several isolates in the same process can\nobtain an exclusive lock on the same file.<\/p>\n<p>On Windows the regions used for lock and unlock needs to match. If that\nis not the case unlocking will result in the OS error \"The segment is\nalready unlocked\".<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "mode",
                            "type": "dart:io.FileLock",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/lockSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void lockSync(\n    [FileLock mode = FileLock.exclusive, int start = 0, int end = -1]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "position",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Gets the current byte position in the file. Returns a\n<code>Future&lt;int&gt;<\/code> that completes with the position.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/position.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; position();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "positionSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously gets the current byte position in the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/positionSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int positionSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "read",
                    "type": "dart:async.Future<dart:core.List<dart:core.int>>",
                    "desc": "<p>Reads <code>bytes<\/code> bytes from a file and returns the result as a list of bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/read.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;List&lt;int&gt;&gt; read(int bytes);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readByte",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Reads a byte from the file. Returns a <code>Future&lt;int&gt;<\/code> that\ncompletes with the byte, or with -1 if end-of-file has been reached.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/readByte.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; readByte();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readByteSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously reads a single byte from the file. If end-of-file\nhas been reached -1 is returned.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/readByteSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readByteSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readInto",
                    "type": "dart:async.Future<dart:core.int>",
                    "desc": "<p>Reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the file. If <code>start<\/code> is present,\nthe bytes will be filled into <code>buffer<\/code> from at index <code>start<\/code>, otherwise\nindex 0. If <code>end<\/code> is present, the <code>end<\/code> - <code>start<\/code> bytes will be read into\n<code>buffer<\/code>, otherwise up to <code>buffer.length<\/code>. If <code>end<\/code> == <code>start<\/code> nothing\nhappens.<\/p>\n<p>Returns a <code>Future&lt;int&gt;<\/code> that completes with the number of bytes read.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/readInto.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;int&gt; readInto(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readIntoSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the file. If <code>start<\/code>\nis present, the bytes will be filled into <code>buffer<\/code> from at index <code>start<\/code>,\notherwise index 0.  If <code>end<\/code> is present, the <code>end<\/code> - <code>start<\/code> bytes will be\nread into <code>buffer<\/code>, otherwise up to <code>buffer.length<\/code>. If <code>end<\/code> == <code>start<\/code>\nnothing happens.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/readIntoSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readIntoSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readSync",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Synchronously reads a maximum of <code>bytes<\/code> bytes from a file and\nreturns the result in a list of bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/readSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; readSync(int bytes);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "setPosition",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Sets the byte position in the file. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the position has been set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/setPosition.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; setPosition(int position);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "setPositionSync",
                    "type": "",
                    "desc": "<p>Synchronously sets the byte position in the file.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/setPositionSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setPositionSync(int position);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a human-readable string for this RandomAccessFile instance.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "truncate",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Truncates (or extends) the file to <code>length<\/code> bytes. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the truncation has been performed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/truncate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; truncate(int length);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "truncateSync",
                    "type": "",
                    "desc": "<p>Synchronously truncates (or extends) the file to <code>length<\/code> bytes.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "length",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/truncateSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void truncateSync(int length);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "unlock",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Unlocks the file or part of the file.<\/p>\n<p>Unlocks the byte range from <code>start<\/code> to <code>end<\/code> of the file, with\nthe byte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is unlocked, If only <code>start<\/code> is\nspecified the file is unlocked from byte position <code>start<\/code> to the\nend of the file.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>See <a href=\"dart-io\/RandomAccessFile\/lock.html\">lock<\/a> for more details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/unlock.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; unlock([int start = 0, int end = -1]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "unlockSync",
                    "type": "",
                    "desc": "<p>Synchronously unlocks the file or part of the file.<\/p>\n<p>Unlocks the byte range from <code>start<\/code> to <code>end<\/code> of the file, with\nthe byte at position <code>end<\/code> not included. If no arguments are\nspecified, the full file is unlocked, If only <code>start<\/code> is\nspecified the file is unlocked from byte position <code>start<\/code> to the\nend of the file.<\/p>\n<p><em>NOTE<\/em> file locking does have slight differences in behavior across\nplatforms:<\/p>\n<p>See <a href=\"dart-io\/RandomAccessFile\/lockSync.html\">lockSync<\/a> for more details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/unlockSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void unlockSync([int start = 0, int end = -1]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeByte",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Writes a single byte to the file. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the write completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/writeByte.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; writeByte(int value);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "writeByteSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously writes a single byte to the file. Returns the\nnumber of bytes successfully written.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/writeByteSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int writeByteSync(int value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "writeFrom",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Writes from a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> to the file. It will read the buffer from index\n<code>start<\/code> to index <code>end<\/code>. If <code>start<\/code> is omitted, it'll start from index 0.\nIf <code>end<\/code> is omitted, it will write to end of <code>buffer<\/code>.<\/p>\n<p>Returns a <code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\n<a href=\"dart-io\/RandomAccessFile-class.html\">RandomAccessFile<\/a> when the write completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/writeFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; writeFrom(List&lt;int&gt; buffer,\n    [int start = 0, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "writeFromSync",
                    "type": "",
                    "desc": "<p>Synchronously writes from a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> to the file. It will read the\nbuffer from index <code>start<\/code> to index <code>end<\/code>. If <code>start<\/code> is omitted, it'll\nstart from index 0. If <code>end<\/code> is omitted, it will write to the end of\n<code>buffer<\/code>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/writeFromSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeFromSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeString",
                    "type": "dart:async.Future<dart:io.RandomAccessFile>",
                    "desc": "<p>Writes a string to the file using the given <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>. Returns a\n<code>Future&lt;RandomAccessFile&gt;<\/code> that completes with this\nRandomAccessFile when the write completes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/writeString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RandomAccessFile&gt; writeString(String string,\n    {Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RandomAccessFile"
                    ]
                },
                {
                    "name": "writeStringSync",
                    "type": "",
                    "desc": "<p>Synchronously writes a single string to the file using the given\n<a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a>.<\/p>\n<p>Throws a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> if the operation fails.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RandomAccessFile",
                    "sig": "",
                    "params": [
                        {
                            "name": "string",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RandomAccessFile\/writeStringSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeStringSync(String string, {Encoding encoding: utf8});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the path of the file underlying this RandomAccessFile.<\/p>\n        ",
                    "memberOf": "dart:io.RandomAccessFile",
                    "isConstant": false,
                    "href": "dart-io\/RandomAccessFile\/path.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RandomAccessFile-class.html",
            "desc": "<p><code>RandomAccessFile<\/code> provides random access to the data in a\nfile.<\/p>\n<p><code>RandomAccessFile<\/code> objects are obtained by calling the\n<code>open<\/code> method on a <a href=\"dart-io\/File-class.html\">File<\/a> object.<\/p>\n<p>A <code>RandomAccessFile<\/code> have both asynchronous and synchronous\nmethods. The asynchronous methods all return a <code>Future<\/code>\nwhereas the synchronous methods will return the result directly,\nand block the current isolate until the result is ready.<\/p>\n<p>At most one asynchronous method can be pending on a given <code>RandomAccessFile<\/code>\ninstance at the time. If an asynchronous method is called when one is\nalready in progress a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a> is thrown.<\/p>\n<p>If an asynchronous method is pending it is also not possible to call any\nsynchronous methods. This will also throw a <a href=\"dart-io\/FileSystemException-class.html\">FileSystemException<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RandomAccessFile"
        },
        {
            "name": "dart:io.RawDatagramSocket",
            "extends": [
                "dart:io.RawSocketEvent",
                "dart:async.Stream",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawDatagramSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RawDatagramSocket\/RawDatagramSocket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bind",
                    "type": "dart:async.Future<dart:io.RawDatagramSocket>",
                    "desc": "<p>Creates a new raw datagram socket binding it to an address and\nport.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reuseAddress",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reusePort",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ttl",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/bind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;RawDatagramSocket&gt; bind(host, int port,\n    {bool reuseAddress: true, bool reusePort: false, int ttl: 1});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawDatagramSocket"
                    ]
                },
                {
                    "name": "close",
                    "type": "",
                    "desc": "<p>Close the datagram socket.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getRawOption",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "<p>Use <a href=\"dart-io\/RawDatagramSocket\/getRawOption.html\">getRawOption<\/a> to get low level information about the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See\n<a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for available options.<\/p>\n<p>Returns <a href=\"dart-io\/RawSocketOption\/value.html\">RawSocketOption.value<\/a> on success.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.RawSocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/getRawOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List getRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "joinMulticast",
                    "type": "",
                    "desc": "<p>Join a multicast group.<\/p>\n<p>If an error occur when trying to join the multicast group an\nexception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "group",
                            "type": "dart:io.InternetAddress",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "interface",
                            "type": "dart:io.NetworkInterface",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/joinMulticast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void joinMulticast(InternetAddress group, [NetworkInterface interface]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "leaveMulticast",
                    "type": "",
                    "desc": "<p>Leave a multicast group.<\/p>\n<p>If an error occur when trying to join the multicase group an\nexception is thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "group",
                            "type": "dart:io.InternetAddress",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "interface",
                            "type": "dart:io.NetworkInterface",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/leaveMulticast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void leaveMulticast(InternetAddress group, [NetworkInterface interface]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "receive",
                    "type": "dart:io.Datagram",
                    "desc": "<p>Receive a datagram. If there are no datagrams available <code>null<\/code> is\nreturned.<\/p>\n<p>The maximum length of the datagram that can be received is 65503 bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/receive.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Datagram receive();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "send",
                    "type": "dart:core.int",
                    "desc": "<p>Send a datagram.<\/p>\n<p>Returns the number of bytes written. This will always be either\nthe size of <code>buffer<\/code> or <code>0<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "address",
                            "type": "dart:io.InternetAddress",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/send.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int send(List&lt;int&gt; buffer, InternetAddress address, int port);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setRawOption",
                    "type": "",
                    "desc": "<p>Use <a href=\"dart-io\/RawDatagramSocket\/setRawOption.html\">setRawOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for\navailable options.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawDatagramSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.RawSocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawDatagramSocket\/setRawOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "broadcastEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set or get, whether IPv4 broadcast is enabled.<\/p>\n<p>IPv4 broadcast needs to be enabled by the sender for sending IPv4\nbroadcast packages. By default IPv4 broadcast is disabled.<\/p>\n<p>For IPv6 there is no general broadcast mechanism. Use multicast\ninstead.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/broadcastEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool broadcastEnabled\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "multicastHops",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Set or get, the maximum network hops for multicast packages\noriginating from this socket.<\/p>\n<p>For IPv4 this is referred to as TTL (time to live).<\/p>\n<p>By default this value is 1 causing multicast traffic to stay on\nthe local network.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/multicastHops.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int multicastHops\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "multicastInterface",
                    "type": "dart:io.NetworkInterface",
                    "types": [],
                    "desc": "<p>Set or get, the network interface used for outgoing multicast packages.<\/p>\n<p>A value of <code>null<\/code>indicate that the system chooses the network\ninterface to use.<\/p>\n<p>By default this value is <code>null<\/code><\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/multicastInterface.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">NetworkInterface multicastInterface\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "multicastLoopback",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set or get, whether multicast traffic is looped back to the host.<\/p>\n<p>By default multicast loopback is enabled.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/multicastLoopback.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool multicastLoopback\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "readEventsEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set or get, if the <a href=\"dart-io\/RawDatagramSocket-class.html\">RawDatagramSocket<\/a> should listen for\n<a href=\"dart-io\/RawSocketEvent\/read-constant.html\">RawSocketEvent.read<\/a> events. Default is <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/readEventsEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool readEventsEnabled\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "writeEventsEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set or get, if the <a href=\"dart-io\/RawDatagramSocket-class.html\">RawDatagramSocket<\/a> should listen for\n<a href=\"dart-io\/RawSocketEvent\/write-constant.html\">RawSocketEvent.write<\/a> events. Default is <code>true<\/code>.  This is a\none-shot listener, and writeEventsEnabled must be set to true\nagain to receive another write event.<\/p>\n        ",
                    "memberOf": "dart:io.RawDatagramSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawDatagramSocket\/writeEventsEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool writeEventsEnabled\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawDatagramSocket-class.html",
            "desc": "<p>The <a href=\"dart-io\/RawDatagramSocket-class.html\">RawDatagramSocket<\/a> is a low-level interface to an UDP socket,\nexposing the raw events signaled by the system. It's a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> of\n<a href=\"dart-io\/RawSocketEvent-class.html\">RawSocketEvent<\/a>s.<\/p>\n<p>Note that the event <a href=\"dart-io\/RawSocketEvent\/readClosed-constant.html\">RawSocketEvent.readClosed<\/a> will never be\nreceived as an UDP socket cannot be closed by a remote peer.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawDatagramSocket"
        },
        {
            "name": "dart:io.RawSecureServerSocket",
            "extends": [
                "dart:io.RawSecureSocket",
                "dart:async.Stream",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "bind",
                    "type": "dart:async.Future<dart:io.RawSecureServerSocket>",
                    "desc": "<p>Returns a future for a <a href=\"dart-io\/RawSecureServerSocket-class.html\">RawSecureServerSocket<\/a>. When the future\ncompletes the server socket is bound to the given <code>address<\/code> and\n<code>port<\/code> and has started listening on it.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawSecureServerSocket\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>Incoming client connections are promoted to secure connections,\nusing the server certificate and key set in <code>context<\/code>.<\/p>\n<p><code>address<\/code> must be given as a numeric address, not a host name.<\/p>\n<p>To request or require that clients authenticate by providing an SSL (TLS)\nclient certificate, set the optional parameters requestClientCertificate or\nrequireClientCertificate to true.  Require implies request, so one doesn't\nneed to specify both.  To check whether a client certificate was received,\ncheck SecureSocket.peerCertificate after connecting.  If no certificate\nwas received, the result will be null.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negotiation with\nclients.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/RawSecureSocket\/selectedProtocol.html\">RawSecureSocket.selectedProtocol<\/a>.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional\nRawSecureServerSocket objects can bind to the same combination of\n<code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.  If <code>shared<\/code> is <code>true<\/code> and more\n<code>RawSecureServerSocket<\/code>s from this isolate or other isolates are bound to\nthe port, then the incoming connections will be distributed among all the\nbound <code>RawSecureServerSocket<\/code>s. Connections can be distributed over\nmultiple isolates this way.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backlog",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "v6Only",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requireClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "shared",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureServerSocket\/bind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureServerSocket&gt; bind(\n    address, int port, SecurityContext context,\n    {int backlog: 0,\n    bool v6Only: false,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols,\n    bool shared: false}) {\n  return RawServerSocket\n      .bind(address, port, backlog: backlog, v6Only: v6Only, shared: shared)\n      .then((serverSocket) =&gt; new RawSecureServerSocket._(\n          serverSocket,\n          context,\n          requestClientCertificate,\n          requireClientCertificate,\n          supportedProtocols));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSecureServerSocket"
                    ]
                },
                {
                    "name": "close",
                    "type": "dart:async.Future<dart:io.RawSecureServerSocket>",
                    "desc": "<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureServerSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RawSecureServerSocket&gt; close() {\n  _closed = true;\n  return _socket.close().then((_) =&gt; this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSecureServerSocket"
                    ]
                },
                {
                    "name": "listen",
                    "type": "dart:async.StreamSubscription<dart:io.RawSecureSocket>",
                    "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "s",
                            "type": "dart:io.RawSecureSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "s",
                            "type": "dart:io.RawSecureSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onDone",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "cancelOnError",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureServerSocket\/listen.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;RawSecureSocket&gt; listen(void onData(RawSecureSocket s),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _controller.stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.StreamSubscription",
                        "dart:io.RawSecureSocket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureServerSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address =&gt; _socket.address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureServerSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port =&gt; _socket.port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "requestClientCertificate",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureServerSocket\/requestClientCertificate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool requestClientCertificate\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "requireClientCertificate",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureServerSocket\/requireClientCertificate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool requireClientCertificate\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "supportedProtocols",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "",
                    "memberOf": "dart:io.RawSecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureServerSocket\/supportedProtocols.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;String&gt; supportedProtocols\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawSecureServerSocket-class.html",
            "desc": "<p>The RawSecureServerSocket is a server socket, providing a stream of low-level\n<a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a>s.<\/p>\n<p>See <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> for more info.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawSecureServerSocket"
        },
        {
            "name": "dart:io.RawSecureSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawSecureSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RawSecureSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RawSecureSocket\/RawSecureSocket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "connect",
                    "type": "dart:async.Future<dart:io.RawSecureSocket>",
                    "desc": "<p>Constructs a new secure client socket and connect it to the given\nhost on the given port. The returned <a href=\"dart-async\/Future-class.html\">Future<\/a> is completed with the\nRawSecureSocket when it is connected and ready for subscription.<\/p>\n<p>The certificate provided by the server is checked using the trusted\ncertificates set in the SecurityContext object If a certificate and key are\nset on the client, using <a href=\"dart-io\/SecurityContext\/useCertificateChain.html\">SecurityContext.useCertificateChain<\/a> and\n<a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">SecurityContext.usePrivateKey<\/a>, and the server asks for a client\ncertificate, then that client certificate is sent to the server.<\/p>\n<p><code>onBadCertificate<\/code> is an optional handler for unverifiable certificates.\nThe handler receives the <a href=\"dart-io\/X509Certificate-class.html\">X509Certificate<\/a>, and can inspect it and\ndecide (or let the user decide) whether to accept\nthe connection or not.  The handler should return true\nto continue the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> connection.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negotiation with the\nserver.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/RawSecureSocket\/selectedProtocol.html\">RawSecureSocket.selectedProtocol<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureSocket\/connect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureSocket&gt; connect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols,\n    Duration timeout}) {\n  _RawSecureSocket._verifyFields(\n      host, port, false, false, false, onBadCertificate);\n  return RawSocket.connect(host, port, timeout: timeout).then((socket) {\n    return secure(socket,\n        context: context,\n        onBadCertificate: onBadCertificate,\n        supportedProtocols: supportedProtocols);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSecureSocket"
                    ]
                },
                {
                    "name": "renegotiate",
                    "type": "",
                    "desc": "<p>Renegotiate an existing secure connection, renewing the session keys\nand possibly changing the connection properties.<\/p>\n<p>This repeats the SSL or TLS handshake, with options that allow clearing\nthe session cache and requesting a client certificate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "useSessionCache",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requireClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureSocket\/renegotiate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void renegotiate(\n    {bool useSessionCache: true,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "secure",
                    "type": "dart:async.Future<dart:io.RawSecureSocket>",
                    "desc": "<p>Takes an already connected <code>socket<\/code> and starts client side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is prepared for TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, pass the existing\nsubscription in the <code>subscription<\/code> parameter. The <a href=\"dart-io\/RawSecureSocket\/secure.html\">secure<\/a>\noperation will take over the subscription by replacing the\nhandlers with it own secure processing. The caller must not touch\nthis subscription anymore. Passing a paused subscription is an\nerror.<\/p>\n<p>If the <code>host<\/code> argument is passed it will be used as the host name\nfor the TLS handshake. If <code>host<\/code> is not passed the host name from\nthe <code>socket<\/code> will be used. The <code>host<\/code> can be either a <a href=\"dart-core\/String-class.html\">String<\/a> or\nan <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>.<\/p>\n<p>Calling this function will <em>not<\/em> cause a DNS host lookup. If the\n<code>host<\/code> passed is a <a href=\"dart-core\/String-class.html\">String<\/a> the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> for the\nresulting <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> will have this passed in <code>host<\/code> as its\nhost value and the internet address of the already connected\nsocket as its address value.<\/p>\n<p>See <a href=\"dart-io\/RawSecureSocket\/connect.html\">connect<\/a> for more information on the arguments.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "socket",
                            "type": "dart:io.RawSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "subscription",
                            "type": "dart:async.StreamSubscription<dart:io.RawSocketEvent>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.StreamSubscription",
                                "dart:io.RawSocketEvent"
                            ]
                        },
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureSocket\/secure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureSocket&gt; secure(RawSocket socket,\n    {StreamSubscription&lt;RawSocketEvent&gt; subscription,\n    host,\n    SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols}) {\n  socket.readEventsEnabled = false;\n  socket.writeEventsEnabled = false;\n  return _RawSecureSocket.connect(\n      host != null ? host : socket.address.host, socket.port,\n      is_server: false,\n      socket: socket,\n      subscription: subscription,\n      context: context,\n      onBadCertificate: onBadCertificate,\n      supportedProtocols: supportedProtocols);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSecureSocket"
                    ]
                },
                {
                    "name": "secureServer",
                    "type": "dart:async.Future<dart:io.RawSecureSocket>",
                    "desc": "<p>Takes an already connected <code>socket<\/code> and starts server side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is going to start the TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, pass the existing\nsubscription in the <code>subscription<\/code> parameter. The <a href=\"dart-io\/RawSecureSocket\/secureServer.html\">secureServer<\/a>\noperation will take over the subscription by replacing the\nhandlers with it own secure processing. The caller must not touch\nthis subscription anymore. Passing a paused subscription is an\nerror.<\/p>\n<p>If some of the data of the TLS handshake has already been read\nfrom the socket this data can be passed in the <code>bufferedData<\/code>\nparameter. This data will be processed before any other data\navailable on the socket.<\/p>\n<p>See <a href=\"dart-io\/RawSecureServerSocket\/bind.html\">RawSecureServerSocket.bind<\/a> for more information on the\narguments.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "socket",
                            "type": "dart:io.RawSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "subscription",
                            "type": "dart:async.StreamSubscription<dart:io.RawSocketEvent>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.StreamSubscription",
                                "dart:io.RawSocketEvent"
                            ]
                        },
                        {
                            "name": "bufferedData",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requireClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureSocket\/secureServer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;RawSecureSocket&gt; secureServer(\n    RawSocket socket, SecurityContext context,\n    {StreamSubscription&lt;RawSocketEvent&gt; subscription,\n    List&lt;int&gt; bufferedData,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols}) {\n  socket.readEventsEnabled = false;\n  socket.writeEventsEnabled = false;\n  return _RawSecureSocket.connect(socket.address, socket.remotePort,\n      context: context,\n      is_server: true,\n      socket: socket,\n      subscription: subscription,\n      bufferedData: bufferedData,\n      requestClientCertificate: requestClientCertificate,\n      requireClientCertificate: requireClientCertificate,\n      supportedProtocols: supportedProtocols);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSecureSocket"
                    ]
                },
                {
                    "name": "startConnect",
                    "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.RawSecureSocket>>",
                    "desc": "<p>Like <a href=\"dart-io\/RawSecureSocket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/RawSecureSocket-class.html\">RawSecureSocket<\/a> is no\nlonger needed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSecureSocket\/startConnect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ConnectionTask&lt;RawSecureSocket&gt;&gt; startConnect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols}) {\n  return RawSocket.startConnect(host, port)\n      .then((ConnectionTask&lt;RawSocket&gt; rawState) {\n    Future&lt;RawSecureSocket&gt; socket = rawState.socket.then((rawSocket) {\n      return secure(rawSocket,\n          context: context,\n          onBadCertificate: onBadCertificate,\n          supportedProtocols: supportedProtocols);\n    });\n    return new ConnectionTask&lt;RawSecureSocket&gt;._(\n        socket: socket, onCancel: rawState._onCancel);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ConnectionTask",
                        "dart:io.RawSecureSocket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "peerCertificate",
                    "type": "dart:io.X509Certificate",
                    "types": [],
                    "desc": "<p>Get the peer certificate for a connected RawSecureSocket.  If this\nRawSecureSocket is the server end of a secure socket connection,\n<a href=\"dart-io\/RawSecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the client certificate, or null, if no\nclient certificate was received.  If it is the client end,\n<a href=\"dart-io\/RawSecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the server's certificate.<\/p>\n        ",
                    "memberOf": "dart:io.RawSecureSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureSocket\/peerCertificate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">X509Certificate get peerCertificate;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "selectedProtocol",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The protocol which was selected during protocol negotiation.<\/p>\n<p>Returns null if one of the peers does not have support for ALPN, did not\nspecify a list of supported ALPN protocols or there was no common\nprotocol between client and server.<\/p>\n        ",
                    "memberOf": "dart:io.RawSecureSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSecureSocket\/selectedProtocol.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get selectedProtocol;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "dart:io.RawSecureServerSocket"
            ],
            "realImplementors": [
                "dart:io.RawSecureServerSocket"
            ],
            "cn": [],
            "href": "dart-io\/RawSecureSocket-class.html",
            "desc": "<p>RawSecureSocket provides a secure (SSL or TLS) network connection.\nClient connections to a server are provided by calling\nRawSecureSocket.connect.  A secure server, created with\n<a href=\"dart-io\/RawSecureServerSocket-class.html\">RawSecureServerSocket<\/a>, also returns RawSecureSocket objects representing\nthe server end of a secure connection.\nThe certificate provided by the server is checked\nusing the trusted certificates set in the SecurityContext object.\nThe default <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> object contains a built-in set of trusted\nroot certificates for well-known certificate authorities.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawSecureSocket"
        },
        {
            "name": "dart:io.RawServerSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawServerSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RawServerSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RawServerSocket\/RawServerSocket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bind",
                    "type": "dart:async.Future<dart:io.RawServerSocket>",
                    "desc": "<p>Returns a future for a <code>RawServerSocket<\/code>. When the future\ncompletes the server socket is bound to the given <code>address<\/code> and\n<code>port<\/code> and has started listening on it.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawServerSocket\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <code>v6Only<\/code> to set\nversion 6 only.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will\nbe chosen by the system. The actual port used can be retrieved\nusing the <code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional RawServerSocket\nobjects can bind to the same combination of <code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.\nIf <code>shared<\/code> is <code>true<\/code> and more <code>RawServerSocket<\/code>s from this isolate or\nother isolates are bound to the port, then the incoming connections will be\ndistributed among all the bound <code>RawServerSocket<\/code>s. Connections can be\ndistributed over multiple isolates this way.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawServerSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backlog",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "v6Only",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shared",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawServerSocket\/bind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;RawServerSocket&gt; bind(address, int port,\n    {int backlog: 0, bool v6Only: false, bool shared: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawServerSocket"
                    ]
                },
                {
                    "name": "close",
                    "type": "dart:async.Future<dart:io.RawServerSocket>",
                    "desc": "<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawServerSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawServerSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RawServerSocket&gt; close();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawServerSocket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawServerSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawServerSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawServerSocket-class.html",
            "desc": "<p>A <a href=\"dart-io\/RawServerSocket-class.html\">RawServerSocket<\/a> represents a listening socket, and provides a\nstream of low-level <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> objects, one for each connection\nmade to the listening socket.<\/p>\n<p>See <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> for more info.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawServerSocket"
        },
        {
            "name": "dart:io.RawSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RawSocket\/RawSocket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "available",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the number of received and non-read bytes in the socket that\ncan be read.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/available.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int available();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "close",
                    "type": "dart:async.Future<dart:io.RawSocket>",
                    "desc": "<p>Closes the socket. Returns a Future that completes with <a href=\"dart-io\/RawSocket-class.html\">this<\/a> when the\nunderlying connection is completely destroyed.<\/p>\n<p>Calling <a href=\"dart-io\/RawSocket\/close.html\">close<\/a> will never throw an exception\nand calling it several times is supported. Calling <a href=\"dart-io\/RawSocket\/close.html\">close<\/a> can result in\na <a href=\"dart-io\/RawSocketEvent\/readClosed-constant.html\">RawSocketEvent.readClosed<\/a> event.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;RawSocket&gt; close();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSocket"
                    ]
                },
                {
                    "name": "connect",
                    "type": "dart:async.Future<dart:io.RawSocket>",
                    "desc": "<p>Creates a new socket connection to the host and port and returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>\nthat will complete with either a <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> once connected or an error\nif the host-lookup or connection failed.<\/p>\n<p><code>host<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>host<\/code> is a\n<a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawSocket\/connect.html\">connect<\/a> will perform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and try\nall returned <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es, until connected. Unless a\nconnection was established, the error from the first failing connection is\nreturned.<\/p>\n<p>The argument <code>sourceAddress<\/code> can be used to specify the local\naddress to bind when making the connection. <code>sourceAddress<\/code> can either\nbe a <code>String<\/code> or an <code>InternetAddress<\/code>. If a <code>String<\/code> is passed it must\nhold a numeric IP address.<\/p>\n<p>The argument <code>timeout<\/code> is used to specify the maximum allowed time to wait\nfor a connection to be established. If <code>timeout<\/code> is longer than the system\nlevel timeout duration, a timeout may occur sooner than specified in\n<code>timeout<\/code>. On timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> is thrown and all ongoing\nconnection attempts to <code>host<\/code> are cancelled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/connect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;RawSocket&gt; connect(host, int port,\n    {sourceAddress, Duration timeout});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.RawSocket"
                    ]
                },
                {
                    "name": "getRawOption",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "<p>Use <a href=\"dart-io\/RawSocket\/getRawOption.html\">getRawOption<\/a> to get low level information about the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See\n<a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for available options.<\/p>\n<p>Returns the <a href=\"dart-io\/RawSocketOption\/value.html\">RawSocketOption.value<\/a> on success.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.RawSocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/getRawOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List getRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "read",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Read up to <code>len<\/code> bytes from the socket. This function is\nnon-blocking and will only return data if data is available. The\nnumber of bytes read can be less then <code>len<\/code> if fewer bytes are\navailable for immediate reading. If no data is available <code>null<\/code>\nis returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "len",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/read.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; read([int len]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "setOption",
                    "type": "dart:core.bool",
                    "desc": "<p>Use <a href=\"dart-io\/RawSocket\/setOption.html\">setOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/SocketOption-class.html\">SocketOption<\/a> for\navailable options.<\/p>\n<p>Returns <code>true<\/code> if the option was set successfully, false otherwise.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.SocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "enabled",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/setOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool setOption(SocketOption option, bool enabled);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setRawOption",
                    "type": "",
                    "desc": "<p>Use <a href=\"dart-io\/RawSocket\/setRawOption.html\">setRawOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for\navailable options.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.RawSocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/setRawOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "shutdown",
                    "type": "",
                    "desc": "<p>Shutdown the socket in the <code>direction<\/code>. Calling <a href=\"dart-io\/RawSocket\/shutdown.html\">shutdown<\/a> will never\nthrow an exception and calling it several times is supported. Calling\nshutdown with either <a href=\"dart-io\/SocketDirection\/both-constant.html\">SocketDirection.both<\/a> or <a href=\"dart-io\/SocketDirection\/receive-constant.html\">SocketDirection.receive<\/a>\ncan result in a <a href=\"dart-io\/RawSocketEvent\/readClosed-constant.html\">RawSocketEvent.readClosed<\/a> event.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:io.SocketDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/shutdown.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shutdown(SocketDirection direction);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "startConnect",
                    "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.RawSocket>>",
                    "desc": "<p>Like <a href=\"dart-io\/RawSocket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> is no\nlonger needed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/startConnect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;ConnectionTask&lt;RawSocket&gt;&gt; startConnect(host, int port,\n    {sourceAddress});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ConnectionTask",
                        "dart:io.RawSocket"
                    ]
                },
                {
                    "name": "write",
                    "type": "dart:core.int",
                    "desc": "<p>Writes up to <code>count<\/code> bytes of the buffer from <code>offset<\/code> buffer offset to\nthe socket. The number of successfully written bytes is returned. This\nfunction is non-blocking and will only write data if buffer space is\navailable in the socket.<\/p>\n<p>The default value for <code>offset<\/code> is 0, and the default value for <code>count<\/code> is\n<code>buffer.length - offset<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "count",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocket\/write.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int write(List&lt;int&gt; buffer, [int offset, int count]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> used to connect this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "readEventsEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set or get, if the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> should listen for <a href=\"dart-io\/RawSocket\/read.html\">RawSocketEvent.read<\/a>\nevents. Default is <code>true<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSocket\/readEventsEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool readEventsEnabled\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remoteAddress",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the remote <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> connected to by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSocket\/remoteAddress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get remoteAddress;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remotePort",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the remote port connected to by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSocket\/remotePort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get remotePort;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "writeEventsEnabled",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Set or get, if the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> should listen for <a href=\"dart-io\/RawSocket\/write.html\">RawSocketEvent.write<\/a>\nevents. Default is <code>true<\/code>.\nThis is a one-shot listener, and writeEventsEnabled must be set\nto true again to receive another write event.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSocket\/writeEventsEnabled.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool writeEventsEnabled\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawSocket-class.html",
            "desc": "<p>The <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a> is a low-level interface to a socket, exposing the raw\nevents signaled by the system. It's a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> of <a href=\"dart-io\/RawSocketEvent-class.html\">RawSocketEvent<\/a>s.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawSocket"
        },
        {
            "name": "dart:io.RawSocketEvent",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocketEvent",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawSocketEvent\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return const [\n    'RawSocketEvent.read',\n    'RawSocketEvent.write',\n    'RawSocketEvent.readClosed',\n    'RawSocketEvent.closed'\n  ][_value];\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/CLOSED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent CLOSED = closed\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CLOSED",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/READ-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent READ = read\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "READ",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/READ_CLOSED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent READ_CLOSED = readClosed\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "READ_CLOSED",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/WRITE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent WRITE = write\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "WRITE",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/closed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent closed = const RawSocketEvent._(3)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "closed",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/read-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent read = const RawSocketEvent._(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "read",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/readClosed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent readClosed = const RawSocketEvent._(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "readClosed",
                    "memberOf": "dart:io.RawSocketEvent"
                },
                {
                    "type": "",
                    "href": "dart-io\/RawSocketEvent\/write-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const RawSocketEvent write = const RawSocketEvent._(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "write",
                    "memberOf": "dart:io.RawSocketEvent"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "dart:io.RawDatagramSocket"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawSocketEvent-class.html",
            "desc": "<p>Events for the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawSocketEvent"
        },
        {
            "name": "dart:io.RawSocketOption",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawSocketOption",
                    "type": "",
                    "desc": "<p>Creates a RawSocketOption for getRawOption andSetRawOption.<\/p>\n<p>All arguments are required and must not be null.<\/p>\n<p>The level and option arguments correspond to level and optname arguments\non the get\/setsockopt native calls.<\/p>\n<p>The value argument and its length correspond to the optval and length\narguments on the native call.<\/p>\n<p>For a <code>getRawOption<\/code> call, the value parameter will be updated after a\nsuccessful call (although its length will not be changed).<\/p>\n<p>For a <code>setRawOption<\/code> call, the value parameter will be used set the\noption.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocketOption",
                    "sig": "",
                    "params": [
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "option",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/RawSocketOption\/RawSocketOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RawSocketOption(this.level, this.option, this.value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RawSocketOption.fromBool",
                    "type": "",
                    "desc": "<p>Convenience constructor for creating a bool based RawSocketOption.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocketOption",
                    "sig": "",
                    "params": [
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "option",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/RawSocketOption\/RawSocketOption.fromBool.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RawSocketOption.fromBool(int level, int option, bool value) =&gt;\n    RawSocketOption.fromInt(level, option, value == true ? 1 : 0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RawSocketOption.fromInt",
                    "type": "",
                    "desc": "<p>Convenience constructor for creating an int based RawSocketOption.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSocketOption",
                    "sig": "",
                    "params": [
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "option",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/RawSocketOption\/RawSocketOption.fromInt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RawSocketOption.fromInt(int level, int option, int value) {\n  if (value == null) {\n    value = 0;\n  }\n  final Uint8List list = Uint8List(4);\n  final buffer = ByteData.view(list.buffer);\n  buffer.setInt32(0, value);\n  return RawSocketOption(level, option, list);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "IPv4MulticastInterface",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket option for IP_MULTICAST_IF.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/IPv4MulticastInterface.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get IPv4MulticastInterface =&gt;\n    _getOptionValue(_RawSocketOptions.IP_MULTICAST_IF.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "IPv6MulticastInterface",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket option for IPV6_MULTICAST_IF.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/IPv6MulticastInterface.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get IPv6MulticastInterface =&gt;\n    _getOptionValue(_RawSocketOptions.IPV6_MULTICAST_IF.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The level for the option to set or get.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"dart-io\/RawSocketOption\/levelSocket.html\">RawSocketOption.levelSocket<\/a><\/li>\n<li><a href=\"dart-io\/RawSocketOption\/levelIPv4.html\">RawSocketOption.levelIPv4<\/a><\/li>\n<li><a href=\"dart-io\/RawSocketOption\/levelIPv6.html\">RawSocketOption.levelIPv6<\/a><\/li>\n<li><a href=\"dart-io\/RawSocketOption\/levelTcp.html\">RawSocketOption.levelTcp<\/a><\/li>\n<li><a href=\"dart-io\/RawSocketOption\/levelUdp.html\">RawSocketOption.levelUdp<\/a><\/li>\n<\/ul>",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int level\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "levelIPv4",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket level option for IPPROTO_IP.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/levelIPv4.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get levelIPv4 =&gt;\n    _getOptionValue(_RawSocketOptions.IPPROTO_IP.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "levelIPv6",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket level option for IPPROTO_IPV6.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/levelIPv6.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get levelIPv6 =&gt;\n    _getOptionValue(_RawSocketOptions.IPPROTO_IPV6.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "levelSocket",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket level option for SOL_SOCKET.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/levelSocket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get levelSocket =&gt;\n    _getOptionValue(_RawSocketOptions.SOL_SOCKET.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "levelTcp",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket level option for IPPROTO_TCP.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/levelTcp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get levelTcp =&gt;\n    _getOptionValue(_RawSocketOptions.IPPROTO_TCP.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "levelUdp",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Socket level option for IPPROTO_UDP.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/levelUdp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static int get levelUdp =&gt;\n    _getOptionValue(_RawSocketOptions.IPPROTO_UDP.index);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "option",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The option to set or get.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/option.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int option\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:typed_data.Uint8List",
                    "types": [],
                    "desc": "<p>The raw data to set, or the array to write the current option value into.<\/p>\n<p>This list must be the correct length for the expected option. For most\noptions that take int or bool values, the length should be 4. For options\nthat expect a struct (such as an in_addr_t), the length should be the\ncorrect length for that struct.<\/p>\n        ",
                    "memberOf": "dart:io.RawSocketOption",
                    "isConstant": false,
                    "href": "dart-io\/RawSocketOption\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uint8List value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawSocketOption-class.html",
            "desc": "<p>The <a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> is used as a parameter to <a href=\"dart-io\/Socket\/setRawOption.html\">Socket.setRawOption<\/a> and\n<a href=\"dart-io\/RawSocket\/setRawOption.html\">RawSocket.setRawOption<\/a> to set customize the behaviour of the underlying\nsocket.<\/p>\n<p>It allows for fine grained control of the socket options, and its values will\nbe passed to the underlying platform's implementation of setsockopt and\ngetsockopt.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawSocketOption"
        },
        {
            "name": "dart:io.RawSynchronousSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawSynchronousSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RawSynchronousSocket\/RawSynchronousSocket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "available",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the number of received and unread bytes in the socket that can be\nread.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/available.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int available();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "closeSync",
                    "type": "",
                    "desc": "<p>Closes the <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a>.<\/p>\n<p>Once <a href=\"dart-io\/RawSynchronousSocket\/closeSync.html\">closeSync<\/a> has been called, attempting to call <a href=\"dart-io\/RawSynchronousSocket\/readSync.html\">readSync<\/a>,\n<a href=\"dart-io\/RawSynchronousSocket\/readIntoSync.html\">readIntoSync<\/a>, <a href=\"dart-io\/RawSynchronousSocket\/writeFromSync.html\">writeFromSync<\/a>, <a href=\"dart-io\/RawSynchronousSocket\/remoteAddress.html\">remoteAddress<\/a>, and <a href=\"dart-io\/RawSynchronousSocket\/remotePort.html\">remotePort<\/a> will\ncause a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> to be thrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/closeSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void closeSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "connectSync",
                    "type": "dart:io.RawSynchronousSocket",
                    "desc": "<p>Creates a new socket connection and returns a <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a>.<\/p>\n<p><code>host<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>host<\/code> is a\n<a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/RawSynchronousSocket\/connectSync.html\">connectSync<\/a> will perform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and try\nall returned <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es, until connected. Unless a\nconnection was established, the error from the first failing connection is\nreturned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/connectSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static RawSynchronousSocket connectSync(host, int port);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readIntoSync",
                    "type": "dart:core.int",
                    "desc": "<p>Reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the socket into the range:\n[<code>start<\/code>,<code>end<\/code>).<\/p>\n<p>Reads into an existing <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> from the socket. If <code>start<\/code> is present,\nthe bytes will be filled into <code>buffer<\/code> from index <code>start<\/code>, otherwise index<\/p>\n<ol start=\"0\"><li>If <code>end<\/code> is present, <code>end<\/code> - <code>start<\/code> bytes will be read into <code>buffer<\/code>,\notherwise up to <code>buffer.length<\/code>. If <code>end<\/code> == <code>start<\/code>, no bytes are read.\nReturns the number of bytes read.<\/li><\/ol>",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/readIntoSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int readIntoSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readSync",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Reads up to <code>bytes<\/code> bytes from the socket.<\/p>\n<p>Blocks and waits for a response of up to a specified number of bytes\nsent by the socket. <code>bytes<\/code> specifies the maximum number of bytes to\nbe read. Returns the list of bytes read, which could be less than the\nvalue specified by <code>bytes<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/readSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; readSync(int bytes);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "shutdown",
                    "type": "",
                    "desc": "<p>Shutdown a socket in the provided direction.<\/p>\n<p>Calling shutdown will never throw an exception and calling it several times\nis supported. If both <a class=\"deprecated\" href=\"dart-io\/SocketDirection\/RECEIVE-constant.html\">SocketDirection.RECEIVE<\/a> and <a class=\"deprecated\" href=\"dart-io\/SocketDirection\/SEND-constant.html\">SocketDirection.SEND<\/a>\ndirections are closed, the socket is closed completely, the same as if\n<a href=\"dart-io\/RawSynchronousSocket\/closeSync.html\">closeSync<\/a> has been called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:io.SocketDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/shutdown.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shutdown(SocketDirection direction);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeFromSync",
                    "type": "",
                    "desc": "<p>Writes data from a specified range in a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a> to the socket.<\/p>\n<p>Writes into the socket from a <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a>. If <code>start<\/code> is present, the bytes\nwill be written to the socket starting from index <code>start<\/code>. If <code>start<\/code> is\nnot present, the bytes will be written starting from index 0. If <code>end<\/code> is\npresent, the <code>end<\/code> - <code>start<\/code> bytes will be written into the socket starting\nat index <code>start<\/code>. If <code>end<\/code> is not provided, <code>buffer.length<\/code> elements will\nbe written to the socket starting from index <code>start<\/code>. If <code>end<\/code> == <code>start<\/code>,\nnothing happens.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "buffer",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawSynchronousSocket\/writeFromSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeFromSync(List&lt;int&gt; buffer, [int start = 0, int end]);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> used to connect this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSynchronousSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSynchronousSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remoteAddress",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>The remote <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> connected to by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSynchronousSocket\/remoteAddress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get remoteAddress;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remotePort",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The remote port connected to by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.RawSynchronousSocket",
                    "isConstant": false,
                    "href": "dart-io\/RawSynchronousSocket\/remotePort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get remotePort;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawSynchronousSocket-class.html",
            "desc": "<p>A low-level class for communicating synchronously over a TCP socket.<\/p>\n<p>Warning: <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a> should probably only be used to connect to\n'localhost'. The operations below will block the calling thread to wait for\na response from the network. The thread can process no other events while\nwaiting for these operations to complete. <a href=\"dart-io\/RawSynchronousSocket-class.html\">RawSynchronousSocket<\/a> is not\nsuitable for applications that require high performance or asynchronous I\/O\nsuch as a server. Instead such applications should use the non-blocking\nsockets and asynchronous operations in the Socket or RawSocket classes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawSynchronousSocket"
        },
        {
            "name": "dart:io.RawZLibFilter",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RawZLibFilter.deflateFilter",
                    "type": "",
                    "desc": "<p>Returns a a <a href=\"dart-io\/RawZLibFilter-class.html\">RawZLibFilter<\/a> whose <a href=\"dart-io\/RawZLibFilter\/process.html\">process<\/a> and <a href=\"dart-io\/RawZLibFilter\/processed.html\">processed<\/a> methods\ncompress data.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawZLibFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "gzip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "windowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "memLevel",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strategy",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dictionary",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "raw",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/RawZLibFilter\/RawZLibFilter.deflateFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RawZLibFilter.deflateFilter({\n  bool gzip: false,\n  int level: ZLibOption.defaultLevel,\n  int windowBits: ZLibOption.defaultWindowBits,\n  int memLevel: ZLibOption.defaultMemLevel,\n  int strategy: ZLibOption.strategyDefault,\n  List&lt;int&gt; dictionary,\n  bool raw: false,\n}) {\n  return _makeZLibDeflateFilter(\n      gzip, level, windowBits, memLevel, strategy, dictionary, raw);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RawZLibFilter.inflateFilter",
                    "type": "",
                    "desc": "<p>Returns a a <a href=\"dart-io\/RawZLibFilter-class.html\">RawZLibFilter<\/a> whose <a href=\"dart-io\/RawZLibFilter\/process.html\">process<\/a> and <a href=\"dart-io\/RawZLibFilter\/processed.html\">processed<\/a> methods\ndecompress data.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawZLibFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "windowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dictionary",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "raw",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/RawZLibFilter\/RawZLibFilter.inflateFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory RawZLibFilter.inflateFilter({\n  int windowBits: ZLibOption.defaultWindowBits,\n  List&lt;int&gt; dictionary,\n  bool raw: false,\n}) {\n  return _makeZLibInflateFilter(windowBits, dictionary, raw);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "process",
                    "type": "",
                    "desc": "<p>Call to process a chunk of data. A call to <a href=\"dart-io\/RawZLibFilter\/process.html\">process<\/a> should only be made\nwhen <a href=\"dart-io\/RawZLibFilter\/processed.html\">processed<\/a> returns <code>null<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawZLibFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "start",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawZLibFilter\/process.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void process(List&lt;int&gt; data, int start, int end);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "processed",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Get a chunk of processed data. When there are no more data available,\n<a href=\"dart-io\/RawZLibFilter\/processed.html\">processed<\/a> will return <code>null<\/code>. Set <code>flush<\/code> to <code>false<\/code> for non-final\ncalls to improve performance of some filters.<\/p>\n<p>The last call to <a href=\"dart-io\/RawZLibFilter\/processed.html\">processed<\/a> should have <code>end<\/code> set to <code>true<\/code>. This will\nmake sure an 'end' packet is written on the stream.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RawZLibFilter",
                    "sig": "",
                    "params": [
                        {
                            "name": "flush",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/RawZLibFilter\/processed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; processed({bool flush: true, bool end: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RawZLibFilter-class.html",
            "desc": "<p>The <a href=\"dart-io\/RawZLibFilter-class.html\">RawZLibFilter<\/a> class provides a low-level interface to zlib.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RawZLibFilter"
        },
        {
            "name": "dart:io.RedirectException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RedirectException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RedirectException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "redirects",
                            "type": "dart:core.List<dart:io.RedirectInfo>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:io.RedirectInfo"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/RedirectException\/RedirectException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RedirectException(this.message, this.redirects);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.RedirectException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/RedirectException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"RedirectException: $message\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.RedirectException",
                    "isConstant": false,
                    "href": "dart-io\/RedirectException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "redirects",
                    "type": "dart:core.List<dart:io.RedirectInfo>",
                    "types": [
                        "dart:core.List",
                        "dart:io.RedirectInfo"
                    ],
                    "desc": "",
                    "memberOf": "dart:io.RedirectException",
                    "isConstant": false,
                    "href": "dart-io\/RedirectException\/redirects.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;RedirectInfo&gt; redirects\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "uri",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.RedirectException",
                    "isConstant": false,
                    "href": "dart-io\/RedirectException\/uri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri =&gt; redirects.last.location;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RedirectException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RedirectException"
        },
        {
            "name": "dart:io.RedirectInfo",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "RedirectInfo",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.RedirectInfo",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/RedirectInfo\/RedirectInfo.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "location",
                    "type": "dart:core.Uri",
                    "types": [],
                    "desc": "<p>Returns the location for the redirect.<\/p>\n        ",
                    "memberOf": "dart:io.RedirectInfo",
                    "isConstant": false,
                    "href": "dart-io\/RedirectInfo\/location.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get location;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "method",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Returns the method used for the redirect.<\/p>\n        ",
                    "memberOf": "dart:io.RedirectInfo",
                    "isConstant": false,
                    "href": "dart-io\/RedirectInfo\/method.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get method;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "statusCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the status code used for the redirect.<\/p>\n        ",
                    "memberOf": "dart:io.RedirectInfo",
                    "isConstant": false,
                    "href": "dart-io\/RedirectInfo\/statusCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get statusCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/RedirectInfo-class.html",
            "desc": "<p>Redirect information.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RedirectInfo"
        },
        {
            "type": "",
            "href": "dart-io\/SYSTEM_ENCODING-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "SYSTEM_ENCODING",
            "memberOf": "dart:io"
        },
        {
            "name": "dart:io.SecureServerSocket",
            "extends": [
                "dart:io.SecureSocket",
                "dart:async.Stream",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "bind",
                    "type": "dart:async.Future<dart:io.SecureServerSocket>",
                    "desc": "<p>Returns a future for a <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a>. When the future\ncompletes the server socket is bound to the given <code>address<\/code> and\n<code>port<\/code> and has started listening on it.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/SecureServerSocket\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>Incoming client connections are promoted to secure connections, using\nthe server certificate and key set in <code>context<\/code>.<\/p>\n<p><code>address<\/code> must be given as a numeric address, not a host name.<\/p>\n<p>To request or require that clients authenticate by providing an SSL (TLS)\nclient certificate, set the optional parameter <code>requestClientCertificate<\/code>\nor <code>requireClientCertificate<\/code> to true.  Requiring a certificate implies\nrequesting a certificate, so setting both is redundant.\nTo check whether a client certificate was received, check\nSecureSocket.peerCertificate after connecting.  If no certificate\nwas received, the result will be null.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negogiation with\nclients.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/SecureSocket\/selectedProtocol.html\">SecureSocket.selectedProtocol<\/a>.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional\nSecureServerSocket objects can bind to the same combination of <code>address<\/code>,\n<code>port<\/code> and <code>v6Only<\/code>.  If <code>shared<\/code> is <code>true<\/code> and more <code>SecureServerSocket<\/code>s\nfrom this isolate or other isolates are bound to the port, then the\nincoming connections will be distributed among all the bound\n<code>SecureServerSocket<\/code>s. Connections can be distributed over multiple\nisolates this way.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureServerSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backlog",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "v6Only",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requireClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "shared",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureServerSocket\/bind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureServerSocket&gt; bind(\n    address, int port, SecurityContext context,\n    {int backlog: 0,\n    bool v6Only: false,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols,\n    bool shared: false}) {\n  return RawSecureServerSocket\n      .bind(address, port, context,\n          backlog: backlog,\n          v6Only: v6Only,\n          requestClientCertificate: requestClientCertificate,\n          requireClientCertificate: requireClientCertificate,\n          supportedProtocols: supportedProtocols,\n          shared: shared)\n      .then((serverSocket) =&gt; new SecureServerSocket._(serverSocket));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.SecureServerSocket"
                    ]
                },
                {
                    "name": "close",
                    "type": "dart:async.Future<dart:io.SecureServerSocket>",
                    "desc": "<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureServerSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/SecureServerSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;SecureServerSocket&gt; close() =&gt; _socket.close().then((_) =&gt; this);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.SecureServerSocket"
                    ]
                },
                {
                    "name": "listen",
                    "type": "dart:async.StreamSubscription<dart:io.SecureSocket>",
                    "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureServerSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "socket",
                            "type": "dart:io.SecureSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "socket",
                            "type": "dart:io.SecureSocket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onDone",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "cancelOnError",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureServerSocket\/listen.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;SecureSocket&gt; listen(void onData(SecureSocket socket),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _socket.map((rawSocket) =&gt; new SecureSocket._(rawSocket)).listen(\n      onData,\n      onError: onError,\n      onDone: onDone,\n      cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.StreamSubscription",
                        "dart:io.SecureSocket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.SecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/SecureServerSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address =&gt; _socket.address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.SecureServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/SecureServerSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port =&gt; _socket.port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SecureServerSocket-class.html",
            "desc": "<p>The <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> is a server socket, providing a stream of high-level\n<a href=\"dart-io\/Socket-class.html\">Socket<\/a>s.<\/p>\n<p>See <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> for more info.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SecureServerSocket"
        },
        {
            "name": "dart:io.SecureSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "connect",
                    "type": "dart:async.Future<dart:io.SecureSocket>",
                    "desc": "<p>Constructs a new secure client socket and connects it to the given\n<code>host<\/code> on port <code>port<\/code>. The returned Future will complete with a\n<a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> that is connected and ready for subscription.<\/p>\n<p>The certificate provided by the server is checked\nusing the trusted certificates set in the SecurityContext object.\nThe default SecurityContext object contains a built-in set of trusted\nroot certificates for well-known certificate authorities.<\/p>\n<p><code>onBadCertificate<\/code> is an optional handler for unverifiable certificates.\nThe handler receives the <a href=\"dart-io\/X509Certificate-class.html\">X509Certificate<\/a>, and can inspect it and\ndecide (or let the user decide) whether to accept\nthe connection or not.  The handler should return true\nto continue the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> connection.<\/p>\n<p><code>supportedProtocols<\/code> is an optional list of protocols (in decreasing\norder of preference) to use during the ALPN protocol negotiation with the\nserver.  Example values are \"http\/1.1\" or \"h2\".  The selected protocol\ncan be obtained via <a href=\"dart-io\/SecureSocket\/selectedProtocol.html\">SecureSocket.selectedProtocol<\/a>.<\/p>\n<p>The argument <code>timeout<\/code> is used to specify the maximum allowed time to wait\nfor a connection to be established. If <code>timeout<\/code> is longer than the system\nlevel timeout duration, a timeout may occur sooner than specified in\n<code>timeout<\/code>. On timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> is thrown and all ongoing\nconnection attempts to <code>host<\/code> are cancelled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureSocket\/connect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureSocket&gt; connect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols,\n    Duration timeout}) {\n  return RawSecureSocket.connect(host, port,\n          context: context,\n          onBadCertificate: onBadCertificate,\n          supportedProtocols: supportedProtocols,\n          timeout: timeout)\n      .then((rawSocket) =&gt; new SecureSocket._(rawSocket));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.SecureSocket"
                    ]
                },
                {
                    "name": "renegotiate",
                    "type": "",
                    "desc": "<p>Renegotiate an existing secure connection, renewing the session keys\nand possibly changing the connection properties.<\/p>\n<p>This repeats the SSL or TLS handshake, with options that allow clearing\nthe session cache and requesting a client certificate.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "useSessionCache",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requireClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureSocket\/renegotiate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void renegotiate(\n    {bool useSessionCache: true,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "secure",
                    "type": "dart:async.Future<dart:io.SecureSocket>",
                    "desc": "<p>Takes an already connected <code>socket<\/code> and starts client side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is prepared for TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, this subscription\nwill no longer receive and events. In most cases calling\n<code>pause<\/code> on this subscription before starting TLS handshake is\nthe right thing to do.<\/p>\n<p>The given <code>socket<\/code> is closed and may not be used anymore.<\/p>\n<p>If the <code>host<\/code> argument is passed it will be used as the host name\nfor the TLS handshake. If <code>host<\/code> is not passed the host name from\nthe <code>socket<\/code> will be used. The <code>host<\/code> can be either a <a href=\"dart-core\/String-class.html\">String<\/a> or\nan <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>.<\/p>\n<p>Calling this function will <em>not<\/em> cause a DNS host lookup. If the\n<code>host<\/code> passed is a <a href=\"dart-core\/String-class.html\">String<\/a> the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> for the\nresulting <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> will have the passed in <code>host<\/code> as its\nhost value and the internet address of the already connected\nsocket as its address value.<\/p>\n<p>See <a href=\"dart-io\/SecureSocket\/connect.html\">connect<\/a> for more information on the arguments.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "socket",
                            "type": "dart:io.Socket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureSocket\/secure.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureSocket&gt; secure(Socket socket,\n    {host,\n    SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate)}) {\n  return ((socket as dynamic \/*_Socket*\/)._detachRaw() as Future)\n      .then&lt;RawSecureSocket&gt;((detachedRaw) {\n    return RawSecureSocket.secure(detachedRaw[0] as RawSocket,\n        subscription: detachedRaw[1] as StreamSubscription&lt;RawSocketEvent&gt;,\n        host: host,\n        context: context,\n        onBadCertificate: onBadCertificate);\n  }).then&lt;SecureSocket&gt;((raw) =&gt; new SecureSocket._(raw));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.SecureSocket"
                    ]
                },
                {
                    "name": "secureServer",
                    "type": "dart:async.Future<dart:io.SecureSocket>",
                    "desc": "<p>Takes an already connected <code>socket<\/code> and starts server side TLS\nhandshake to make the communication secure. When the returned\nfuture completes the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> has completed the TLS\nhandshake. Using this function requires that the other end of the\nconnection is going to start the TLS handshake.<\/p>\n<p>If the <code>socket<\/code> already has a subscription, this subscription\nwill no longer receive and events. In most cases calling\n<code>pause<\/code> on this subscription before starting TLS handshake is\nthe right thing to do.<\/p>\n<p>If some of the data of the TLS handshake has already been read\nfrom the socket this data can be passed in the <code>bufferedData<\/code>\nparameter. This data will be processed before any other data\navailable on the socket.<\/p>\n<p>See <a href=\"dart-io\/SecureServerSocket\/bind.html\">SecureServerSocket.bind<\/a> for more information on the\narguments.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "socket",
                            "type": "dart:io.Socket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bufferedData",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "requestClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "requireClientCertificate",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureSocket\/secureServer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;SecureSocket&gt; secureServer(\n    Socket socket, SecurityContext context,\n    {List&lt;int&gt; bufferedData,\n    bool requestClientCertificate: false,\n    bool requireClientCertificate: false,\n    List&lt;String&gt; supportedProtocols}) {\n  return ((socket as dynamic \/*_Socket*\/)._detachRaw() as Future)\n      .then&lt;RawSecureSocket&gt;((detachedRaw) {\n    return RawSecureSocket.secureServer(detachedRaw[0] as RawSocket, context,\n        subscription: detachedRaw[1] as StreamSubscription&lt;RawSocketEvent&gt;,\n        bufferedData: bufferedData,\n        requestClientCertificate: requestClientCertificate,\n        requireClientCertificate: requireClientCertificate,\n        supportedProtocols: supportedProtocols);\n  }).then&lt;SecureSocket&gt;((raw) =&gt; new SecureSocket._(raw));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.SecureSocket"
                    ]
                },
                {
                    "name": "startConnect",
                    "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.SecureSocket>>",
                    "desc": "<p>Like <a href=\"dart-io\/SecureSocket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> is no\nlonger needed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecureSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "context",
                            "type": "dart:io.SecurityContext",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "certificate",
                            "type": "dart:io.X509Certificate",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "supportedProtocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecureSocket\/startConnect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ConnectionTask&lt;SecureSocket&gt;&gt; startConnect(host, int port,\n    {SecurityContext context,\n    bool onBadCertificate(X509Certificate certificate),\n    List&lt;String&gt; supportedProtocols}) {\n  return RawSecureSocket.startConnect(host, port,\n          context: context,\n          onBadCertificate: onBadCertificate,\n          supportedProtocols: supportedProtocols)\n      .then((rawState) {\n    Future&lt;SecureSocket&gt; socket =\n        rawState.socket.then((rawSocket) =&gt; new SecureSocket._(rawSocket));\n    return new ConnectionTask&lt;SecureSocket&gt;._(\n        socket: socket, onCancel: rawState._onCancel);\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ConnectionTask",
                        "dart:io.SecureSocket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "peerCertificate",
                    "type": "dart:io.X509Certificate",
                    "types": [],
                    "desc": "<p>Get the peer certificate for a connected SecureSocket.  If this\nSecureSocket is the server end of a secure socket connection,\n<a href=\"dart-io\/SecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the client certificate, or null, if no\nclient certificate was received.  If it is the client end,\n<a href=\"dart-io\/SecureSocket\/peerCertificate.html\">peerCertificate<\/a> will return the server's certificate.<\/p>\n        ",
                    "memberOf": "dart:io.SecureSocket",
                    "isConstant": false,
                    "href": "dart-io\/SecureSocket\/peerCertificate.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">X509Certificate get peerCertificate;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "selectedProtocol",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The protocol which was selected during ALPN protocol negotiation.<\/p>\n<p>Returns null if one of the peers does not have support for ALPN, did not\nspecify a list of supported ALPN protocols or there was no common\nprotocol between client and server.<\/p>\n        ",
                    "memberOf": "dart:io.SecureSocket",
                    "isConstant": false,
                    "href": "dart-io\/SecureSocket\/selectedProtocol.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get selectedProtocol;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "dart:io.SecureServerSocket"
            ],
            "realImplementors": [
                "dart:io.SecureServerSocket"
            ],
            "cn": [],
            "href": "dart-io\/SecureSocket-class.html",
            "desc": "<p>A high-level class for communicating securely over a TCP socket, using\nTLS and SSL. The <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a> exposes both a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> and an\n<a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> interface, making it ideal for using together with\nother <a href=\"dart-async\/Stream-class.html\">Stream<\/a>s.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SecureSocket"
        },
        {
            "name": "dart:io.SecurityContext",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "SecurityContext",
                    "type": "",
                    "desc": "<p>Creates a new <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a>.<\/p>\n<p>By default, the created <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> contains no keys or certificates.\nThese can be added by calling the methods of this class.<\/p>\n<p>If <code>withTrustedRoots<\/code> is passed as <code>true<\/code>, the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> will be\nseeded by the trusted root certificates provided as explained below. To\nobtain a <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> containing trusted root certificates,\n<a href=\"dart-io\/SecurityContext\/defaultContext.html\">SecurityContext.defaultContext<\/a> is usually sufficient, and should\nbe used instead. However, if the <a href=\"dart-io\/SecurityContext-class.html\">SecurityContext<\/a> containing the trusted\nroot certificates must be modified per-connection, then <code>withTrustedRoots<\/code>\nshould be used.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "withTrustedRoots",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/SecurityContext\/SecurityContext.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory SecurityContext({bool withTrustedRoots: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setAlpnProtocols",
                    "type": "",
                    "desc": "<p>Sets the list of application-level protocols supported by a client\nconnection or server connection. The ALPN (application level protocol\nnegotiation) extension to TLS allows a client to send a list of\nprotocols in the TLS client hello message, and the server to pick\none and send the selected one back in its server hello message.<\/p>\n<p>Separate lists of protocols can be sent for client connections and\nfor server connections, using the same SecurityContext.  The <code>isServer<\/code>\nboolean argument specifies whether to set the list for server connections\nor client connections.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "protocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "isServer",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/setAlpnProtocols.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAlpnProtocols(List&lt;String&gt; protocols, bool isServer);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setClientAuthorities",
                    "type": "",
                    "desc": "<p>Sets the list of authority names that a <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> will advertise\nas accepted when requesting a client certificate from a connecting\nclient.<\/p>\n<p><code>file<\/code> is a PEM or PKCS12 file containing the accepted signing\nauthority certificates - the authority names are extracted from the\ncertificates. For PKCS12 files, <code>password<\/code> is the password for the file.\nFor PEM files, <code>password<\/code> is ignored. Assuming it is well-formatted, all\nother contents of <code>file<\/code> are ignored.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/setClientAuthoritiesBytes.html\">setClientAuthoritiesBytes<\/a>.<\/p>\n<p>iOS note: This call is not supported.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "file",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/setClientAuthorities.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setClientAuthorities(String file, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setClientAuthoritiesBytes",
                    "type": "",
                    "desc": "<p>Sets the list of authority names that a <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> will advertise\nas accepted, when requesting a client certificate from a connecting\nclient.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/setClientAuthorities.html\">setClientAuthorities<\/a> but takes the contents of the file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "authCertBytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/setClientAuthoritiesBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setClientAuthoritiesBytes(List&lt;int&gt; authCertBytes, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setTrustedCertificates",
                    "type": "",
                    "desc": "<p>Sets the set of trusted X509 certificates used by <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a>\nclient connections, when connecting to a secure server.<\/p>\n<p><code>file<\/code> is the path to a PEM or PKCS12 file containing X509 certificates,\nusually root certificates from certificate authorities. For PKCS12 files,\n<code>password<\/code> is the password for the file. For PEM files, <code>password<\/code> is\nignored. Assuming it is well-formatted, all other contents of <code>file<\/code> are\nignored.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/setTrustedCertificatesBytes.html\">setTrustedCertificatesBytes<\/a>.<\/p>\n<p>iOS note: On iOS, this call takes only the bytes for a single DER\nencoded X509 certificate. It may be called multiple times to add\nmultiple trusted certificates to the context. A DER encoded certificate\ncan be obtained from a PEM encoded certificate by using the openssl tool:<\/p>\n<p>  $ openssl x509 -outform der -in cert.pem -out cert.der<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "file",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/setTrustedCertificates.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setTrustedCertificates(String file, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setTrustedCertificatesBytes",
                    "type": "",
                    "desc": "<p>Sets the set of trusted X509 certificates used by <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a>\nclient connections, when connecting to a secure server.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/setTrustedCertificates.html\">setTrustedCertificates<\/a> but takes the contents of the file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "certBytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/setTrustedCertificatesBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setTrustedCertificatesBytes(List&lt;int&gt; certBytes, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "useCertificateChain",
                    "type": "",
                    "desc": "<p>Sets the chain of X509 certificates served by <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a>\nwhen making secure connections, including the server certificate.<\/p>\n<p><code>file<\/code> is a PEM or PKCS12 file containing X509 certificates, starting with\nthe root authority and intermediate authorities forming the signed\nchain to the server certificate, and ending with the server certificate.\nThe private key for the server certificate is set by <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a>. For\nPKCS12 files, <code>password<\/code> is the password for the file. For PEM files,\n<code>password<\/code> is ignored. Assuming it is well-formatted, all\nother contents of <code>file<\/code> are ignored.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/useCertificateChainBytes.html\">useCertificateChainBytes<\/a>.<\/p>\n<p>iOS note: As noted above, <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a> does the job of both\nthat call and this one. On iOS, this call is a no-op.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "file",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/useCertificateChain.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void useCertificateChain(String file, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "useCertificateChainBytes",
                    "type": "",
                    "desc": "<p>Sets the chain of X509 certificates served by <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a>\nwhen making secure connections, including the server certificate.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/useCertificateChain.html\">useCertificateChain<\/a> but takes the contents of the file.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "chainBytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/useCertificateChainBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void useCertificateChainBytes(List&lt;int&gt; chainBytes, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "usePrivateKey",
                    "type": "",
                    "desc": "<p>Sets the private key for a server certificate or client certificate.<\/p>\n<p>A secure connection using this SecurityContext will use this key with\nthe server or client certificate to sign and decrypt messages.\n<code>file<\/code> is the path to a PEM or PKCS12 file containing an encrypted\nprivate key, encrypted with <code>password<\/code>. Assuming it is well-formatted, all\nother contents of <code>file<\/code> are ignored. An unencrypted file can be used,\nbut this is not usual.<\/p>\n<p>NB: This function calls <a href=\"dart-io\/File\/readAsBytesSync.html\">File.readAsBytesSync<\/a>, and will block on file IO.\nPrefer using <a href=\"dart-io\/SecurityContext\/usePrivateKeyBytes.html\">usePrivateKeyBytes<\/a>.<\/p>\n<p>iOS note: Only PKCS12 data is supported. It should contain both the private\nkey and the certificate chain. On iOS one call to <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a> with this\ndata is used instead of two calls to <a href=\"dart-io\/SecurityContext\/useCertificateChain.html\">useCertificateChain<\/a> and\n<a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "file",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/usePrivateKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void usePrivateKey(String file, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "usePrivateKeyBytes",
                    "type": "",
                    "desc": "<p>Sets the private key for a server certificate or client certificate.<\/p>\n<p>Like <a href=\"dart-io\/SecurityContext\/usePrivateKey.html\">usePrivateKey<\/a>, but takes the contents of the file as a list\nof bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SecurityContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "keyBytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "password",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SecurityContext\/usePrivateKeyBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void usePrivateKeyBytes(List&lt;int&gt; keyBytes, {String password});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "alpnSupported",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the platform supports ALPN. This always returns true and will be\nremoved in a future release.<\/p>\n        ",
                    "memberOf": "dart:io.SecurityContext",
                    "isConstant": false,
                    "href": "dart-io\/SecurityContext\/alpnSupported.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\nexternal static bool get alpnSupported;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "defaultContext",
                    "type": "dart:io.SecurityContext",
                    "types": [],
                    "desc": "<p>Secure networking classes with an optional <code>context<\/code> parameter\nuse the <a href=\"dart-io\/SecurityContext\/defaultContext.html\">defaultContext<\/a> object if the parameter is omitted.\nThis object can also be accessed, and modified, directly.\nEach isolate has a different <a href=\"dart-io\/SecurityContext\/defaultContext.html\">defaultContext<\/a> object.\nThe <a href=\"dart-io\/SecurityContext\/defaultContext.html\">defaultContext<\/a> object uses a list of well-known trusted\ncertificate authorities as its trusted roots. On Linux and Windows, this\nlist is taken from Mozilla, who maintains it as part of Firefox. On,\nMacOS, iOS, and Android, this list comes from the trusted certificates\nstores built in to the platforms.<\/p>\n        ",
                    "memberOf": "dart:io.SecurityContext",
                    "isConstant": false,
                    "href": "dart-io\/SecurityContext\/defaultContext.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static SecurityContext get defaultContext;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SecurityContext-class.html",
            "desc": "<p>The object containing the certificates to trust when making\na secure client connection, and the certificate chain and\nprivate key to serve from a secure server.<\/p>\n<p>The <a href=\"dart-io\/SecureSocket-class.html\">SecureSocket<\/a>  and <a href=\"dart-io\/SecureServerSocket-class.html\">SecureServerSocket<\/a> classes take a SecurityContext\nas an argument to their connect and bind methods.<\/p>\n<p>Certificates and keys can be added to a SecurityContext from either PEM\nor PKCS12 containers.<\/p>\n<p>iOS note: Some methods to add, remove, and inspect certificates are not yet\nimplemented. However, the platform's built-in trusted certificates can\nbe used, by way of <a href=\"dart-io\/SecurityContext\/defaultContext.html\">SecurityContext.defaultContext<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SecurityContext"
        },
        {
            "name": "dart:io.ServerSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ServerSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ServerSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/ServerSocket\/ServerSocket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bind",
                    "type": "dart:async.Future<dart:io.ServerSocket>",
                    "desc": "<p>Returns a future for a <code>ServerSocket<\/code>. When the future\ncompletes the server socket is bound to the given <code>address<\/code> and\n<code>port<\/code> and has started listening on it.<\/p>\n<p>The <code>address<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an\n<a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>address<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/ServerSocket\/bind.html\">bind<\/a> will\nperform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and use the first value in the\nlist. To listen on the loopback adapter, which will allow only\nincoming connections from the local host, use the value\n<a href=\"dart-io\/InternetAddress\/loopbackIPv4.html\">InternetAddress.loopbackIPv4<\/a> or\n<a href=\"dart-io\/InternetAddress\/loopbackIPv6.html\">InternetAddress.loopbackIPv6<\/a>. To allow for incoming\nconnection from the network use either one of the values\n<a href=\"dart-io\/InternetAddress\/anyIPv4.html\">InternetAddress.anyIPv4<\/a> or <a href=\"dart-io\/InternetAddress\/anyIPv6.html\">InternetAddress.anyIPv6<\/a> to\nbind to all interfaces or the IP address of a specific interface.<\/p>\n<p>If an IP version 6 (IPv6) address is used, both IP version 6\n(IPv6) and version 4 (IPv4) connections will be accepted. To\nrestrict this to version 6 (IPv6) only, use <code>v6Only<\/code> to set\nversion 6 only.<\/p>\n<p>If <code>port<\/code> has the value <code>0<\/code> an ephemeral port will be chosen by\nthe system. The actual port used can be retrieved using the\n<code>port<\/code> getter.<\/p>\n<p>The optional argument <code>backlog<\/code> can be used to specify the listen\nbacklog for the underlying OS listen setup. If <code>backlog<\/code> has the\nvalue of <code>0<\/code> (the default) a reasonable value will be chosen by\nthe system.<\/p>\n<p>The optional argument <code>shared<\/code> specifies whether additional ServerSocket\nobjects can bind to the same combination of <code>address<\/code>, <code>port<\/code> and <code>v6Only<\/code>.\nIf <code>shared<\/code> is <code>true<\/code> and more <code>ServerSocket<\/code>s from this isolate or other\nisolates are bound to the port, then the incoming connections will be\ndistributed among all the bound <code>ServerSocket<\/code>s. Connections can be\ndistributed over multiple isolates this way.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ServerSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "address",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backlog",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "v6Only",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shared",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/ServerSocket\/bind.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;ServerSocket&gt; bind(address, int port,\n    {int backlog: 0, bool v6Only: false, bool shared: false});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ServerSocket"
                    ]
                },
                {
                    "name": "close",
                    "type": "dart:async.Future<dart:io.ServerSocket>",
                    "desc": "<p>Closes the socket. The returned future completes when the socket\nis fully closed and is no longer bound.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ServerSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/ServerSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ServerSocket&gt; close();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ServerSocket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the address used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.ServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/ServerSocket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.ServerSocket",
                    "isConstant": false,
                    "href": "dart-io\/ServerSocket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ServerSocket-class.html",
            "desc": "<p>A <a href=\"dart-io\/ServerSocket-class.html\">ServerSocket<\/a> represents a listening socket, and provides a\nstream of <a href=\"dart-io\/Socket-class.html\">Socket<\/a> objects, one for each connection made to the\nlistening socket.<\/p>\n<p>See <a href=\"dart-io\/Socket-class.html\">Socket<\/a> for more info.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ServerSocket"
        },
        {
            "name": "dart:io.SignalException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "SignalException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.SignalException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/SignalException\/SignalException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SignalException(this.message, [this.osError]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SignalException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/SignalException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  var msg = \"\";\n  if (osError != null) {\n    msg = \", osError: $osError\";\n  }\n  return \"SignalException: $message$msg\";\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.SignalException",
                    "isConstant": false,
                    "href": "dart-io\/SignalException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "osError",
                    "type": "",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.SignalException",
                    "isConstant": false,
                    "href": "dart-io\/SignalException\/osError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final osError\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SignalException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SignalException"
        },
        {
            "name": "dart:io.Socket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "Socket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/Socket\/Socket.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "close",
                    "type": "dart:async.Future",
                    "desc": "<p>Close the target consumer.<\/p>\n<p>NOTE: Writes to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> may be buffered, and may not be flushed by\na call to <code>close()<\/code>. To flush all buffered writes, call <code>flush()<\/code> before\ncalling <code>close()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "connect",
                    "type": "dart:async.Future<dart:io.Socket>",
                    "desc": "<p>Creates a new socket connection to the host and port and returns a <a href=\"dart-async\/Future-class.html\">Future<\/a>\nthat will complete with either a <a href=\"dart-io\/Socket-class.html\">Socket<\/a> once connected or an error\nif the host-lookup or connection failed.<\/p>\n<p><code>host<\/code> can either be a <a href=\"dart-core\/String-class.html\">String<\/a> or an <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>. If <code>host<\/code> is a\n<a href=\"dart-core\/String-class.html\">String<\/a>, <a href=\"dart-io\/Socket\/connect.html\">connect<\/a> will perform a <a href=\"dart-io\/InternetAddress\/lookup.html\">InternetAddress.lookup<\/a> and try\nall returned <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a>es, until connected. Unless a\nconnection was established, the error from the first failing connection is\nreturned.<\/p>\n<p>The argument <code>sourceAddress<\/code> can be used to specify the local\naddress to bind when making the connection. <code>sourceAddress<\/code> can either\nbe a <code>String<\/code> or an <code>InternetAddress<\/code>. If a <code>String<\/code> is passed it must\nhold a numeric IP address.<\/p>\n<p>The argument <code>timeout<\/code> is used to specify the maximum allowed time to wait\nfor a connection to be established. If <code>timeout<\/code> is longer than the system\nlevel timeout duration, a timeout may occur sooner than specified in\n<code>timeout<\/code>. On timeout, a <a href=\"dart-io\/SocketException-class.html\">SocketException<\/a> is thrown and all ongoing\nconnection attempts to <code>host<\/code> are cancelled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "timeout",
                            "type": "dart:core.Duration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/connect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;Socket&gt; connect(host, int port,\n    {sourceAddress, Duration timeout}) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return Socket._connect(host, port,\n        sourceAddress: sourceAddress, timeout: timeout);\n  }\n  return overrides.socketConnect(host, port,\n      sourceAddress: sourceAddress, timeout: timeout);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.Socket"
                    ]
                },
                {
                    "name": "destroy",
                    "type": "",
                    "desc": "<p>Destroy the socket in both directions. Calling <a href=\"dart-io\/Socket\/destroy.html\">destroy<\/a> will make the\nsend a close event on the stream and will no longer react on data being\npiped to it.<\/p>\n<p>Call <a href=\"dart-io\/Socket\/close.html\">close<\/a>(inherited from <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a>) to only close the <a href=\"dart-io\/Socket-class.html\">Socket<\/a>\nfor sending data.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/destroy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void destroy();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getRawOption",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "<p>Use <a href=\"dart-io\/Socket\/getRawOption.html\">getRawOption<\/a> to get low level information about the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See\n<a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for available options.<\/p>\n<p>Returns the <a href=\"dart-io\/RawSocketOption\/value.html\">RawSocketOption.value<\/a> on success.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.RawSocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/getRawOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List getRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setOption",
                    "type": "dart:core.bool",
                    "desc": "<p>Use <a href=\"dart-io\/Socket\/setOption.html\">setOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/SocketOption-class.html\">SocketOption<\/a> for\navailable options.<\/p>\n<p>Returns <code>true<\/code> if the option was set successfully, false otherwise.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.SocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "enabled",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/setOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool setOption(SocketOption option, bool enabled);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setRawOption",
                    "type": "",
                    "desc": "<p>Use <a href=\"dart-io\/Socket\/setRawOption.html\">setRawOption<\/a> to customize the <a href=\"dart-io\/RawSocket-class.html\">RawSocket<\/a>. See <a href=\"dart-io\/RawSocketOption-class.html\">RawSocketOption<\/a> for\navailable options.<\/p>\n<p>Throws an <a href=\"dart-io\/OSError-class.html\">OSError<\/a> on failure.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [
                        {
                            "name": "option",
                            "type": "dart:io.RawSocketOption",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/setRawOption.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRawOption(RawSocketOption option);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "startConnect",
                    "type": "dart:async.Future<dart:io.ConnectionTask<dart:io.Socket>>",
                    "desc": "<p>Like <a href=\"dart-io\/Socket\/connect.html\">connect<\/a>, but returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes with a\n<a href=\"dart-io\/ConnectionTask-class.html\">ConnectionTask<\/a> that can be cancelled if the <a href=\"dart-io\/Socket-class.html\">Socket<\/a> is no\nlonger needed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Socket",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sourceAddress",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Socket\/startConnect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;ConnectionTask&lt;Socket&gt;&gt; startConnect(host, int port,\n    {sourceAddress}) {\n  final IOOverrides overrides = IOOverrides.current;\n  if (overrides == null) {\n    return Socket._startConnect(host, port, sourceAddress: sourceAddress);\n  }\n  return overrides.socketStartConnect(host, port,\n      sourceAddress: sourceAddress);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.ConnectionTask",
                        "dart:io.Socket"
                    ]
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> used to connect this socket.<\/p>\n        ",
                    "memberOf": "dart:io.Socket",
                    "isConstant": false,
                    "href": "dart-io\/Socket\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get address;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "done",
                    "type": "dart:async.Future",
                    "types": [],
                    "desc": "<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a href=\"dart-io\/Socket\/close.html\">close<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Socket",
                    "isConstant": false,
                    "href": "dart-io\/Socket\/done.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the port used by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.Socket",
                    "isConstant": false,
                    "href": "dart-io\/Socket\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remoteAddress",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "<p>Returns the remote <a href=\"dart-io\/InternetAddress-class.html\">InternetAddress<\/a> connected to by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.Socket",
                    "isConstant": false,
                    "href": "dart-io\/Socket\/remoteAddress.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">InternetAddress get remoteAddress;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "remotePort",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the remote port connected to by this socket.<\/p>\n        ",
                    "memberOf": "dart:io.Socket",
                    "isConstant": false,
                    "href": "dart-io\/Socket\/remotePort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get remotePort;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Socket-class.html",
            "desc": "<p>A high-level class for communicating over a TCP socket.<\/p>\n<p>The <a href=\"dart-io\/Socket-class.html\">Socket<\/a> exposes both a <a href=\"dart-async\/Stream-class.html\">Stream<\/a> and a <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> interface, making it\nideal for using together with other <a href=\"dart-async\/Stream-class.html\">Stream<\/a>s.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Socket"
        },
        {
            "name": "dart:io.SocketDirection",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/SocketDirection\/BOTH-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketDirection BOTH = both\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "BOTH",
                    "memberOf": "dart:io.SocketDirection"
                },
                {
                    "type": "",
                    "href": "dart-io\/SocketDirection\/RECEIVE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketDirection RECEIVE = receive\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RECEIVE",
                    "memberOf": "dart:io.SocketDirection"
                },
                {
                    "type": "",
                    "href": "dart-io\/SocketDirection\/SEND-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketDirection SEND = send\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "SEND",
                    "memberOf": "dart:io.SocketDirection"
                },
                {
                    "type": "",
                    "href": "dart-io\/SocketDirection\/both-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketDirection both = const SocketDirection._(2)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "both",
                    "memberOf": "dart:io.SocketDirection"
                },
                {
                    "type": "",
                    "href": "dart-io\/SocketDirection\/receive-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketDirection receive = const SocketDirection._(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "receive",
                    "memberOf": "dart:io.SocketDirection"
                },
                {
                    "type": "",
                    "href": "dart-io\/SocketDirection\/send-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketDirection send = const SocketDirection._(1)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "send",
                    "memberOf": "dart:io.SocketDirection"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SocketDirection-class.html",
            "desc": "<p>The <a href=\"dart-io\/SocketDirection-class.html\">SocketDirection<\/a> is used as a parameter to <a href=\"dart-io\/Socket\/close.html\">Socket.close<\/a> and\n<a href=\"dart-io\/RawSocket\/close.html\">RawSocket.close<\/a> to close a socket in the specified direction(s).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SocketDirection"
        },
        {
            "name": "dart:io.SocketException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "SocketException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.SocketException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "address",
                            "type": "dart:io.InternetAddress",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "port",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/SocketException\/SocketException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SocketException(this.message, {this.osError, this.address, this.port});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SocketException.closed",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.SocketException",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/SocketException\/SocketException.closed.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SocketException.closed()\n    : message = 'Socket has been closed',\n      osError = null,\n      address = null,\n      port = null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SocketException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/SocketException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  StringBuffer sb = new StringBuffer();\n  sb.write(\"SocketException\");\n  if (message.isNotEmpty) {\n    sb.write(\": $message\");\n    if (osError != null) {\n      sb.write(\" ($osError)\");\n    }\n  } else if (osError != null) {\n    sb.write(\": $osError\");\n  }\n  if (address != null) {\n    sb.write(\", address = ${address.host}\");\n  }\n  if (port != null) {\n    sb.write(\", port = $port\");\n  }\n  return sb.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "address",
                    "type": "dart:io.InternetAddress",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.SocketException",
                    "isConstant": false,
                    "href": "dart-io\/SocketException\/address.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InternetAddress address\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.SocketException",
                    "isConstant": false,
                    "href": "dart-io\/SocketException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "osError",
                    "type": "dart:io.OSError",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.SocketException",
                    "isConstant": false,
                    "href": "dart-io\/SocketException\/osError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OSError osError\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "port",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.SocketException",
                    "isConstant": false,
                    "href": "dart-io\/SocketException\/port.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int port\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SocketException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SocketException"
        },
        {
            "name": "dart:io.SocketOption",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/SocketOption\/TCP_NODELAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketOption TCP_NODELAY = tcpNoDelay\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "TCP_NODELAY",
                    "memberOf": "dart:io.SocketOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/SocketOption\/tcpNoDelay-constant.html",
                    "desc": "<p>Enable or disable no-delay on the socket. If tcpNoDelay is enabled, the\nsocket will not buffer data internally, but instead write each data chunk\nas an individual TCP packet.<\/p>\n<p>tcpNoDelay is disabled by default.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const SocketOption tcpNoDelay = const SocketOption._(0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "tcpNoDelay",
                    "memberOf": "dart:io.SocketOption"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SocketOption-class.html",
            "desc": "<p>The <a href=\"dart-io\/SocketOption-class.html\">SocketOption<\/a> is used as a parameter to <a href=\"dart-io\/Socket\/setOption.html\">Socket.setOption<\/a> and\n<a href=\"dart-io\/RawSocket\/setOption.html\">RawSocket.setOption<\/a> to set customize the behaviour of the underlying\nsocket.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SocketOption"
        },
        {
            "name": "dart:io.Stdin",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:async.Stream",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "listen",
                    "type": "dart:async.StreamSubscription<dart:core.List<dart:core.int>>",
                    "desc": "<p>Adds a subscription to this stream.<\/p>\n<p>Returns a <a href=\"dart-async\/StreamSubscription-class.html\">StreamSubscription<\/a> which handles events from this stream using\nthe provided <code>onData<\/code>, <code>onError<\/code> and <code>onDone<\/code> handlers.\nThe handlers can be changed on the subscription, but they start out\nas the provided functions.<\/p>\n<p>On each data event from this stream, the subscriber's <code>onData<\/code> handler\nis called. If <code>onData<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>On errors from this stream, the <code>onError<\/code> handler is called with the\nerror object and possibly a stack trace.<\/p>\n<p>The <code>onError<\/code> callback must be of type <code>void onError(error)<\/code> or\n<code>void onError(error, StackTrace stackTrace)<\/code>. If <code>onError<\/code> accepts\ntwo arguments it is called with the error object and the stack trace\n(which could be <code>null<\/code> if this stream itself received an error without\nstack trace).\nOtherwise it is called with just the error object.\nIf <code>onError<\/code> is omitted, any errors on this stream are considered unhandled,\nand will be passed to the current <a href=\"dart-async\/Zone-class.html\">Zone<\/a>'s error handler.\nBy default unhandled async errors are treated\nas if they were uncaught top-level errors.<\/p>\n<p>If this stream closes and sends a done event, the <code>onDone<\/code> handler is\ncalled. If <code>onDone<\/code> is <code>null<\/code>, nothing happens.<\/p>\n<p>If <code>cancelOnError<\/code> is true, the subscription is automatically canceled\nwhen the first error event is delivered. The default is <code>false<\/code>.<\/p>\n<p>While a subscription is paused, or when it has been canceled,\nthe subscription doesn't receive events and none of the\nevent handler functions are called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdin",
                    "sig": "",
                    "params": [
                        {
                            "name": "event",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "event",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "onError",
                            "type": "dart:core.Function",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onDone",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "cancelOnError",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdin\/listen.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription&lt;List&lt;int&gt;&gt; listen(void onData(List&lt;int&gt; event),\n    {Function onError, void onDone(), bool cancelOnError}) {\n  return _stream.listen(onData,\n      onError: onError, onDone: onDone, cancelOnError: cancelOnError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.StreamSubscription",
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "readByteSync",
                    "type": "dart:core.int",
                    "desc": "<p>Synchronously read a byte from stdin. This call will block until a byte is\navailable.<\/p>\n<p>If at end of file, -1 is returned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdin",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Stdin\/readByteSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external int readByteSync();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "readLineSync",
                    "type": "dart:core.String",
                    "desc": "<p>Read a line from stdin.<\/p>\n<p>Blocks until a full line is available.<\/p>\n<p>Lines my be terminated by either <code>&lt;CR&gt;&lt;LF&gt;<\/code> or <code>&lt;LF&gt;<\/code>. On Windows in cases\nwhere the <a href=\"dart-io\/stdioType.html\">stdioType<\/a> of stdin is <code>StdioType.termimal<\/code> the terminator may\nalso be a single <code>&lt;CR&gt;<\/code>.<\/p>\n<p>Input bytes are converted to a string by <code>encoding<\/code>.\nIf <code>encoding<\/code> is omitted, it defaults to <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>.<\/p>\n<p>If <code>retainNewlines<\/code> is <code>false<\/code>, the returned String will not include the\nfinal line terminator. If <code>true<\/code>, the returned String will include the line\nterminator. Default is <code>false<\/code>.<\/p>\n<p>If end-of-file is reached after any bytes have been read from stdin,\nthat data is returned without a line terminator.\nReturns <code>null<\/code> if no bytes preceded the end of input.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdin",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoding",
                            "type": "dart:convert.Encoding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "retainNewlines",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdin\/readLineSync.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String readLineSync(\n    {Encoding encoding: systemEncoding, bool retainNewlines: false}) {\n  const CR = 13;\n  const LF = 10;\n  final List&lt;int&gt; line = &lt;int&gt;[];\n  \/\/ On Windows, if lineMode is disabled, only CR is received.\n  bool crIsNewline = Platform.isWindows &amp;&amp;\n      (stdioType(stdin) == StdioType.terminal) &amp;&amp;\n      !lineMode;\n  if (retainNewlines) {\n    int byte;\n    do {\n      byte = readByteSync();\n      if (byte &lt; 0) {\n        break;\n      }\n      line.add(byte);\n    } while (byte != LF &amp;&amp; !(byte == CR &amp;&amp; crIsNewline));\n    if (line.isEmpty) {\n      return null;\n    }\n  } else if (crIsNewline) {\n    \/\/ CR and LF are both line terminators, neither is retained.\n    while (true) {\n      int byte = readByteSync();\n      if (byte &lt; 0) {\n        if (line.isEmpty) return null;\n        break;\n      }\n      if (byte == LF || byte == CR) break;\n      line.add(byte);\n    }\n  } else {\n    \/\/ Case having to handle CR LF as a single unretained line terminator.\n    outer:\n    while (true) {\n      int byte = readByteSync();\n      if (byte == LF) break;\n      if (byte == CR) {\n        do {\n          byte = readByteSync();\n          if (byte == LF) break outer;\n\n          line.add(CR);\n        } while (byte == CR);\n        \/\/ Fall through and handle non-CR character.\n      }\n      if (byte &lt; 0) {\n        if (line.isEmpty) return null;\n        break;\n      }\n      line.add(byte);\n    }\n  }\n  return encoding.decode(line);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "echoMode",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Check if echo mode is enabled on <a href=\"dart-io\/stdin.html\">stdin<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Stdin",
                    "isConstant": false,
                    "href": "dart-io\/Stdin\/echoMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external bool get echoMode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hasTerminal",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is a terminal attached to stdin.<\/p>\n        ",
                    "memberOf": "dart:io.Stdin",
                    "isConstant": false,
                    "href": "dart-io\/Stdin\/hasTerminal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasTerminal {\n  try {\n    return stdioType(this) == StdioType.terminal;\n  } on FileSystemException catch (_) {\n    \/\/ If stdioType throws a FileSystemException, then it is not hooked up to\n    \/\/ a terminal, probably because it is closed, but let other exception\n    \/\/ types bubble up.\n    return false;\n  }\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lineMode",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Check if line mode is enabled on <a href=\"dart-io\/stdin.html\">stdin<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Stdin",
                    "isConstant": false,
                    "href": "dart-io\/Stdin\/lineMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external bool get lineMode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "supportsAnsiEscapes",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether connected to a terminal that supports ANSI escape sequences.<\/p>\n<p>Not all terminals are recognized, and not all recognized terminals can\nreport whether they support ANSI escape sequences, so this value is a\nbest-effort attempt at detecting the support.<\/p>\n<p>The actual escape sequence support may differ between terminals,\nwith some terminals supporting more escape sequences than others,\nand some terminals even differing in behavior for the same escape\nsequence.<\/p>\n<p>The ANSI color selection is generally supported.<\/p>\n<p>Currently, a <code>TERM<\/code> environment variable containing the string <code>xterm<\/code>\nwill be taken as evidence that ANSI escape sequences are supported.\nOn Windows, only versions of Windows 10 after v.1511\n(\"TH2\", OS build 10586) will be detected as supporting the output of\nANSI escape sequences, and only versions after v.1607 (\"Anniversary\nUpdate\", OS build 14393) will be detected as supporting the input of\nANSI escape sequences.<\/p>\n        ",
                    "memberOf": "dart:io.Stdin",
                    "isConstant": false,
                    "href": "dart-io\/Stdin\/supportsAnsiEscapes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external bool get supportsAnsiEscapes;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Stdin-class.html",
            "desc": "<p><a href=\"dart-io\/Stdin-class.html\">Stdin<\/a> allows both synchronous and asynchronous reads from the standard\ninput stream.<\/p>\n<p>Mixing synchronous and asynchronous reads is undefined.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Stdin"
        },
        {
            "name": "dart:io.StdinException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "StdinException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.StdinException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/StdinException\/StdinException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StdinException(this.message, [this.osError]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.StdinException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/StdinException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return \"StdinException: $message${osError == null ? \"\" : \", $osError\"}\";\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.StdinException",
                    "isConstant": false,
                    "href": "dart-io\/StdinException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "osError",
                    "type": "dart:io.OSError",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.StdinException",
                    "isConstant": false,
                    "href": "dart-io\/StdinException\/osError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OSError osError\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/StdinException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StdinException"
        },
        {
            "name": "dart:io.StdioType",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.StdioType",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/StdioType\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"StdioType: $name\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/FILE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType FILE = file\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "FILE",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/OTHER-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType OTHER = other\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "OTHER",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/PIPE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType PIPE = pipe\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PIPE",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/TERMINAL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType TERMINAL = terminal\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "TERMINAL",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/file-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType file = const StdioType._(\"file\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "file",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.StdioType",
                    "isConstant": false,
                    "href": "dart-io\/StdioType\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/other-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType other = const StdioType._(\"other\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "other",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/pipe-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType pipe = const StdioType._(\"pipe\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "pipe",
                    "memberOf": "dart:io.StdioType"
                },
                {
                    "type": "",
                    "href": "dart-io\/StdioType\/terminal-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StdioType terminal = const StdioType._(\"terminal\")\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "terminal",
                    "memberOf": "dart:io.StdioType"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/StdioType-class.html",
            "desc": "<p>The type of object a standard IO stream is attached to.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StdioType"
        },
        {
            "name": "dart:io.Stdout",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Adds byte <code>data<\/code> to the target consumer, ignoring <a href=\"dart-io\/Stdout\/encoding.html\">encoding<\/a>.<\/p>\n<p>The <a href=\"dart-io\/Stdout\/encoding.html\">encoding<\/a> does not apply to this method, and the <code>data<\/code> list is passed\ndirectly to the target consumer as a stream event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/Stdout\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n<p>The data list should not be modified after it has been passed to <code>add<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(List&lt;int&gt; data) {\n  _sink.add(data);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addError",
                    "type": "",
                    "desc": "<p>Passes the error to the target consumer as an error event.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing <a href=\"dart-io\/Stdout\/addStream.html\">addStream<\/a>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "error",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "stackTrace",
                            "type": "dart:core.StackTrace",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/addError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addError(error, [StackTrace stackTrace]) {\n  _sink.addError(error, stackTrace);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addStream",
                    "type": "dart:async.Future",
                    "desc": "<p>Adds all elements of the given <code>stream<\/code> to <code>this<\/code>.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes when\nall elements of the given <code>stream<\/code> are added to <code>this<\/code>.<\/p>\n<p>This function must not be called when a stream is currently being added\nusing this function.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "stream",
                            "type": "dart:async.Stream<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Stream",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/addStream.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream&lt;List&lt;int&gt;&gt; stream) =&gt; _sink.addStream(stream);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "close",
                    "type": "dart:async.Future",
                    "desc": "<p>Close the target consumer.<\/p>\n<p>NOTE: Writes to the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> may be buffered, and may not be flushed by\na call to <code>close()<\/code>. To flush all buffered writes, call <code>flush()<\/code> before\ncalling <code>close()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close() =&gt; _sink.close();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "flush",
                    "type": "dart:async.Future",
                    "desc": "<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> that completes once all buffered data is accepted by the\nunderlying <a href=\"dart-async\/StreamConsumer-class.html\">StreamConsumer<\/a>.<\/p>\n<p>This method must not be called while an <a href=\"dart-io\/Stdout\/addStream.html\">addStream<\/a> is incomplete.<\/p>\n<p>NOTE: This is not necessarily the same as the data being flushed by the\noperating system.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/flush.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future flush() =&gt; _sink.flush();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "write",
                    "type": "",
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\n<a href=\"dart-io\/Stdout\/add.html\">add<\/a>s the encoding of the result to the target consumer.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "object",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/write.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void write(object) {\n  _sink.write(object);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeAll",
                    "type": "",
                    "desc": "<p>Iterates over the given <code>objects<\/code> and <a href=\"dart-io\/Stdout\/write.html\">write<\/a>s them in sequence.<\/p>\n<p>If <a href=\"package-path_path\/separator.html\">separator<\/a> is provided, a <code>write<\/code> with the <code>separator<\/code> is performed\nbetween any two elements of objects`.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "objects",
                            "type": "dart:core.Iterable",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "sep",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/writeAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAll(objects, [sep = \"\"]) {\n  _sink.writeAll(objects, sep);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeCharCode",
                    "type": "",
                    "desc": "<p>Writes the character of <code>charCode<\/code>.<\/p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))<\/code>.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "charCode",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/writeCharCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeCharCode(int charCode) {\n  _sink.writeCharCode(charCode);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "writeln",
                    "type": "",
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and\nwrites the result to <code>this<\/code>, followed by a newline.<\/p>\n<p>This operation is non-blocking. See <a href=\"dart-io\/Stdout\/flush.html\">flush<\/a> or <a href=\"dart-io\/Stdout\/done.html\">done<\/a> for how to get any\nerrors generated by this call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.Stdout",
                    "sig": "",
                    "params": [
                        {
                            "name": "object",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/Stdout\/writeln.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeln([object = \"\"]) {\n  _sink.writeln(object);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "done",
                    "type": "dart:async.Future",
                    "types": [],
                    "desc": "<p>Get a future that will complete when the consumer closes, or when an\nerror occurs. This future is identical to the future returned by\n<a href=\"dart-io\/Stdout\/close.html\">close<\/a>.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/done.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Future get done =&gt; _sink.done;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoding",
                    "type": "dart:convert.Encoding",
                    "types": [],
                    "desc": "<p>The <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a> used when writing strings. Depending on the\nunderlying consumer this property might be mutable.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/encoding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Encoding get encoding =&gt; _sink.encoding;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hasTerminal",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Returns true if there is a terminal attached to stdout.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/hasTerminal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasTerminal =&gt; _hasTerminal(_fd);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "nonBlocking",
                    "type": "dart:io.IOSink",
                    "types": [],
                    "desc": "<p>Get a non-blocking <code>IOSink<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/nonBlocking.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IOSink get nonBlocking {\n  _nonBlocking ??= new IOSink(new _FileStreamConsumer.fromStdio(_fd));\n  return _nonBlocking;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "supportsAnsiEscapes",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether connected to a terminal that supports ANSI escape sequences.<\/p>\n<p>Not all terminals are recognized, and not all recognized terminals can\nreport whether they support ANSI escape sequences, so this value is a\nbest-effort attempt at detecting the support.<\/p>\n<p>The actual escape sequence support may differ between terminals,\nwith some terminals supporting more escape sequences than others,\nand some terminals even differing in behavior for the same escape\nsequence.<\/p>\n<p>The ANSI color selection is generally supported.<\/p>\n<p>Currently, a <code>TERM<\/code> environment variable containing the string <code>xterm<\/code>\nwill be taken as evidence that ANSI escape sequences are supported.\nOn Windows, only versions of Windows 10 after v.1511\n(\"TH2\", OS build 10586) will be detected as supporting the output of\nANSI escape sequences, and only versions after v.1607 (\"Anniversary\nUpdate\", OS build 14393) will be detected as supporting the input of\nANSI escape sequences.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/supportsAnsiEscapes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get supportsAnsiEscapes =&gt; _supportsAnsiEscapes(_fd);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "terminalColumns",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Get the number of columns of the terminal.<\/p>\n<p>If no terminal is attached to stdout, a <a href=\"dart-io\/StdoutException-class.html\">StdoutException<\/a> is thrown. See\n<a href=\"dart-io\/Stdout\/hasTerminal.html\">hasTerminal<\/a> for more info.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/terminalColumns.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get terminalColumns =&gt; _terminalColumns(_fd);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "terminalLines",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Get the number of lines of the terminal.<\/p>\n<p>If no terminal is attached to stdout, a <a href=\"dart-io\/StdoutException-class.html\">StdoutException<\/a> is thrown. See\n<a href=\"dart-io\/Stdout\/hasTerminal.html\">hasTerminal<\/a> for more info.<\/p>\n        ",
                    "memberOf": "dart:io.Stdout",
                    "isConstant": false,
                    "href": "dart-io\/Stdout\/terminalLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get terminalLines =&gt; _terminalLines(_fd);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/Stdout-class.html",
            "desc": "<p><a href=\"dart-io\/Stdout-class.html\">Stdout<\/a> represents the <a href=\"dart-io\/IOSink-class.html\">IOSink<\/a> for either <code>stdout<\/code> or <code>stderr<\/code>.<\/p>\n<p>It provides a <em>blocking<\/em> <code>IOSink<\/code>, so using this to write will block until\nthe output is written.<\/p>\n<p>In some situations this blocking behavior is undesirable as it does not\nprovide the same non-blocking behavior as dart:io in general exposes.\nUse the property <a href=\"dart-io\/Stdout\/nonBlocking.html\">nonBlocking<\/a> to get an <code>IOSink<\/code> which has the non-blocking\nbehavior.<\/p>\n<p>This class can also be used to check whether <code>stdout<\/code> or <code>stderr<\/code> is\nconnected to a terminal and query some terminal properties.<\/p>\n<p>The <a href=\"dart-io\/Stdout\/addError.html\">addError<\/a> API is inherited from  <a href=\"dart-async\/StreamSink-class.html\">StreamSink<\/a> and calling it will result\nin an unhandled asynchronous error unless there is an error handler on\n<a href=\"dart-io\/Stdout\/done.html\">done<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Stdout"
        },
        {
            "name": "dart:io.StdoutException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "StdoutException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.StdoutException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/StdoutException\/StdoutException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StdoutException(this.message, [this.osError]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.StdoutException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/StdoutException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return \"StdoutException: $message${osError == null ? \"\" : \", $osError\"}\";\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.StdoutException",
                    "isConstant": false,
                    "href": "dart-io\/StdoutException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "osError",
                    "type": "dart:io.OSError",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.StdoutException",
                    "isConstant": false,
                    "href": "dart-io\/StdoutException\/osError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OSError osError\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/StdoutException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StdoutException"
        },
        {
            "name": "dart:io.SystemEncoding",
            "extends": [
                "dart:convert.Encoding",
                "dart:core.int",
                "dart:core.List",
                "dart:core.String",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "SystemEncoding",
                    "type": "",
                    "desc": "<p>Creates a const SystemEncoding.<\/p>\n<p>Users should use the top-level constant, <a href=\"dart-io\/systemEncoding-constant.html\">systemEncoding<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SystemEncoding",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/SystemEncoding\/SystemEncoding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SystemEncoding();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "decode",
                    "type": "dart:core.String",
                    "desc": "<p>Decodes <code>encoded<\/code> data.<\/p>\n<p>The input is decoded as if by <code>decoder.convert<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SystemEncoding",
                    "sig": "",
                    "params": [
                        {
                            "name": "encoded",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SystemEncoding\/decode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String decode(List&lt;int&gt; encoded) =&gt; decoder.convert(encoded);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "encode",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Encodes <code>input<\/code>.<\/p>\n<p>The input is encoded as if by <code>encoder.convert<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.SystemEncoding",
                    "sig": "",
                    "params": [
                        {
                            "name": "input",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/SystemEncoding\/encode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; encode(String input) =&gt; encoder.convert(input);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                }
            ],
            "props": [
                {
                    "name": "decoder",
                    "type": "dart:convert.Converter<dart:core.List<dart:core.int<dart:core.String>>>",
                    "types": [
                        "dart:convert.Converter",
                        "dart:core.List",
                        "dart:core.int",
                        "dart:core.String"
                    ],
                    "desc": "<p>Returns the decoder of <code>this<\/code>, converting from <code>List&lt;int&gt;<\/code> to <code>String<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "dart:io.SystemEncoding",
                    "isConstant": false,
                    "href": "dart-io\/SystemEncoding\/decoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;List&lt;int&gt;, String&gt; get decoder {\n  if (Platform.operatingSystem == \"windows\") {\n    return const _WindowsCodePageDecoder();\n  } else {\n    return const Utf8Decoder();\n  }\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoder",
                    "type": "dart:convert.Converter<dart:core.String<dart:core.List<dart:core.int>>>",
                    "types": [
                        "dart:convert.Converter",
                        "dart:core.String",
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Returns the encoder from <code>String<\/code> to <code>List&lt;int&gt;<\/code>.<\/p>\n<p>It may be stateful and should not be reused.<\/p>\n        ",
                    "memberOf": "dart:io.SystemEncoding",
                    "isConstant": false,
                    "href": "dart-io\/SystemEncoding\/encoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Converter&lt;String, List&lt;int&gt;&gt; get encoder {\n  if (Platform.operatingSystem == \"windows\") {\n    return const _WindowsCodePageEncoder();\n  } else {\n    return const Utf8Encoder();\n  }\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Name of the encoding.<\/p>\n<p>If the encoding is standardized, this is the lower-case version of one of\nthe IANA official names for the character set (see\n<a href=\"http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xml\">http:\/\/www.iana.org\/assignments\/character-sets\/character-sets.xml<\/a>)<\/p>\n        ",
                    "memberOf": "dart:io.SystemEncoding",
                    "isConstant": false,
                    "href": "dart-io\/SystemEncoding\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name =&gt; 'system';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/SystemEncoding-class.html",
            "desc": "<p>The system encoding is the current code page on Windows and UTF-8 on Linux\nand Mac.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SystemEncoding"
        },
        {
            "name": "dart:io.TlsException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "TlsException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.TlsException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "osError",
                            "type": "dart:io.OSError",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/TlsException\/TlsException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst TlsException([String message = \"\", OSError osError])\n    : this._(\"TlsException\", message, osError);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.TlsException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/TlsException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  StringBuffer sb = new StringBuffer();\n  sb.write(type);\n  if (message.isNotEmpty) {\n    sb.write(\": $message\");\n    if (osError != null) {\n      sb.write(\" ($osError)\");\n    }\n  } else if (osError != null) {\n    sb.write(\": $osError\");\n  }\n  return sb.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.TlsException",
                    "isConstant": false,
                    "href": "dart-io\/TlsException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "osError",
                    "type": "dart:io.OSError",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.TlsException",
                    "isConstant": false,
                    "href": "dart-io\/TlsException\/osError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OSError osError\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "type",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.TlsException",
                    "isConstant": false,
                    "href": "dart-io\/TlsException\/type.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String type\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "dart:io.CertificateException",
                "dart:io.HandshakeException"
            ],
            "realImplementors": [
                "dart:io.CertificateException",
                "dart:io.HandshakeException"
            ],
            "cn": [],
            "href": "dart-io\/TlsException-class.html",
            "desc": "<p>A secure networking exception caused by a failure in the\n TLS\/SSL protocol.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TlsException"
        },
        {
            "type": "",
            "href": "dart-io\/WRITE-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "WRITE",
            "memberOf": "dart:io"
        },
        {
            "type": "",
            "href": "dart-io\/WRITE_ONLY-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "WRITE_ONLY",
            "memberOf": "dart:io"
        },
        {
            "type": "",
            "href": "dart-io\/WRITE_ONLY_APPEND-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "WRITE_ONLY_APPEND",
            "memberOf": "dart:io"
        },
        {
            "name": "dart:io.WebSocket",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "WebSocket",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/WebSocket\/WebSocket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('This constructor will be removed in Dart 2.0. Use `implements`'\n    ' instead of `extends` if implementing this abstract class.')\nWebSocket();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "",
                    "desc": "<p>Sends data on the WebSocket connection. The data in <code>data<\/code> must\nbe either a <code>String<\/code>, or a <code>List&lt;int&gt;<\/code> holding bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "data",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocket\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(\/*String|List&lt;int&gt;*\/ data);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "addStream",
                    "type": "dart:async.Future",
                    "desc": "<p>Sends data from a stream on WebSocket connection. Each data event from\n<code>stream<\/code> will be send as a single WebSocket frame. The data from <code>stream<\/code>\nmust be either <code>String<\/code>s, or <code>List&lt;int&gt;<\/code>s holding bytes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "stream",
                            "type": "dart:async.Stream",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocket\/addStream.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future addStream(Stream stream);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addUtf8Text",
                    "type": "",
                    "desc": "<p>Sends a text message with the text represented by <code>bytes<\/code>.<\/p>\n<p>The <code>bytes<\/code> should be valid UTF-8 encoded Unicode characters. If they are\nnot, the receiving end will close the connection.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocket\/addUtf8Text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addUtf8Text(List&lt;int&gt; bytes);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "close",
                    "type": "dart:async.Future",
                    "desc": "<p>Closes the WebSocket connection. Set the optional <code>code<\/code> and <code>reason<\/code>\narguments to send close information to the remote peer. If they are\nomitted, the peer will see <a class=\"deprecated\" href=\"dart-io\/WebSocketStatus\/NO_STATUS_RECEIVED-constant.html\">WebSocketStatus.NO_STATUS_RECEIVED<\/a> code\nwith no reason.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "code",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reason",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocket\/close.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future close([int code, String reason]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "connect",
                    "type": "dart:async.Future<dart:io.WebSocket>",
                    "desc": "<p>Create a new WebSocket connection. The URL supplied in <code>url<\/code>\nmust use the scheme <code>ws<\/code> or <code>wss<\/code>.<\/p>\n<p>The <code>protocols<\/code> argument is specifying the subprotocols the\nclient is willing to speak.<\/p>\n<p>The <code>headers<\/code> argument is specifying additional HTTP headers for\nsetting up the connection. This would typically be the <code>Origin<\/code>\nheader and potentially cookies. The keys of the map are the header\nfields and the values are either String or List<string>.<\/string><\/p>\n<p>If <code>headers<\/code> is provided, there are a number of headers\nwhich are controlled by the WebSocket connection process. These\nheaders are:<\/p>\n<ul>\n<li><code>connection<\/code><\/li>\n<li><code>sec-websocket-key<\/code><\/li>\n<li><code>sec-websocket-protocol<\/code><\/li>\n<li><code>sec-websocket-version<\/code><\/li>\n<li><code>upgrade<\/code><\/li>\n<\/ul>\n<p>If any of these are passed in the <code>headers<\/code> map they will be ignored.<\/p>\n<p>If the <code>url<\/code> contains user information this will be passed as basic\nauthentication when setting up the connection.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "protocols",
                            "type": "dart:core.Iterable<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "headers",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "compression",
                            "type": "dart:io.CompressionOptions",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocket\/connect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;WebSocket&gt; connect(String url,\n        {Iterable&lt;String&gt; protocols,\n        Map&lt;String, dynamic&gt; headers,\n        CompressionOptions compression:\n            CompressionOptions.compressionDefault}) =&gt;\n    _WebSocketImpl.connect(url, protocols, headers, compression: compression);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.WebSocket"
                    ]
                },
                {
                    "name": "WebSocket.fromUpgradedSocket",
                    "type": "",
                    "desc": "<p>Creates a WebSocket from an already-upgraded socket.<\/p>\n<p>The initial WebSocket handshake must have occurred prior to this call. A\nWebSocket client can automatically perform the handshake using\n<a href=\"dart-io\/WebSocket\/connect.html\">WebSocket.connect<\/a>, while a server can do so using\n<a href=\"dart-io\/WebSocketTransformer\/upgrade.html\">WebSocketTransformer.upgrade<\/a>. To manually upgrade an <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a>,\n<a href=\"dart-io\/HttpResponse\/detachSocket.html\">HttpResponse.detachSocket<\/a> may be called.<\/p>\n<p><code>protocol<\/code> should be the protocol negotiated by this handshake, if any.<\/p>\n<p><code>serverSide<\/code> must be passed explicitly. If it's <code>false<\/code>, the WebSocket will\nact as the client and mask the messages it sends. If it's <code>true<\/code>, it will\nact as the server and will not mask its messages.<\/p>\n<p>If <code>compression<\/code> is provided, the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> created will be configured\nto negotiate with the specified <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>. If none is specified\nthen the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> will be created with the default <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocket",
                    "sig": "",
                    "params": [
                        {
                            "name": "socket",
                            "type": "dart:io.Socket",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "protocol",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "serverSide",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "compression",
                            "type": "dart:io.CompressionOptions",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/WebSocket\/WebSocket.fromUpgradedSocket.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory WebSocket.fromUpgradedSocket(Socket socket,\n    {String protocol,\n    bool serverSide,\n    CompressionOptions compression: CompressionOptions.compressionDefault}) {\n  if (serverSide == null) {\n    throw new ArgumentError(\"The serverSide argument must be passed \"\n        \"explicitly to WebSocket.fromUpgradedSocket.\");\n  }\n  return new _WebSocketImpl._fromSocket(\n      socket, protocol, compression, serverSide);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/CLOSED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CLOSED = closed\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CLOSED",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/CLOSING-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CLOSING = closing\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CLOSING",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/CONNECTING-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int CONNECTING = connecting\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "CONNECTING",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/OPEN-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int OPEN = open\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "OPEN",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "name": "closeCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The close code set when the WebSocket connection is closed. If\nthere is no close code available this property will be <code>null<\/code><\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/closeCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get closeCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "closeReason",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The close reason set when the WebSocket connection is closed. If\nthere is no close reason available this property will be <code>null<\/code><\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/closeReason.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get closeReason;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/closed-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int closed = 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "closed",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/closing-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int closing = 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "closing",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/connecting-constant.html",
                    "desc": "<p>Possible states of the connection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int connecting = 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "connecting",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "name": "extensions",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The extensions property is initially the empty string. After the\nWebSocket connection is established this string reflects the\nextensions used by the server.<\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/extensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get extensions;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocket\/open-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int open = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "open",
                    "memberOf": "dart:io.WebSocket"
                },
                {
                    "name": "pingInterval",
                    "type": "dart:core.Duration",
                    "types": [],
                    "desc": "<p>Set and get the interval for sending ping signals. If a ping message is not\nanswered by a pong message from the peer, the <code>WebSocket<\/code> is assumed\ndisconnected and the connection is closed with a\n<a class=\"deprecated\" href=\"dart-io\/WebSocketStatus\/GOING_AWAY-constant.html\">WebSocketStatus.GOING_AWAY<\/a> close code. When a ping signal is sent, the\npong message must be received within <a href=\"dart-io\/WebSocket\/pingInterval.html\">pingInterval<\/a>.<\/p>\n<p>There are never two outstanding pings at any given time, and the next ping\ntimer starts when the pong is received.<\/p>\n<p>Set the <a href=\"dart-io\/WebSocket\/pingInterval.html\">pingInterval<\/a> to <code>null<\/code> to disable sending ping messages.<\/p>\n<p>The default value is <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/pingInterval.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration pingInterval\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "protocol",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The protocol property is initially the empty string. After the\nWebSocket connection is established the value is the subprotocol\nselected by the server. If no subprotocol is negotiated the\nvalue will remain <code>null<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/protocol.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get protocol;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "readyState",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the current state of the connection.<\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/readyState.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get readyState;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "userAgent",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the user agent used for WebSocket connections.<\/p>\n        ",
                    "memberOf": "dart:io.WebSocket",
                    "isConstant": false,
                    "href": "dart-io\/WebSocket\/userAgent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static String get userAgent =&gt; _WebSocketImpl.userAgent;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/WebSocket-class.html",
            "desc": "<p>A two-way HTTP communication object for client or server applications.<\/p>\n<p>The stream exposes the messages received. A text message will be of type\n<code>String<\/code> and a binary message will be of type <code>List&lt;int&gt;<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WebSocket"
        },
        {
            "name": "dart:io.WebSocketException",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "WebSocketException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.WebSocketException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/WebSocketException\/WebSocketException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const WebSocketException([this.message = \"\"]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocketException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocketException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"WebSocketException: $message\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.WebSocketException",
                    "isConstant": false,
                    "href": "dart-io\/WebSocketException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/WebSocketException-class.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WebSocketException"
        },
        {
            "name": "dart:io.WebSocketStatus",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "WebSocketStatus",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.WebSocketStatus",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/WebSocketStatus\/WebSocketStatus.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/ABNORMAL_CLOSURE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int ABNORMAL_CLOSURE = abnormalClosure\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "ABNORMAL_CLOSURE",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/GOING_AWAY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int GOING_AWAY = goingAway\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "GOING_AWAY",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/INTERNAL_SERVER_ERROR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int INTERNAL_SERVER_ERROR = internalServerError\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "INTERNAL_SERVER_ERROR",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/INVALID_FRAME_PAYLOAD_DATA-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int INVALID_FRAME_PAYLOAD_DATA = invalidFramePayloadData\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "INVALID_FRAME_PAYLOAD_DATA",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/MESSAGE_TOO_BIG-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MESSAGE_TOO_BIG = messageTooBig\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MESSAGE_TOO_BIG",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/MISSING_MANDATORY_EXTENSION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MISSING_MANDATORY_EXTENSION = missingMandatoryExtension\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MISSING_MANDATORY_EXTENSION",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/NORMAL_CLOSURE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NORMAL_CLOSURE = normalClosure\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NORMAL_CLOSURE",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/NO_STATUS_RECEIVED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int NO_STATUS_RECEIVED = noStatusReceived\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "NO_STATUS_RECEIVED",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/POLICY_VIOLATION-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int POLICY_VIOLATION = policyViolation\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "POLICY_VIOLATION",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/PROTOCOL_ERROR-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int PROTOCOL_ERROR = protocolError\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "PROTOCOL_ERROR",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/RESERVED_1004-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int RESERVED_1004 = reserved1004\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RESERVED_1004",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/RESERVED_1015-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int RESERVED_1015 = reserved1015\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "RESERVED_1015",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/UNSUPPORTED_DATA-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int UNSUPPORTED_DATA = unsupportedData\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "UNSUPPORTED_DATA",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/abnormalClosure-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int abnormalClosure = 1006\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "abnormalClosure",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/goingAway-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int goingAway = 1001\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "goingAway",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/internalServerError-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int internalServerError = 1011\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "internalServerError",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/invalidFramePayloadData-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int invalidFramePayloadData = 1007\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "invalidFramePayloadData",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/messageTooBig-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int messageTooBig = 1009\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "messageTooBig",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/missingMandatoryExtension-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int missingMandatoryExtension = 1010\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "missingMandatoryExtension",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/noStatusReceived-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int noStatusReceived = 1005\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "noStatusReceived",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/normalClosure-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int normalClosure = 1000\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "normalClosure",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/policyViolation-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int policyViolation = 1008\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "policyViolation",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/protocolError-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int protocolError = 1002\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "protocolError",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/reserved1004-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int reserved1004 = 1004\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "reserved1004",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/reserved1015-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int reserved1015 = 1015\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "reserved1015",
                    "memberOf": "dart:io.WebSocketStatus"
                },
                {
                    "type": "",
                    "href": "dart-io\/WebSocketStatus\/unsupportedData-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int unsupportedData = 1003\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "unsupportedData",
                    "memberOf": "dart:io.WebSocketStatus"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/WebSocketStatus-class.html",
            "desc": "<p>WebSocket status codes used when closing a WebSocket connection.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WebSocketStatus"
        },
        {
            "name": "dart:io.WebSocketTransformer",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "WebSocketTransformer",
                    "type": "",
                    "desc": "<p>Create a new <a href=\"dart-io\/WebSocketTransformer-class.html\">WebSocketTransformer<\/a>.<\/p>\n<p>If <code>protocolSelector<\/code> is provided, <code>protocolSelector<\/code> will be called to\nselect what protocol to use, if any were provided by the client.\n<code>protocolSelector<\/code> is should return either a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompleting with a <a href=\"dart-core\/String-class.html\">String<\/a>. The <a href=\"dart-core\/String-class.html\">String<\/a> must exist in the list of\nprotocols.<\/p>\n<p>If <code>compression<\/code> is provided, the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> created will be configured\nto negotiate with the specified <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>. If none is specified\nthen the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> will be created with the default <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocketTransformer",
                    "sig": "",
                    "params": [
                        {
                            "name": "protocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "protocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "compression",
                            "type": "dart:io.CompressionOptions",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/WebSocketTransformer\/WebSocketTransformer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory WebSocketTransformer(\n    {\/*String|Future&lt;String&gt;*\/ protocolSelector(List&lt;String&gt; protocols),\n    CompressionOptions compression: CompressionOptions.compressionDefault}) {\n  return new _WebSocketTransformerImpl(protocolSelector, compression);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isUpgradeRequest",
                    "type": "dart:core.bool",
                    "desc": "<p>Checks whether the request is a valid WebSocket upgrade request.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocketTransformer",
                    "sig": "",
                    "params": [
                        {
                            "name": "request",
                            "type": "dart:io.HttpRequest",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocketTransformer\/isUpgradeRequest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isUpgradeRequest(HttpRequest request) {\n  return _WebSocketTransformerImpl._isUpgradeRequest(request);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "upgrade",
                    "type": "dart:async.Future<dart:io.WebSocket>",
                    "desc": "<p>Upgrades a <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> to a <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> connection. If the\nrequest is not a valid WebSocket upgrade request an HTTP response\nwith status code 500 will be returned. Otherwise the returned\nfuture will complete with the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> when the upgrade process\nis complete.<\/p>\n<p>If <code>protocolSelector<\/code> is provided, <code>protocolSelector<\/code> will be called to\nselect what protocol to use, if any were provided by the client.\n<code>protocolSelector<\/code> is should return either a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-async\/Future-class.html\">Future<\/a>\ncompleting with a <a href=\"dart-core\/String-class.html\">String<\/a>. The <a href=\"dart-core\/String-class.html\">String<\/a> must exist in the list of\nprotocols.<\/p>\n<p>If <code>compression<\/code> is provided, the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> created will be configured\nto negotiate with the specified <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>. If none is specified\nthen the <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> will be created with the default <a href=\"dart-io\/CompressionOptions-class.html\">CompressionOptions<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.WebSocketTransformer",
                    "sig": "",
                    "params": [
                        {
                            "name": "request",
                            "type": "dart:io.HttpRequest",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "protocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "protocols",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "compression",
                            "type": "dart:io.CompressionOptions",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/WebSocketTransformer\/upgrade.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;WebSocket&gt; upgrade(HttpRequest request,\n    {protocolSelector(List&lt;String&gt; protocols),\n    CompressionOptions compression: CompressionOptions.compressionDefault}) {\n  return _WebSocketTransformerImpl._upgrade(\n      request, protocolSelector, compression);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:io.WebSocket"
                    ]
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/WebSocketTransformer-class.html",
            "desc": "<p>The <a href=\"dart-io\/WebSocketTransformer-class.html\">WebSocketTransformer<\/a> provides the ability to upgrade a\n<a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> to a <a href=\"dart-io\/WebSocket-class.html\">WebSocket<\/a> connection. It supports both\nupgrading a single <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> and upgrading a stream of\n<a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a>s.<\/p>\n<p>To upgrade a single <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> use the static <a href=\"dart-io\/WebSocketTransformer\/upgrade.html\">upgrade<\/a> method.<\/p>\n<pre class=\"language-dart\"><code>HttpServer server;\nserver.listen((request) {\n  if (...) {\n    WebSocketTransformer.upgrade(request).then((websocket) {\n      ...\n    });\n  } else {\n    \/\/ Do normal HTTP request processing.\n  }\n});\n<\/code><\/pre>\n<p>To transform a stream of <a href=\"dart-io\/HttpRequest-class.html\">HttpRequest<\/a> events as it implements a\nstream transformer that transforms a stream of HttpRequest into a\nstream of WebSockets by upgrading each HttpRequest from the HTTP or\nHTTPS server, to the WebSocket protocol.<\/p>\n<pre class=\"language-dart\"><code>server.transform(new WebSocketTransformer()).listen((webSocket) =&gt; ...);\n<\/code><\/pre>\n<p>This transformer strives to implement WebSockets as specified by RFC6455.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "WebSocketTransformer"
        },
        {
            "name": "dart:io.X509Certificate",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [],
            "props": [
                {
                    "name": "der",
                    "type": "dart:typed_data.Uint8List",
                    "types": [],
                    "desc": "<p>The DER encoded bytes of the certificate.<\/p>\n        ",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/der.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List get der;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "endValidity",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/endValidity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateTime get endValidity;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "issuer",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/issuer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get issuer;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "pem",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The PEM encoded String of the certificate.<\/p>\n        ",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/pem.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get pem;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "sha1",
                    "type": "dart:typed_data.Uint8List",
                    "types": [],
                    "desc": "<p>The SHA1 hash of the certificate.<\/p>\n        ",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/sha1.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List get sha1;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "startValidity",
                    "type": "dart:core.DateTime",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/startValidity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">DateTime get startValidity;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "subject",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "dart:io.X509Certificate",
                    "isConstant": false,
                    "href": "dart-io\/X509Certificate\/subject.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get subject;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/X509Certificate-class.html",
            "desc": "<p>X509Certificate represents an SSL certificate, with accessors to\nget the fields of the certificate.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "X509Certificate"
        },
        {
            "type": "",
            "href": "dart-io\/ZLIB-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "ZLIB",
            "memberOf": "dart:io"
        },
        {
            "name": "dart:io.ZLibCodec",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Codec",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ZLibCodec",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ZLibCodec",
                    "sig": "",
                    "params": [
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "windowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "memLevel",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strategy",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dictionary",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "raw",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "gzip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/ZLibCodec\/ZLibCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ZLibCodec(\n    {this.level: ZLibOption.defaultLevel,\n    this.windowBits: ZLibOption.defaultWindowBits,\n    this.memLevel: ZLibOption.defaultMemLevel,\n    this.strategy: ZLibOption.strategyDefault,\n    this.dictionary,\n    this.raw: false,\n    this.gzip: false}) {\n  _validateZLibeLevel(level);\n  _validateZLibMemLevel(memLevel);\n  _validateZLibStrategy(strategy);\n  _validateZLibWindowBits(windowBits);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "decoder",
                    "type": "dart:io.ZLibDecoder",
                    "types": [],
                    "desc": "<p>Get a <a href=\"dart-io\/ZLibDecoder-class.html\">ZLibDecoder<\/a> for decoding <code>ZLib<\/code> compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/decoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ZLibDecoder get decoder =&gt;\n    new ZLibDecoder(windowBits: windowBits, dictionary: dictionary, raw: raw);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dictionary",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Initial compression dictionary.<\/p>\n<p>It should consist of strings (byte sequences) that are likely to be\nencountered later in the data to be compressed, with the most commonly used\nstrings preferably put towards the end of the dictionary. Using a\ndictionary is most useful when the data to be compressed is short and can\nbe predicted with good accuracy; the data can then be compressed better\nthan with the default empty dictionary.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/dictionary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; dictionary\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "encoder",
                    "type": "dart:io.ZLibEncoder",
                    "types": [],
                    "desc": "<p>Get a <a href=\"dart-io\/ZLibEncoder-class.html\">ZLibEncoder<\/a> for encoding to <code>ZLib<\/code> compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/encoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ZLibEncoder get encoder =&gt; new ZLibEncoder(\n    gzip: false,\n    level: level,\n    windowBits: windowBits,\n    memLevel: memLevel,\n    strategy: strategy,\n    dictionary: dictionary,\n    raw: raw);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "gzip",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, <code>GZip<\/code> frames will be added to the compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/gzip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool gzip\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The compression-<a href=\"dart-io\/ZLibCodec\/level.html\">level<\/a> can be set in the range of <code>-1..9<\/code>, with <code>6<\/code> being\nthe default compression level. Levels above <code>6<\/code> will have higher\ncompression rates at the cost of more CPU and memory usage. Levels below\n<code>6<\/code> will use less CPU and memory at the cost of lower compression rates.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int level\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "memLevel",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Specifies how much memory should be allocated for the internal compression\nstate. <code>1<\/code> uses minimum memory but is slow and reduces compression ratio;\n<code>9<\/code> uses maximum memory for optimal speed. The default value is <code>8<\/code>.<\/p>\n<p>The memory requirements for deflate are (in bytes):<\/p>\n<pre class=\"language-dart\"><code>(1 &lt;&lt; (windowBits + 2)) +  (1 &lt;&lt; (memLevel + 9))\n<\/code><\/pre>\n<p>that is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values)<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/memLevel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int memLevel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "raw",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, deflate generates raw data with no zlib header or trailer, and\nwill not compute an adler32 check value<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/raw.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool raw\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strategy",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Tunes the compression algorithm. Use the value strategyDefault for normal\ndata, strategyFiltered for data produced by a filter (or predictor),\nstrategyHuffmanOnly to force Huffman encoding only (no string match), or\nstrategyRle to limit match distances to one (run-length encoding).<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/strategy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int strategy\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "windowBits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Base two logarithm of the window size (the size of the history buffer). It\nshould be in the range 8..15. Larger values result in better compression at\nthe expense of memory usage. The default value is 15<\/p>\n        ",
                    "memberOf": "dart:io.ZLibCodec",
                    "isConstant": false,
                    "href": "dart-io\/ZLibCodec\/windowBits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int windowBits\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ZLibCodec-class.html",
            "desc": "<p>The <a href=\"dart-io\/ZLibCodec-class.html\">ZLibCodec<\/a> encodes raw bytes to ZLib compressed bytes and decodes ZLib\ncompressed bytes to raw bytes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ZLibCodec"
        },
        {
            "name": "dart:io.ZLibDecoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ZLibDecoder",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ZLibDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "windowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dictionary",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "raw",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/ZLibDecoder\/ZLibDecoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ZLibDecoder(\n    {this.windowBits: ZLibOption.defaultWindowBits,\n    this.dictionary,\n    this.raw: false}) {\n  _validateZLibWindowBits(windowBits);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "convert",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Convert a list of bytes using the options given to the <a href=\"dart-io\/ZLibDecoder-class.html\">ZLibDecoder<\/a>\nconstructor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ZLibDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/ZLibDecoder\/convert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(List&lt;int&gt; bytes) {\n  _BufferSink sink = new _BufferSink();\n  startChunkedConversion(sink)\n    ..add(bytes)\n    ..close();\n  return sink.builder.takeBytes();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "startChunkedConversion",
                    "type": "dart:convert.ByteConversionSink",
                    "desc": "<p>Start a chunked conversion. While it accepts any <a href=\"dart-core\/Sink-class.html\">Sink<\/a>\ntaking <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a>'s, the optimal sink to be passed as <code>sink<\/code> is a\n<a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ZLibDecoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "sink",
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Sink",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/ZLibDecoder\/startChunkedConversion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  if (sink is! ByteConversionSink) {\n    sink = new ByteConversionSink.from(sink);\n  }\n  return new _ZLibDecoderSink(sink, windowBits, dictionary, raw);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "dictionary",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Initial compression dictionary.<\/p>\n<p>It should consist of strings (byte sequences) that are likely to be\nencountered later in the data to be compressed, with the most commonly used\nstrings preferably put towards the end of the dictionary. Using a\ndictionary is most useful when the data to be compressed is short and can\nbe predicted with good accuracy; the data can then be compressed better\nthan with the default empty dictionary.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibDecoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibDecoder\/dictionary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; dictionary\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "raw",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, deflate generates raw data with no zlib header or trailer, and\nwill not compute an adler32 check value<\/p>\n        ",
                    "memberOf": "dart:io.ZLibDecoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibDecoder\/raw.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool raw\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "windowBits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Base two logarithm of the window size (the size of the history buffer). It\nshould be in the range <code>8..15<\/code>. Larger values result in better compression\nat the expense of memory usage. The default value is <code>15<\/code>.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibDecoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibDecoder\/windowBits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int windowBits\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ZLibDecoder-class.html",
            "desc": "<p>The <a href=\"dart-io\/ZLibDecoder-class.html\">ZLibDecoder<\/a> is used by <a href=\"dart-io\/ZLibCodec-class.html\">ZLibCodec<\/a> and <a href=\"dart-io\/GZipCodec-class.html\">GZipCodec<\/a> to decompress data.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ZLibDecoder"
        },
        {
            "name": "dart:io.ZLibEncoder",
            "extends": [
                "dart:core.int",
                "dart:core.List",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "dart:core.int",
                "dart:core.List",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ZLibEncoder",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ZLibEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "gzip",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "windowBits",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "memLevel",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strategy",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dictionary",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        },
                        {
                            "name": "raw",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "dart-io\/ZLibEncoder\/ZLibEncoder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ZLibEncoder(\n    {this.gzip: false,\n    this.level: ZLibOption.defaultLevel,\n    this.windowBits: ZLibOption.defaultWindowBits,\n    this.memLevel: ZLibOption.defaultMemLevel,\n    this.strategy: ZLibOption.strategyDefault,\n    this.dictionary,\n    this.raw: false}) {\n  _validateZLibeLevel(level);\n  _validateZLibMemLevel(memLevel);\n  _validateZLibStrategy(strategy);\n  _validateZLibWindowBits(windowBits);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "convert",
                    "type": "dart:core.List<dart:core.int>",
                    "desc": "<p>Convert a list of bytes using the options given to the ZLibEncoder\nconstructor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ZLibEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:core.List<dart:core.int>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/ZLibEncoder\/convert.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; convert(List&lt;int&gt; bytes) {\n  _BufferSink sink = new _BufferSink();\n  startChunkedConversion(sink)\n    ..add(bytes)\n    ..close();\n  return sink.builder.takeBytes();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ]
                },
                {
                    "name": "startChunkedConversion",
                    "type": "dart:convert.ByteConversionSink",
                    "desc": "<p>Start a chunked conversion using the options given to the <a href=\"dart-io\/ZLibEncoder-class.html\">ZLibEncoder<\/a>\nconstructor. While it accepts any <a href=\"dart-core\/Sink-class.html\">Sink<\/a> taking <a href=\"dart-core\/List-class.html\">List&lt;int&gt;<\/a>'s,\nthe optimal sink to be passed as <code>sink<\/code> is a <a href=\"dart-convert\/ByteConversionSink-class.html\">ByteConversionSink<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "dart:io.ZLibEncoder",
                    "sig": "",
                    "params": [
                        {
                            "name": "sink",
                            "type": "dart:core.Sink<dart:core.List<dart:core.int>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Sink",
                                "dart:core.List",
                                "dart:core.int"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "dart-io\/ZLibEncoder\/startChunkedConversion.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ByteConversionSink startChunkedConversion(Sink&lt;List&lt;int&gt;&gt; sink) {\n  if (sink is! ByteConversionSink) {\n    sink = new ByteConversionSink.from(sink);\n  }\n  return new _ZLibEncoderSink(\n      sink, gzip, level, windowBits, memLevel, strategy, dictionary, raw);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "dictionary",
                    "type": "dart:core.List<dart:core.int>",
                    "types": [
                        "dart:core.List",
                        "dart:core.int"
                    ],
                    "desc": "<p>Initial compression dictionary.<\/p>\n<p>It should consist of strings (byte sequences) that are likely to be\nencountered later in the data to be compressed, with the most commonly used\nstrings preferably put towards the end of the dictionary. Using a\ndictionary is most useful when the data to be compressed is short and can\nbe predicted with good accuracy; the data can then be compressed better\nthan with the default empty dictionary.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/dictionary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; dictionary\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "gzip",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, <code>GZip<\/code> frames will be added to the compressed data.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/gzip.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool gzip\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "level",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The compression-<a href=\"dart-io\/ZLibEncoder\/level.html\">level<\/a> can be set in the range of <code>-1..9<\/code>, with <code>6<\/code> being\nthe default compression level. Levels above <code>6<\/code> will have higher\ncompression rates at the cost of more CPU and memory usage. Levels below\n<code>6<\/code> will use less CPU and memory at the cost of lower compression rates.<\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/level.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int level\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "memLevel",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Specifies how much memory should be allocated for the internal compression\nstate. <code>1<\/code> uses minimum memory but is slow and reduces compression ratio;\n<code>9<\/code> uses maximum memory for optimal speed. The default value is <code>8<\/code>.<\/p>\n<p>The memory requirements for deflate are (in bytes):<\/p>\n<pre class=\"language-dart\"><code>(1 &lt;&lt; (windowBits + 2)) +  (1 &lt;&lt; (memLevel + 9))\n<\/code><\/pre>\n<p>that is: 128K for windowBits = 15 + 128K for memLevel = 8 (default values)<\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/memLevel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int memLevel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "raw",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>When true, deflate generates raw data with no zlib header or trailer, and\nwill not compute an adler32 check value<\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/raw.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool raw\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strategy",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Tunes the compression algorithm. Use the value\n<a href=\"dart-io\/ZLibOption\/strategyDefault-constant.html\">ZLibOption.strategyDefault<\/a> for normal data,\n<a href=\"dart-io\/ZLibOption\/strategyFiltered-constant.html\">ZLibOption.strategyFiltered<\/a> for data produced by a filter\n(or predictor), <a href=\"dart-io\/ZLibOption\/strategyHuffmanOnly-constant.html\">ZLibOption.strategyHuffmanOnly<\/a> to force Huffman\nencoding only (no string match), or <a href=\"dart-io\/ZLibOption\/strategyRle-constant.html\">ZLibOption.strategyRle<\/a> to limit\nmatch distances to one (run-length encoding).<\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/strategy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int strategy\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "windowBits",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Base two logarithm of the window size (the size of the history buffer). It\nshould be in the range <code>8..15<\/code>. Larger values result in better compression\nat the expense of memory usage. The default value is <code>15<\/code><\/p>\n        ",
                    "memberOf": "dart:io.ZLibEncoder",
                    "isConstant": false,
                    "href": "dart-io\/ZLibEncoder\/windowBits.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int windowBits\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ZLibEncoder-class.html",
            "desc": "<p>The <a href=\"dart-io\/ZLibEncoder-class.html\">ZLibEncoder<\/a> encoder is used by <a href=\"dart-io\/ZLibCodec-class.html\">ZLibCodec<\/a> and <a href=\"dart-io\/GZipCodec-class.html\">GZipCodec<\/a> to compress\ndata.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ZLibEncoder"
        },
        {
            "name": "dart:io.ZLibOption",
            "extends": [],
            "memberOf": "dart:io",
            "events": [],
            "methods": [
                {
                    "name": "ZLibOption",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "dart:io.ZLibOption",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "dart-io\/ZLibOption\/ZLibOption.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/DEFAULT_LEVEL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_LEVEL = 6\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DEFAULT_LEVEL",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/DEFAULT_MEM_LEVEL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_MEM_LEVEL = 8\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DEFAULT_MEM_LEVEL",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/DEFAULT_WINDOW_BITS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int DEFAULT_WINDOW_BITS = 15\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "DEFAULT_WINDOW_BITS",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/MAX_LEVEL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MAX_LEVEL = 9\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MAX_LEVEL",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/MAX_MEM_LEVEL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MAX_MEM_LEVEL = 9\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MAX_MEM_LEVEL",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/MAX_WINDOW_BITS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MAX_WINDOW_BITS = 15\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MAX_WINDOW_BITS",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/MIN_LEVEL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MIN_LEVEL = -1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MIN_LEVEL",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/MIN_MEM_LEVEL-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MIN_MEM_LEVEL = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MIN_MEM_LEVEL",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/MIN_WINDOW_BITS-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int MIN_WINDOW_BITS = 8\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "MIN_WINDOW_BITS",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/STRATEGY_DEFAULT-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int STRATEGY_DEFAULT = 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "STRATEGY_DEFAULT",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/STRATEGY_FILTERED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int STRATEGY_FILTERED = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "STRATEGY_FILTERED",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/STRATEGY_FIXED-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int STRATEGY_FIXED = 4\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "STRATEGY_FIXED",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/STRATEGY_HUFFMAN_ONLY-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int STRATEGY_HUFFMAN_ONLY = 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "STRATEGY_HUFFMAN_ONLY",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/STRATEGY_RLE-constant.html",
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int STRATEGY_RLE = 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "STRATEGY_RLE",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/defaultLevel-constant.html",
                    "desc": "<p>Default value for <a href=\"dart-io\/ZLibCodec\/level.html\">ZLibCodec.level<\/a> and <a href=\"dart-io\/ZLibEncoder\/level.html\">ZLibEncoder.level<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultLevel = 6\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "defaultLevel",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/defaultMemLevel-constant.html",
                    "desc": "<p>Default value for <a href=\"dart-io\/ZLibCodec\/memLevel.html\">ZLibCodec.memLevel<\/a> and <a href=\"dart-io\/ZLibEncoder\/memLevel.html\">ZLibEncoder.memLevel<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultMemLevel = 8\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "defaultMemLevel",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/defaultWindowBits-constant.html",
                    "desc": "<p>Default value for <a href=\"dart-io\/ZLibCodec\/windowBits.html\">ZLibCodec.windowBits<\/a>, <a href=\"dart-io\/ZLibEncoder\/windowBits.html\">ZLibEncoder.windowBits<\/a>\nand <a href=\"dart-io\/ZLibDecoder\/windowBits.html\">ZLibDecoder.windowBits<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int defaultWindowBits = 15\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "defaultWindowBits",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/maxLevel-constant.html",
                    "desc": "<p>Maximal value for <a href=\"dart-io\/ZLibCodec\/level.html\">ZLibCodec.level<\/a> and <a href=\"dart-io\/ZLibEncoder\/level.html\">ZLibEncoder.level<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int maxLevel = 9\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "maxLevel",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/maxMemLevel-constant.html",
                    "desc": "<p>Maximal value for <a href=\"dart-io\/ZLibCodec\/memLevel.html\">ZLibCodec.memLevel<\/a> and <a href=\"dart-io\/ZLibEncoder\/memLevel.html\">ZLibEncoder.memLevel<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int maxMemLevel = 9\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "maxMemLevel",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/maxWindowBits-constant.html",
                    "desc": "<p>Maximal value for <a href=\"dart-io\/ZLibCodec\/windowBits.html\">ZLibCodec.windowBits<\/a>, <a href=\"dart-io\/ZLibEncoder\/windowBits.html\">ZLibEncoder.windowBits<\/a>\nand <a href=\"dart-io\/ZLibDecoder\/windowBits.html\">ZLibDecoder.windowBits<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int maxWindowBits = 15\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "maxWindowBits",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/minLevel-constant.html",
                    "desc": "<p>Minimal value for <a href=\"dart-io\/ZLibCodec\/level.html\">ZLibCodec.level<\/a> and <a href=\"dart-io\/ZLibEncoder\/level.html\">ZLibEncoder.level<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int minLevel = -1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "minLevel",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/minMemLevel-constant.html",
                    "desc": "<p>Minimal value for <a href=\"dart-io\/ZLibCodec\/memLevel.html\">ZLibCodec.memLevel<\/a> and <a href=\"dart-io\/ZLibEncoder\/memLevel.html\">ZLibEncoder.memLevel<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int minMemLevel = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "minMemLevel",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/minWindowBits-constant.html",
                    "desc": "<p>Minimal value for <a href=\"dart-io\/ZLibCodec\/windowBits.html\">ZLibCodec.windowBits<\/a>, <a href=\"dart-io\/ZLibEncoder\/windowBits.html\">ZLibEncoder.windowBits<\/a>\nand <a href=\"dart-io\/ZLibDecoder\/windowBits.html\">ZLibDecoder.windowBits<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int minWindowBits = 8\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "minWindowBits",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/strategyDefault-constant.html",
                    "desc": "<p>Recommended strategy for normal data<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int strategyDefault = 0\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "strategyDefault",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/strategyFiltered-constant.html",
                    "desc": "<p>Recommended strategy for data produced by a filter (or predictor)<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int strategyFiltered = 1\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "strategyFiltered",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/strategyFixed-constant.html",
                    "desc": "<p>This strategy prevents the use of dynamic Huffman codes, allowing for a\nsimpler decoder<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int strategyFixed = 4\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "strategyFixed",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/strategyHuffmanOnly-constant.html",
                    "desc": "<p>Use this strategy to force Huffman encoding only (no string match)<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int strategyHuffmanOnly = 2\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "strategyHuffmanOnly",
                    "memberOf": "dart:io.ZLibOption"
                },
                {
                    "type": "",
                    "href": "dart-io\/ZLibOption\/strategyRle-constant.html",
                    "desc": "<p>Use this strategy to limit match distances to one (run-length encoding)<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int strategyRle = 3\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "strategyRle",
                    "memberOf": "dart:io.ZLibOption"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "dart-io\/ZLibOption-class.html",
            "desc": "<p>Exposes ZLib options for input parameters.<\/p>\n<p>See <a href=\"http:\/\/www.zlib.net\/manual.html\">http:\/\/www.zlib.net\/manual.html<\/a> for more documentation.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ZLibOption"
        },
        {
            "name": "exit",
            "type": "",
            "desc": "<p>Exit the Dart VM process immediately with the given exit code.<\/p>\n<p>This does not wait for any asynchronous operations to terminate. Using\n<a href=\"dart-io\/exit.html\">exit<\/a> is therefore very likely to lose data.<\/p>\n<p>While debugging, the VM will not respect the <code>--pause-isolates-on-exit<\/code>\nflag if <a href=\"dart-io\/exit.html\">exit<\/a> is called as invoking this method causes the Dart VM\nprocess to shutdown immediately. To properly break on exit, consider\ncalling <a href=\"dart-developer\/debugger.html\">debugger<\/a> from <code>dart:developer<\/code> or <a href=\"dart-isolate\/Isolate\/pause.html\">Isolate.pause<\/a> from\n<code>dart:isolate<\/code> on <a href=\"dart-isolate\/Isolate\/current.html\">Isolate.current<\/a> to pause the isolate before\ninvoking <a href=\"dart-io\/exit.html\">exit<\/a>.<\/p>\n<p>The handling of exit codes is platform specific.<\/p>\n<p>On Linux and OS X an exit code for normal termination will always\nbe in the range <code>0..255<\/code>. If an exit code outside this range is\nset the actual exit code will be the lower 8 bits masked off and\ntreated as an unsigned value. E.g. using an exit code of -1 will\nresult in an actual exit code of 255 being reported.<\/p>\n<p>On Windows the exit code can be set to any 32-bit value. However\nsome of these values are reserved for reporting system errors like\ncrashes.<\/p>\n<p>Besides this the Dart executable itself uses an exit code of <code>254<\/code>\nfor reporting compile time errors and an exit code of <code>255<\/code> for\nreporting runtime error (unhandled exception).<\/p>\n<p>Due to these facts it is recommended to only use exit codes in the\nrange <code>0..127<\/code> for communicating the result of running a Dart\nprogram to the surrounding environment. This will avoid any\ncross-platform issues.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io",
            "sig": "",
            "params": [
                {
                    "name": "code",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "code",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/exit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void exit(int code) {\n  ArgumentError.checkNotNull(code, \"code\");\n  if (!_EmbedderConfig._mayExit) {\n    throw new UnsupportedError(\n        \"This embedder disallows calling dart:io's exit()\");\n  }\n  _ProcessUtils._exit(code);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "type": "",
            "href": "dart-io\/gzip-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "gzip",
            "memberOf": "dart:io"
        },
        {
            "name": "sleep",
            "type": "",
            "desc": "<p>Sleep for the duration specified in <code>duration<\/code>.<\/p>\n<p>Use this with care, as no asynchronous operations can be processed\nin a isolate while it is blocked in a <a href=\"dart-io\/sleep.html\">sleep<\/a> call.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io",
            "sig": "",
            "params": [
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "duration",
                    "type": "dart:core.Duration",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/sleep.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sleep(Duration duration) {\n  int milliseconds = duration.inMilliseconds;\n  if (milliseconds &lt; 0) {\n    throw new ArgumentError(\"sleep: duration cannot be negative\");\n  }\n  if (!_EmbedderConfig._maySleep) {\n    throw new UnsupportedError(\n        \"This embedder disallows calling dart:io's sleep()\");\n  }\n  _ProcessUtils._sleep(milliseconds);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "stdioType",
            "type": "dart:io.StdioType",
            "desc": "<p>For a stream, returns whether it is attached to a file, pipe, terminal, or\nsomething else.<\/p>\n    ",
            "static": false,
            "memberOf": "dart:io",
            "sig": "",
            "params": [
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "object",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "dart-io\/stdioType.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StdioType stdioType(object) {\n  if (object is _StdStream) {\n    object = object._stream;\n  } else if (object == stdout || object == stderr) {\n    int stdiofd = object == stdout ? _stdoutFD : _stderrFD;\n    switch (_StdIOUtils._getStdioHandleType(stdiofd)) {\n      case _stdioHandleTypeTerminal:\n        return StdioType.terminal;\n      case _stdioHandleTypePipe:\n        return StdioType.pipe;\n      case _stdioHandleTypeFile:\n        return StdioType.file;\n    }\n  }\n  if (object is _FileStream) {\n    return StdioType.file;\n  }\n  if (object is Socket) {\n    int socketType = _StdIOUtils._socketType(object);\n    if (socketType == null) return StdioType.other;\n    switch (socketType) {\n      case _stdioHandleTypeTerminal:\n        return StdioType.terminal;\n      case _stdioHandleTypePipe:\n        return StdioType.pipe;\n      case _stdioHandleTypeFile:\n        return StdioType.file;\n    }\n  }\n  if (object is _IOSinkImpl) {\n    try {\n      if (object._target is _FileStreamConsumer) {\n        return StdioType.file;\n      }\n    } catch (e) {\n      \/\/ Only the interface implemented, _sink not available.\n    }\n  }\n  return StdioType.other;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "type": "",
            "href": "dart-io\/systemEncoding-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "systemEncoding",
            "memberOf": "dart:io"
        },
        {
            "type": "",
            "href": "dart-io\/zlib-constant.html",
            "desc": "",
            "example": "",
            "isDeprecated": false,
            "name": "zlib",
            "memberOf": "dart:io"
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}