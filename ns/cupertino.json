{
    "class": [
        {
            "desc": "<p>An iOS-style action sheet.<\/p>\n<p>An action sheet is a specific style of alert that presents the user\nwith a set of two or more choices related to the current context.\nAn action sheet can have a title, an additional message, and a list\nof actions. The title is displayed above the message and the actions\nare displayed below this content.<\/p>\n<p>This action sheet styles its title and message to match standard iOS action\nsheet title and message text style.<\/p>\n<p>To display action buttons that look like standard iOS action sheet buttons,\nprovide <a href=\"cupertino\/CupertinoActionSheetAction-class.html\">CupertinoActionSheetAction<\/a>s for the <a href=\"cupertino\/CupertinoActionSheet\/actions.html\">actions<\/a> given to this action sheet.<\/p>\n<p>To include a iOS-style cancel button separate from the other buttons,\nprovide an <a href=\"cupertino\/CupertinoActionSheetAction-class.html\">CupertinoActionSheetAction<\/a> for the <a href=\"cupertino\/CupertinoActionSheet\/cancelButton.html\">cancelButton<\/a> given to this\naction sheet.<\/p>\n<p>An action sheet is typically passed as the child widget to\n<a href=\"cupertino\/showCupertinoModalPopup.html\">showCupertinoModalPopup<\/a>, which displays the action sheet by sliding it up\nfrom the bottom of the screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoActionSheetAction-class.html\">CupertinoActionSheetAction<\/a>, which is an iOS-style action sheet button.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/design\/human-interface-guidelines\/ios\/views\/action-sheets\/\">developer.apple.com\/design\/human-interface-guidelines\/ios\/views\/action-sheets\/<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoActionSheet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoActionSheet",
            "shortname": "CupertinoActionSheet",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style action sheet.<\/p>\n<p>An action sheet must have a non-null value for at least one of the\nfollowing arguments: <code>actions<\/code>, <code>title<\/code>, <code>message<\/code>, or <code>cancelButton<\/code>.<\/p>\n<p>Generally, action sheets are used to give the user a choice between\ntwo or more choices for the current context.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoActionSheet({\n  Key key,\n  this.title,\n  this.message,\n  this.actions,\n  this.messageScrollController,\n  this.actionScrollController,\n  this.cancelButton,\n}) : assert(actions != null || title != null || message != null || cancelButton != null,\n        'An action sheet must have a non-null value for at least one of the following arguments: '\n        'actions, title, message, or cancelButton'),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoActionSheet\/CupertinoActionSheet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoActionSheet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": [
                        {
                            "name": "actionScrollController",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.ScrollController"
                        },
                        {
                            "name": "actions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<widgets.Widget>"
                        },
                        {
                            "name": "cancelButton",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "messageScrollController",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.ScrollController"
                        },
                        {
                            "name": "title",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoActionSheet\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final List&lt;Widget&gt; children = &lt;Widget&gt;[\n    Flexible(child: ClipRRect(\n      borderRadius: BorderRadius.circular(12.0),\n      child: BackdropFilter(\n        filter: ImageFilter.blur(sigmaX: _kBlurAmount, sigmaY: _kBlurAmount),\n        child: Container(\n          decoration: _kAlertBlurOverlayDecoration,\n          child: _CupertinoAlertRenderWidget(\n            contentSection: _buildContent(),\n            actionsSection: _buildActions(),\n          ),\n        ),\n      ),\n    ),\n    ),\n  ];\n\n  if (cancelButton != null) {\n    children.add(\n      _buildCancelButton(),\n    );\n  }\n\n  final Orientation orientation = MediaQuery.of(context).orientation;\n  double actionSheetWidth;\n  if (orientation == Orientation.portrait) {\n    actionSheetWidth = MediaQuery.of(context).size.width - (_kEdgeHorizontalPadding * 2);\n  } else {\n    actionSheetWidth = MediaQuery.of(context).size.height - (_kEdgeHorizontalPadding * 2);\n  }\n\n  return SafeArea(\n    child: Semantics(\n      namesRoute: true,\n      scopesRoute: true,\n      explicitChildNodes: true,\n      label: 'Alert',\n      child: Container(\n        width: actionSheetWidth,\n        margin: const EdgeInsets.symmetric(\n          horizontal: _kEdgeHorizontalPadding,\n          vertical: _kEdgeVerticalPadding,\n        ),\n        child: Column(\n          children: children,\n          mainAxisSize: MainAxisSize.min,\n          crossAxisAlignment: CrossAxisAlignment.stretch,\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoActionSheet\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>A scroll controller that can be used to control the scrolling of the\n<a href=\"cupertino\/CupertinoActionSheet\/actions.html\">actions<\/a> in the action sheet.<\/p>\n<p>This attribute is typically not needed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController actionScrollController\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheet\/actionScrollController.html",
                    "name": "actionScrollController",
                    "isDeprecated": false,
                    "type": "widgets.ScrollController",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": []
                },
                {
                    "desc": "<p>The set of actions that are displayed for the user to select.<\/p>\n<p>Typically this is a list of <a href=\"cupertino\/CupertinoActionSheetAction-class.html\">CupertinoActionSheetAction<\/a> widgets.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; actions\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheet\/actions.html",
                    "name": "actions",
                    "isDeprecated": false,
                    "type": "dart:core.List<widgets.Widget>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": []
                },
                {
                    "desc": "<p>The optional cancel button that is grouped separately from the other\nactions.<\/p>\n<p>Typically this is an <a href=\"cupertino\/CupertinoActionSheetAction-class.html\">CupertinoActionSheetAction<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget cancelButton\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheet\/cancelButton.html",
                    "name": "cancelButton",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": []
                },
                {
                    "desc": "<p>An optional descriptive message that provides more details about the\nreason for the alert.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget message\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheet\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": []
                },
                {
                    "desc": "<p>A scroll controller that can be used to control the scrolling of the\n<a href=\"cupertino\/CupertinoActionSheet\/message.html\">message<\/a> in the action sheet.<\/p>\n<p>This attribute is typically not needed, as alert messages should be\nshort.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController messageScrollController\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheet\/messageScrollController.html",
                    "name": "messageScrollController",
                    "isDeprecated": false,
                    "type": "widgets.ScrollController",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": []
                },
                {
                    "desc": "<p>An optional title of the action sheet. When the <a href=\"cupertino\/CupertinoActionSheet\/message.html\">message<\/a> is non-null,\nthe font of the <a href=\"cupertino\/CupertinoActionSheet\/title.html\">title<\/a> is bold.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheet\/title.html",
                    "name": "title",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheet",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A button typically used in a <a href=\"cupertino\/CupertinoActionSheet-class.html\">CupertinoActionSheet<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoActionSheet-class.html\">CupertinoActionSheet<\/a>, an alert that presents the user with a set of two or\nmore choices related to the current context.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoActionSheetAction-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoActionSheetAction",
            "shortname": "CupertinoActionSheetAction",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The callback that is called when the button is tapped.<\/p>\n<p>This attribute must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheetAction\/onPressed.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onPressed",
                    "memberOf": "cupertino.CupertinoActionSheetAction",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an action for an iOS-style action sheet.<\/p>\n<p>The <code>child<\/code> and <code>onPressed<\/code> arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoActionSheetAction({\n  @required this.onPressed,\n  this.isDefaultAction = false,\n  this.isDestructiveAction = false,\n  @required this.child,\n}) : assert(child != null),\n     assert(onPressed != null);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoActionSheetAction\/CupertinoActionSheetAction.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoActionSheetAction",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoActionSheetAction",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "isDefaultAction",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "isDestructiveAction",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "onPressed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoActionSheetAction\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  TextStyle style = _kActionSheetActionStyle;\n\n  if (isDefaultAction) {\n    style = style.copyWith(fontWeight: FontWeight.w600);\n  }\n\n  if (isDestructiveAction) {\n    style = style.copyWith(color: CupertinoColors.destructiveRed);\n  }\n\n  return GestureDetector(\n    onTap: onPressed,\n    behavior: HitTestBehavior.opaque,\n    child: ConstrainedBox(\n      constraints: const BoxConstraints(\n        minHeight: _kButtonHeight,\n      ),\n      child: Semantics(\n        button: true,\n        child: Container(\n          alignment: Alignment.center,\n          padding: const EdgeInsets.symmetric(\n            vertical: 16.0,\n            horizontal: 10.0,\n          ),\n          child: DefaultTextStyle(\n            style: style,\n            child: child,\n            textAlign: TextAlign.center,\n          ),\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoActionSheetAction\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoActionSheetAction",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheetAction\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheetAction",
                    "params": []
                },
                {
                    "desc": "<p>Whether this action is the default choice in the action sheet.<\/p>\n<p>Default buttons have bold text.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDefaultAction\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheetAction\/isDefaultAction.html",
                    "name": "isDefaultAction",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheetAction",
                    "params": []
                },
                {
                    "desc": "<p>Whether this action might change or delete data.<\/p>\n<p>Destructive buttons have red text.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDestructiveAction\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActionSheetAction\/isDestructiveAction.html",
                    "name": "isDestructiveAction",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActionSheetAction",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style activity indicator.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/controls\/progress-indicators\/#activity-indicators\">developer.apple.com\/ios\/human-interface-guidelines\/controls\/progress-indicators\/#activity-indicators<\/a><\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoActivityIndicator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoActivityIndicator",
            "shortname": "CupertinoActivityIndicator",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style activity indicator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoActivityIndicator({\n  Key key,\n  this.animating = true,\n  this.radius = _kDefaultIndicatorRadius,\n}) : assert(animating != null),\n     assert(radius != null),\n     assert(radius &gt; 0),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoActivityIndicator\/CupertinoActivityIndicator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoActivityIndicator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoActivityIndicator",
                    "params": [
                        {
                            "name": "animating",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "radius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoActivityIndicator\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoActivityIndicatorState createState() =&gt; _CupertinoActivityIndicatorState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoActivityIndicator\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoActivityIndicatorState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoActivityIndicator",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether the activity indicator is running its animation.<\/p>\n<p>Defaults to true.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool animating\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActivityIndicator\/animating.html",
                    "name": "animating",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActivityIndicator",
                    "params": []
                },
                {
                    "desc": "<p>Radius of the spinner widget.<\/p>\n<p>Defaults to 10px. Must be positive and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radius\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoActivityIndicator\/radius.html",
                    "name": "radius",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoActivityIndicator",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style alert dialog.<\/p>\n<p>An alert dialog informs the user about situations that require\nacknowledgement. An alert dialog has an optional title, optional content,\nand an optional list of actions. The title is displayed above the content\nand the actions are displayed below the content.<\/p>\n<p>This dialog styles its title and content (typically a message) to match the\nstandard iOS title and message dialog text style. These default styles can\nbe overridden by explicitly defining <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s for <a href=\"widgets\/Text-class.html\">Text<\/a> widgets that\nare part of the title or content.<\/p>\n<p>To display action buttons that look like standard iOS dialog buttons,\nprovide <a href=\"cupertino\/CupertinoDialogAction-class.html\">CupertinoDialogAction<\/a>s for the <a href=\"cupertino\/CupertinoAlertDialog\/actions.html\">actions<\/a> given to this dialog.<\/p>\n<p>Typically passed as the child widget to <a href=\"material\/showDialog.html\">showDialog<\/a>, which displays the\ndialog.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoPopupSurface-class.html\">CupertinoPopupSurface<\/a>, which is a generic iOS-style popup surface that\nholds arbitrary content to create custom popups.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoDialogAction-class.html\">CupertinoDialogAction<\/a>, which is an iOS-style dialog button.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/\">developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoAlertDialog-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoAlertDialog",
            "shortname": "CupertinoAlertDialog",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style alert dialog.<\/p>\n<p>The <code>actions<\/code> must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoAlertDialog({\n  Key key,\n  this.title,\n  this.content,\n  this.actions = const &lt;Widget&gt;[],\n  this.scrollController,\n  this.actionScrollController,\n}) : assert(actions != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoAlertDialog\/CupertinoAlertDialog.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoAlertDialog",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": [
                        {
                            "name": "actionScrollController",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.ScrollController"
                        },
                        {
                            "name": "actions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<widgets.Widget>"
                        },
                        {
                            "name": "content",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "scrollController",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.ScrollController"
                        },
                        {
                            "name": "title",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoAlertDialog\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final CupertinoLocalizations localizations = CupertinoLocalizations.of(context);\n  final bool isInAccessibilityMode = _isInAccessibilityMode(context);\n  final double textScaleFactor = MediaQuery.of(context).textScaleFactor;\n  return MediaQuery(\n    data: MediaQuery.of(context).copyWith(\n      \/\/ iOS does not shrink dialog content below a 1.0 scale factor\n      textScaleFactor: math.max(textScaleFactor, 1.0),\n    ),\n    child: LayoutBuilder(\n      builder: (BuildContext context, BoxConstraints constraints) {\n        return Center(\n          child: Container(\n            margin: const EdgeInsets.symmetric(vertical: _kEdgePadding),\n            width: isInAccessibilityMode\n                ? _kAccessibilityCupertinoDialogWidth\n                : _kCupertinoDialogWidth,\n            child: CupertinoPopupSurface(\n              isSurfacePainted: false,\n              child: Semantics(\n                namesRoute: true,\n                scopesRoute: true,\n                explicitChildNodes: true,\n                label: localizations.alertDialogLabel,\n                child: _CupertinoDialogRenderWidget(\n                  contentSection: _buildContent(),\n                  actionsSection: _buildActions(),\n                ),\n              ),\n            ),\n          ),\n        );\n      },\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoAlertDialog\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>A scroll controller that can be used to control the scrolling of the\nactions in the dialog.<\/p>\n<p>Defaults to null, and is typically not needed.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoAlertDialog\/scrollController.html\">scrollController<\/a>, which can be used for controlling the <a href=\"cupertino\/CupertinoAlertDialog\/content.html\">content<\/a>\nsection when it is long.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController actionScrollController\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoAlertDialog\/actionScrollController.html",
                    "name": "actionScrollController",
                    "isDeprecated": false,
                    "type": "widgets.ScrollController",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": []
                },
                {
                    "desc": "<p>The (optional) set of actions that are displayed at the bottom of the\ndialog.<\/p>\n<p>Typically this is a list of <a href=\"cupertino\/CupertinoDialogAction-class.html\">CupertinoDialogAction<\/a> widgets.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Widget&gt; actions\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoAlertDialog\/actions.html",
                    "name": "actions",
                    "isDeprecated": false,
                    "type": "dart:core.List<widgets.Widget>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": []
                },
                {
                    "desc": "<p>The (optional) content of the dialog is displayed in the center of the\ndialog in a lighter font.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget content\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoAlertDialog\/content.html",
                    "name": "content",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": []
                },
                {
                    "desc": "<p>A scroll controller that can be used to control the scrolling of the\n<a href=\"cupertino\/CupertinoAlertDialog\/content.html\">content<\/a> in the dialog.<\/p>\n<p>Defaults to null, and is typically not needed, since most alert messages\nare short.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoAlertDialog\/actionScrollController.html\">actionScrollController<\/a>, which can be used for controlling the actions\nsection when there are many actions.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ScrollController scrollController\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoAlertDialog\/scrollController.html",
                    "name": "scrollController",
                    "isDeprecated": false,
                    "type": "widgets.ScrollController",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": []
                },
                {
                    "desc": "<p>The (optional) title of the dialog is displayed in a large font at the top\nof the dialog.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget title\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoAlertDialog\/title.html",
                    "name": "title",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoAlertDialog",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An application that uses Cupertino design.<\/p>\n<p>A convenience widget that wraps a number of widgets that are commonly\nrequired for an iOS-design targeting application. It builds upon a\n<a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> by iOS specific defaulting such as fonts and scrolling\nphysics.<\/p>\n<p>The <a href=\"cupertino\/CupertinoApp-class.html\">CupertinoApp<\/a> configures the top-level <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> to search for routes\nin the following order:<\/p>\n<ol>\n<li>\n<p>For the <code>\/<\/code> route, the <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> property, if non-null, is used.<\/p>\n<\/li>\n<li>\n<p>Otherwise, the <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a> table is used, if it has an entry for the route.<\/p>\n<\/li>\n<li>\n<p>Otherwise, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a> is called, if provided. It should return a\nnon-null value for any <em>valid<\/em> route not handled by <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> and <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>.<\/p>\n<\/li>\n<li>\n<p>Finally if all else fails <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a> is called.<\/p>\n<\/li>\n<\/ol>\n<p>If <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>, <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, and <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a> are all null,\nand <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> is not null, then no <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is created.<\/p>\n<p>This widget also configures the observer of the top-level <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> (if\nany) to perform <a href=\"widgets\/Hero-class.html\">Hero<\/a> animations.<\/p>\n<p>Use this widget with caution on Android since it may produce behaviors\nAndroid users are not expecting such as:<\/p>\n<ul>\n<li>Pages will be dismissible via a back swipe.<\/li>\n<li>Scrolling past extremities will trigger iOS-style spring overscrolls.<\/li>\n<li>The San Francisco font family is unavailable on Android and can result\nin undefined font behavior.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>, which provides a standard page layout default\nwith nav bars.<\/li>\n<li>\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>, which is used to manage the app's stack of pages.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>, which defines an app page that transitions in an\niOS-specific way.<\/li>\n<li>\n<a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>, which defines the basic app elements but does not depend\non the Cupertino library.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoApp-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoApp",
            "shortname": "CupertinoApp",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>A builder for inserting widgets above the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> but below the other\nwidgets created by the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> widget, or for replacing the\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> entirely.<\/p>\n<p>For example, from the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> passed to this method, the\n<a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, <a href=\"widgets\/Localizations-class.html\">Localizations<\/a>, <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a>, etc,\nare all available. They can also be overridden in a way that impacts all\nthe routes in the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>This is rarely useful, but can be used in applications that wish to\noverride those defaults, e.g. to force the application into right-to-left\nmode despite being in English, or to override the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> metrics\n(e.g. to leave a gap for advertisements shown by a plugin from OEM code).<\/p>\n<p>For specifically overriding the <a href=\"cupertino\/CupertinoApp\/title.html\">title<\/a> with a value based on the\n<a href=\"widgets\/Localizations-class.html\">Localizations<\/a>, consider <a href=\"cupertino\/CupertinoApp\/onGenerateTitle.html\">onGenerateTitle<\/a> instead.<\/p>\n<p>The <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> callback is passed two arguments, the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> (as\n<code>context<\/code>) and a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> widget (as <code>child<\/code>).<\/p>\n<p>If no routes are provided using <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>, <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or\n<a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>, the <code>child<\/code> will be null, and it is the responsibility\nof the <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> to provide the application's routing machinery.<\/p>\n<p>If routes <em>are<\/em> provided using one or more of those properties, then\n<code>child<\/code> is not null, and the returned value should include the <code>child<\/code> in\nthe widget subtree; if it does not, then the application will have no\nnavigator and the <a href=\"cupertino\/CupertinoApp\/navigatorKey.html\">navigatorKey<\/a>, <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>, <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>,\n<a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>, <a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a>, and <a href=\"cupertino\/CupertinoApp\/navigatorObservers.html\">navigatorObservers<\/a> properties will\nhave no effect.<\/p>\n<p>If <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> is null, it is as if a builder was specified that returned\nthe <code>child<\/code> directly. If it is null, routes must be provided using one of\nthe other properties listed above.<\/p>\n<p>Unless a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is provided, either implicitly from <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> being\nnull, or by a <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> including its <code>child<\/code> argument, or by a <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a>\nexplicitly providing a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> of its own, widgets and APIs such as\n<a href=\"widgets\/Hero-class.html\">Hero<\/a>, <a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a> and <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>, will not function.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TransitionBuilder builder\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/builder.html",
                    "isDeprecated": false,
                    "type": "widgets.TransitionBuilder",
                    "name": "builder",
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>This callback is responsible for choosing the app's locale\nwhen the app is started, and when the user changes the\ndevice's locale.<\/p>\n<p>When a <a href=\"cupertino\/CupertinoApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> is provided, Flutter will first attempt to\nresolve the locale with the provided <a href=\"cupertino\/CupertinoApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a>. If the\ncallback or result is null, it will fallback to trying the <a href=\"cupertino\/CupertinoApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a>.\nIf both <a href=\"cupertino\/CupertinoApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> and <a href=\"cupertino\/CupertinoApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> are left null\nor fail to resolve (return null), the <code>WidgetsApp.basicLocaleListResolution<\/code>\nfallback algorithm will be used.<\/p>\n<p>The priority of each available fallback is:<\/p>\n<ol>\n<li>\n<a href=\"cupertino\/CupertinoApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a> is attempted first.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoApp\/localeResolutionCallback.html\">localeResolutionCallback<\/a> is attempted second.<\/li>\n<li>Flutter's <code>WidgetsApp.basicLocaleListResolution<\/code> algorithm is attempted last.<\/li>\n<\/ol>\n<p>Properly localized projects should provide a more advanced algorithm than\n<code>basicLocaleListResolution<\/code> as it does not implement a complete algorithm\n(such as the one defined in <a href=\"https:\/\/unicode.org\/reports\/tr35\/#LanguageMatching\">Unicode TR35<\/a>)\nand is optimized for speed at the detriment of some uncommon edge-cases.<\/p>\n<p>This callback is passed along to the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> built by this widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final LocaleListResolutionCallback localeListResolutionCallback\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/localeListResolutionCallback.html",
                    "isDeprecated": false,
                    "type": "widgets.LocaleListResolutionCallback",
                    "name": "localeListResolutionCallback",
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>null<\/p>\n<p>This callback is passed along to the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> built by this widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final LocaleResolutionCallback localeResolutionCallback\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/localeResolutionCallback.html",
                    "isDeprecated": false,
                    "type": "widgets.LocaleResolutionCallback",
                    "name": "localeResolutionCallback",
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The route generator callback used when the app is navigated to a\nnamed route.<\/p>\n<p>If this returns null when building the routes to handle the specified\n<a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a>, then all the routes are discarded and\n<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> is used instead (<code>\/<\/code>). See <a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a>.<\/p>\n<p>During normal app operation, the <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a> callback will only be\napplied to route names pushed by the application, and so should never\nreturn null.<\/p>\n<p>This is used if <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a> does not contain the requested route.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>,\n<a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteFactory onGenerateRoute\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/onGenerateRoute.html",
                    "isDeprecated": false,
                    "type": "widgets.RouteFactory",
                    "name": "onGenerateRoute",
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>If non-null this callback function is called to produce the app's\ntitle string, otherwise <a href=\"cupertino\/CupertinoApp\/title.html\">title<\/a> is used.<\/p>\n<p>The <a href=\"cupertino\/CupertinoApp\/onGenerateTitle.html\">onGenerateTitle<\/a> <code>context<\/code> parameter includes the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>'s\n<a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget so that this callback can be used to produce a\nlocalized title.<\/p>\n<p>This callback function must not return null.<\/p>\n<p>The <a href=\"cupertino\/CupertinoApp\/onGenerateTitle.html\">onGenerateTitle<\/a> callback is called each time the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>\nrebuilds.<\/p>\n<p>This value is passed unmodified to <a href=\"cupertino\/CupertinoApp\/onGenerateTitle.html\">WidgetsApp.onGenerateTitle<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GenerateAppTitle onGenerateTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/onGenerateTitle.html",
                    "isDeprecated": false,
                    "type": "widgets.GenerateAppTitle",
                    "name": "onGenerateTitle",
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>Called when <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a> fails to generate a route, except for the\n<a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a>.<\/p>\n<p>This callback is typically used for error handling. For example, this\ncallback might always generate a \"not found\" page that describes the route\nthat wasn't found.<\/p>\n<p>Unknown routes can arise either from errors in the app or from external\nrequests to push routes, such as from Android intents.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>,\n<a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteFactory onUnknownRoute\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/onUnknownRoute.html",
                    "isDeprecated": false,
                    "type": "widgets.RouteFactory",
                    "name": "onUnknownRoute",
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a CupertinoApp.<\/p>\n<p>At least one of <code>home<\/code>, <code>routes<\/code>, <code>onGenerateRoute<\/code>, or <code>builder<\/code> must be\nnon-null. If only <code>routes<\/code> is given, it must include an entry for the\n<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> (<code>\/<\/code>), since that is the route used when the\napplication is launched with an intent that specifies an otherwise\nunsupported route.<\/p>\n<p>This class creates an instance of <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a>.<\/p>\n<p>The boolean arguments, <code>routes<\/code>, and <code>navigatorObservers<\/code>, must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoApp({\n  Key key,\n  this.navigatorKey,\n  this.home,\n  this.theme,\n  this.routes = const &lt;String, WidgetBuilder&gt;{},\n  this.initialRoute,\n  this.onGenerateRoute,\n  this.onUnknownRoute,\n  this.navigatorObservers = const &lt;NavigatorObserver&gt;[],\n  this.builder,\n  this.title = '',\n  this.onGenerateTitle,\n  this.color,\n  this.locale,\n  this.localizationsDelegates,\n  this.localeListResolutionCallback,\n  this.localeResolutionCallback,\n  this.supportedLocales = const &lt;Locale&gt;[Locale('en', 'US')],\n  this.showPerformanceOverlay = false,\n  this.checkerboardRasterCacheImages = false,\n  this.checkerboardOffscreenLayers = false,\n  this.showSemanticsDebugger = false,\n  this.debugShowCheckedModeBanner = true,\n}) : assert(routes != null),\n     assert(navigatorObservers != null),\n     assert(title != null),\n     assert(showPerformanceOverlay != null),\n     assert(checkerboardRasterCacheImages != null),\n     assert(checkerboardOffscreenLayers != null),\n     assert(showSemanticsDebugger != null),\n     assert(debugShowCheckedModeBanner != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoApp\/CupertinoApp.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoApp",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": [
                        {
                            "name": "builder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.TransitionBuilder"
                        },
                        {
                            "name": "checkerboardOffscreenLayers",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "checkerboardRasterCacheImages",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "debugShowCheckedModeBanner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "home",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "initialRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "locale",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Locale"
                        },
                        {
                            "name": "localeListResolutionCallback",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.LocaleListResolutionCallback"
                        },
                        {
                            "name": "localeResolutionCallback",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.LocaleResolutionCallback"
                        },
                        {
                            "name": "localizationsDelegates",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<widgets.LocalizationsDelegate>"
                        },
                        {
                            "name": "navigatorKey",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.GlobalKey<widgets.NavigatorState>"
                        },
                        {
                            "name": "navigatorObservers",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<widgets.NavigatorObserver>"
                        },
                        {
                            "name": "onGenerateRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.RouteFactory"
                        },
                        {
                            "name": "onGenerateTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.GenerateAppTitle"
                        },
                        {
                            "name": "onUnknownRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.RouteFactory"
                        },
                        {
                            "name": "routes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<dart:core.String<widgets.WidgetBuilder>>"
                        },
                        {
                            "name": "showPerformanceOverlay",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "showSemanticsDebugger",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "supportedLocales",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<dart:ui.Locale>"
                        },
                        {
                            "name": "theme",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.CupertinoThemeData"
                        },
                        {
                            "name": "title",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>The <a href=\"widgets\/HeroController-class.html\">HeroController<\/a> used for Cupertino page transitions.<\/p>\n<p>Used by <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a> and <a href=\"cupertino\/CupertinoApp-class.html\">CupertinoApp<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static HeroController createCupertinoHeroController() =&gt;\n    HeroController();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoApp\/createCupertinoHeroController.html",
                    "isDeprecated": false,
                    "type": "widgets.HeroController",
                    "name": "createCupertinoHeroController",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoApp\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoAppState createState() =&gt; _CupertinoAppState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoApp\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoAppState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Turns on checkerboarding of layers rendered to offscreen bitmaps.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardOffscreenLayers\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/checkerboardOffscreenLayers.html",
                    "name": "checkerboardOffscreenLayers",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>Turns on checkerboarding of raster cache images.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checkerboardRasterCacheImages\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/checkerboardRasterCacheImages.html",
                    "name": "checkerboardRasterCacheImages",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The primary color to use for the application in the operating system\ninterface.<\/p>\n<p>For example, on Android this is the color used for the application in the\napplication switcher.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/color.html",
                    "name": "color",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>Turns on a little \"DEBUG\" banner in checked mode to indicate\nthat the app is in checked mode. This is on by default (in\nchecked mode), to turn it off, set the constructor argument to\nfalse. In release mode this has no effect.<\/p>\n<p>To get this banner in your application if you're not using\nWidgetsApp, include a <a href=\"widgets\/CheckedModeBanner-class.html\">CheckedModeBanner<\/a> widget in your app.<\/p>\n<p>This banner is intended to deter people from complaining that your\napp is slow when it's in checked mode. In checked mode, Flutter\nenables a large number of expensive diagnostics to aid in\ndevelopment, and so performance in checked mode is not\nrepresentative of what will happen in release mode.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool debugShowCheckedModeBanner\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/debugShowCheckedModeBanner.html",
                    "name": "debugShowCheckedModeBanner",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The widget for the default route of the app (<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a>,\nwhich is <code>\/<\/code>).<\/p>\n<p>This is the route that is displayed first when the application is started\nnormally, unless <a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a> is specified. It's also the route that's\ndisplayed if the <a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a> can't be displayed.<\/p>\n<p>To be able to directly call <a href=\"material\/Theme\/of.html\">Theme.of<\/a>, <a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a>, etc, in the code\nthat sets the <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> argument in the constructor, you can use a <a href=\"widgets\/Builder-class.html\">Builder<\/a>\nwidget to get a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>If <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> is specified, then <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a> must not include an entry for <code>\/<\/code>,\nas <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> takes its place.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>,\n<a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> must not be null.<\/p>\n<p>The difference between using <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> and using <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> is that the <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>\nsubtree is inserted into the application below a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> (and thus\nbelow an <a href=\"widgets\/Overlay-class.html\">Overlay<\/a>, which <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> uses). With <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>, therefore,\ndialog boxes will work automatically, the <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a> table will be used, and\nAPIs such as <a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a> and <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a> will work as expected.\nIn contrast, the widget returned from <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> is inserted <em>above<\/em> the\napp's <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> (if any).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget home\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/home.html",
                    "name": "home",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The name of the first route to show, if a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is built.<\/p>\n<p>Defaults to <a href=\"dart-ui\/Window\/defaultRouteName.html\">Window.defaultRouteName<\/a>, which may be overridden by the code\nthat launched the application.<\/p>\n<p>If the route contains slashes, then it is treated as a \"deep link\", and\nbefore this route is pushed, the routes leading to this one are pushed\nalso. For example, if the route was <code>\/a\/b\/c<\/code>, then the app would start\nwith the three routes <code>\/a<\/code>, <code>\/a\/b<\/code>, and <code>\/a\/b\/c<\/code> loaded, in that order.<\/p>\n<p>If any part of this process fails to generate routes, then the\n<a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a> is ignored and <a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> is used instead\n(<code>\/<\/code>). This can happen if the app is started with an intent that specifies\na non-existent route.\nThe <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>,\n<a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"cupertino\/CupertinoApp\/initialRoute.html\">initialRoute<\/a> must be null and <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> must not be null.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoApp\/initialRoute.html\">Navigator.initialRoute<\/a>, which is used to implement this property.<\/li>\n<li>\n<a href=\"widgets\/Navigator\/push.html\">Navigator.push<\/a>, for pushing additional routes.<\/li>\n<li>\n<a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a>, for removing a route from the stack.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String initialRoute\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/initialRoute.html",
                    "name": "initialRoute",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The initial locale for this app's <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget is based\non this value.<\/p>\n<p>If the 'locale' is null then the system's locale value is used.<\/p>\n<p>The value of <a href=\"cupertino\/CupertinoApp\/locale.html\">Localizations.locale<\/a> will equal this locale if\nit matches one of the <a href=\"cupertino\/CupertinoApp\/supportedLocales.html\">supportedLocales<\/a>. Otherwise it will be\nthe first <code>supportedLocale<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/locale.html",
                    "name": "locale",
                    "isDeprecated": false,
                    "type": "dart:ui.Locale",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The delegates for this app's <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget.<\/p>\n<p>The delegates collectively define all of the localized resources\nfor this application's <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Iterable&lt;LocalizationsDelegate&lt;dynamic&gt;&gt; localizationsDelegates\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/localizationsDelegates.html",
                    "name": "localizationsDelegates",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<widgets.LocalizationsDelegate>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>A key to use when building the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>If a <a href=\"cupertino\/CupertinoApp\/navigatorKey.html\">navigatorKey<\/a> is specified, the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> can be directly\nmanipulated without first obtaining it from a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> via\n<a href=\"widgets\/Navigator\/of.html\">Navigator.of<\/a>: from the <a href=\"cupertino\/CupertinoApp\/navigatorKey.html\">navigatorKey<\/a>, use the <a href=\"widgets\/GlobalKey\/currentState.html\">GlobalKey.currentState<\/a>\ngetter.<\/p>\n<p>If this is changed, a new <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> will be created, losing all the\napplication state in the process; in that case, the <a href=\"cupertino\/CupertinoApp\/navigatorObservers.html\">navigatorObservers<\/a>\nmust also be changed, since the previous observers will be attached to the\nprevious navigator.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a> is not null; if it is\nnull, <a href=\"cupertino\/CupertinoApp\/navigatorKey.html\">navigatorKey<\/a> must also be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GlobalKey&lt;NavigatorState&gt; navigatorKey\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/navigatorKey.html",
                    "name": "navigatorKey",
                    "isDeprecated": false,
                    "type": "widgets.GlobalKey<widgets.NavigatorState>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The list of observers for the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> created for this app.<\/p>\n<p>This list must be replaced by a list of newly-created observers if the\n<a href=\"cupertino\/CupertinoApp\/navigatorKey.html\">navigatorKey<\/a> is changed.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>,\n<a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"cupertino\/CupertinoApp\/navigatorObservers.html\">navigatorObservers<\/a> must be the empty list and <a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;NavigatorObserver&gt; navigatorObservers\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/navigatorObservers.html",
                    "name": "navigatorObservers",
                    "isDeprecated": false,
                    "type": "dart:core.List<widgets.NavigatorObserver>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The application's top-level routing table.<\/p>\n<p>When a named route is pushed with <a href=\"widgets\/Navigator\/pushNamed.html\">Navigator.pushNamed<\/a>, the route name is\nlooked up in this map. If the name is present, the associated\n<a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a> is used to construct a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> that performs\nan appropriate transition, including <a href=\"widgets\/Hero-class.html\">Hero<\/a> animations, to the new route.<\/p>\n<p>If the app only has one page, then you can specify it using <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> instead.<\/p>\n<p>If <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a> is specified, then it implies an entry in this table for the\n<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> route (<code>\/<\/code>), and it is an error to\nredundantly provide such a route in the <a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a> table.<\/p>\n<p>If a route is requested that is not specified in this table (or by\n<a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>), then the <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a> callback is called to build the page\ninstead.<\/p>\n<p>The <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> is only built if routes are provided (either via <a href=\"cupertino\/CupertinoApp\/home.html\">home<\/a>,\n<a href=\"cupertino\/CupertinoApp\/routes.html\">routes<\/a>, <a href=\"cupertino\/CupertinoApp\/onGenerateRoute.html\">onGenerateRoute<\/a>, or <a href=\"cupertino\/CupertinoApp\/onUnknownRoute.html\">onUnknownRoute<\/a>); if they are not,\n<a href=\"cupertino\/CupertinoApp\/builder.html\">builder<\/a> must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;String, WidgetBuilder&gt; routes\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/routes.html",
                    "name": "routes",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<widgets.WidgetBuilder>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>Turns on a performance overlay.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/flutter.io\/debugging\/#performanceoverlay\">flutter.io\/debugging\/#performanceoverlay<\/a><\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showPerformanceOverlay\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/showPerformanceOverlay.html",
                    "name": "showPerformanceOverlay",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>Turns on an overlay that shows the accessibility information\nreported by the framework.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool showSemanticsDebugger\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/showSemanticsDebugger.html",
                    "name": "showSemanticsDebugger",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The list of locales that this app has been localized for.<\/p>\n<p>By default only the American English locale is supported. Apps should\nconfigure this list to match the locales they support.<\/p>\n<p>This list must not null. Its default value is just\n<code>[const Locale('en', 'US')]<\/code>.<\/p>\n<p>The order of the list matters. The default locale resolution algorithm,\n<code>basicLocaleListResolution<\/code>, attempts to match by the following priority:<\/p>\n<ol>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a>, <a href=\"dart-ui\/Locale\/scriptCode.html\">Locale.scriptCode<\/a>, and <a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a>\n<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a> and <a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> only<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a> and <a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> only<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/languageCode.html\">Locale.languageCode<\/a> only<\/li>\n<li>\n<a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> only when all <code>preferredLocales<\/code> fail to match<\/li>\n<li>returns <code>supportedLocales.first<\/code> as a fallback<\/li>\n<\/ol>\n<p>When more than one supported locale matches one of these criteria, only the first\nmatching locale is returned. See <code>basicLocaleListResolution<\/code> for a complete\ndescription of the algorithm.<\/p>\n<p>The default locale resolution algorithm can be overridden by providing a value for\n<a href=\"cupertino\/CupertinoApp\/localeListResolutionCallback.html\">localeListResolutionCallback<\/a>. The provided <code>basicLocaleListResolution<\/code> is optimized\nfor speed and does not implement a full algorithm (such as the one defined in\n<a href=\"https:\/\/unicode.org\/reports\/tr35\/#LanguageMatching\">Unicode TR35<\/a>) that takes\ndistances between languages into account.<\/p>\n<p>When supporting languages with more than one script, it is recommended\nto specify the <a href=\"dart-ui\/Locale\/scriptCode.html\">Locale.scriptCode<\/a> explicitly. Locales may also be defined without\n<a href=\"dart-ui\/Locale\/countryCode.html\">Locale.countryCode<\/a> to specify a generic fallback for a particular script.<\/p>\n<p>A fully supported language with multiple scripts should define a generic language-only\nlocale (e.g. 'zh'), language+script only locales (e.g. 'zh_Hans' and 'zh_Hant'),\nand any language+script+country locales (e.g. 'zh_Hans_CN'). Fully defining all of\nthese locales as supported is not strictly required but allows for proper locale resolution in\nthe most number of cases. These locales can be specified with the <a href=\"dart-ui\/Locale\/Locale.fromSubtags.html\">Locale.fromSubtags<\/a>\nconstructor:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Full Chinese support for CN, TW, and HK\nsupportedLocales: [\n  const Locale.fromSubtags(languageCode: 'zh'), \/\/ generic Chinese 'zh'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hans'), \/\/ generic simplified Chinese 'zh_Hans'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant'), \/\/ generic traditional Chinese 'zh_Hant'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hans', countryCode: 'CN'), \/\/ 'zh_Hans_CN'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant', countryCode: 'TW'), \/\/ 'zh_Hant_TW'\n  const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant', countryCode: 'HK'), \/\/ 'zh_Hant_HK'\n],\n<\/code><\/pre>\n<p>Omitting some these fallbacks may result in improperly resolved\nedge-cases, for example, a simplified Chinese user in Taiwan ('zh_Hans_TW')\nmay resolve to traditional Chinese if 'zh_Hans' and 'zh_Hans_CN' are\nomitted.<\/p>\n<p>It is passed along unmodified to the <a href=\"widgets\/WidgetsApp-class.html\">WidgetsApp<\/a> built by this widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Iterable&lt;Locale&gt; supportedLocales\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/supportedLocales.html",
                    "name": "supportedLocales",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:ui.Locale>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>The top-level <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> styling.<\/p>\n<p>A null <a href=\"cupertino\/CupertinoApp\/theme.html\">theme<\/a> or unspecified <a href=\"cupertino\/CupertinoApp\/theme.html\">theme<\/a> attributes will default to iOS\nsystem values.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoThemeData theme\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/theme.html",
                    "name": "theme",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoThemeData",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                },
                {
                    "desc": "<p>A one-line description used by the device to identify the app for the user.<\/p>\n<p>On Android the titles appear above the task manager's app snapshots which are\ndisplayed when the user presses the \"recent apps\" button. On iOS this\nvalue cannot be used. <code>CFBundleDisplayName<\/code> from the app's <code>Info.plist<\/code> is\nreferred to instead whenever present, <code>CFBundleName<\/code> otherwise.<\/p>\n<p>To provide a localized title instead, use <a href=\"cupertino\/CupertinoApp\/onGenerateTitle.html\">onGenerateTitle<\/a>.<\/p>\n<p>This value is passed unmodified to <a href=\"cupertino\/CupertinoApp\/title.html\">WidgetsApp.title<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String title\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoApp\/title.html",
                    "name": "title",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoApp",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style button.<\/p>\n<p>Takes in a text or an icon that fades out and in on touch. May optionally have a\nbackground.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/controls\/buttons\/\">developer.apple.com\/ios\/human-interface-guidelines\/controls\/buttons\/<\/a><\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoButton-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoButton",
            "shortname": "CupertinoButton",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The callback that is called when the button is tapped or otherwise activated.<\/p>\n<p>If this is set to null, the button will be disabled.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/onPressed.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onPressed",
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style button.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoButton({\n  Key key,\n  @required this.child,\n  this.padding,\n  this.color,\n  this.disabledColor,\n  this.minSize = 44.0,\n  this.pressedOpacity = 0.1,\n  this.borderRadius = const BorderRadius.all(Radius.circular(8.0)),\n  @required this.onPressed,\n}) : assert(pressedOpacity == null || (pressedOpacity &gt;= 0.0 &amp;&amp; pressedOpacity &lt;= 1.0)),\n     _filled = false,\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoButton\/CupertinoButton.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoButton",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": [
                        {
                            "name": "borderRadius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.BorderRadius"
                        },
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "disabledColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "minSize",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "onPressed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "padding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.EdgeInsetsGeometry"
                        },
                        {
                            "name": "pressedOpacity",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoButton\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoButtonState createState() =&gt; _CupertinoButtonState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoButton\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoButtonState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoButton\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('enabled', value: enabled, ifFalse: 'disabled'));\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoButton\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The radius of the button's corners when it has a background color.<\/p>\n<p>Defaults to round corners of 8 logical pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadius borderRadius\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/borderRadius.html",
                    "name": "borderRadius",
                    "isDeprecated": false,
                    "type": "painting.BorderRadius",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>The color of the button's background.<\/p>\n<p>Defaults to null which produces a button with no background or border.<\/p>\n<p>Defaults to the <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>primaryColor<\/code> when the\n<a href=\"cupertino\/CupertinoButton\/CupertinoButton.filled.html\">CupertinoButton.filled<\/a> constructor is used.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/color.html",
                    "name": "color",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>The color of the button's background when the button is disabled.<\/p>\n<p>Ignored if the <a href=\"cupertino\/CupertinoButton-class.html\">CupertinoButton<\/a> doesn't also have a <a href=\"cupertino\/CupertinoButton\/color.html\">color<\/a>.<\/p>\n<p>Defaults to a standard iOS disabled color when <a href=\"cupertino\/CupertinoButton\/color.html\">color<\/a> is specified and\n<a href=\"cupertino\/CupertinoButton\/disabledColor.html\">disabledColor<\/a> is null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color disabledColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/disabledColor.html",
                    "name": "disabledColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>Whether the button is enabled or disabled. Buttons are disabled by default. To\nenable a button, set its <a href=\"cupertino\/CupertinoButton\/onPressed.html\">onPressed<\/a> property to a non-null value.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get enabled =&gt; onPressed != null;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/enabled.html",
                    "name": "enabled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>Minimum size of the button.<\/p>\n<p>Defaults to 44.0 which the iOS Human Interface Guideline recommends as the\nminimum tappable area<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/visual-design\/adaptivity-and-layout\/\">developer.apple.com\/ios\/human-interface-guidelines\/visual-design\/adaptivity-and-layout\/<\/a><\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double minSize\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/minSize.html",
                    "name": "minSize",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>The amount of space to surround the child inside the bounds of the button.<\/p>\n<p>Defaults to 16.0 pixels.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/padding.html",
                    "name": "padding",
                    "isDeprecated": false,
                    "type": "painting.EdgeInsetsGeometry",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                },
                {
                    "desc": "<p>The opacity that the button will fade to when it is pressed.\nThe button will have an opacity of 1.0 when it is not pressed.<\/p>\n<p>This defaults to 0.1. If null, opacity will not change on pressed if using\nyour own custom effects is desired.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double pressedOpacity\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoButton\/pressedOpacity.html",
                    "name": "pressedOpacity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoButton",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A palette of <a href=\"dart-ui\/Color-class.html\">Color<\/a> constants that describe colors commonly used when\nmatching the iOS platform aesthetics.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoColors-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoColors",
            "shortname": "CupertinoColors",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "<p>iOS 10's default blue color. Used to indicate active elements such as\nbuttons, selected tabs and your own chat bubbles.<\/p>\n<p>This is SystemBlue in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color activeBlue = Color(0xFF007AFF)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/activeBlue-constant.html",
                    "name": "activeBlue",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>iOS 10's default green color. Used to indicate active accents such as\nthe switch in its on state and some accent buttons such as the call button\nand Apple Map's 'Go' button.<\/p>\n<p>This is SystemGreen in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color activeGreen = Color(0xFF4CD964)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/activeGreen-constant.html",
                    "name": "activeGreen",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>iOS 12's default dark mode color. Used in place of the <a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">activeBlue<\/a> color\nas the default active elements' color when the theme's brightness is dark.<\/p>\n<p>This is SystemOrange in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color activeOrange = Color(0xFFFF9500)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/activeOrange-constant.html",
                    "name": "activeOrange",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Opaque black color. Used for texts against light backgrounds.<\/p>\n<p>This is SystemBlackColor in the iOS palette.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoColors\/black-constant.html\">material.Colors.black<\/a>, the same color, in the material design palette.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoColors\/white-constant.html\">white<\/a>, opaque white in the <a href=\"cupertino\/CupertinoColors-class.html\">CupertinoColors<\/a> palette.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color black = Color(0xFF000000)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/black-constant.html",
                    "name": "black",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Used in iOS 12 for very dark background fills in tables between cell groups\nin dark mode.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color darkBackgroundGray = Color(0xFF171717)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/darkBackgroundGray-constant.html",
                    "name": "darkBackgroundGray",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Used for iOS 10 for destructive actions such as the delete actions in\ntable view cells and dialogs.<\/p>\n<p>Not the same red as the camera shutter or springboard icon notifications\nor the foreground red theme in various native apps such as HealthKit.<\/p>\n<p>This is SystemRed in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color destructiveRed = Color(0xFFFF3B30)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/destructiveRed-constant.html",
                    "name": "destructiveRed",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Used in iOS 12 for very light background fills in tables between cell groups.<\/p>\n<p>This is SystemExtraLightGrayColor in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color extraLightBackgroundGray = Color(0xFFEFEFF4)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/extraLightBackgroundGray-constant.html",
                    "name": "extraLightBackgroundGray",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Used in iOS 11 for unselected selectables such as tab bar items in their\ninactive state or de-emphasized subtitles and details text.<\/p>\n<p>Not the same gray as disabled buttons etc.<\/p>\n<p>This is SystemGrayColor in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color inactiveGray = Color(0xFF8E8E93)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/inactiveGray-constant.html",
                    "name": "inactiveGray",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Used in iOS 10 for light background fills such as the chat bubble background.<\/p>\n<p>This is SystemLightGrayColor in the iOS palette.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color lightBackgroundGray = Color(0xFFE5E5EA)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/lightBackgroundGray-constant.html",
                    "name": "lightBackgroundGray",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                },
                {
                    "desc": "<p>Opaque white color. Used for backgrounds and fonts against dark backgrounds.<\/p>\n<p>This is SystemWhiteColor in the iOS palette.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoColors\/white-constant.html\">material.Colors.white<\/a>, the same color, in the material design palette.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoColors\/black-constant.html\">black<\/a>, opaque black in the <a href=\"cupertino\/CupertinoColors-class.html\">CupertinoColors<\/a> palette.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Color white = Color(0xFFFFFFFF)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoColors\/white-constant.html",
                    "name": "white",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoColors",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A date picker widget in iOS style.<\/p>\n<p>There are several modes of the date picker listed in <a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode<\/a>.<\/p>\n<p>The class will display its children as consecutive columns. Its children\norder is based on internationalization.<\/p>\n<p>Example of the picker in date mode:<\/p>\n<ul>\n<li>US-English: <code>July | 13 | 2012<\/code>\n<\/li>\n<li>Vietnamese: <code>13 | Th\u00e1ng 7 | 2012<\/code>\n<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a>, the class that implements the iOS-style timer picker.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPicker-class.html\">CupertinoPicker<\/a>, the class that implements a content agnostic spinner UI.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoDatePicker-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoDatePicker",
            "shortname": "CupertinoDatePicker",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Callback called when the selected date and\/or time changes. Must not be\nnull.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;DateTime&gt; onDateTimeChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/onDateTimeChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.DateTime>",
                    "name": "onDateTimeChanged",
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Constructs an iOS style date picker.<\/p>\n<p><code>mode<\/code> is one of the mode listed in <a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode<\/a> and defaults\nto <a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.dateAndTime<\/a>.<\/p>\n<p><code>onDateTimeChanged<\/code> is the callback called when the selected date or time\nchanges and must not be null.<\/p>\n<p><code>initialDateTime<\/code> is the initial date time of the picker. Defaults to the\npresent date and time and must not be null. The present must conform to\nthe intervals set in <code>minimumDate<\/code>, <code>maximumDate<\/code>, <code>minimumYear<\/code>, and\n<code>maximumYear<\/code>.<\/p>\n<p><code>minimumDate<\/code> is the minimum date that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.dateAndTime<\/a> mode. Null if there's no limit.<\/p>\n<p><code>maximumDate<\/code> is the maximum date that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.dateAndTime<\/a> mode. Null if there's no limit.<\/p>\n<p><code>minimumYear<\/code> is the minimum year that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.date<\/a> mode. Defaults to 1 and must not be null.<\/p>\n<p><code>maximumYear<\/code> is the maximum year that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.date<\/a> mode. Null if there's no limit.<\/p>\n<p><code>minuteInterval<\/code> is the granularity of the minute spinner. Must be a\npositive integer factor of 60.<\/p>\n<p><code>use24hFormat<\/code> decides whether 24 hour format is used. Defaults to false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoDatePicker({\n  this.mode = CupertinoDatePickerMode.dateAndTime,\n  @required this.onDateTimeChanged,\n  DateTime initialDateTime,\n  this.minimumDate,\n  this.maximumDate,\n  this.minimumYear = 1,\n  this.maximumYear,\n  this.minuteInterval = 1,\n  this.use24hFormat = false,\n}) : initialDateTime = initialDateTime ?? DateTime.now(),\n     assert(mode != null),\n     assert(onDateTimeChanged != null),\n     assert(minimumYear != null),\n     assert(\n       minuteInterval &gt; 0 &amp;&amp; 60 % minuteInterval == 0,\n       'minute interval is not a positive integer factor of 60',\n     ) {\n  assert(this.initialDateTime != null);\n  assert(\n    mode != CupertinoDatePickerMode.dateAndTime || minimumDate == null || !this.initialDateTime.isBefore(minimumDate),\n    'initial date is before minimum date',\n  );\n  assert(\n    mode != CupertinoDatePickerMode.dateAndTime || maximumDate == null || !this.initialDateTime.isAfter(maximumDate),\n    'initial date is after maximum date',\n  );\n  assert(\n    mode != CupertinoDatePickerMode.date || (minimumYear &gt;= 1 &amp;&amp; this.initialDateTime.year &gt;= minimumYear),\n    'initial year is not greater than minimum year, or mininum year is not positive',\n  );\n  assert(\n    mode != CupertinoDatePickerMode.date || maximumYear == null || this.initialDateTime.year &lt;= maximumYear,\n    'initial year is not smaller than maximum year',\n  );\n  assert(\n    this.initialDateTime.minute % minuteInterval == 0,\n    'initial minute is not divisible by minute interval',\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoDatePicker\/CupertinoDatePicker.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoDatePicker",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": [
                        {
                            "name": "initialDateTime",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.DateTime"
                        },
                        {
                            "name": "maximumDate",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.DateTime"
                        },
                        {
                            "name": "maximumYear",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "minimumDate",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.DateTime"
                        },
                        {
                            "name": "minimumYear",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "minuteInterval",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "mode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.CupertinoDatePickerMode"
                        },
                        {
                            "name": "onDateTimeChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.DateTime>"
                        },
                        {
                            "name": "use24hFormat",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoDatePicker\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;StatefulWidget&gt; createState() {\n  \/\/ The `time` mode and `dateAndTime` mode of the picker share the time\n  \/\/ columns, so they are placed together to one state.\n  \/\/ The `date` mode has different children and is implemented in a different\n  \/\/ state.\n  if (mode == CupertinoDatePickerMode.time || mode == CupertinoDatePickerMode.dateAndTime)\n    return _CupertinoDatePickerDateTimeState();\n  else\n    return _CupertinoDatePickerDateState();\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoDatePicker\/createState.html",
                    "isDeprecated": false,
                    "type": "widgets.State<widgets.StatefulWidget>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The initial date and\/or time of the picker. Defaults to the present date\nand time and must not be null. The present must conform to the intervals\nset in <a href=\"cupertino\/CupertinoDatePicker\/minimumDate.html\">minimumDate<\/a>, <a href=\"cupertino\/CupertinoDatePicker\/maximumDate.html\">maximumDate<\/a>, <a href=\"cupertino\/CupertinoDatePicker\/minimumYear.html\">minimumYear<\/a>, and <a href=\"cupertino\/CupertinoDatePicker\/maximumYear.html\">maximumYear<\/a>.<\/p>\n<p>Changing this value after the initial build will not affect the currently\nselected date time.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime initialDateTime\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/initialDateTime.html",
                    "name": "initialDateTime",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>Maximum date that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.dateAndTime<\/a> mode. Null if there's no limit.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime maximumDate\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/maximumDate.html",
                    "name": "maximumDate",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>Maximum year that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.date<\/a> mode. Null if there's no limit.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maximumYear\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/maximumYear.html",
                    "name": "maximumYear",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>Minimum date that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.dateAndTime<\/a> mode. Null if there's no limit.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DateTime minimumDate\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/minimumDate.html",
                    "name": "minimumDate",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>Minimum year that the picker can be scrolled to in\n<a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.date<\/a> mode. Defaults to 1 and must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minimumYear\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/minimumYear.html",
                    "name": "minimumYear",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>The granularity of the minutes spinner, if it is shown in the current mode.\nMust be an integer factor of 60.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minuteInterval\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/minuteInterval.html",
                    "name": "minuteInterval",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>The mode of the date picker as one of <a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode<\/a>.\nDefaults to <a href=\"cupertino\/CupertinoDatePickerMode-class.html\">CupertinoDatePickerMode.dateAndTime<\/a>. Cannot be null and\nvalue cannot change after initial build.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoDatePickerMode mode\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/mode.html",
                    "name": "mode",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoDatePickerMode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                },
                {
                    "desc": "<p>Whether to use 24 hour format. Defaults to false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool use24hFormat\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDatePicker\/use24hFormat.html",
                    "name": "use24hFormat",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDatePicker",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style dialog.<\/p>\n<p>This dialog widget does not have any opinion about the contents of the\ndialog. Rather than using this widget directly, consider using\n<a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>, which implement a specific kind of dialog.<\/p>\n<p>Push with <code>Navigator.of(..., rootNavigator: true)<\/code> when using with\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a> to ensure that the dialog appears above the tabs.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>, which is a dialog with title, contents, and\nactions.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/\">developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoDialog-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoDialog",
            "shortname": "CupertinoDialog",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style dialog.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoDialog({\n  Key key,\n  this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoDialog\/CupertinoDialog.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoDialog",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoDialog",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoDialog\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return Center(\n    child: SizedBox(\n      width: _kCupertinoDialogWidth,\n      child: CupertinoPopupSurface(\n        child: child,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoDialog\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoDialog",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialog\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDialog",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A button typically used in a <a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>, a dialog that informs the user about situations\nthat require acknowledgement.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoDialogAction-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoDialogAction",
            "shortname": "CupertinoDialogAction",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The callback that is called when the button is tapped or otherwise\nactivated.<\/p>\n<p>If this is set to null, the button will be disabled.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPressed\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialogAction\/onPressed.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onPressed",
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an action for an iOS-style dialog.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoDialogAction({\n  this.onPressed,\n  this.isDefaultAction = false,\n  this.isDestructiveAction = false,\n  this.textStyle,\n  @required this.child,\n}) : assert(child != null);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoDialogAction\/CupertinoDialogAction.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoDialogAction",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "isDefaultAction",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "isDestructiveAction",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "onPressed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "textStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoDialogAction\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  TextStyle style = _kCupertinoDialogActionStyle;\n  style = style.merge(textStyle);\n\n  if (isDestructiveAction) {\n    style = style.copyWith(color: CupertinoColors.destructiveRed);\n  }\n\n  if (!enabled) {\n    style = style.copyWith(color: style.color.withOpacity(0.5));\n  }\n\n  \/\/ Apply a sizing policy to the action button's content based on whether or\n  \/\/ not the device is in accessibility mode.\n  \/\/ TODO(mattcarroll): The following logic is not entirely correct. It is also\n  \/\/ the case that if content text does not contain a space, it should also\n  \/\/ wrap instead of ellipsizing. We are consciously not implementing that\n  \/\/ now due to complexity.\n  final Widget sizedContent = _isInAccessibilityMode(context)\n    ? _buildContentWithAccessibilitySizingPolicy(\n        textStyle: style,\n        content: child,\n      )\n    : _buildContentWithRegularSizingPolicy(\n        context: context,\n        textStyle: style,\n        content: child,\n      );\n\n  return GestureDetector(\n    excludeFromSemantics: true,\n    onTap: onPressed,\n    behavior: HitTestBehavior.opaque,\n    child: ConstrainedBox(\n      constraints: const BoxConstraints(\n        minHeight: _kMinButtonHeight,\n      ),\n      child: Container(\n        alignment: Alignment.center,\n        padding: EdgeInsets.all(_calculatePadding(context)),\n        child: sizedContent,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoDialogAction\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n<p>Typically a <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialogAction\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": []
                },
                {
                    "desc": "<p>Whether the button is enabled or disabled. Buttons are disabled by\ndefault. To enable a button, set its <a href=\"cupertino\/CupertinoDialogAction\/onPressed.html\">onPressed<\/a> property to a non-null\nvalue.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get enabled =&gt; onPressed != null;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialogAction\/enabled.html",
                    "name": "enabled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": []
                },
                {
                    "desc": "<p>Set to true if button is the default choice in the dialog.<\/p>\n<p>Default buttons are bold.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDefaultAction\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialogAction\/isDefaultAction.html",
                    "name": "isDefaultAction",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": []
                },
                {
                    "desc": "<p>Whether this action destroys an object.<\/p>\n<p>For example, an action that deletes an email is destructive.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isDestructiveAction\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialogAction\/isDestructiveAction.html",
                    "name": "isDestructiveAction",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": []
                },
                {
                    "desc": "<p><a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> to apply to any text that appears in this button.<\/p>\n<p>Dialog actions have a built-in text resizing policy for long text. To\nensure that this resizing policy always works as expected, <a href=\"cupertino\/CupertinoDialogAction\/textStyle.html\">textStyle<\/a>\nmust be used if a text size is desired other than that specified in\n<code>_kCupertinoDialogActionStyle<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle textStyle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoDialogAction\/textStyle.html",
                    "name": "textStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoDialogAction",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style transition used for summoning fullscreen dialogs.<\/p>\n<p>For example, used when creating a new calendar event by bringing in the next\nscreen from the bottom.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoFullscreenDialogTransition-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoFullscreenDialogTransition",
            "shortname": "CupertinoFullscreenDialogTransition",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style transition used for summoning fullscreen dialogs.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoFullscreenDialogTransition({\n  Key key,\n  @required Animation&lt;double&gt; animation,\n  @required this.child,\n}) : _positionAnimation = CurvedAnimation(\n       parent: animation,\n       curve: Curves.linearToEaseOut,\n       \/\/ The curve must be flipped so that the reverse animation doesn't play\n       \/\/ an ease-in curve, which iOS does not use.\n       reverseCurve: Curves.linearToEaseOut.flipped,\n     ).drive(_kBottomUpTween),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoFullscreenDialogTransition\/CupertinoFullscreenDialogTransition.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoFullscreenDialogTransition",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoFullscreenDialogTransition",
                    "params": [
                        {
                            "name": "animation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoFullscreenDialogTransition\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return SlideTransition(\n    position: _positionAnimation,\n    child: child,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoFullscreenDialogTransition\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoFullscreenDialogTransition",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoFullscreenDialogTransition\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoFullscreenDialogTransition",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Identifiers for the supported Cupertino icons.<\/p>\n<p>Use with the <a href=\"widgets\/Icon-class.html\">Icon<\/a> class to show specific icons.<\/p>\n<p>Icons are identified by their name as listed below.<\/p>\n<p>To use this class, make sure you add a dependency on <code>cupertino_icons<\/code> in your\nproject's <code>pubspec.yaml<\/code> file. This ensures that the CupertinoIcons font is\nincluded in your application. This font is used to display the icons. For example:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">name: my_awesome_application\n\ndependencies:\n  cupertino_icons: ^0.1.0\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Icon-class.html\">Icon<\/a>, used to show these icons.<\/li>\n<li>\n<a href=\"https:\/\/github.com\/flutter\/cupertino_icons\/blob\/master\/map.png\">github.com\/flutter\/cupertino_icons\/blob\/master\/map.png<\/a>, a map of the icons in this icons font.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoIcons-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoIcons",
            "shortname": "CupertinoIcons",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "<p>Two straight lines, one horizontal and one vertical, meeting in the middle, which is the equivalent of a plus sign.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/plus_circled-constant.html\">plus_circled<\/a>, which is the pre-iOS 7 version of this icon with a thicker cross.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/add_circled-constant.html\">add_circled<\/a>, which consists of the plus and a circle around it.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData add = IconData(0xf489, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/add-constant.html",
                    "name": "add",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Two straight lines, one horizontal and one vertical, meeting in the middle, which is the equivalent of a plus sign, surrounded by a circle. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/plus_circled-constant.html\">plus_circled<\/a>, which is the pre-iOS 7 version of this icon with a thicker cross and a filled in circle.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/add_circled_solid-constant.html\">add_circled_solid<\/a>, which is similar, but filled in.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData add_circled = IconData(0xf48a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/add_circled-constant.html",
                    "name": "add_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Two straight lines, one horizontal and one vertical, meeting in the middle, which is the equivalent of a plus sign, surrounded by a circle. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/plus_circled-constant.html\">plus_circled<\/a>, which is the pre-iOS 7 version of this icon with a thicker cross.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/add_circled-constant.html\">add_circled<\/a>, which is similar, but not filled in.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData add_circled_solid = IconData(0xf48b, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/add_circled_solid-constant.html",
                    "name": "add_circled_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A thicker left chevron used in iOS for the navigation bar back button.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData back = IconData(0xf3cf, fontFamily: iconFont, fontPackage: iconFontPackage, matchTextDirection: true)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/back-constant.html",
                    "name": "back",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A 25% charged battery.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData battery_25_percent = IconData(0xf115, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/battery_25_percent-constant.html",
                    "name": "battery_25_percent",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A 75% charged battery.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData battery_75_percent = IconData(0xf114, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/battery_75_percent-constant.html",
                    "name": "battery_75_percent",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A charging battery.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData battery_charging = IconData(0xf111, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/battery_charging-constant.html",
                    "name": "battery_charging",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An empty battery.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData battery_empty = IconData(0xf112, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/battery_empty-constant.html",
                    "name": "battery_empty",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A full battery.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData battery_full = IconData(0xf113, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/battery_full-constant.html",
                    "name": "battery_full",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>The bluetooth logo.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData bluetooth = IconData(0xf116, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/bluetooth-constant.html",
                    "name": "bluetooth",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A book silhouette spread open. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/book_solid-constant.html\">book_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData book = IconData(0xf3e7, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/book-constant.html",
                    "name": "book",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A book silhouette spread open. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/book-constant.html\">book<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData book_solid = IconData(0xf3e8, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/book_solid-constant.html",
                    "name": "book_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A book silhouette spread open containing a bookmark in the upper right. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/bookmark_solid-constant.html\">bookmark_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData bookmark = IconData(0xf3e9, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/bookmark-constant.html",
                    "name": "bookmark",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A book silhouette spread open containing a bookmark in the upper right. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/bookmark-constant.html\">bookmark<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData bookmark_solid = IconData(0xf3ea, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/bookmark_solid-constant.html",
                    "name": "bookmark_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in bus.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData bus = IconData(0xf36d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/bus-constant.html",
                    "name": "bus",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in car.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/car_detailed-constant.html\">car_detailed<\/a>, similar, but a more detailed and realistic representation.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData car = IconData(0xf36f, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/car-constant.html",
                    "name": "car",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in detailed, realistic car.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/car-constant.html\">car<\/a>, similar, but a more simple representation.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData car_detailed = IconData(0xf2c1, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/car_detailed-constant.html",
                    "name": "car_detailed",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A checkmark.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/check_mark_circled-constant.html\">check_mark_circled<\/a>, which consists of this check mark and a circle surrounding it.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData check_mark = IconData(0xf3fd, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/check_mark-constant.html",
                    "name": "check_mark",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A checkmark in a circle. The circle is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/check_mark_circled_solid-constant.html\">check_mark_circled_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/check_mark-constant.html\">check_mark<\/a>, which is the check mark without a circle.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData check_mark_circled = IconData(0xf3fe, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/check_mark_circled-constant.html",
                    "name": "check_mark_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A checkmark in a circle. The circle is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/check_mark_circled-constant.html\">check_mark_circled<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData check_mark_circled_solid = IconData(0xf3ff, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/check_mark_circled_solid-constant.html",
                    "name": "check_mark_circled_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An empty circle (a ring).  An un-selected radio button.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/circle_filled-constant.html\">circle_filled<\/a>, which is similar but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData circle = IconData(0xf401, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/circle-constant.html",
                    "name": "circle",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled circle.  The circle is surrounded by a ring.  A selected radio button.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/circle-constant.html\">circle<\/a>, which is similar but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData circle_filled = IconData(0xf400, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/circle_filled-constant.html",
                    "name": "circle_filled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cross of two diagonal lines from edge to edge crossing in an angle of 90 degrees, which is used for dismissal.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear_circled-constant.html\">clear_circled<\/a>, which consists of this cross and a circle surrounding it.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear-constant.html\">clear<\/a>, which uses a thicker cross and is the pre-iOS 7 equivalent of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clear = IconData(0xf404, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clear-constant.html",
                    "name": "clear",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cross of two diagonal lines from edge to edge crossing in an angle of 90 degrees, which is used for dismissal, surrounded by circle. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear_circled_solid-constant.html\">clear_circled_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear-constant.html\">clear<\/a>, which is the standalone cross of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clear_circled = IconData(0xf405, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clear_circled-constant.html",
                    "name": "clear_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cross of two diagonal lines from edge to edge crossing in an angle of 90 degrees, which is used for dismissal, used as a blank space in a circle. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/clear_circled-constant.html\">clear_circled<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clear_circled_solid = IconData(0xf406, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clear_circled_solid-constant.html",
                    "name": "clear_circled_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cross of two diagonal lines from edge to edge crossing in an angle of 90 degrees, which is used for dismissal.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear_circled-constant.html\">clear_circled<\/a>, which uses this cross as a blank space in a filled out circled.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear-constant.html\">clear<\/a>, which uses a thinner cross and is the iOS 7 equivalent of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clear_thick = IconData(0xf2d7, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clear_thick-constant.html",
                    "name": "clear_thick",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cross of two diagonal lines from edge to edge crossing in an angle of 90 degrees, which is used for dismissal, used as a blank space in a circle.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear-constant.html\">clear<\/a>, which is equivalent to the cross of this icon without a circle.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clear_circled_solid-constant.html\">clear_circled_solid<\/a>, which is similar, but uses a thinner cross.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clear_thick_circled = IconData(0xf36e, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clear_thick_circled-constant.html",
                    "name": "clear_thick_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A circle with a dotted clock face inside with hands showing 10:30.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clock_solid-constant.html\">clock_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/time-constant.html\">time<\/a>, which is similar, but without dots on the clock face.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/time_solid-constant.html\">time_solid<\/a>, which is similar, but filled in and without dots on the clock face.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clock = IconData(0xf4be, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clock-constant.html",
                    "name": "clock",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in circle with a dotted clock face inside with hands showing 10:30.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clock-constant.html\">clock<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/time-constant.html\">time<\/a>, which is similar, but not filled in and without dots on the clock face.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/time_solid-constant.html\">time_solid<\/a>, which is similar, but without dots on the clock face.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData clock_solid = IconData(0xf4bf, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/clock_solid-constant.html",
                    "name": "clock_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A collection of folders, which store collections of files, i.e. an album. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/collections_solid-constant.html\">collections_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData collections = IconData(0xf3c9, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/collections-constant.html",
                    "name": "collections",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A collection of folders, which store collections of files, i.e. an album. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/collections-constant.html\">collections<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData collections_solid = IconData(0xf3ca, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/collections_solid-constant.html",
                    "name": "collections_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A chat bubble.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData conversation_bubble = IconData(0xf3fb, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/conversation_bubble-constant.html",
                    "name": "conversation_bubble",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A box for writing and a pen on top (that indicates the writing). This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/create_solid-constant.html\">create_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/pencil-constant.html\">pencil<\/a>, which is just a pencil.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/pen-constant.html\">pen<\/a>, which is just a pen.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData create = IconData(0xf417, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/create-constant.html",
                    "name": "create",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A box for writing and a pen on top (that indicates the writing). This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/create-constant.html\">create<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/pencil-constant.html\">pencil<\/a>, which is just a pencil.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/pen-constant.html\">pen<\/a>, which is just a pen.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData create_solid = IconData(0xf417, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/create_solid-constant.html",
                    "name": "create_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A trash bin for removing items. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/delete_solid-constant.html\">delete_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData delete = IconData(0xf4c4, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/delete-constant.html",
                    "name": "delete",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A trash bin with minimal detail for removing items.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/delete-constant.html\">delete<\/a>, which is the iOS 7 equivalent of this icon with richer detail.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData delete_simple = IconData(0xf37f, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/delete_simple-constant.html",
                    "name": "delete_simple",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A trash bin for removing items. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/delete-constant.html\">delete<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData delete_solid = IconData(0xf4c5, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/delete_solid-constant.html",
                    "name": "delete_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A solid down arrow.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData down_arrow = IconData(0xf35d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/down_arrow-constant.html",
                    "name": "down_arrow",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Three solid dots.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData ellipsis = IconData(0xf46a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/ellipsis-constant.html",
                    "name": "ellipsis",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An open eye.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/eye_solid-constant.html\">eye_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData eye = IconData(0xf424, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/eye-constant.html",
                    "name": "eye",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An open eye.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/eye-constant.html\">eye<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData eye_solid = IconData(0xf425, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/eye_solid-constant.html",
                    "name": "eye_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A right facing flag and pole outline.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData flag = IconData(0xf42c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/flag-constant.html",
                    "name": "flag",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single folder, which stores multiple files. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/folder_solid-constant.html\">folder_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/folder_open-constant.html\">folder_open<\/a>, which is the pre-iOS 7 version of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData folder = IconData(0xf434, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/folder-constant.html",
                    "name": "folder",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single folder that indicates being opened. A folder like this typically stores multiple files.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/folder-constant.html\">folder<\/a>, which is the equivalent of this icon for iOS versions later than or equal to iOS 7.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData folder_open = IconData(0xf38a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/folder_open-constant.html",
                    "name": "folder_open",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single folder, which stores multiple files. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/folder-constant.html\">folder<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/folder_open-constant.html\">folder_open<\/a>, which is the pre-iOS 7 version of this icon and not filled in.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData folder_solid = IconData(0xf435, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/folder_solid-constant.html",
                    "name": "folder_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A thicker right chevron that's the reverse of <a href=\"cupertino\/CupertinoIcons\/back-constant.html\">back<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData forward = IconData(0xf3d1, fontFamily: iconFont, fontPackage: iconFontPackage, matchTextDirection: true)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/forward-constant.html",
                    "name": "forward",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>All four corners of a square facing inwards.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/fullscreen_exit-constant.html\">fullscreen_exit<\/a>, which is similar, but has the corners facing outwards.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData fullscreen = IconData(0xf386, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/fullscreen-constant.html",
                    "name": "fullscreen",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>All four corners of a square facing outwards.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/fullscreen-constant.html\">fullscreen<\/a>, which is similar, but has the corners facing inwards.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData fullscreen_exit = IconData(0xf37d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/fullscreen_exit-constant.html",
                    "name": "fullscreen_exit",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An outlined game controller.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/game_controller_solid-constant.html\">game_controller_solid<\/a>, similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData game_controller = IconData(0xf43a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/game_controller-constant.html",
                    "name": "game_controller",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in game controller.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/game_controller-constant.html\">game_controller<\/a>, similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData game_controller_solid = IconData(0xf43b, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/game_controller_solid-constant.html",
                    "name": "game_controller_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A gear with eight cogs. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/gear_solid-constant.html\">gear_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/gear_big-constant.html\">gear_big<\/a>, which is the pre-iOS 7 version of this icon and appears bigger because of fewer and bigger cogs.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/settings-constant.html\">settings<\/a>, which is another cogwheel with a different design.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData gear = IconData(0xf43c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/gear-constant.html",
                    "name": "gear",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A gear with six cogs.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/gear-constant.html\">gear<\/a>, which is the iOS 7 version of this icon and appears smaller because of more and larger cogs.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/settings_solid-constant.html\">settings_solid<\/a>, which is another cogwheel with a different design.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData gear_big = IconData(0xf2f7, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/gear_big-constant.html",
                    "name": "gear_big",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A gear with eight cogs. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/gear-constant.html\">gear<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/settings_solid-constant.html\">settings_solid<\/a>, which is another cogwheel with a different design.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData gear_solid = IconData(0xf43d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/gear_solid-constant.html",
                    "name": "gear_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A group of three people. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/group_solid-constant.html\">group_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person-constant.html\">person<\/a>, which is just a single person.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData group = IconData(0xf47b, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/group-constant.html",
                    "name": "group",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A group of three people. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/group-constant.html\">group<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_solid-constant.html\">person_solid<\/a>, which is just a single person.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData group_solid = IconData(0xf47c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/group_solid-constant.html",
                    "name": "group_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An outlined heart shape. Can be used to indicate like or favorite states.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/heart_solid-constant.html\">heart_solid<\/a>, same shape, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData heart = IconData(0xf442, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/heart-constant.html",
                    "name": "heart",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled heart shape. Can be used to indicate like or favorite states.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/heart-constant.html\">heart<\/a>, same shape, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData heart_solid = IconData(0xf443, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/heart_solid-constant.html",
                    "name": "heart_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Outline of a simple front-facing house.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData home = IconData(0xf447, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/home-constant.html",
                    "name": "home",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>The icon font used for Cupertino icons.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String iconFont = 'CupertinoIcons'\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/iconFont-constant.html",
                    "name": "iconFont",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>The dependent package providing the Cupertino icons font.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const String iconFontPackage = 'cupertino_icons'\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/iconFontPackage-constant.html",
                    "name": "iconFontPackage",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A letter 'i' in a circle.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData info = IconData(0xf44c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/info-constant.html",
                    "name": "info",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An outlined lab flask.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/lab_flask_solid-constant.html\">lab_flask_solid<\/a>, similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData lab_flask = IconData(0xf430, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/lab_flask-constant.html",
                    "name": "lab_flask",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in lab flask.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/lab_flask-constant.html\">lab_flask<\/a>, similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData lab_flask_solid = IconData(0xf431, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/lab_flask_solid-constant.html",
                    "name": "lab_flask_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A thin left chevron.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData left_chevron = IconData(0xf3d2, fontFamily: iconFont, fontPackage: iconFontPackage, matchTextDirection: true)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/left_chevron-constant.html",
                    "name": "left_chevron",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Outline of a location pin.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData location = IconData(0xf455, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/location-constant.html",
                    "name": "location",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A location pin. This icon is filled in.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData location_solid = IconData(0xf456, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/location_solid-constant.html",
                    "name": "location_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>The infinity symbol.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/loop_thick-constant.html\">loop_thick<\/a>, which is similar, but thicker.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData loop = IconData(0xf449, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/loop-constant.html",
                    "name": "loop",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>The infinity symbol.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/loop-constant.html\">loop<\/a>, which is similar, but thinner.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData loop_thick = IconData(0xf44a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/loop_thick-constant.html",
                    "name": "loop_thick",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Outline of a closed mail envelope.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData mail = IconData(0xf422, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/mail-constant.html",
                    "name": "mail",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A closed mail envelope. This icon is filled in.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData mail_solid = IconData(0xf423, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/mail_solid-constant.html",
                    "name": "mail_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A microphone.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/mic_solid-constant.html\">mic_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/mic_off-constant.html\">mic_off<\/a>, which is similar, but filled in and with a diagonal line crossing the icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData mic = IconData(0xf460, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/mic-constant.html",
                    "name": "mic",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in microphone with a diagonal line crossing it.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/mic-constant.html\">mic<\/a>, which is similar, but not filled in and without a diagonal line.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/mic_solid-constant.html\">mic_solid<\/a>, which is similar, but without a diagonal line.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData mic_off = IconData(0xf45f, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/mic_off-constant.html",
                    "name": "mic_off",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in microphone.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/mic-constant.html\">mic<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/mic_off-constant.html\">mic_off<\/a>, which is similar, but with a diagonal line crossing the icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData mic_solid = IconData(0xf461, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/mic_solid-constant.html",
                    "name": "mic_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A '-' sign in a circle.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData minus_circled = IconData(0xf463, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/minus_circled-constant.html",
                    "name": "minus_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A symbol representing a single musical note.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData music_note = IconData(0xf46b, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/music_note-constant.html",
                    "name": "music_note",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An unlocked padlock.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/padlock_solid-constant.html\">padlock_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData padlock = IconData(0xf4c8, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/padlock-constant.html",
                    "name": "padlock",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An unlocked padlock.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/padlock-constant.html\">padlock<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData padlock_solid = IconData(0xf4c9, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/padlock_solid-constant.html",
                    "name": "padlock_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Two vertical rectangles. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/pause_solid-constant.html\">pause_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData pause = IconData(0xf477, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/pause-constant.html",
                    "name": "pause",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Two vertical rectangles. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/pause-constant.html\">pause<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData pause_solid = IconData(0xf478, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/pause_solid-constant.html",
                    "name": "pause_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An outlined paw.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/paw_solid-constant.html\">paw_solid<\/a>, similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData paw = IconData(0xf479, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/paw-constant.html",
                    "name": "paw",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in paw.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/paw-constant.html\">paw<\/a>, similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData paw_solid = IconData(0xf47a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/paw_solid-constant.html",
                    "name": "paw_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A simple pen.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/pencil-constant.html\">pencil<\/a>, which is similar, but has less detail and looks like a pencil.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData pen = IconData(0xf2bf, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/pen-constant.html",
                    "name": "pen",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A simple pencil.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/pen-constant.html\">pen<\/a>, which is similar, but has more detail and looks like a pen.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData pencil = IconData(0xf37e, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/pencil-constant.html",
                    "name": "pencil",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single person. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_solid-constant.html\">person_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_add-constant.html\">person_add<\/a>, which has an additional plus sign next to the person.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/group-constant.html\">group<\/a>, which consists of three people.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData person = IconData(0xf47d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/person-constant.html",
                    "name": "person",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single person with a plus sign next to it. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_add_solid-constant.html\">person_add_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person-constant.html\">person<\/a>, which is just the person.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/group-constant.html\">group<\/a>, which consists of three people.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData person_add = IconData(0xf47f, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/person_add-constant.html",
                    "name": "person_add",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single person with a plus sign next to it. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_add-constant.html\">person_add<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_solid-constant.html\">person_solid<\/a>, which is just the person.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/group_solid-constant.html\">group_solid<\/a>, which consists of three people.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData person_add_solid = IconData(0xf480, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/person_add_solid-constant.html",
                    "name": "person_add_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A single person. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person-constant.html\">person<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/person_add_solid-constant.html\">person_add_solid<\/a>, which has an additional plus sign next to the person.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/group_solid-constant.html\">group_solid<\/a>, which consists of three people.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData person_solid = IconData(0xf47e, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/person_solid-constant.html",
                    "name": "person_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A phone handset outline.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData phone = IconData(0xf4b8, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/phone-constant.html",
                    "name": "phone",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A phone handset.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData phone_solid = IconData(0xf4b9, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/phone_solid-constant.html",
                    "name": "phone_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A camera for still photographs. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/photo_camera-constant.html\">photo_camera<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/video_camera_solid-constant.html\">video_camera_solid<\/a>, for the moving picture equivalent.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData photo_camera = IconData(0xf3f5, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/photo_camera-constant.html",
                    "name": "photo_camera",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A camera for still photographs. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/photo_camera_solid-constant.html\">photo_camera_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/video_camera-constant.html\">video_camera<\/a>, for the moving picture equivalent.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData photo_camera_solid = IconData(0xf3f6, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/photo_camera_solid-constant.html",
                    "name": "photo_camera_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A triangle facing to the right. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/play_arrow_solid-constant.html\">play_arrow_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData play_arrow = IconData(0xf487, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/play_arrow-constant.html",
                    "name": "play_arrow",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A triangle facing to the right. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/play_arrow-constant.html\">play_arrow<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData play_arrow_solid = IconData(0xf488, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/play_arrow_solid-constant.html",
                    "name": "play_arrow_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A '+' sign in a circle.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData plus_circled = IconData(0xf48a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/plus_circled-constant.html",
                    "name": "plus_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A person's silhouette in a circle.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData profile_circled = IconData(0xf419, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/profile_circled-constant.html",
                    "name": "profile_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An arrow on a circular path with its end pointing at its start.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_circled-constant.html\">refresh_circled<\/a>, which is this icon put in a circle.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_thin-constant.html\">refresh_thin<\/a>, which is an arrow of the same concept, but thinner and with a smaller gap in between its end and start.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_thick-constant.html\">refresh_thick<\/a>, which is similar, but rotated 45 degrees clockwise and thicker.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_bold-constant.html\">refresh_bold<\/a>, which is similar, but rotated 90 degrees clockwise and much thicker.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData refresh = IconData(0xf49a, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/refresh-constant.html",
                    "name": "refresh",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An arrow on a circular path with its end pointing at its start.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_thick-constant.html\">refresh_thick<\/a>, which is similar, but rotated 45 degrees anti-clockwise and thinner.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh-constant.html\">refresh<\/a>, which is similar, but rotated 90 degrees anti-clockwise and much thinner.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData refresh_bold = IconData(0xf21c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/refresh_bold-constant.html",
                    "name": "refresh_bold",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An arrow on a circular path with its end pointing at its start surrounded by a circle. This is icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_circled_solid-constant.html\">refresh_circled_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh-constant.html\">refresh<\/a>, which is the arrow of this icon without a circle.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData refresh_circled = IconData(0xf49b, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/refresh_circled-constant.html",
                    "name": "refresh_circled",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An arrow on a circular path with its end pointing at its start surrounded by a circle. This is icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_circled-constant.html\">refresh_circled<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh-constant.html\">refresh<\/a>, which is the arrow of this icon filled in without a circle.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData refresh_circled_solid = IconData(0xf49c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/refresh_circled_solid-constant.html",
                    "name": "refresh_circled_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An arrow on a circular path with its end pointing at its start.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh-constant.html\">refresh<\/a>, which is similar, but rotated 45 degrees anti-clockwise and thinner.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/refresh_bold-constant.html\">refresh_bold<\/a>, which is similar, but rotated 45 degrees clockwise and thicker.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData refresh_thick = IconData(0xf3a8, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/refresh_thick-constant.html",
                    "name": "refresh_thick",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>An arrow on a circular path with its end pointing at its start.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/refresh-constant.html\">refresh<\/a>, which is an arrow of the same concept, but thicker and with a larger gap in between its end and start.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData refresh_thin = IconData(0xf49d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/refresh_thin-constant.html",
                    "name": "refresh_thin",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A curved up and left pointing arrow.<\/p>\n<p>For another version of this icon, see <a href=\"cupertino\/CupertinoIcons\/reply_thick_solid-constant.html\">reply_thick_solid<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData reply = IconData(0xf4c6, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/reply-constant.html",
                    "name": "reply",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Two curved up and left pointing arrows.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData reply_all = IconData(0xf21d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/reply_all-constant.html",
                    "name": "reply_all",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A curved up and left pointing arrow.<\/p>\n<p>For another version of this icon, see <a href=\"cupertino\/CupertinoIcons\/reply-constant.html\">reply<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData reply_thick_solid = IconData(0xf21e, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/reply_thick_solid-constant.html",
                    "name": "reply_thick_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A restart arrow, pointing downwards.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData restart = IconData(0xf21c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/restart-constant.html",
                    "name": "restart",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A thin right chevron.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData right_chevron = IconData(0xf3d3, fontFamily: iconFont, fontPackage: iconFontPackage, matchTextDirection: true)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/right_chevron-constant.html",
                    "name": "right_chevron",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A magnifier loop outline.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData search = IconData(0xf4a5, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/search-constant.html",
                    "name": "search",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cogwheel with many cogs and decoration in the middle. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/settings_solid-constant.html\">settings_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/gear-constant.html\">gear<\/a>, which is another cogwheel with a different design.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData settings = IconData(0xf411, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/settings-constant.html",
                    "name": "settings",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A cogwheel with many cogs and decoration in the middle. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/settings-constant.html\">settings<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/gear_solid-constant.html\">gear_solid<\/a>, which is another cogwheel with a different design.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData settings_solid = IconData(0xf412, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/settings_solid-constant.html",
                    "name": "settings_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>iOS style share icon with an arrow pointing up from a box. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/share_solid-constant.html\">share_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/share_up-constant.html\">share_up<\/a>, for another (pre-iOS 7) version of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData share = IconData(0xf4ca, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/share-constant.html",
                    "name": "share",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>iOS style share icon with an arrow pointing up from a box. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/share-constant.html\">share<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/share_up-constant.html\">share_up<\/a>, for another (pre-iOS 7) version of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData share_solid = IconData(0xf4cb, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/share_solid-constant.html",
                    "name": "share_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>iOS style share icon with an arrow pointing upwards to the right from a box.<\/p>\n<p>For another version of this icon (introduced in iOS 7), see <a href=\"cupertino\/CupertinoIcons\/share-constant.html\">share<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData share_up = IconData(0xf220, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/share_up-constant.html",
                    "name": "share_up",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A right-facing shopping cart outline.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData shopping_cart = IconData(0xf3f7, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/shopping_cart-constant.html",
                    "name": "shopping_cart",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Two right-facing intertwined arrows.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData shuffle_thick = IconData(0xf221, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/shuffle_thick-constant.html",
                    "name": "shuffle_thick",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A camera containing two circular arrows pointing at each other, which indicate switching. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/switch_camera_solid-constant.html\">switch_camera_solid<\/a>, which is similar, but filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData switch_camera = IconData(0xf49e, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/switch_camera-constant.html",
                    "name": "switch_camera",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A camera containing two circular arrows pointing at each other, which indicate switching. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/switch_camera-constant.html\">switch_camera<\/a>, which is similar, but not filled in.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData switch_camera_solid = IconData(0xf49f, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/switch_camera_solid-constant.html",
                    "name": "switch_camera_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Outline of a sticker tag.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/tags-constant.html\">tags<\/a>, similar but with 2 overlapping tags.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData tag = IconData(0xf48c, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/tag-constant.html",
                    "name": "tag",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A sticker tag. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/tags_solid-constant.html\">tags_solid<\/a>, similar but with 2 overlapping tags.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData tag_solid = IconData(0xf48d, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/tag_solid-constant.html",
                    "name": "tag_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>Outlines of 2 overlapping sticker tags.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/tag-constant.html\">tag<\/a>, similar but with only one tag.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData tags = IconData(0xf48e, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/tags-constant.html",
                    "name": "tags",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>2 overlapping sticker tags. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/tag_solid-constant.html\">tag_solid<\/a>, similar but with only one tag.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData tags_solid = IconData(0xf48f, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/tags_solid-constant.html",
                    "name": "tags_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A circle with with a 90 degree angle shape in the center, resembling a clock with hands showing 09:00.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/time_solid-constant.html\">time_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clock-constant.html\">clock<\/a>, which is similar, but with dots on the clock face.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clock_solid-constant.html\">clock_solid<\/a>, which is similar, but filled in and with dots on the clock face.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData time = IconData(0xf402, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/time-constant.html",
                    "name": "time",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in circle with with a 90 degree angle shape in the center, resembling a clock with hands showing 09:00.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/time-constant.html\">time<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clock-constant.html\">clock<\/a>, which is similar, but not filled in and with dots on the clock face.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/clock_solid-constant.html\">clock_solid<\/a>, which is similar, but with dots on the clock face.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData time_solid = IconData(0xf403, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/time_solid-constant.html",
                    "name": "time_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in train with a window divided in half and two headlights.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/train_style_two-constant.html\">train_style_two<\/a>, similar, but with a full, undivided window and a single, centered headlight.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData train_style_one = IconData(0xf3af, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/train_style_one-constant.html",
                    "name": "train_style_one",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A filled in train with a window and a single, centered headlight.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoIcons\/train_style_one-constant.html\">train_style_one<\/a>, similar, but with a with a window divided in half and two headlights.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData train_style_two = IconData(0xf3b4, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/train_style_two-constant.html",
                    "name": "train_style_two",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A solid up arrow.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData up_arrow = IconData(0xf366, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/up_arrow-constant.html",
                    "name": "up_arrow",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A camera for moving pictures. This icon is not filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/video_camera_solid-constant.html\">video_camera_solid<\/a>, which is similar, but filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/photo_camera-constant.html\">photo_camera<\/a>, for the still photograph equivalent.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData video_camera = IconData(0xf4cc, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/video_camera-constant.html",
                    "name": "video_camera",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A camera for moving pictures. This icon is filled in.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/video_camera-constant.html\">video_camera<\/a>, which is similar, but not filled in.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/photo_camera_solid-constant.html\">photo_camera_solid<\/a>, for the still photograph equivalent.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData video_camera_solid = IconData(0xf4cd, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/video_camera_solid-constant.html",
                    "name": "video_camera_solid",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A speaker with a single small sound wave.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_mute-constant.html\">volume_mute<\/a>, which is similar, but has no sound waves.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_off-constant.html\">volume_off<\/a>, which is similar, but with an additional larger sound wave and a diagonal line crossing the whole icon.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_up-constant.html\">volume_up<\/a>, which has an additional larger sound wave next to the small one.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData volume_down = IconData(0xf3b7, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/volume_down-constant.html",
                    "name": "volume_down",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A speaker symbol.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_down-constant.html\">volume_down<\/a>, which is similar, but adds a small sound wave.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_off-constant.html\">volume_off<\/a>, which is similar, but adds a small and a large sound wave and a diagonal line crossing the whole icon.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_up-constant.html\">volume_up<\/a>, which is similar, but has a small and a large sound wave.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData volume_mute = IconData(0xf3b8, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/volume_mute-constant.html",
                    "name": "volume_mute",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A speaker with a small and a large sound wave and a diagonal line crossing the whole icon.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_down-constant.html\">volume_down<\/a>, which is similar, but not crossed out and only has the small wave.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_mute-constant.html\">volume_mute<\/a>, which is similar, but not crossed out.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_up-constant.html\">volume_up<\/a>, which is the version of this icon that is not crossed out.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData volume_off = IconData(0xf3b9, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/volume_off-constant.html",
                    "name": "volume_off",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                },
                {
                    "desc": "<p>A speaker with a small and a large sound wave.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_down-constant.html\">volume_down<\/a>, which is similar, but only has the small sound wave.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_mute-constant.html\">volume_mute<\/a>, which is similar, but has no sound waves.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoIcons\/volume_off-constant.html\">volume_off<\/a>, which is the crossed out version of this icon.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const IconData volume_up = IconData(0xf3ba, fontFamily: iconFont, fontPackage: iconFontPackage)\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoIcons\/volume_up-constant.html",
                    "name": "volume_up",
                    "isDeprecated": false,
                    "type": "widgets.IconData",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoIcons",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Defines the localized resource values used by the Cupertino widgets.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/DefaultCupertinoLocalizations-class.html\">DefaultCupertinoLocalizations<\/a>, the default, English-only, implementation\nof this interface.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoLocalizations-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoLocalizations",
            "shortname": "CupertinoLocalizations",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "cupertino\/CupertinoLocalizations\/CupertinoLocalizations.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoLocalizations",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>Day of month that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding\nto the given day index.<\/p>\n<p>Examples: datePickerDayOfMonth(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Korean: 1\uc77c<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString datePickerDayOfMonth(int dayIndex);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerDayOfMonth.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerDayOfMonth",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "dayIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Hour that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding\nto the given hour value.<\/p>\n<p>Examples: datePickerHour(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0660\u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString datePickerHour(int hour);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerHour.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerHour",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Semantics label for the given hour value in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString datePickerHourSemanticsLabel(int hour);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerHourSemanticsLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerHourSemanticsLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>The medium-width date format that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>\nspinner. Abbreviates month and days of week.<\/p>\n<p>Examples:<\/p>\n<ul>\n<li>US English: Wed Sep 27<\/li>\n<li>Russian: \u0441\u0440 \u0441\u0435\u043d\u0442. 27<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version is based on intl package's DateFormat.MMMEd.\nString datePickerMediumDate(DateTime date);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerMediumDate.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMediumDate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "date",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Minute that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding\nto the given minute value.<\/p>\n<p>Examples: datePickerMinute(1) in:<\/p>\n<ul>\n<li>US English: 01<\/li>\n<li>Arabic: \u0660\u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString datePickerMinute(int minute);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerMinute.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMinute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Semantics label for the given minute value in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString datePickerMinuteSemanticsLabel(int minute);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerMinuteSemanticsLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMinuteSemanticsLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Month that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding to\nthe given month index.<\/p>\n<p>Examples: datePickerMonth(1) in:<\/p>\n<ul>\n<li>US English: January<\/li>\n<li>Korean: 1\uc6d4<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString datePickerMonth(int monthIndex);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerMonth.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMonth",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "monthIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Year that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding to the\ngiven year index.<\/p>\n<p>Examples: datePickerYear(1) in:<\/p>\n<ul>\n<li>US English: 2018<\/li>\n<li>Korean: 2018\ub144<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString datePickerYear(int yearIndex);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerYear.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerYear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "yearIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>The <code>CupertinoLocalizations<\/code> from the closest <a href=\"widgets\/Localizations-class.html\">Localizations<\/a> instance\nthat encloses the given context.<\/p>\n<p>This method is just a convenient shorthand for:\n<code>Localizations.of&lt;CupertinoLocalizations&gt;(context, CupertinoLocalizations)<\/code>.<\/p>\n<p>References to the localized resources defined by this class are typically\nwritten in terms of this method. For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">CupertinoLocalizations.of(context).anteMeridiemAbbreviation;\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static CupertinoLocalizations of(BuildContext context) {\n  return Localizations.of&lt;CupertinoLocalizations&gt;(context, CupertinoLocalizations);\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/of.html",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoLocalizations",
                    "name": "of",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                },
                {
                    "desc": "<p>Hour that is shown in <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> corresponding to\nthe given hour value.<\/p>\n<p>Examples: timerPickerHour(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString timerPickerHour(int hour);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/timerPickerHour.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerHour",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Label that appears next to the hour picker in\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> when selected hour value is <code>hour<\/code>.\nThis function will deal with pluralization based on the <code>hour<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString timerPickerHourLabel(int hour);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/timerPickerHourLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerHourLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Minute that is shown in <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> corresponding to\nthe given minute value.<\/p>\n<p>Examples: timerPickerMinute(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString timerPickerMinute(int minute);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/timerPickerMinute.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerMinute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Label that appears next to the minute picker in\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> when selected minute value is <code>minute<\/code>.\nThis function will deal with pluralization based on the <code>minute<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString timerPickerMinuteLabel(int minute);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/timerPickerMinuteLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerMinuteLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Second that is shown in <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> corresponding to\nthe given second value.<\/p>\n<p>Examples: timerPickerSecond(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses date symbols data from the intl package.\nString timerPickerSecond(int second);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/timerPickerSecond.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerSecond",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "second",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Label that appears next to the minute picker in\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> when selected minute value is <code>second<\/code>.\nThis function will deal with pluralization based on the <code>second<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString timerPickerSecondLabel(int second);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoLocalizations\/timerPickerSecondLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerSecondLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": [
                        {
                            "name": "second",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The term used by the system to announce dialog alerts.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get alertDialogLabel;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/alertDialogLabel.html",
                    "name": "alertDialogLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The abbreviation for ante meridiem (before noon) shown in the time picker.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get anteMeridiemAbbreviation;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/anteMeridiemAbbreviation.html",
                    "name": "anteMeridiemAbbreviation",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for copying<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get copyButtonLabel;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/copyButtonLabel.html",
                    "name": "copyButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for cutting<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get cutButtonLabel;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/cutButtonLabel.html",
                    "name": "cutButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The order of the date elements that will be shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nDatePickerDateOrder get datePickerDateOrder;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerDateOrder.html",
                    "name": "datePickerDateOrder",
                    "isDeprecated": false,
                    "type": "cupertino.DatePickerDateOrder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The order of the time elements that will be shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nDatePickerDateTimeOrder get datePickerDateTimeOrder;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/datePickerDateTimeOrder.html",
                    "name": "datePickerDateTimeOrder",
                    "isDeprecated": false,
                    "type": "cupertino.DatePickerDateTimeOrder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for pasting<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get pasteButtonLabel;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/pasteButtonLabel.html",
                    "name": "pasteButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The abbreviation for post meridiem (after noon) shown in the time picker.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get postMeridiemAbbreviation;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/postMeridiemAbbreviation.html",
                    "name": "postMeridiemAbbreviation",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for selecting everything<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ The global version uses the translated string from the arb file.\nString get selectAllButtonLabel;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoLocalizations\/selectAllButtonLabel.html",
                    "name": "selectAllButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoLocalizations",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-styled navigation bar.<\/p>\n<p>The navigation bar is a toolbar that minimally consists of a widget, normally\na page title, in the <a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> of the toolbar.<\/p>\n<p>It also supports a <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a> and <a href=\"cupertino\/CupertinoNavigationBar\/trailing.html\">trailing<\/a> widget before and after the\n<a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> widget while keeping the <a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> widget centered.<\/p>\n<p>The <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a> widget will automatically be a back chevron icon button (or a\nclose button in case of a fullscreen dialog) to pop the current route if none\nis provided and <a href=\"cupertino\/CupertinoNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is true (true by default).<\/p>\n<p>The <a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> widget will automatically be a title text from the current\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> if none is provided and <a href=\"cupertino\/CupertinoNavigationBar\/automaticallyImplyMiddle.html\">automaticallyImplyMiddle<\/a> is\ntrue (true by default).<\/p>\n<p>It should be placed at top of the screen and automatically accounts for\nthe OS's status bar.<\/p>\n<p>If the given <a href=\"cupertino\/CupertinoNavigationBar\/backgroundColor.html\">backgroundColor<\/a>'s opacity is not 1.0 (which is the case by\ndefault), it will produce a blurring effect to the content behind it.<\/p>\n<p>When <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is true, this navigation bar will transition\non top of the routes instead of inside them if the route being transitioned\nto also has a <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> or a <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>\nwith <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> set to true. If <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is\ntrue, none of the <a href=\"widgets\/Widget-class.html\">Widget<\/a> parameters can contain a key in its subtree since\nthat widget will exist in multiple places in the tree simultaneously.<\/p>\n<p>By default, only one <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> or <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>\nshould be present in each <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> to support the default transitions.\nUse <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> or <a href=\"cupertino\/CupertinoNavigationBar\/heroTag.html\">heroTag<\/a> to customize the transition\nbehavior for multiple navigation bars per route.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>, a page layout helper typically hosting the\n<a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a> for a navigation bar to be placed in a\nscrolling list and that supports iOS-11-style large titles.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoNavigationBar-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoNavigationBar",
            "shortname": "CupertinoNavigationBar",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a navigation bar in the iOS style.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoNavigationBar({\n  Key key,\n  this.leading,\n  this.automaticallyImplyLeading = true,\n  this.automaticallyImplyMiddle = true,\n  this.previousPageTitle,\n  this.middle,\n  this.trailing,\n  this.border = _kDefaultNavBarBorder,\n  this.backgroundColor,\n  this.padding,\n  this.actionsForegroundColor,\n  this.transitionBetweenRoutes = true,\n  this.heroTag = _defaultHeroTag,\n}) : assert(automaticallyImplyLeading != null),\n     assert(automaticallyImplyMiddle != null),\n     assert(transitionBetweenRoutes != null),\n     assert(\n       heroTag != null,\n       'heroTag cannot be null. Use transitionBetweenRoutes = false to '\n       'disable Hero transition on this navigation bar.'\n     ),\n     assert(\n       !transitionBetweenRoutes || identical(heroTag, _defaultHeroTag),\n       'Cannot specify a heroTag override if this navigation bar does not '\n       'transition due to transitionBetweenRoutes = false.'\n     ),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoNavigationBar\/CupertinoNavigationBar.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoNavigationBar",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": [
                        {
                            "name": "actionsForegroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "automaticallyImplyLeading",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "automaticallyImplyMiddle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "border",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.Border"
                        },
                        {
                            "name": "heroTag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "leading",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "middle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "padding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.EdgeInsetsDirectional"
                        },
                        {
                            "name": "previousPageTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "trailing",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "transitionBetweenRoutes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoNavigationBar\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoNavigationBarState createState() {\n  return _CupertinoNavigationBarState();\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoNavigationBar\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoNavigationBarState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Default color used for text and icons of the <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a> and <a href=\"cupertino\/CupertinoNavigationBar\/trailing.html\">trailing<\/a>\nwidgets in the navigation bar.<\/p>\n<p>Defaults to the <code>primaryColor<\/code> of the <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> when null.\nThe default color for text in the <a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> slot is always black, as per\niOS standard design.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color actionsForegroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/actionsForegroundColor.html",
                    "name": "actionsForegroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Controls whether we should try to imply the leading widget if null.<\/p>\n<p>If true and <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a> is null, automatically try to deduce what the <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a>\nwidget should be. If <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a> widget is not null, this parameter has no effect.<\/p>\n<p>Specifically this navigation bar will:<\/p>\n<ol>\n<li>Show a 'Close' button if the current route is a <code>fullscreenDialog<\/code>.<\/li>\n<li>Show a back chevron with <a href=\"cupertino\/CupertinoNavigationBar\/previousPageTitle.html\">previousPageTitle<\/a> if <a href=\"cupertino\/CupertinoNavigationBar\/previousPageTitle.html\">previousPageTitle<\/a> is\nnot null.<\/li>\n<li>Show a back chevron with the previous route's <code>title<\/code> if the current\nroute is a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> and the previous route is also a\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.<\/li>\n<\/ol>\n<p>This value cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool automaticallyImplyLeading\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/automaticallyImplyLeading.html",
                    "name": "automaticallyImplyLeading",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Controls whether we should try to imply the middle widget if null.<\/p>\n<p>If true and <a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> is null, automatically fill in a <a href=\"widgets\/Text-class.html\">Text<\/a> widget with\nthe current route's <code>title<\/code> if the route is a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.\nIf <a href=\"cupertino\/CupertinoNavigationBar\/middle.html\">middle<\/a> widget is not null, this parameter has no effect.<\/p>\n<p>This value cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool automaticallyImplyMiddle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/automaticallyImplyMiddle.html",
                    "name": "automaticallyImplyMiddle",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>The background color of the navigation bar. If it contains transparency, the\ntab bar will automatically produce a blurring effect to the content\nbehind it.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>barBackgroundColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/backgroundColor.html",
                    "name": "backgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>The border of the navigation bar. By default renders a single pixel bottom border side.<\/p>\n<p>If a border is null, the navigation bar will not display a border.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Border border\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/border.html",
                    "name": "border",
                    "isDeprecated": false,
                    "type": "painting.Border",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>True if the navigation bar's background color has no transparency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get fullObstruction =&gt; backgroundColor == null ? null : backgroundColor.alpha == 0xFF;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/fullObstruction.html",
                    "name": "fullObstruction",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Tag for the navigation bar's Hero widget if <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is true.<\/p>\n<p>Defaults to a common tag between all <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> and\n<a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a> instances of the same <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>. With the\ndefault tag, all navigation bars of the same navigator can transition\nbetween each other as long as there's only one navigation bar per route.<\/p>\n<p>This <a href=\"cupertino\/CupertinoNavigationBar\/heroTag.html\">heroTag<\/a> can be overridden to manually handle having multiple\nnavigation bars per route or to transition between multiple\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s.<\/p>\n<p>Cannot be null. To disable Hero transitions for this navigation bar,\nset <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> to false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object heroTag\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/heroTag.html",
                    "name": "heroTag",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Widget to place at the start of the navigation bar. Normally a back button\nfor a normal page or a cancel button for full page dialogs.<\/p>\n<p>If null and <a href=\"cupertino\/CupertinoNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is true, an appropriate button\nwill be automatically created.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget leading\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/leading.html",
                    "name": "leading",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Widget to place in the middle of the navigation bar. Normally a title or\na segmented control.<\/p>\n<p>If null and <a href=\"cupertino\/CupertinoNavigationBar\/automaticallyImplyMiddle.html\">automaticallyImplyMiddle<\/a> is true, an appropriate <a href=\"widgets\/Text-class.html\">Text<\/a>\ntitle will be created if the current route is a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> and\nhas a <code>title<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget middle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/middle.html",
                    "name": "middle",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Padding for the contents of the navigation bar.<\/p>\n<p>If null, the navigation bar will adopt the following defaults:<\/p>\n<ul>\n<li>Vertically, contents will be sized to the same height as the navigation\nbar itself minus the status bar.<\/li>\n<li>Horizontally, padding will be 16 pixels according to iOS specifications\nunless the leading widget is an automatically inserted back button, in\nwhich case the padding will be 0.<\/li>\n<\/ul>\n<p>Vertical padding won't change the height of the nav bar.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsDirectional padding\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/padding.html",
                    "name": "padding",
                    "isDeprecated": false,
                    "type": "painting.EdgeInsetsDirectional",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>The size this widget would prefer if it were otherwise unconstrained.<\/p>\n<p>In many cases it's only necessary to define one preferred dimension.\nFor example the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> only depends on its app bar's preferred\nheight. In that case implementations of this method can just return\n<code>new Size.fromHeight(myAppBarHeight)<\/code>;<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize get preferredSize {\n  return const Size.fromHeight(_kNavBarPersistentHeight);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/preferredSize.html",
                    "name": "preferredSize",
                    "isDeprecated": false,
                    "type": "dart:ui.Size",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Manually specify the previous route's title when automatically implying\nthe leading back button.<\/p>\n<p>Overrides the text shown with the back chevron instead of automatically\nshowing the previous <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>'s <code>title<\/code> when\n<a href=\"cupertino\/CupertinoNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is true.<\/p>\n<p>Has no effect when <a href=\"cupertino\/CupertinoNavigationBar\/leading.html\">leading<\/a> is not null or if <a href=\"cupertino\/CupertinoNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a>\nis false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String previousPageTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/previousPageTitle.html",
                    "name": "previousPageTitle",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Widget to place at the end of the navigation bar. Normally additional actions\ntaken on the page such as a search or edit function.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget trailing\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/trailing.html",
                    "name": "trailing",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Whether to transition between navigation bars.<\/p>\n<p>When <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is true, this navigation bar will transition\non top of the routes instead of inside it if the route being transitioned\nto also has a <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> or a <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>\nwith <a href=\"cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> set to true.<\/p>\n<p>This transition will also occur on edge back swipe gestures like on iOS\nbut only if the previous page below has <code>maintainState<\/code> set to true on the\n<a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>.<\/p>\n<p>When set to true, only one navigation bar can be present per route unless\n<a href=\"cupertino\/CupertinoNavigationBar\/heroTag.html\">heroTag<\/a> is also set.<\/p>\n<p>This value defaults to true and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool transitionBetweenRoutes\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBar\/transitionBetweenRoutes.html",
                    "name": "transitionBetweenRoutes",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBar",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A nav bar back button typically used in <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>.<\/p>\n<p>This is automatically inserted into <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> and\n<a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>'s <code>leading<\/code> slot when\n<code>automaticallyImplyLeading<\/code> is true.<\/p>\n<p>Shows a back chevron and the previous route's title when available from\nthe previous <a href=\"cupertino\/CupertinoPageRoute\/title.html\">CupertinoPageRoute.title<\/a>. If <a href=\"cupertino\/CupertinoNavigationBarBackButton\/previousPageTitle.html\">previousPageTitle<\/a> is specified,\nit will be shown instead.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoNavigationBarBackButton-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoNavigationBarBackButton",
            "shortname": "CupertinoNavigationBarBackButton",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Construct a <a href=\"cupertino\/CupertinoNavigationBarBackButton-class.html\">CupertinoNavigationBarBackButton<\/a> that can be used to pop\nthe current route.<\/p>\n<p>The <code>color<\/code> parameter must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoNavigationBarBackButton({\n  this.color,\n  this.previousPageTitle,\n}) : _backChevron = null,\n     _backLabel = null;<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoNavigationBarBackButton\/CupertinoNavigationBarBackButton.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoNavigationBarBackButton",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoNavigationBarBackButton",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "previousPageTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoNavigationBarBackButton\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final ModalRoute&lt;dynamic&gt; currentRoute = ModalRoute.of(context);\n  assert(\n    currentRoute.canPop,\n    'CupertinoNavigationBarBackButton should only be used in routes that can be popped',\n  );\n\n  TextStyle actionTextStyle = CupertinoTheme.of(context).textTheme.navActionTextStyle;\n  if (color != null) {\n    actionTextStyle = actionTextStyle.copyWith(color: color);\n  }\n\n  return CupertinoButton(\n    child: Semantics(\n      container: true,\n      excludeSemantics: true,\n      label: 'Back',\n      button: true,\n      child: DefaultTextStyle(\n        style: actionTextStyle,\n        child: ConstrainedBox(\n          constraints: const BoxConstraints(minWidth: _kNavBarBackButtonTapWidth),\n          child: Row(\n            mainAxisSize: MainAxisSize.min,\n            mainAxisAlignment: MainAxisAlignment.start,\n            children: &lt;Widget&gt;[\n              const Padding(padding: EdgeInsetsDirectional.only(start: 8.0)),\n              _backChevron ?? const _BackChevron(),\n              const Padding(padding: EdgeInsetsDirectional.only(start: 6.0)),\n              Flexible(\n                child: _backLabel ?? _BackLabel(\n                  specifiedPreviousTitle: previousPageTitle,\n                  route: currentRoute,\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    ),\n    padding: EdgeInsets.zero,\n    onPressed: () { Navigator.maybePop(context); },\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoNavigationBarBackButton\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoNavigationBarBackButton",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The <a href=\"dart-ui\/Color-class.html\">Color<\/a> of the back button.<\/p>\n<p>Can be used to override the color of the back button chevron and label.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>primaryColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBarBackButton\/color.html",
                    "name": "color",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBarBackButton",
                    "params": []
                },
                {
                    "desc": "<p>An override for showing the previous route's title. If null, it will be\nautomatically derived from <a href=\"cupertino\/CupertinoPageRoute\/title.html\">CupertinoPageRoute.title<\/a> if the current and\nprevious routes are both <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>s.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String previousPageTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoNavigationBarBackButton\/previousPageTitle.html",
                    "name": "previousPageTitle",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoNavigationBarBackButton",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A modal route that replaces the entire screen with an iOS transition.<\/p>\n<p>The page slides in from the right and exits in reverse. The page also shifts\nto the left in parallax when another page enters to cover it.<\/p>\n<p>The page slides in from the bottom and exits in reverse with no parallax\neffect for fullscreen dialogs.<\/p>\n<p>By default, when a modal route is replaced by another, the previous route\nremains in memory. To free all the resources when this is not necessary, set\n<a href=\"cupertino\/CupertinoPageRoute\/maintainState.html\">maintainState<\/a> to false.<\/p>\n<p>The type <code>T<\/code> specifies the return type of the route which can be supplied as\nthe route is popped from the stack via <a href=\"widgets\/Navigator\/pop.html\">Navigator.pop<\/a> when an optional\n<code>result<\/code> can be provided.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/MaterialPageRoute-class.html\">MaterialPageRoute<\/a>, for an adaptive <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> that uses a\nplatform-appropriate transition.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>, for applications that have one page with a fixed\nnavigation bar on top.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>, for applications that have a tab bar at the\nbottom with multiple pages.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoPageRoute-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoPageRoute",
            "shortname": "CupertinoPageRoute",
            "extends": [
                "widgets.PageRoute",
                "widgets.ModalRoute",
                "widgets.TransitionRoute",
                "widgets.OverlayRoute",
                "widgets.Route",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Builds the primary contents of the route.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WidgetBuilder builder\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/builder.html",
                    "isDeprecated": false,
                    "type": "widgets.WidgetBuilder",
                    "name": "builder",
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a page route for use in an iOS designed app.<\/p>\n<p>The <code>builder<\/code>, <code>maintainState<\/code>, and <code>fullscreenDialog<\/code> arguments must not\nbe null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoPageRoute({\n  @required this.builder,\n  this.title,\n  RouteSettings settings,\n  this.maintainState = true,\n  bool fullscreenDialog = false,\n}) : assert(builder != null),\n     assert(maintainState != null),\n     assert(fullscreenDialog != null),\n     assert(opaque),\n     super(settings: settings, fullscreenDialog: fullscreenDialog);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/CupertinoPageRoute.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoPageRoute",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "builder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.WidgetBuilder"
                        },
                        {
                            "name": "fullscreenDialog",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "maintainState",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "settings",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.RouteSettings"
                        },
                        {
                            "name": "title",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Override this method to build the primary content of this route.<\/p>\n<p>The arguments have the following meanings:<\/p>\n<ul>\n<li>\n<code>context<\/code>: The context in which the route is being built.<\/li>\n<li>\n<code>animation<\/code>: The animation for this route's transition. When entering,\nthe animation runs forward from 0.0 to 1.0. When exiting, this animation\nruns backwards from 1.0 to 0.0.<\/li>\n<li>\n<code>secondaryAnimation<\/code>: The animation for the route being pushed on top of\nthis route. This animation lets this route coordinate with the entrance\nand exit transition of routes pushed on top of this route.<\/li>\n<\/ul>\n<p>This method is only called when the route is first built, and rarely\nthereafter. In particular, it is not automatically called again when the\nroute's state changes unless it uses <a href=\"widgets\/ModalRoute\/of.html\">ModalRoute.of<\/a>. For a builder that\nis called every time the route's state changes, consider\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a>. For widgets that change their behavior when the\nroute's state changes, consider <a href=\"widgets\/ModalRoute\/of.html\">ModalRoute.of<\/a> to obtain a reference to\nthe route; this will cause the widget to be rebuilt each time the route\nchanges state.<\/p>\n<p>In general, <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a> should be used to build the page contents, and\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> for the widgets that change as the page is brought in\nand out of view. Avoid using <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> for content that never\nchanges; building such content once from <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a> is more efficient.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildPage(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation) {\n  final Widget result = Semantics(\n    scopesRoute: true,\n    explicitChildNodes: true,\n    child: builder(context),\n  );\n  assert(() {\n    if (result == null) {\n      throw FlutterError(\n        'The builder for route \"${settings.name}\" returned null.\\n'\n        'Route builders must never return null.'\n      );\n    }\n    return true;\n  }());\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/buildPage.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "buildPage",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "animation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        },
                        {
                            "name": "secondaryAnimation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a <a href=\"cupertino\/CupertinoFullscreenDialogTransition-class.html\">CupertinoFullscreenDialogTransition<\/a> if <code>route<\/code> is a full\nscreen dialog, otherwise a <a href=\"cupertino\/CupertinoPageTransition-class.html\">CupertinoPageTransition<\/a> is returned.<\/p>\n<p>Used by <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">CupertinoPageRoute.buildTransitions<\/a>.<\/p>\n<p>This method can be applied to any <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>, not just\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>. It's typically used to provide a Cupertino style\nhorizontal transition for material widgets when the target platform\nis <a href=\"foundation\/TargetPlatform-class.html\">TargetPlatform.iOS<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"material\/CupertinoPageTransitionsBuilder-class.html\">CupertinoPageTransitionsBuilder<\/a>, which uses this method to define a\n<a href=\"material\/PageTransitionsBuilder-class.html\">PageTransitionsBuilder<\/a> for the <a href=\"material\/PageTransitionsTheme-class.html\">PageTransitionsTheme<\/a>.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Widget buildPageTransitions&lt;T&gt;(\n  PageRoute&lt;T&gt; route,\n  BuildContext context,\n  Animation&lt;double&gt; animation,\n  Animation&lt;double&gt; secondaryAnimation,\n  Widget child,\n) {\n  if (route.fullscreenDialog) {\n    return CupertinoFullscreenDialogTransition(\n      animation: animation,\n      child: child,\n    );\n  } else {\n    return CupertinoPageTransition(\n      primaryRouteAnimation: animation,\n      secondaryRouteAnimation: secondaryAnimation,\n      \/\/ In the middle of a back gesture drag, let the transition be linear to\n      \/\/ match finger motions.\n      linearTransition: _popGestureInProgress.contains(route),\n      child: _CupertinoBackGestureDetector&lt;T&gt;(\n        enabledCallback: () =&gt; _isPopGestureEnabled&lt;T&gt;(route),\n        onStartPopGesture: () =&gt; _startPopGesture&lt;T&gt;(route),\n        child: child,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/buildPageTransitions.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "buildPageTransitions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "animation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        },
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.PageRoute"
                        },
                        {
                            "name": "secondaryAnimation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Override this method to wrap the <code>child<\/code> with one or more transition\nwidgets that define how the route arrives on and leaves the screen.<\/p>\n<p>By default, the child (which contains the widget returned by <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>)\nis not wrapped in any transition widgets.<\/p>\n<p>The <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method, in contrast to <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>, is called each\ntime the <a href=\"widgets\/Route-class.html\">Route<\/a>'s state changes (e.g. the value of <a href=\"widgets\/ModalRoute\/canPop.html\">canPop<\/a>).<\/p>\n<p>The <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method is typically used to define transitions\nthat animate the new topmost route's comings and goings. When the\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack, the new route's\nprimary <code>animation<\/code> runs from 0.0 to 1.0. When the Navigator pops the\ntopmost route, e.g. because the use pressed the back button, the\nprimary animation runs from 1.0 to 0.0.<\/p>\n<p>The following example uses the primary animation to drive a\n<a href=\"widgets\/SlideTransition-class.html\">SlideTransition<\/a> that translates the top of the new route vertically\nfrom the bottom of the screen when it is pushed on the Navigator's\nstack. When the route is popped the SlideTransition translates the\nroute from the top of the screen back to the bottom.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">PageRouteBuilder(\n  pageBuilder: (BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n  ) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Hello')),\n      body: Center(\n        child: Text('Hello World'),\n      ),\n    );\n  },\n  transitionsBuilder: (\n      BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n   ) {\n    return SlideTransition(\n      position: Tween&lt;Offset&gt;(\n        begin: const Offset(0.0, 1.0),\n        end: Offset.zero,\n      ).animate(animation),\n      child: child, \/\/ child is the value returned by pageBuilder\n    );\n  },\n);\n<\/code><\/pre>\n<p>We've used <a href=\"widgets\/PageRouteBuilder-class.html\">PageRouteBuilder<\/a> to demonstrate the <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method\nhere. The body of an override of the <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> method would be\ndefined in the same way.<\/p>\n<p>When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack, the\n<code>secondaryAnimation<\/code> can be used to define how the route that was on\nthe top of the stack leaves the screen. Similarly when the topmost route\nis popped, the secondaryAnimation can be used to define how the route\nbelow it reappears on the screen. When the Navigator pushes a new route\non the top of its stack, the old topmost route's secondaryAnimation\nruns from 0.0 to 1.0. When the Navigator pops the topmost route, the\nsecondaryAnimation for the route below it runs from 1.0 to 0.0.<\/p>\n<p>The example below adds a transition that's driven by the\n<code>secondaryAnimation<\/code>. When this route disappears because a new route has\nbeen pushed on top of it, it translates in the opposite direction of\nthe new route. Likewise when the route is exposed because the topmost\nroute has been popped off.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">  transitionsBuilder: (\n      BuildContext context,\n      Animation&lt;double&gt; animation,\n      Animation&lt;double&gt; secondaryAnimation,\n      Widget child,\n  ) {\n    return SlideTransition(\n      position: AlignmentTween(\n        begin: const Offset(0.0, 1.0),\n        end: Offset.zero,\n      ).animate(animation),\n      child: SlideTransition(\n        position: TweenOffset(\n          begin: Offset.zero,\n          end: const Offset(0.0, 1.0),\n        ).animate(secondaryAnimation),\n        child: child,\n      ),\n    );\n  }\n<\/code><\/pre>\n<p>In practice the <code>secondaryAnimation<\/code> is used pretty rarely.<\/p>\n<p>The arguments to this method are as follows:<\/p>\n<ul>\n<li>\n<code>context<\/code>: The context in which the route is being built.<\/li>\n<li>\n<code>animation<\/code>: When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pushes a route on the top of its stack,\nthe new route's primary <code>animation<\/code> runs from 0.0 to 1.0. When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>\npops the topmost route this animation runs from 1.0 to 0.0.<\/li>\n<li>\n<code>secondaryAnimation<\/code>: When the Navigator pushes a new route\non the top of its stack, the old topmost route's <code>secondaryAnimation<\/code>\nruns from 0.0 to 1.0. When the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> pops the topmost route, the\n<code>secondaryAnimation<\/code> for the route below it runs from 1.0 to 0.0.<\/li>\n<li>\n<code>child<\/code>, the page contents, as returned by <a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>.<\/li>\n<\/ul>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/buildPage.html\">buildPage<\/a>, which is used to describe the actual contents of the page,\nand whose result is passed to the <code>child<\/code> argument of this method.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget buildTransitions(BuildContext context, Animation&lt;double&gt; animation, Animation&lt;double&gt; secondaryAnimation, Widget child) {\n  return buildPageTransitions&lt;T&gt;(this, context, animation, secondaryAnimation, child);\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/buildTransitions.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "buildTransitions",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "animation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        },
                        {
                            "name": "secondaryAnimation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if <code>previousRoute<\/code> should animate when this route\nis pushed on top of it or when then this route is popped off of it.<\/p>\n<p>Subclasses can override this method to restrict the set of routes they\nneed to coordinate transitions with.<\/p>\n<p>If true, and <code>previousRoute.canTransitionTo()<\/code> is true, then the\nprevious route's <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> will\nrun from 0.0 - 1.0 when this route is pushed on top of\nit. Similarly, if this route is popped off of <code>previousRoute<\/code>\nthe previous route's <code>secondaryAnimation<\/code> will run from 1.0 - 0.0.<\/p>\n<p>If false, then the previous route's <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a>\n<code>secondaryAnimation<\/code> value will be kAlwaysDismissedAnimation. In\nother words <code>previousRoute<\/code> will not animate when this route is\npushed on top of it or when then this route is popped off of it.<\/p>\n<p>Returns true by default.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/canTransitionTo.html\">canTransitionTo<\/a>, which must be true for <code>previousRoute<\/code> for its\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> to run.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool canTransitionFrom(TransitionRoute&lt;dynamic&gt; previousRoute) {\n  return previousRoute is CupertinoPageRoute;\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/canTransitionFrom.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "canTransitionFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "previousRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.TransitionRoute"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this route supports a transition animation that runs\nwhen <code>nextRoute<\/code> is pushed on top of it or when <code>nextRoute<\/code> is popped\noff of it.<\/p>\n<p>Subclasses can override this method to restrict the set of routes they\nneed to coordinate transitions with.<\/p>\n<p>If true, and <code>nextRoute.canTransitionFrom()<\/code> is true, then the\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> will run from 0.0 - 1.0\nwhen <code>nextRoute<\/code> is pushed on top of this one.  Similarly, if\nthe <code>nextRoute<\/code> is popped off of this route, the\n<code>secondaryAnimation<\/code> will run from 1.0 - 0.0.<\/p>\n<p>If false, this route's <a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> parameter\nvalue will be <a href=\"animation\/kAlwaysDismissedAnimation-constant.html\">kAlwaysDismissedAnimation<\/a>. In other words, this route\nwill not animate when when <code>nextRoute<\/code> is pushed on top of it or when\n<code>nextRoute<\/code> is popped off of it.<\/p>\n<p>Returns true by default.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/canTransitionFrom.html\">canTransitionFrom<\/a>, which must be true for <code>nextRoute<\/code> for the\n<a href=\"cupertino\/CupertinoPageRoute\/buildTransitions.html\">buildTransitions<\/a> <code>secondaryAnimation<\/code> to run.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool canTransitionTo(TransitionRoute&lt;dynamic&gt; nextRoute) {\n  \/\/ Don't perform outgoing animation if the next route is a fullscreen dialog.\n  return nextRoute is CupertinoPageRoute &amp;&amp; !nextRoute.fullscreenDialog;\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/canTransitionTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "canTransitionTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "nextRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.TransitionRoute"
                        }
                    ]
                },
                {
                    "desc": "<p>This route's previous route has changed to the given new route. This is\ncalled on a route whenever the previous route changes for any reason, so\nlong as it is in the history. <code>previousRoute<\/code> will be null if there's no\nprevious route.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid didChangePrevious(Route&lt;dynamic&gt; previousRoute) {\n  final String previousTitleString = previousRoute is CupertinoPageRoute\n      ? previousRoute.title\n      : null;\n  if (_previousTitle == null) {\n    _previousTitle = ValueNotifier&lt;String&gt;(previousTitleString);\n  } else {\n    _previousTitle.value = previousTitleString;\n  }\n  super.didChangePrevious(previousRoute);\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/didChangePrevious.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "didChangePrevious",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "previousRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.Route"
                        }
                    ]
                },
                {
                    "desc": "<p>The route should remove its overlays and free any other resources.<\/p>\n<p>This route is no longer referenced by the navigator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _popGestureInProgress.remove(this);\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>True if a Cupertino pop gesture is currently underway for <code>route<\/code>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoPageRoute\/popGestureEnabled.html\">popGestureEnabled<\/a>, which returns true if a user-triggered pop gesture\nwould be allowed.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isPopGestureInProgress(PageRoute&lt;dynamic&gt; route) =&gt; _popGestureInProgress.contains(route);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isPopGestureInProgress",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": [
                        {
                            "name": "route",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.PageRoute"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The color to use for the modal barrier. If this is null, the barrier will\nbe transparent.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>The color is ignored, and the barrier made invisible, when <a href=\"widgets\/ModalRoute\/offstage.html\">offstage<\/a> is\ntrue.<\/p>\n<p>While the route is animating into position, the color is animated from\ntransparent to the specified color.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRoute\/barrierDismissible.html\">barrierDismissible<\/a>, which controls the behavior of the barrier when\ntapped.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nColor get barrierColor =&gt; null;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/barrierColor.html",
                    "name": "barrierColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>The semantic label used for a dismissible barrier.<\/p>\n<p>If the barrier is dismissible, this label will be read out if\naccessibility tools (like VoiceOver on iOS) focus on the barrier.<\/p>\n<p>The modal barrier is the scrim that is rendered behind each route, which\ngenerally prevents the user from interacting with the route below the\ncurrent route, and normally partially obscures such routes.<\/p>\n<p>For example, when a dialog is on the screen, the page below the dialog is\nusually darkened by the modal barrier.<\/p>\n<p>If this getter would ever start returning a different color,\n<a href=\"widgets\/ModalRoute\/changedInternalState.html\">changedInternalState<\/a> should be invoked so that the change can take\neffect.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/PageRoute\/barrierDismissible.html\">barrierDismissible<\/a>, which controls the behavior of the barrier when\ntapped.<\/li>\n<li>\n<a href=\"widgets\/ModalBarrier-class.html\">ModalBarrier<\/a>, the widget that implements this feature.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get barrierLabel =&gt; null;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/barrierLabel.html",
                    "name": "barrierLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>A short description of this route useful for debugging.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get debugLabel =&gt; '${super.debugLabel}(${settings.name})';<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/debugLabel.html",
                    "name": "debugLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>Whether the route should remain in memory when it is inactive.<\/p>\n<p>If this is true, then the route is maintained, so that any futures it is\nholding from the next route will properly resolve when the next route\npops. If this is not necessary, this can be set to false to allow the\nframework to entirely discard the route's widget hierarchy when it is not\nvisible.<\/p>\n<p>The value of this getter should not change during the lifetime of the\nobject. It is used by <a href=\"widgets\/ModalRoute\/createOverlayEntries.html\">createOverlayEntries<\/a>, which is called by\n<a href=\"widgets\/ModalRoute\/install.html\">install<\/a> near the beginning of the route lifecycle.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maintainState\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/maintainState.html",
                    "name": "maintainState",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>Whether a pop gesture can be started by the user.<\/p>\n<p>Returns true if the user can edge-swipe to a previous route.<\/p>\n<p>Returns false once <a href=\"cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html\">isPopGestureInProgress<\/a> is true, but\n<a href=\"cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html\">isPopGestureInProgress<\/a> can only become true if <a href=\"cupertino\/CupertinoPageRoute\/popGestureEnabled.html\">popGestureEnabled<\/a> was\ntrue first.<\/p>\n<p>This should only be used between frames, not during build.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get popGestureEnabled =&gt; _isPopGestureEnabled(this);<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/popGestureEnabled.html",
                    "name": "popGestureEnabled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>True if a Cupertino pop gesture is currently underway for this route.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute\/isPopGestureInProgress.html\">isPopGestureInProgress<\/a>, which returns true if a Cupertino pop gesture\nis currently underway for specific route.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute\/popGestureEnabled.html\">popGestureEnabled<\/a>, which returns true if a user-triggered pop gesture\nwould be allowed.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get popGestureInProgress =&gt; isPopGestureInProgress(this);<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/popGestureInProgress.html",
                    "name": "popGestureInProgress",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>The title string of the previous <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.<\/p>\n<p>The <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a>'s value is readable after the route is installed\nonto a <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>. The <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> will also notify its listeners\nif the value changes (such as by replacing the previous route).<\/p>\n<p>The <a href=\"foundation\/ValueListenable-class.html\">ValueListenable<\/a> itself will be null before the route is installed.\nIts content value will be null if the previous route has no title or\nis not a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ValueListenableBuilder-class.html\">ValueListenableBuilder<\/a>, which can be used to listen and rebuild\nwidgets based on a ValueListenable.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ValueListenable&lt;String&gt; get previousTitle {\n  assert(\n    _previousTitle != null,\n    'Cannot read the previousTitle for a route that has not yet been installed',\n  );\n  return _previousTitle;\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/previousTitle.html",
                    "name": "previousTitle",
                    "isDeprecated": false,
                    "type": "foundation.ValueListenable<dart:core.String>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>A title string for this route.<\/p>\n<p>Used to auto-populate <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> and\n<a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>'s <code>middle<\/code>\/<code>largeTitle<\/code> widgets when\none is not manually supplied.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String title\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/title.html",
                    "name": "title",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                },
                {
                    "desc": "<p>The duration the transition lasts.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ A relatively rigorous eyeball estimation.\nDuration get transitionDuration =&gt; const Duration(milliseconds: 400);<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageRoute\/transitionDuration.html",
                    "name": "transitionDuration",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageRoute",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Implements a single iOS application page's layout.<\/p>\n<p>The scaffold lays out the navigation bar on top and the content between or\nbehind the navigation bar.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>, a similar widget for tabbed applications.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>, a modal page route that typically hosts a\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a> with support for iOS-style page transitions.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoPageScaffold-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoPageScaffold",
            "shortname": "CupertinoPageScaffold",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a layout for pages with a navigation bar at the top.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoPageScaffold({\n  Key key,\n  this.navigationBar,\n  this.backgroundColor,\n  this.resizeToAvoidBottomInset = true,\n  @required this.child,\n}) : assert(child != null),\n     assert(resizeToAvoidBottomInset != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageScaffold\/CupertinoPageScaffold.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoPageScaffold",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageScaffold",
                    "params": [
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "navigationBar",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.ObstructingPreferredSizeWidget"
                        },
                        {
                            "name": "resizeToAvoidBottomInset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoPageScaffold\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final List&lt;Widget&gt; stacked = &lt;Widget&gt;[];\n\n  Widget paddedContent = child;\n  if (navigationBar != null) {\n    final MediaQueryData existingMediaQuery = MediaQuery.of(context);\n\n    \/\/ TODO(xster): Use real size after partial layout instead of preferred size.\n    \/\/ https:\/\/github.com\/flutter\/flutter\/issues\/12912\n    final double topPadding =\n        navigationBar.preferredSize.height + existingMediaQuery.padding.top;\n\n    \/\/ Propagate bottom padding and include viewInsets if appropriate\n    final double bottomPadding = resizeToAvoidBottomInset\n        ? existingMediaQuery.viewInsets.bottom\n        : 0.0;\n\n    final EdgeInsets newViewInsets = resizeToAvoidBottomInset\n        \/\/ The insets are consumed by the scaffolds and no longer exposed to\n        \/\/ the descendant subtree.\n        ? existingMediaQuery.viewInsets.copyWith(bottom: 0.0)\n        : existingMediaQuery.viewInsets;\n\n    final bool fullObstruction =\n      navigationBar.fullObstruction ?? CupertinoTheme.of(context).barBackgroundColor.alpha == 0xFF;\n\n    \/\/ If navigation bar is opaquely obstructing, directly shift the main content\n    \/\/ down. If translucent, let main content draw behind navigation bar but hint the\n    \/\/ obstructed area.\n    if (fullObstruction) {\n      paddedContent = MediaQuery(\n        data: existingMediaQuery.copyWith(\n          viewInsets: newViewInsets,\n        ),\n        child: Padding(\n          padding: EdgeInsets.only(top: topPadding, bottom: bottomPadding),\n          child: child,\n        ),\n      );\n    } else {\n      paddedContent = MediaQuery(\n        data: existingMediaQuery.copyWith(\n          padding: existingMediaQuery.padding.copyWith(\n            top: topPadding,\n          ),\n          viewInsets: newViewInsets,\n        ),\n        child: Padding(\n          padding: EdgeInsets.only(bottom: bottomPadding),\n          child: child,\n        ),\n      );\n    }\n  }\n\n  \/\/ The main content being at the bottom is added to the stack first.\n  stacked.add(paddedContent);\n\n  if (navigationBar != null) {\n    stacked.add(Positioned(\n      top: 0.0,\n      left: 0.0,\n      right: 0.0,\n      child: navigationBar,\n    ));\n  }\n\n  return DecoratedBox(\n    decoration: BoxDecoration(\n      color: backgroundColor ?? CupertinoTheme.of(context).scaffoldBackgroundColor,\n    ),\n    child: Stack(\n      children: stacked,\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageScaffold\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageScaffold",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The color of the widget that underlies the entire scaffold.<\/p>\n<p>By default uses <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>scaffoldBackgroundColor<\/code> when null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageScaffold\/backgroundColor.html",
                    "name": "backgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageScaffold",
                    "params": []
                },
                {
                    "desc": "<p>Widget to show in the main content area.<\/p>\n<p>Content can slide under the <a href=\"cupertino\/CupertinoPageScaffold\/navigationBar.html\">navigationBar<\/a> when they're translucent.\nIn that case, the child's <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>'s <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> will have a\ntop padding indicating the area of obstructing overlap from the\n<a href=\"cupertino\/CupertinoPageScaffold\/navigationBar.html\">navigationBar<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageScaffold\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageScaffold",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"cupertino\/CupertinoPageScaffold\/navigationBar.html\">navigationBar<\/a>, typically a <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>, is drawn at the\ntop of the screen.<\/p>\n<p>If translucent, the main content may slide behind it.\nOtherwise, the main content's top margin will be offset by its height.<\/p>\n<p>The scaffold assumes the navigation bar will consume the <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> top padding.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ObstructingPreferredSizeWidget navigationBar\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageScaffold\/navigationBar.html",
                    "name": "navigationBar",
                    "isDeprecated": false,
                    "type": "cupertino.ObstructingPreferredSizeWidget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageScaffold",
                    "params": []
                },
                {
                    "desc": "<p>Whether the <a href=\"cupertino\/CupertinoPageScaffold\/child.html\">child<\/a> should size itself to avoid the window's bottom inset.<\/p>\n<p>For example, if there is an onscreen keyboard displayed above the\nscaffold, the body can be resized to avoid overlapping the keyboard, which\nprevents widgets inside the body from being obscured by the keyboard.<\/p>\n<p>Defaults to true and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool resizeToAvoidBottomInset\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageScaffold\/resizeToAvoidBottomInset.html",
                    "name": "resizeToAvoidBottomInset",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageScaffold",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Provides an iOS-style page transition animation.<\/p>\n<p>The page slides in from the right and exits in reverse. It also shifts to the left in\na parallax motion when another page enters to cover it.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoPageTransition-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoPageTransition",
            "shortname": "CupertinoPageTransition",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style page transition.<\/p>\n<ul>\n<li>\n<code>primaryRouteAnimation<\/code> is a linear route animation from 0.0 to 1.0\nwhen this screen is being pushed.<\/li>\n<li>\n<code>secondaryRouteAnimation<\/code> is a linear route animation from 0.0 to 1.0\nwhen another screen is being pushed on top of this one.<\/li>\n<li>\n<code>linearTransition<\/code> is whether to perform primary transition linearly.\nUsed to precisely track back gesture drags.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoPageTransition({\n  Key key,\n  @required Animation&lt;double&gt; primaryRouteAnimation,\n  @required Animation&lt;double&gt; secondaryRouteAnimation,\n  @required this.child,\n  @required bool linearTransition,\n}) : assert(linearTransition != null),\n     _primaryPositionAnimation = (linearTransition ? primaryRouteAnimation :\n       \/\/ The curves below have been rigorously derived from plots of native\n       \/\/ iOS animation frames. Specifically, a video was taken of a page\n       \/\/ transition animation and the distance in each frame that the page\n       \/\/ moved was measured. A best fit bezier curve was the fitted to the\n       \/\/ point set, which is linearToEaseIn. Conversely, easeInToLinear is the\n       \/\/ reflection over the origin of linearToEaseIn.\n       CurvedAnimation(\n         parent: primaryRouteAnimation,\n         curve: Curves.linearToEaseOut,\n         reverseCurve: Curves.easeInToLinear,\n       )\n     ).drive(_kRightMiddleTween),\n     _secondaryPositionAnimation = CurvedAnimation(\n       parent: secondaryRouteAnimation,\n       curve: Curves.linearToEaseOut,\n       reverseCurve: Curves.easeInToLinear,\n     ).drive(_kMiddleLeftTween),\n     _primaryShadowAnimation = CurvedAnimation(\n       parent: primaryRouteAnimation,\n       curve: Curves.linearToEaseOut,\n     ).drive(_kGradientShadowTween),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageTransition\/CupertinoPageTransition.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoPageTransition",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageTransition",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "linearTransition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "primaryRouteAnimation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        },
                        {
                            "name": "secondaryRouteAnimation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "animation.Animation<dart:core.double>"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoPageTransition\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  assert(debugCheckHasDirectionality(context));\n  final TextDirection textDirection = Directionality.of(context);\n  return SlideTransition(\n    position: _secondaryPositionAnimation,\n    textDirection: textDirection,\n    transformHitTests: false,\n    child: SlideTransition(\n      position: _primaryPositionAnimation,\n      textDirection: textDirection,\n      child: DecoratedBoxTransition(\n        decoration: _primaryShadowAnimation,\n        child: child,\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPageTransition\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPageTransition",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPageTransition\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPageTransition",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-styled picker.<\/p>\n<p>Displays its children widgets on a wheel for selection and\ncalls back when the currently selected item changes.<\/p>\n<p>Can be used with <a href=\"cupertino\/showCupertinoModalPopup.html\">showCupertinoModalPopup<\/a> to display the picker modally at the\nbottom of the screen.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListWheelScrollView-class.html\">ListWheelScrollView<\/a>, the generic widget backing this picker without\nthe iOS design specific chrome.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/controls\/pickers\/\">developer.apple.com\/ios\/human-interface-guidelines\/controls\/pickers\/<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoPicker-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoPicker",
            "shortname": "CupertinoPicker",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>An option callback when the currently centered item changes.<\/p>\n<p>Value changes when the item closest to the center changes.<\/p>\n<p>This can be called during scrolls and during ballistic flings. To get the\nvalue only when the scrolling settles, use a <a href=\"widgets\/NotificationListener-class.html\">NotificationListener<\/a>,\nlisten for <a href=\"widgets\/ScrollEndNotification-class.html\">ScrollEndNotification<\/a> and read its <a href=\"widgets\/FixedExtentMetrics-class.html\">FixedExtentMetrics<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;int&gt; onSelectedItemChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/onSelectedItemChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.int>",
                    "name": "onSelectedItemChanged",
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a picker from a concrete list of children.<\/p>\n<p>The <code>diameterRatio<\/code> and <code>itemExtent<\/code> arguments must not be null. The\n<code>itemExtent<\/code> must be greater than zero.<\/p>\n<p>The <code>backgroundColor<\/code> defaults to light gray. It can be set to null to\ndisable the background painting entirely; this is mildly more efficient\nthan using <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a>. Also, if it has transparency, no gradient\neffect will be rendered.<\/p>\n<p>The <code>scrollController<\/code> argument can be used to specify a custom\n<a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a> for programmatically reading or changing\nthe current picker index or for selecting an initial index value.<\/p>\n<p>The <code>looping<\/code> argument decides whether the child list loops and can be\nscrolled infinitely.  If set to true, scrolling past the end of the list\nwill loop the list back to the beginning.  If set to false, the list will\nstop scrolling when you reach the end or the beginning.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoPicker({\n  Key key,\n  this.diameterRatio = _kDefaultDiameterRatio,\n  this.backgroundColor = _kDefaultBackground,\n  this.offAxisFraction = 0.0,\n  this.useMagnifier = false,\n  this.magnification = 1.0,\n  this.scrollController,\n  @required this.itemExtent,\n  @required this.onSelectedItemChanged,\n  @required List&lt;Widget&gt; children,\n  bool looping = false,\n}) : assert(children != null),\n     assert(diameterRatio != null),\n     assert(diameterRatio &gt; 0.0, RenderListWheelViewport.diameterRatioZeroMessage),\n     assert(magnification &gt; 0),\n     assert(itemExtent != null),\n     assert(itemExtent &gt; 0),\n     childDelegate = looping\n                     ? ListWheelChildLoopingListDelegate(children: children)\n                     : ListWheelChildListDelegate(children: children),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPicker\/CupertinoPicker.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoPicker",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": [
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "children",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<widgets.Widget>"
                        },
                        {
                            "name": "diameterRatio",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "itemExtent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "looping",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "magnification",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "offAxisFraction",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "onSelectedItemChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.int>"
                        },
                        {
                            "name": "scrollController",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.FixedExtentScrollController"
                        },
                        {
                            "name": "useMagnifier",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoPicker\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;StatefulWidget&gt; createState() =&gt; _CupertinoPickerState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPicker\/createState.html",
                    "isDeprecated": false,
                    "type": "widgets.State<widgets.StatefulWidget>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Background color behind the children.<\/p>\n<p>Defaults to a gray color in the iOS color palette.<\/p>\n<p>This can be set to null to disable the background painting entirely; this\nis mildly more efficient than using <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a>.<\/p>\n<p>Any alpha value less 255 (fully opaque) will cause the removal of the\nwheel list edge fade gradient from rendering of the widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/backgroundColor.html",
                    "name": "backgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>A delegate that lazily instantiates children.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ListWheelChildDelegate childDelegate\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/childDelegate.html",
                    "name": "childDelegate",
                    "isDeprecated": false,
                    "type": "widgets.ListWheelChildDelegate",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>Relative ratio between this picker's height and the simulated cylinder's diameter.<\/p>\n<p>Smaller values creates more pronounced curvatures in the scrollable wheel.<\/p>\n<p>For more details, see <a href=\"cupertino\/CupertinoPicker\/diameterRatio.html\">ListWheelScrollView.diameterRatio<\/a>.<\/p>\n<p>Must not be null and defaults to <code>1.1<\/code> to visually mimic iOS.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double diameterRatio\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/diameterRatio.html",
                    "name": "diameterRatio",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>The uniform height of all children.<\/p>\n<p>All children will be given the <a href=\"rendering\/BoxConstraints-class.html\">BoxConstraints<\/a> to match this exact\nheight. Must not be null and must be positive.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double itemExtent\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/itemExtent.html",
                    "name": "itemExtent",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>The zoomed-in rate of the magnifier, if it is used.<\/p>\n<p>The default value is 1.0, which will not change anything.\nIf the value is &gt; 1.0, the center item will be zoomed in by that rate, and\nit will also be rendered as flat, not cylindrical like the rest of the list.\nThe item will be zoomed out if magnification &lt; 1.0.<\/p>\n<p>Must be positive.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double magnification\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/magnification.html",
                    "name": "magnification",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>How much the wheel is horizontally off-center, as a fraction of its width.\nThis property creates the visual effect of looking at a vertical wheel from\nits side where its vanishing points at the edge curves to one side instead\nof looking at the wheel head-on.<\/p>\n<p>The value is horizontal distance between the wheel's center and the vertical\nvanishing line at the edges of the wheel, represented as a fraction of the\nwheel's width.<\/p>\n<p>The value <code>0.0<\/code> means the wheel is looked at head-on and its vanishing\nline runs through the center of the wheel. Negative values means moving\nthe wheel to the left of the observer, thus the edges curve to the right.\nPositive values means moving the wheel to the right of the observer,\nthus the edges curve to the left.<\/p>\n<p>The visual effect causes the wheel's edges to curve rather than moving\nthe center. So a value of <code>0.5<\/code> means the edges' vanishing line will touch\nthe wheel's size's left edge.<\/p>\n<p>Defaults to 0.0, which means looking at the wheel head-on.\nThe visual effect can be unaesthetic if this value is too far from the\nrange <code>-0.5, 0.5<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double offAxisFraction\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/offAxisFraction.html",
                    "name": "offAxisFraction",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>A <a href=\"widgets\/FixedExtentScrollController-class.html\">FixedExtentScrollController<\/a> to read and control the current item.<\/p>\n<p>If null, an implicit one will be created internally.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FixedExtentScrollController scrollController\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/scrollController.html",
                    "name": "scrollController",
                    "isDeprecated": false,
                    "type": "widgets.FixedExtentScrollController",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                },
                {
                    "desc": "<p>Whether to use the magnifier for the center item of the wheel.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool useMagnifier\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPicker\/useMagnifier.html",
                    "name": "useMagnifier",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPicker",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Rounded rectangle surface that looks like an iOS popup surface, e.g., alert dialog\nand action sheet.<\/p>\n<p>A <a href=\"cupertino\/CupertinoPopupSurface-class.html\">CupertinoPopupSurface<\/a> can be configured to paint or not paint a white\ncolor on top of its blurred area. Typical usage should paint white on top\nof the blur. However, the white paint can be disabled for the purpose of\nrendering divider gaps for a more complicated layout, e.g., <a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>.\nAdditionally, the white paint can be disabled to render a blurred rounded\nrectangle without any color (similar to iOS's volume control popup).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoAlertDialog-class.html\">CupertinoAlertDialog<\/a>, which is a dialog with a title, content, and\nactions.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/\">developer.apple.com\/ios\/human-interface-guidelines\/views\/alerts\/<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoPopupSurface-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoPopupSurface",
            "shortname": "CupertinoPopupSurface",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style rounded rectangle popup surface.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoPopupSurface({\n  Key key,\n  this.isSurfacePainted = true,\n  this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPopupSurface\/CupertinoPopupSurface.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoPopupSurface",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPopupSurface",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "isSurfacePainted",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoPopupSurface\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  return ClipRRect(\n    borderRadius: BorderRadius.circular(_kDialogCornerRadius),\n    child: BackdropFilter(\n      filter: ImageFilter.blur(sigmaX: _kBlurAmount, sigmaY: _kBlurAmount),\n      child: Container(\n        decoration: _kCupertinoDialogBlurOverlayDecoration,\n        child: Container(\n          color: isSurfacePainted ? _kDialogColor : null,\n          child: child,\n        ),\n      ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoPopupSurface\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoPopupSurface",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The widget below this widget in the tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPopupSurface\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPopupSurface",
                    "params": []
                },
                {
                    "desc": "<p>Whether or not to paint a translucent white on top of this surface's\nblurred background. <a href=\"cupertino\/CupertinoPopupSurface\/isSurfacePainted.html\">isSurfacePainted<\/a> should be true for a typical popup\nthat contains content without any dividers. A popup that requires dividers\nshould set <a href=\"cupertino\/CupertinoPopupSurface\/isSurfacePainted.html\">isSurfacePainted<\/a> to false and then paint its own surface area.<\/p>\n<p>Some popups, like iOS's volume control popup, choose to render a blurred\narea without any white paint covering it. To achieve this effect,\n<a href=\"cupertino\/CupertinoPopupSurface\/isSurfacePainted.html\">isSurfacePainted<\/a> should be set to false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isSurfacePainted\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoPopupSurface\/isSurfacePainted.html",
                    "name": "isSurfacePainted",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoPopupSurface",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS style scrollbar.<\/p>\n<p>A scrollbar indicates which portion of a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget is actually\nvisible.<\/p>\n<p>To add a scrollbar to a <a href=\"widgets\/ScrollView-class.html\">ScrollView<\/a>, simply wrap the scroll view widget in\na <a href=\"cupertino\/CupertinoScrollbar-class.html\">CupertinoScrollbar<\/a> widget.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/ListView-class.html\">ListView<\/a>, which display a linear, scrollable list of children.<\/li>\n<li>\n<a href=\"widgets\/GridView-class.html\">GridView<\/a>, which display a 2 dimensional, scrollable array of children.<\/li>\n<li>\n<a href=\"material\/Scrollbar-class.html\">Scrollbar<\/a>, a Material Design scrollbar that dynamically adapts to the\nplatform showing either an Android style or iOS style scrollbar.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoScrollbar-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoScrollbar",
            "shortname": "CupertinoScrollbar",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an iOS style scrollbar that wraps the given <code>child<\/code>.<\/p>\n<p>The <code>child<\/code> should be a source of <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications,\ntypically a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoScrollbar({\n  Key key,\n  @required this.child,\n}) : super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoScrollbar\/CupertinoScrollbar.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoScrollbar",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoScrollbar",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoScrollbar\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoScrollbarState createState() =&gt; _CupertinoScrollbarState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoScrollbar\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoScrollbarState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoScrollbar",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The subtree to place inside the <a href=\"cupertino\/CupertinoScrollbar-class.html\">CupertinoScrollbar<\/a>.<\/p>\n<p>This should include a source of <a href=\"widgets\/ScrollNotification-class.html\">ScrollNotification<\/a> notifications,\ntypically a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> widget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget child\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoScrollbar\/child.html",
                    "name": "child",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoScrollbar",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style segmented control.<\/p>\n<p>Displays the widgets provided in the <a href=\"dart-core\/Map-class.html\">Map<\/a> of <a href=\"cupertino\/CupertinoSegmentedControl\/children.html\">children<\/a> in a\nhorizontal list. Used to select between a number of mutually exclusive\noptions. When one option in the segmented control is selected, the other\noptions in the segmented control cease to be selected.<\/p>\n<p>A segmented control can feature any <a href=\"widgets\/Widget-class.html\">Widget<\/a> as one of the values in its\n<a href=\"dart-core\/Map-class.html\">Map<\/a> of <a href=\"cupertino\/CupertinoSegmentedControl\/children.html\">children<\/a>. The type T is the type of the keys used\nto identify each widget and determine which widget is selected. As\nrequired by the <a href=\"dart-core\/Map-class.html\">Map<\/a> class, keys must be of consistent types\nand must be comparable. The ordering of the keys will determine the order\nof the widgets in the segmented control.<\/p>\n<p>When the state of the segmented control changes, the widget calls the\n<a href=\"cupertino\/CupertinoSegmentedControl\/onValueChanged.html\">onValueChanged<\/a> callback. The map key associated with the newly selected\nwidget is returned in the <a href=\"cupertino\/CupertinoSegmentedControl\/onValueChanged.html\">onValueChanged<\/a> callback. Typically, widgets\nthat use a segmented control will listen for the <a href=\"cupertino\/CupertinoSegmentedControl\/onValueChanged.html\">onValueChanged<\/a> callback\nand rebuild the segmented control with a new <a href=\"cupertino\/CupertinoSegmentedControl\/groupValue.html\">groupValue<\/a> to update which\noption is currently selected.<\/p>\n<p>The <a href=\"cupertino\/CupertinoSegmentedControl\/children.html\">children<\/a> will be displayed in the order of the keys in the <a href=\"dart-core\/Map-class.html\">Map<\/a>.\nThe height of the segmented control is determined by the height of the\ntallest widget provided as a value in the <a href=\"dart-core\/Map-class.html\">Map<\/a> of <a href=\"cupertino\/CupertinoSegmentedControl\/children.html\">children<\/a>.\nThe width of each child in the segmented control will be equal to the width\nof widest child, unless the combined width of the children is wider than\nthe available horizontal space. In this case, the available horizontal space\nis divided by the number of provided <a href=\"cupertino\/CupertinoSegmentedControl\/children.html\">children<\/a> to determine the width of\neach widget. The selection area for each of the widgets in the <a href=\"dart-core\/Map-class.html\">Map<\/a> of\n<a href=\"cupertino\/CupertinoSegmentedControl\/children.html\">children<\/a> will then be expanded to fill the calculated space, so each\nwidget will appear to have the same dimensions.<\/p>\n<p>A segmented control may optionally be created with custom colors. The\n<a href=\"cupertino\/CupertinoSegmentedControl\/unselectedColor.html\">unselectedColor<\/a>, <a href=\"cupertino\/CupertinoSegmentedControl\/selectedColor.html\">selectedColor<\/a>, <a href=\"cupertino\/CupertinoSegmentedControl\/borderColor.html\">borderColor<\/a>, and <a href=\"cupertino\/CupertinoSegmentedControl\/pressedColor.html\">pressedColor<\/a>\narguments can be used to override the segmented control's colors from\n<a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> defaults.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/design\/human-interface-guidelines\/ios\/controls\/segmented-controls\/\">developer.apple.com\/design\/human-interface-guidelines\/ios\/controls\/segmented-controls\/<\/a><\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoSegmentedControl-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoSegmentedControl",
            "shortname": "CupertinoSegmentedControl",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The callback that is called when a new option is tapped.<\/p>\n<p>This attribute must not be null.<\/p>\n<p>The segmented control passes the newly selected widget's associated key\nto the callback but does not actually change state until the parent\nwidget rebuilds the segmented control with the new <a href=\"cupertino\/CupertinoSegmentedControl\/groupValue.html\">groupValue<\/a>.<\/p>\n<p>The callback provided to <a href=\"cupertino\/CupertinoSegmentedControl\/onValueChanged.html\">onValueChanged<\/a> should update the state of\nthe parent <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that\nthe parent gets rebuilt; for example:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class SegmentedControlExample extends StatefulWidget {\n  @override\n  State createState() =&gt; SegmentedControlExampleState();\n}\n\nclass SegmentedControlExampleState extends State&lt;SegmentedControlExample&gt; {\n  final Map&lt;int, Widget&gt; children = const {\n    0: Text('Child 1'),\n    1: Text('Child 2'),\n  };\n\n  int currentValue;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      child: CupertinoSegmentedControl&lt;int&gt;(\n        children: children,\n        onValueChanged: (int newValue) {\n          setState(() {\n            currentValue = newValue;\n          });\n        },\n        groupValue: currentValue,\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;T&gt; onValueChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSegmentedControl\/onValueChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged",
                    "name": "onValueChanged",
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style segmented control bar.<\/p>\n<p>The <code>children<\/code> and <code>onValueChanged<\/code> arguments must not be null. The\n<code>children<\/code> argument must be an ordered <a href=\"dart-core\/Map-class.html\">Map<\/a> such as a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a>.\nFurther, the length of the <code>children<\/code> list must be greater than one.<\/p>\n<p>Each widget value in the map of <code>children<\/code> must have an associated key\nthat uniquely identifies this widget. This key is what will be returned\nin the <code>onValueChanged<\/code> callback when a new value from the <code>children<\/code> map\nis selected.<\/p>\n<p>The <code>groupValue<\/code> is the currently selected value for the segmented control.\nIf no <code>groupValue<\/code> is provided, or the <code>groupValue<\/code> is null, no widget will\nappear as selected. The <code>groupValue<\/code> must be either null or one of the keys\nin the <code>children<\/code> map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoSegmentedControl({\n  Key key,\n  @required this.children,\n  @required this.onValueChanged,\n  this.groupValue,\n  this.unselectedColor,\n  this.selectedColor,\n  this.borderColor,\n  this.pressedColor,\n}) : assert(children != null),\n     assert(children.length &gt;= 2),\n     assert(onValueChanged != null),\n     assert(\n       groupValue == null || children.keys.any((T child) =&gt; child == groupValue),\n       'The groupValue must be either null or one of the keys in the children map.',\n     ),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSegmentedControl\/CupertinoSegmentedControl.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoSegmentedControl",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": [
                        {
                            "name": "borderColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "children",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<widgets.Widget>"
                        },
                        {
                            "name": "groupValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "onValueChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged"
                        },
                        {
                            "name": "pressedColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "selectedColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "unselectedColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoSegmentedControl\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_SegmentedControlState&lt;T&gt; createState() =&gt; _SegmentedControlState&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSegmentedControl\/createState.html",
                    "isDeprecated": false,
                    "type": "<_SegmentedControlState<T>>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The color used as the border around each widget.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>primaryColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color borderColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSegmentedControl\/borderColor.html",
                    "name": "borderColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                },
                {
                    "desc": "<p>The identifying keys and corresponding widget values in the\nsegmented control.<\/p>\n<p>The map must have more than one entry.\nThis attribute must be an ordered <a href=\"dart-core\/Map-class.html\">Map<\/a> such as a <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;T, Widget&gt; children\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSegmentedControl\/children.html",
                    "name": "children",
                    "isDeprecated": false,
                    "type": "dart:core.Map<widgets.Widget>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                },
                {
                    "desc": "<p>The color used to fill the background of the widget the user is\ntemporarily interacting with through a long press or drag.<\/p>\n<p>Defaults to the selectedColor at 20% opacity if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color pressedColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSegmentedControl\/pressedColor.html",
                    "name": "pressedColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                },
                {
                    "desc": "<p>The color used to fill the background of the selected widget and as the text\ncolor of unselected widgets.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>primaryColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color selectedColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSegmentedControl\/selectedColor.html",
                    "name": "selectedColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                },
                {
                    "desc": "<p>The color used to fill the backgrounds of unselected widgets and as the\ntext color of the selected widget.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>primaryContrastingColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color unselectedColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSegmentedControl\/unselectedColor.html",
                    "name": "unselectedColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSegmentedControl",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style slider.<\/p>\n<p>Used to select from a range of values.<\/p>\n<p>A slider can be used to select from either a continuous or a discrete set of\nvalues. The default is use a continuous range of values from <a href=\"cupertino\/CupertinoSlider\/min.html\">min<\/a> to <a href=\"cupertino\/CupertinoSlider\/max.html\">max<\/a>.\nTo use discrete values, use a non-null value for <a href=\"cupertino\/CupertinoSlider\/divisions.html\">divisions<\/a>, which\nindicates the number of discrete intervals. For example, if <a href=\"cupertino\/CupertinoSlider\/min.html\">min<\/a> is 0.0 and\n<a href=\"cupertino\/CupertinoSlider\/max.html\">max<\/a> is 50.0 and <a href=\"cupertino\/CupertinoSlider\/divisions.html\">divisions<\/a> is 5, then the slider can take on the values\ndiscrete values 0.0, 10.0, 20.0, 30.0, 40.0, and 50.0.<\/p>\n<p>The slider itself does not maintain any state. Instead, when the state of\nthe slider changes, the widget calls the <a href=\"cupertino\/CupertinoSlider\/onChanged.html\">onChanged<\/a> callback. Most widgets\nthat use a slider will listen for the <a href=\"cupertino\/CupertinoSlider\/onChanged.html\">onChanged<\/a> callback and rebuild the\nslider with a new <a href=\"cupertino\/CupertinoSlider\/value.html\">value<\/a> to update the visual appearance of the slider.<\/p>\n<p>See also:<\/p>\n<ul><li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/controls\/sliders\/\">developer.apple.com\/ios\/human-interface-guidelines\/controls\/sliders\/<\/a><\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoSlider-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoSlider",
            "shortname": "CupertinoSlider",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Called when the user is done selecting a new value for the slider.<\/p>\n<p>This callback shouldn't be used to update the slider <a href=\"cupertino\/CupertinoSlider\/value.html\">value<\/a> (use\n<a href=\"cupertino\/CupertinoSlider\/onChanged.html\">onChanged<\/a> for that), but rather to know when the user has completed\nselecting a new <a href=\"cupertino\/CupertinoSlider\/value.html\">value<\/a> by ending a drag.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CupertinoSlider(\n  value: _cupertinoSliderValue.toDouble(),\n  min: 1.0,\n  max: 10.0,\n  divisions: 10,\n  onChanged: (double newValue) {\n    setState(() {\n      _cupertinoSliderValue = newValue.round();\n    });\n  },\n  onChangeEnd: (double newValue) {\n    print('Ended change on $newValue');\n  },\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoSlider\/onChangeStart.html\">onChangeStart<\/a> for a callback that is called when a value change\nbegins.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;double&gt; onChangeEnd\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/onChangeEnd.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.double>",
                    "name": "onChangeEnd",
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>Called when the user starts selecting a new value for the slider.<\/p>\n<p>This callback shouldn't be used to update the slider <a href=\"cupertino\/CupertinoSlider\/value.html\">value<\/a> (use\n<a href=\"cupertino\/CupertinoSlider\/onChanged.html\">onChanged<\/a> for that), but rather to be notified when the user has started\nselecting a new value by starting a drag.<\/p>\n<p>The value passed will be the last <a href=\"cupertino\/CupertinoSlider\/value.html\">value<\/a> that the slider had before the\nchange began.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CupertinoSlider(\n  value: _cupertinoSliderValue.toDouble(),\n  min: 1.0,\n  max: 10.0,\n  divisions: 10,\n  onChanged: (double newValue) {\n    setState(() {\n      _cupertinoSliderValue = newValue.round();\n    });\n  },\n  onChangeStart: (double startValue) {\n    print('Started change at $startValue');\n  },\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoSlider\/onChangeEnd.html\">onChangeEnd<\/a> for a callback that is called when the value change is\ncomplete.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;double&gt; onChangeStart\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/onChangeStart.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.double>",
                    "name": "onChangeStart",
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>Called when the user selects a new value for the slider.<\/p>\n<p>The slider passes the new value to the callback but does not actually\nchange state until the parent widget rebuilds the slider with the new\nvalue.<\/p>\n<p>If null, the slider will be displayed as disabled.<\/p>\n<p>The callback provided to onChanged should update the state of the parent\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the parent\ngets rebuilt; for example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">CupertinoSlider(\n  value: _cupertinoSliderValue.toDouble(),\n  min: 1.0,\n  max: 10.0,\n  divisions: 10,\n  onChanged: (double newValue) {\n    setState(() {\n      _cupertinoSliderValue = newValue.round();\n    });\n  },\n)\n<\/code><\/pre>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoSlider\/onChangeStart.html\">onChangeStart<\/a> for a callback that is called when the user starts\nchanging the value.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoSlider\/onChangeEnd.html\">onChangeEnd<\/a> for a callback that is called when the user stops\nchanging the value.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;double&gt; onChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/onChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.double>",
                    "name": "onChanged",
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style slider.<\/p>\n<p>The slider itself does not maintain any state. Instead, when the state of\nthe slider changes, the widget calls the <code>onChanged<\/code> callback. Most widgets\nthat use a slider will listen for the <code>onChanged<\/code> callback and rebuild the\nslider with a new <code>value<\/code> to update the visual appearance of the slider.<\/p>\n<ul>\n<li>\n<code>value<\/code> determines currently selected value for this slider.<\/li>\n<li>\n<code>onChanged<\/code> is called when the user selects a new value for the slider.<\/li>\n<li>\n<code>onChangeStart<\/code> is called when the user starts to select a new value for\nthe slider.<\/li>\n<li>\n<code>onChangeEnd<\/code> is called when the user is done selecting a new value for\nthe slider.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoSlider({\n  Key key,\n  @required this.value,\n  @required this.onChanged,\n  this.onChangeStart,\n  this.onChangeEnd,\n  this.min = 0.0,\n  this.max = 1.0,\n  this.divisions,\n  this.activeColor,\n}) : assert(value != null),\n     assert(min != null),\n     assert(max != null),\n     assert(value &gt;= min &amp;&amp; value &lt;= max),\n     assert(divisions == null || divisions &gt; 0),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSlider\/CupertinoSlider.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoSlider",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": [
                        {
                            "name": "activeColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "divisions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "max",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "min",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "onChangeEnd",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.double>"
                        },
                        {
                            "name": "onChangeStart",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.double>"
                        },
                        {
                            "name": "onChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.double>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoSlider\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoSliderState createState() =&gt; _CupertinoSliderState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSlider\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoSliderState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoSlider\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DoubleProperty('value', value));\n  properties.add(DoubleProperty('min', min));\n  properties.add(DoubleProperty('max', max));\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSlider\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The color to use for the portion of the slider that has been selected.<\/p>\n<p>Defaults to the <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s primary color if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/activeColor.html",
                    "name": "activeColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>The number of discrete divisions.<\/p>\n<p>If null, the slider is continuous.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int divisions\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/divisions.html",
                    "name": "divisions",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>The maximum value the user can select.<\/p>\n<p>Defaults to 1.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double max\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/max.html",
                    "name": "max",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value the user can select.<\/p>\n<p>Defaults to 0.0.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double min\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/min.html",
                    "name": "min",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                },
                {
                    "desc": "<p>The currently selected value for this slider.<\/p>\n<p>The slider's thumb is drawn at a position that corresponds to this value.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double value\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSlider\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSlider",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-styled navigation bar with iOS-11-style large titles using slivers.<\/p>\n<p>The <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a> must be placed in a sliver group such\nas the <a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>.<\/p>\n<p>This navigation bar consists of two sections, a pinned static section on top\nand a sliding section containing iOS-11-style large title below it.<\/p>\n<p>It should be placed at top of the screen and automatically accounts for\nthe iOS status bar.<\/p>\n<p>Minimally, a <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> widget will appear in the middle of the app bar\nwhen the sliver is collapsed and transfer to the area below in larger font\nwhen the sliver is expanded.<\/p>\n<p>For advanced uses, an optional <a href=\"cupertino\/CupertinoSliverNavigationBar\/middle.html\">middle<\/a> widget can be supplied to show a\ndifferent widget in the middle of the navigation bar when the sliver is collapsed.<\/p>\n<p>Like <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>, it also supports a <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a> and <a href=\"cupertino\/CupertinoSliverNavigationBar\/trailing.html\">trailing<\/a>\nwidget on the static section on top that remains while scrolling.<\/p>\n<p>The <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a> widget will automatically be a back chevron icon button (or a\nclose button in case of a fullscreen dialog) to pop the current route if none\nis provided and <a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is true (true by default).<\/p>\n<p>The <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> widget will automatically be a title text from the current\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> if none is provided and <a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyTitle.html\">automaticallyImplyTitle<\/a> is\ntrue (true by default).<\/p>\n<p>When <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is true, this navigation bar will transition\non top of the routes instead of inside them if the route being transitioned\nto also has a <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> or a <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>\nwith <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> set to true. If <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is\ntrue, none of the <a href=\"widgets\/Widget-class.html\">Widget<\/a> parameters can contain any <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>s in their\nsubtrees since those widgets will exist in multiple places in the tree\nsimultaneously.<\/p>\n<p>By default, only one <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> or <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>\nshould be present in each <a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a> to support the default transitions.\nUse <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> or <a href=\"cupertino\/CupertinoSliverNavigationBar\/heroTag.html\">heroTag<\/a> to customize the transition\nbehavior for multiple navigation bars per route.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a>, an iOS navigation bar for use on non-scrolling\npages.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoSliverNavigationBar-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoSliverNavigationBar",
            "shortname": "CupertinoSliverNavigationBar",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a navigation bar for scrolling lists.<\/p>\n<p>The <code>largeTitle<\/code> argument is required and must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoSliverNavigationBar({\n  Key key,\n  this.largeTitle,\n  this.leading,\n  this.automaticallyImplyLeading = true,\n  this.automaticallyImplyTitle = true,\n  this.previousPageTitle,\n  this.middle,\n  this.trailing,\n  this.border = _kDefaultNavBarBorder,\n  this.backgroundColor,\n  this.padding,\n  this.actionsForegroundColor,\n  this.transitionBetweenRoutes = true,\n  this.heroTag = _defaultHeroTag,\n}) : assert(automaticallyImplyLeading != null),\n     assert(automaticallyImplyTitle != null),\n     assert(\n       automaticallyImplyTitle == true || largeTitle != null,\n       'No largeTitle has been provided but automaticallyImplyTitle is also '\n       'false. Either provide a largeTitle or set automaticallyImplyTitle to '\n       'true.'\n     ),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/CupertinoSliverNavigationBar.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoSliverNavigationBar",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": [
                        {
                            "name": "actionsForegroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "automaticallyImplyLeading",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "automaticallyImplyTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "border",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.Border"
                        },
                        {
                            "name": "heroTag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "largeTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "leading",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "middle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "padding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.EdgeInsetsDirectional"
                        },
                        {
                            "name": "previousPageTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "trailing",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "transitionBetweenRoutes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoSliverNavigationBar\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoSliverNavigationBarState createState() =&gt; _CupertinoSliverNavigationBarState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoSliverNavigationBarState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Default color used for text and icons of the <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a> and <a href=\"cupertino\/CupertinoSliverNavigationBar\/trailing.html\">trailing<\/a>\nwidgets in the navigation bar.<\/p>\n<p>Defaults to the <code>primaryColor<\/code> of the <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> when null.<\/p>\n<p>The default color for text in the <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> slot is always black, as per\niOS standard design.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color actionsForegroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/actionsForegroundColor.html",
                    "name": "actionsForegroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Controls whether we should try to imply the leading widget if null.<\/p>\n<p>If true and <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a> is null, automatically try to deduce what the <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a>\nwidget should be. If <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a> widget is not null, this parameter has no effect.<\/p>\n<p>Specifically this navigation bar will:<\/p>\n<ol>\n<li>Show a 'Close' button if the current route is a <code>fullscreenDialog<\/code>.<\/li>\n<li>Show a back chevron with <a href=\"cupertino\/CupertinoSliverNavigationBar\/previousPageTitle.html\">previousPageTitle<\/a> if <a href=\"cupertino\/CupertinoSliverNavigationBar\/previousPageTitle.html\">previousPageTitle<\/a> is\nnot null.<\/li>\n<li>Show a back chevron with the previous route's <code>title<\/code> if the current\nroute is a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> and the previous route is also a\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.<\/li>\n<\/ol>\n<p>This value cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool automaticallyImplyLeading\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyLeading.html",
                    "name": "automaticallyImplyLeading",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Controls whether we should try to imply the <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> widget if null.<\/p>\n<p>If true and <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> is null, automatically fill in a <a href=\"widgets\/Text-class.html\">Text<\/a> widget\nwith the current route's <code>title<\/code> if the route is a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>.\nIf <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> widget is not null, this parameter has no effect.<\/p>\n<p>This value cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool automaticallyImplyTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyTitle.html",
                    "name": "automaticallyImplyTitle",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>The background color of the navigation bar. If it contains transparency, the\ntab bar will automatically produce a blurring effect to the content\nbehind it.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>barBackgroundColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/backgroundColor.html",
                    "name": "backgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>The border of the navigation bar. By default renders a single pixel bottom border side.<\/p>\n<p>If a border is null, the navigation bar will not display a border.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Border border\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/border.html",
                    "name": "border",
                    "isDeprecated": false,
                    "type": "painting.Border",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Tag for the navigation bar's Hero widget if <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is true.<\/p>\n<p>Defaults to a common tag between all <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> and\n<a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a> instances of the same <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>. With the\ndefault tag, all navigation bars of the same navigator can transition\nbetween each other as long as there's only one navigation bar per route.<\/p>\n<p>This <a href=\"cupertino\/CupertinoSliverNavigationBar\/heroTag.html\">heroTag<\/a> can be overridden to manually handle having multiple\nnavigation bars per route or to transition between multiple\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s.<\/p>\n<p>Cannot be null. To disable Hero transitions for this navigation bar,\nset <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> to false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object heroTag\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/heroTag.html",
                    "name": "heroTag",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>The navigation bar's title.<\/p>\n<p>This text will appear in the top static navigation bar when collapsed and\nbelow the navigation bar, in a larger font, when expanded.<\/p>\n<p>A suitable <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> is provided around this widget as it is\nmoved around, to change its font size.<\/p>\n<p>If <a href=\"cupertino\/CupertinoSliverNavigationBar\/middle.html\">middle<\/a> is null, then the <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> widget will be inserted into\nthe tree in two places when transitioning from the collapsed state to the\nexpanded state. It is therefore imperative that this subtree not contain\nany <a href=\"widgets\/GlobalKey-class.html\">GlobalKey<\/a>s, and that it not rely on maintaining state (for example,\nanimations will not survive the transition from one location to the other,\nand may in fact be visible in two places at once during the transition).<\/p>\n<p>If null and <a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyTitle.html\">automaticallyImplyTitle<\/a> is true, an appropriate <a href=\"widgets\/Text-class.html\">Text<\/a>\ntitle will be created if the current route is a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a> and\nhas a <code>title<\/code>.<\/p>\n<p>This parameter must either be non-null or the route must have a title\n(<a href=\"cupertino\/CupertinoPageRoute\/title.html\">CupertinoPageRoute.title<\/a>) and <a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyTitle.html\">automaticallyImplyTitle<\/a> must be true.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget largeTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/largeTitle.html",
                    "name": "largeTitle",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Widget to place at the start of the navigation bar. Normally a back button\nfor a normal page or a cancel button for full page dialogs.<\/p>\n<p>If null and <a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is true, an appropriate button\nwill be automatically created.<\/p>\n<p>This widget is visible in both collapsed and expanded states.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget leading\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/leading.html",
                    "name": "leading",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>A widget to place in the middle of the static navigation bar instead of\nthe <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a>.<\/p>\n<p>This widget is visible in both collapsed and expanded states. The text\nsupplied in <a href=\"cupertino\/CupertinoSliverNavigationBar\/largeTitle.html\">largeTitle<\/a> will no longer appear in collapsed state if a\n<a href=\"cupertino\/CupertinoSliverNavigationBar\/middle.html\">middle<\/a> widget is provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget middle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/middle.html",
                    "name": "middle",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>True if the navigation bar's background color has no transparency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get opaque =&gt; backgroundColor.alpha == 0xFF;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/opaque.html",
                    "name": "opaque",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Padding for the contents of the navigation bar.<\/p>\n<p>If null, the navigation bar will adopt the following defaults:<\/p>\n<ul>\n<li>Vertically, contents will be sized to the same height as the navigation\nbar itself minus the status bar.<\/li>\n<li>Horizontally, padding will be 16 pixels according to iOS specifications\nunless the leading widget is an automatically inserted back button, in\nwhich case the padding will be 0.<\/li>\n<\/ul>\n<p>Vertical padding won't change the height of the nav bar.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsDirectional padding\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/padding.html",
                    "name": "padding",
                    "isDeprecated": false,
                    "type": "painting.EdgeInsetsDirectional",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Manually specify the previous route's title when automatically implying\nthe leading back button.<\/p>\n<p>Overrides the text shown with the back chevron instead of automatically\nshowing the previous <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>'s <code>title<\/code> when\n<a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a> is true.<\/p>\n<p>Has no effect when <a href=\"cupertino\/CupertinoSliverNavigationBar\/leading.html\">leading<\/a> is not null or if <a href=\"cupertino\/CupertinoSliverNavigationBar\/automaticallyImplyLeading.html\">automaticallyImplyLeading<\/a>\nis false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String previousPageTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/previousPageTitle.html",
                    "name": "previousPageTitle",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Widget to place at the end of the navigation bar. Normally additional actions\ntaken on the page such as a search or edit function.<\/p>\n<p>This widget is visible in both collapsed and expanded states.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget trailing\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/trailing.html",
                    "name": "trailing",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                },
                {
                    "desc": "<p>Whether to transition between navigation bars.<\/p>\n<p>When <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> is true, this navigation bar will transition\non top of the routes instead of inside it if the route being transitioned\nto also has a <a href=\"cupertino\/CupertinoNavigationBar-class.html\">CupertinoNavigationBar<\/a> or a <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>\nwith <a href=\"cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html\">transitionBetweenRoutes<\/a> set to true.<\/p>\n<p>This transition will also occur on edge back swipe gestures like on iOS\nbut only if the previous page below has <code>maintainState<\/code> set to true on the\n<a href=\"widgets\/PageRoute-class.html\">PageRoute<\/a>.<\/p>\n<p>When set to true, only one navigation bar can be present per route unless\n<a href=\"cupertino\/CupertinoSliverNavigationBar\/heroTag.html\">heroTag<\/a> is also set.<\/p>\n<p>This value defaults to true and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool transitionBetweenRoutes\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverNavigationBar\/transitionBetweenRoutes.html",
                    "name": "transitionBetweenRoutes",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverNavigationBar",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A sliver widget implementing the iOS-style pull to refresh content control.<\/p>\n<p>When inserted as the first sliver in a scroll view or behind other slivers\nthat still lets the scrollable overscroll in front of this sliver (such as\nthe <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a>, this widget will:<\/p>\n<ul>\n<li>Let the user draw inside the overscrolled area via the passed in <a href=\"cupertino\/CupertinoSliverRefreshControl\/builder.html\">builder<\/a>.<\/li>\n<li>Trigger the provided <a href=\"cupertino\/CupertinoSliverRefreshControl\/onRefresh.html\">onRefresh<\/a> function when overscrolled far enough to\npass <a href=\"cupertino\/CupertinoSliverRefreshControl\/refreshTriggerPullDistance.html\">refreshTriggerPullDistance<\/a>.<\/li>\n<li>Continue to hold <a href=\"cupertino\/CupertinoSliverRefreshControl\/refreshIndicatorExtent.html\">refreshIndicatorExtent<\/a> amount of space for the <a href=\"cupertino\/CupertinoSliverRefreshControl\/builder.html\">builder<\/a>\nto keep drawing inside of as the <a href=\"dart-async\/Future-class.html\">Future<\/a> returned by <a href=\"cupertino\/CupertinoSliverRefreshControl\/onRefresh.html\">onRefresh<\/a> processes.<\/li>\n<li>Scroll away once the <a href=\"cupertino\/CupertinoSliverRefreshControl\/onRefresh.html\">onRefresh<\/a> <a href=\"dart-async\/Future-class.html\">Future<\/a> completes.<\/li>\n<\/ul>\n<p>The <a href=\"cupertino\/CupertinoSliverRefreshControl\/builder.html\">builder<\/a> function will be informed of the current <a href=\"cupertino\/RefreshIndicatorMode-class.html\">RefreshIndicatorMode<\/a>\nwhen invoking it, except in the <a href=\"cupertino\/RefreshIndicatorMode-class.html\">RefreshIndicatorMode.inactive<\/a> state when\nno space is available and nothing needs to be built. The <a href=\"cupertino\/CupertinoSliverRefreshControl\/builder.html\">builder<\/a> function\nwill otherwise be continuously invoked as the amount of space available\nchanges from overscroll, as the sliver scrolls away after the <a href=\"cupertino\/CupertinoSliverRefreshControl\/onRefresh.html\">onRefresh<\/a>\ntask is done, etc.<\/p>\n<p>Only one refresh can be triggered until the previous refresh has completed\nand the indicator sliver has retracted at least 90% of the way back.<\/p>\n<p>Can only be used in downward-scrolling vertical lists that overscrolls. In\nother words, refreshes can't be triggered with lists using\n<a href=\"widgets\/ClampingScrollPhysics-class.html\">ClampingScrollPhysics<\/a>.<\/p>\n<p>In a typical application, this sliver should be inserted between the app bar\nsliver such as <a href=\"cupertino\/CupertinoSliverNavigationBar-class.html\">CupertinoSliverNavigationBar<\/a> and your main scrollable\ncontent's sliver.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/CustomScrollView-class.html\">CustomScrollView<\/a>, a typical sliver holding scroll view this control\nshould go into.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/controls\/refresh-content-controls\/\">developer.apple.com\/ios\/human-interface-guidelines\/controls\/refresh-content-controls\/<\/a><\/li>\n<li>\n<a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a>, a Material Design version of the pull-to-refresh\nparadigm. This widget works differently than <a href=\"material\/RefreshIndicator-class.html\">RefreshIndicator<\/a> because\ninstead of being an overlay on top of the scrollable, the\n<a href=\"cupertino\/CupertinoSliverRefreshControl-class.html\">CupertinoSliverRefreshControl<\/a> is part of the scrollable and actively occupies\nscrollable space.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoSliverRefreshControl-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoSliverRefreshControl",
            "shortname": "CupertinoSliverRefreshControl",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>A builder that's called as this sliver's size changes, and as the state\nchanges.<\/p>\n<p>A default simple Twitter-style pull-to-refresh indicator is provided if\nnot specified.<\/p>\n<p>Can be set to null, in which case nothing will be drawn in the overscrolled\nspace.<\/p>\n<p>Will not be called when the available space is zero such as before any\noverscroll.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RefreshControlIndicatorBuilder builder\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/builder.html",
                    "isDeprecated": false,
                    "type": "cupertino.RefreshControlIndicatorBuilder",
                    "name": "builder",
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": []
                },
                {
                    "desc": "<p>Callback invoked when pulled by <a href=\"cupertino\/CupertinoSliverRefreshControl\/refreshTriggerPullDistance.html\">refreshTriggerPullDistance<\/a>.<\/p>\n<p>If provided, must return a <a href=\"dart-async\/Future-class.html\">Future<\/a> which will keep the indicator in the\n<a href=\"cupertino\/RefreshIndicatorMode-class.html\">RefreshIndicatorMode.refresh<\/a> state until the <a href=\"dart-async\/Future-class.html\">Future<\/a> completes.<\/p>\n<p>Can be null, in which case a single frame of <a href=\"cupertino\/RefreshIndicatorMode-class.html\">RefreshIndicatorMode.armed<\/a>\nstate will be drawn before going immediately to the <a href=\"cupertino\/RefreshIndicatorMode-class.html\">RefreshIndicatorMode.done<\/a>\nwhere the sliver will start retracting.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RefreshCallback onRefresh\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/onRefresh.html",
                    "isDeprecated": false,
                    "type": "cupertino.RefreshCallback",
                    "name": "onRefresh",
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Create a new refresh control for inserting into a list of slivers.<\/p>\n<p>The <code>refreshTriggerPullDistance<\/code> and <code>refreshIndicatorExtent<\/code> arguments\nmust not be null and must be &gt;= 0.<\/p>\n<p>The <code>builder<\/code> argument may be null, in which case no indicator UI will be\nshown but the <code>onRefresh<\/code> will still be invoked. By default, <code>builder<\/code>\nshows a <a href=\"cupertino\/CupertinoActivityIndicator-class.html\">CupertinoActivityIndicator<\/a>.<\/p>\n<p>The <code>onRefresh<\/code> argument will be called when pulled far enough to trigger\na refresh.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoSliverRefreshControl({\n  Key key,\n  this.refreshTriggerPullDistance = _defaultRefreshTriggerPullDistance,\n  this.refreshIndicatorExtent = _defaultRefreshIndicatorExtent,\n  this.builder = buildSimpleRefreshIndicator,\n  this.onRefresh,\n}) : assert(refreshTriggerPullDistance != null),\n     assert(refreshTriggerPullDistance &gt; 0.0),\n     assert(refreshIndicatorExtent != null),\n     assert(refreshIndicatorExtent &gt;= 0.0),\n     assert(\n       refreshTriggerPullDistance &gt;= refreshIndicatorExtent,\n       'The refresh indicator cannot take more space in its final state '\n       'than the amount initially created by overscrolling.'\n     ),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/CupertinoSliverRefreshControl.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoSliverRefreshControl",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": [
                        {
                            "name": "builder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.RefreshControlIndicatorBuilder"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "onRefresh",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.RefreshCallback"
                        },
                        {
                            "name": "refreshIndicatorExtent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "refreshTriggerPullDistance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Builds a simple refresh indicator that fades in a bottom aligned down\narrow before the refresh is triggered, a <a href=\"cupertino\/CupertinoActivityIndicator-class.html\">CupertinoActivityIndicator<\/a>\nduring the refresh and fades the <a href=\"cupertino\/CupertinoActivityIndicator-class.html\">CupertinoActivityIndicator<\/a> away when\nthe refresh is done.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Widget buildSimpleRefreshIndicator(\n  BuildContext context,\n  RefreshIndicatorMode refreshState,\n  double pulledExtent,\n  double refreshTriggerPullDistance,\n  double refreshIndicatorExtent,\n) {\n  const Curve opacityCurve = Interval(0.4, 0.8, curve: Curves.easeInOut);\n  return Align(\n    alignment: Alignment.bottomCenter,\n    child: Padding(\n      padding: const EdgeInsets.only(bottom: 16.0),\n      child: refreshState == RefreshIndicatorMode.drag\n          ? Opacity(\n              opacity: opacityCurve.transform(\n                min(pulledExtent \/ refreshTriggerPullDistance, 1.0)\n              ),\n              child: const Icon(\n                CupertinoIcons.down_arrow,\n                color: CupertinoColors.inactiveGray,\n                size: 36.0,\n              ),\n            )\n          : Opacity(\n              opacity: opacityCurve.transform(\n                min(pulledExtent \/ refreshIndicatorExtent, 1.0)\n              ),\n              child: const CupertinoActivityIndicator(radius: 14.0),\n            ),\n    ),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/buildSimpleRefreshIndicator.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "buildSimpleRefreshIndicator",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        },
                        {
                            "name": "pulledExtent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "refreshIndicatorExtent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "refreshState",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "cupertino.RefreshIndicatorMode"
                        },
                        {
                            "name": "refreshTriggerPullDistance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoSliverRefreshControl\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoSliverRefreshControlState createState() =&gt; _CupertinoSliverRefreshControlState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoSliverRefreshControlState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": []
                },
                {
                    "desc": "<p>Retrieve the current state of the CupertinoSliverRefreshControl. The same as the\nstate that gets passed into the <a href=\"cupertino\/CupertinoSliverRefreshControl\/builder.html\">builder<\/a> function. Used for testing.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nstatic RefreshIndicatorMode state(BuildContext context) {\n  final _CupertinoSliverRefreshControlState state\n      = context.ancestorStateOfType(const TypeMatcher&lt;_CupertinoSliverRefreshControlState&gt;());\n  return state.refreshState;\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/state.html",
                    "isDeprecated": false,
                    "type": "cupertino.RefreshIndicatorMode",
                    "name": "state",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The amount of space the refresh indicator sliver will keep holding while\n<a href=\"cupertino\/CupertinoSliverRefreshControl\/onRefresh.html\">onRefresh<\/a>'s <a href=\"dart-async\/Future-class.html\">Future<\/a> is still running.<\/p>\n<p>Must not be null and must be positive, but can be 0.0, in which case the\nsliver will start retracting back to 0.0 as soon as the refresh is started.\nDefaults to 60px when not specified.<\/p>\n<p>Must be smaller than <a href=\"cupertino\/CupertinoSliverRefreshControl\/refreshTriggerPullDistance.html\">refreshTriggerPullDistance<\/a>, since the sliver\nshouldn't grow further after triggering the refresh.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double refreshIndicatorExtent\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/refreshIndicatorExtent.html",
                    "name": "refreshIndicatorExtent",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": []
                },
                {
                    "desc": "<p>The amount of overscroll the scrollable must be dragged to trigger a reload.<\/p>\n<p>Must not be null, must be larger than 0.0 and larger than\n<a href=\"cupertino\/CupertinoSliverRefreshControl\/refreshIndicatorExtent.html\">refreshIndicatorExtent<\/a>. Defaults to 100px when not specified.<\/p>\n<p>When overscrolled past this distance, <a href=\"cupertino\/CupertinoSliverRefreshControl\/onRefresh.html\">onRefresh<\/a> will be called if not\nnull and the <a href=\"cupertino\/CupertinoSliverRefreshControl\/builder.html\">builder<\/a> will build in the <a href=\"cupertino\/RefreshIndicatorMode-class.html\">RefreshIndicatorMode.armed<\/a> state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double refreshTriggerPullDistance\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSliverRefreshControl\/refreshTriggerPullDistance.html",
                    "name": "refreshTriggerPullDistance",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSliverRefreshControl",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style switch.<\/p>\n<p>Used to toggle the on\/off state of a single setting.<\/p>\n<p>The switch itself does not maintain any state. Instead, when the state of\nthe switch changes, the widget calls the <a href=\"cupertino\/CupertinoSwitch\/onChanged.html\">onChanged<\/a> callback. Most widgets\nthat use a switch will listen for the <a href=\"cupertino\/CupertinoSwitch\/onChanged.html\">onChanged<\/a> callback and rebuild the\nswitch with a new <a href=\"cupertino\/CupertinoSwitch\/value.html\">value<\/a> to update the visual appearance of the switch.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample shows how to use a <a href=\"cupertino\/CupertinoSwitch-class.html\">CupertinoSwitch<\/a> in a <a href=\"material\/ListTile-class.html\">ListTile<\/a>. The\n<a href=\"widgets\/MergeSemantics-class.html\">MergeSemantics<\/a> is used to turn the entire <a href=\"material\/ListTile-class.html\">ListTile<\/a> into a single item\nfor accessibility tools.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">MergeSemantics(\n  child: ListTile(\n    title: Text('Lights'),\n    trailing: CupertinoSwitch(\n      value: _lights,\n      onChanged: (bool value) { setState(() { _lights = value; }); },\n    ),\n    onTap: () { setState(() { _lights = !_lights; }); },\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/Switch-class.html\">Switch<\/a>, the material design equivalent.<\/li>\n<li><a href=\"https:\/\/developer.apple.com\/ios\/human-interface-guidelines\/controls\/switches\/\">developer.apple.com\/ios\/human-interface-guidelines\/controls\/switches\/<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoSwitch-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoSwitch",
            "shortname": "CupertinoSwitch",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Called when the user toggles with switch on or off.<\/p>\n<p>The switch passes the new value to the callback but does not actually\nchange state until the parent widget rebuilds the switch with the new\nvalue.<\/p>\n<p>If null, the switch will be displayed as disabled.<\/p>\n<p>The callback provided to onChanged should update the state of the parent\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> using the <a href=\"widgets\/State\/setState.html\">State.setState<\/a> method, so that the parent\ngets rebuilt; for example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">CupertinoSwitch(\n  value: _giveVerse,\n  onChanged: (bool newValue) {\n    setState(() {\n      _giveVerse = newValue;\n    });\n  },\n)\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;bool&gt; onChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSwitch\/onChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.bool>",
                    "name": "onChanged",
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style switch.<\/p>\n<p><code>dragStartBehavior<\/code> must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoSwitch({\n  Key key,\n  @required this.value,\n  @required this.onChanged,\n  this.activeColor,\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(dragStartBehavior != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSwitch\/CupertinoSwitch.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoSwitch",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": [
                        {
                            "name": "activeColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "dragStartBehavior",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.DragStartBehavior"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "onChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.bool>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoSwitch\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoSwitchState createState() =&gt; _CupertinoSwitchState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSwitch\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoSwitchState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": []
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoSwitch\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(FlagProperty('value', value: value, ifTrue: 'on', ifFalse: 'off', showName: true));\n  properties.add(ObjectFlagProperty&lt;ValueChanged&lt;bool&gt;&gt;('onChanged', onChanged, ifNull: 'disabled'));\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoSwitch\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The color to use when this switch is on.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoColors\/activeGreen-constant.html\">CupertinoColors.activeGreen<\/a> when null and ignores the\n<a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> in accordance to native iOS behavior.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSwitch\/activeColor.html",
                    "name": "activeColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": []
                },
                {
                    "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, the drag behavior used to move the\nswitch from on to off will begin upon the detection of a drag gesture. If\nset to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first\ndetected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoSwitch\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSwitch\/dragStartBehavior.html",
                    "name": "dragStartBehavior",
                    "isDeprecated": false,
                    "type": "gestures.DragStartBehavior",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": []
                },
                {
                    "desc": "<p>Whether this switch is on or off.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool value\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoSwitch\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoSwitch",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-styled bottom navigation tab bar.<\/p>\n<p>Displays multiple tabs using <a href=\"widgets\/BottomNavigationBarItem-class.html\">BottomNavigationBarItem<\/a> with one tab being\nactive, the first tab by default.<\/p>\n<p>This <a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a> doesn't store the active tab itself. You must\nlisten to the <a href=\"cupertino\/CupertinoTabBar\/onTap.html\">onTap<\/a> callbacks and call <code>setState<\/code> with a new <a href=\"cupertino\/CupertinoTabBar\/currentIndex.html\">currentIndex<\/a>\nfor the new selection to reflect. This can also be done automatically\nby wrapping this with a <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>.<\/p>\n<p>Tab changes typically trigger a switch between <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s, each with its\nown navigation stack, per standard iOS design. This can be done by using\n<a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>s inside each tab builder in <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>.<\/p>\n<p>If the given <a href=\"cupertino\/CupertinoTabBar\/backgroundColor.html\">backgroundColor<\/a>'s opacity is not 1.0 (which is the case by\ndefault), it will produce a blurring effect to the content behind it.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>, which hosts the <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a> at the bottom.<\/li>\n<li>\n<a href=\"widgets\/BottomNavigationBarItem-class.html\">BottomNavigationBarItem<\/a>, an item in a <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTabBar-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTabBar",
            "shortname": "CupertinoTabBar",
            "extends": [
                "widgets.StatelessWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The callback that is called when a item is tapped.<\/p>\n<p>The widget creating the bottom navigation bar needs to keep track of the\ncurrent index and call <code>setState<\/code> to rebuild it with the newly provided\nindex.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;int&gt; onTap\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/onTap.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.int>",
                    "name": "onTap",
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a tab bar in the iOS style.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoTabBar({\n  Key key,\n  @required this.items,\n  this.onTap,\n  this.currentIndex = 0,\n  this.backgroundColor,\n  this.activeColor,\n  this.inactiveColor = CupertinoColors.inactiveGray,\n  this.iconSize = 30.0,\n  this.border = const Border(\n    top: BorderSide(\n      color: _kDefaultTabBarBorderColor,\n      width: 0.0, \/\/ One physical pixel.\n      style: BorderStyle.solid,\n    ),\n  ),\n}) : assert(items != null),\n     assert(\n       items.length &gt;= 2,\n       \"Tabs need at least 2 items to conform to Apple's HIG\",\n     ),\n     assert(currentIndex != null),\n     assert(0 &lt;= currentIndex &amp;&amp; currentIndex &lt; items.length),\n     assert(iconSize != null),\n     assert(inactiveColor != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabBar\/CupertinoTabBar.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTabBar",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": [
                        {
                            "name": "activeColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "border",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.Border"
                        },
                        {
                            "name": "currentIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iconSize",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "inactiveColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "items",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<widgets.BottomNavigationBarItem>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "onTap",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Describes the part of the user interface represented by this widget.<\/p>\n<p>The framework calls this method when this widget is inserted into the\ntree in a given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> and when the dependencies of this widget\nchange (e.g., an <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> referenced by this widget changes).<\/p>\n<p>The framework replaces the subtree below this widget with the widget\nreturned by this method, either by updating the existing subtree or by\nremoving the subtree and inflating a new subtree, depending on whether the\nwidget returned by this method can update the root of the existing\nsubtree, as determined by calling <a href=\"widgets\/Widget\/canUpdate.html\">Widget.canUpdate<\/a>.<\/p>\n<p>Typically implementations return a newly created constellation of widgets\nthat are configured with information from this widget's constructor and\nfrom the given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>.<\/p>\n<p>The given <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> contains information about the location in the\ntree at which this widget is being built. For example, the context\nprovides the set of inherited widgets for this location in the tree. A\ngiven widget might be built with multiple different <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\narguments over time if the widget is moved around the tree or if the\nwidget is inserted into the tree in multiple places at once.<\/p>\n<p>The implementation of this method must only depend on:<\/p>\n<ul>\n<li>the fields of the widget, which themselves must not change over time,\nand<\/li>\n<li>any ambient state obtained from the <code>context<\/code> using\n<a href=\"widgets\/BuildContext\/inheritFromWidgetOfExactType.html\">BuildContext.inheritFromWidgetOfExactType<\/a>.<\/li>\n<\/ul>\n<p>If a widget's <a href=\"cupertino\/CupertinoTabBar\/build.html\">build<\/a> method is to depend on anything else, use a\n<a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a> instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/StatelessWidget-class.html\">StatelessWidget<\/a>, which contains the discussion on performance considerations.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nWidget build(BuildContext context) {\n  final double bottomPadding = MediaQuery.of(context).padding.bottom;\n\n  Widget result = DecoratedBox(\n    decoration: BoxDecoration(\n      border: border,\n      color: backgroundColor ?? CupertinoTheme.of(context).barBackgroundColor,\n    ),\n    child: SizedBox(\n      height: _kTabBarHeight + bottomPadding,\n      child: IconTheme.merge( \/\/ Default with the inactive state.\n        data: IconThemeData(\n          color: inactiveColor,\n          size: iconSize,\n        ),\n        child: DefaultTextStyle( \/\/ Default with the inactive state.\n          style: CupertinoTheme.of(context).textTheme.tabLabelTextStyle.copyWith(color: inactiveColor),\n          child: Padding(\n            padding: EdgeInsets.only(bottom: bottomPadding),\n            child: Row(\n              \/\/ Align bottom since we want the labels to be aligned.\n              crossAxisAlignment: CrossAxisAlignment.end,\n              children: _buildTabItems(context),\n            ),\n          ),\n        ),\n      ),\n    ),\n  );\n\n  if (!opaque(context)) {\n    \/\/ For non-opaque backgrounds, apply a blur effect.\n    result = ClipRect(\n      child: BackdropFilter(\n        filter: ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0),\n        child: result,\n      ),\n    );\n  }\n\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabBar\/build.html",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "name": "build",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                },
                {
                    "desc": "<p>Create a clone of the current <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a> but with provided\nparameters overridden.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoTabBar copyWith({\n  Key key,\n  List&lt;BottomNavigationBarItem&gt; items,\n  Color backgroundColor,\n  Color activeColor,\n  Color inactiveColor,\n  Size iconSize,\n  Border border,\n  int currentIndex,\n  ValueChanged&lt;int&gt; onTap,\n}) {\n  return CupertinoTabBar(\n    key: key ?? this.key,\n    items: items ?? this.items,\n    backgroundColor: backgroundColor ?? this.backgroundColor,\n    activeColor: activeColor ?? this.activeColor,\n    inactiveColor: inactiveColor ?? this.inactiveColor,\n    iconSize: iconSize ?? this.iconSize,\n    border: border ?? this.border,\n    currentIndex: currentIndex ?? this.currentIndex,\n    onTap: onTap ?? this.onTap,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabBar\/copyWith.html",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoTabBar",
                    "name": "copyWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": [
                        {
                            "name": "activeColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "border",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.Border"
                        },
                        {
                            "name": "currentIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iconSize",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Size"
                        },
                        {
                            "name": "inactiveColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "items",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<widgets.BottomNavigationBarItem>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "onTap",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.ValueChanged<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Indicates whether the tab bar is fully opaque or can have contents behind\nit show through it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool opaque(BuildContext context) {\n  final Color backgroundColor =\n      this.backgroundColor ?? CupertinoTheme.of(context).barBackgroundColor;\n  return backgroundColor.alpha == 0xFF;\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabBar\/opaque.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "opaque",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The foreground color of the icon and title for the <a href=\"widgets\/BottomNavigationBarItem-class.html\">BottomNavigationBarItem<\/a>\nof the selected tab.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>primaryColor<\/code> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color activeColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/activeColor.html",
                    "name": "activeColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The background color of the tab bar. If it contains transparency, the\ntab bar will automatically produce a blurring effect to the content\nbehind it.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>barBackgroundColor<\/code> when null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/backgroundColor.html",
                    "name": "backgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The border of the <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>.<\/p>\n<p>The default value is a one physical pixel top border with grey color.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Border border\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/border.html",
                    "name": "border",
                    "isDeprecated": false,
                    "type": "painting.Border",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The index into <a href=\"cupertino\/CupertinoTabBar\/items.html\">items<\/a> of the current active item.<\/p>\n<p>Must not be null and must inclusively be between 0 and the number of tabs\nminus 1.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int currentIndex\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/currentIndex.html",
                    "name": "currentIndex",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The size of all of the <a href=\"widgets\/BottomNavigationBarItem-class.html\">BottomNavigationBarItem<\/a> icons.<\/p>\n<p>This value is used to configure the <a href=\"widgets\/IconTheme-class.html\">IconTheme<\/a> for the navigation bar.\nWhen a <a href=\"widgets\/BottomNavigationBarItem\/icon.html\">BottomNavigationBarItem.icon<\/a> widget is not an <a href=\"widgets\/Icon-class.html\">Icon<\/a> the widget\nshould configure itself to match the icon theme's size and color.<\/p>\n<p>Must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double iconSize\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/iconSize.html",
                    "name": "iconSize",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The foreground color of the icon and title for the <a href=\"widgets\/BottomNavigationBarItem-class.html\">BottomNavigationBarItem<\/a>s\nin the unselected state.<\/p>\n<p>Defaults to <a href=\"cupertino\/CupertinoColors\/inactiveGray-constant.html\">CupertinoColors.inactiveGray<\/a> and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color inactiveColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/inactiveColor.html",
                    "name": "inactiveColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The interactive items laid out within the bottom navigation bar.<\/p>\n<p>Must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;BottomNavigationBarItem&gt; items\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/items.html",
                    "name": "items",
                    "isDeprecated": false,
                    "type": "dart:core.List<widgets.BottomNavigationBarItem>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                },
                {
                    "desc": "<p>The size this widget would prefer if it were otherwise unconstrained.<\/p>\n<p>In many cases it's only necessary to define one preferred dimension.\nFor example the <a href=\"material\/Scaffold-class.html\">Scaffold<\/a> only depends on its app bar's preferred\nheight. In that case implementations of this method can just return\n<code>new Size.fromHeight(myAppBarHeight)<\/code>;<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSize get preferredSize =&gt; const Size.fromHeight(_kTabBarHeight);<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabBar\/preferredSize.html",
                    "name": "preferredSize",
                    "isDeprecated": false,
                    "type": "dart:ui.Size",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabBar",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Implements a tabbed iOS application's root layout and behavior structure.<\/p>\n<p>The scaffold lays out the tab bar at the bottom and the content between or\nbehind the tab bar.<\/p>\n<p>A <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> and a <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a> are required. The <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>\nwill automatically listen to the provided <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>'s tap callbacks\nto change the active tab.<\/p>\n<p>Tabs' contents are built with the provided <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a> at the active\ntab index. The <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a> must be able to build the same number of\npages as there are <code>tabBar.items<\/code>. Inactive tabs will be moved <a href=\"widgets\/Offstage-class.html\">Offstage<\/a>\nand their animations disabled.<\/p>\n<p>Use <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a> as the content of each tab to support tabs with parallel\nnavigation state and history.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA sample code implementing a typical iOS information architecture with tabs.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">CupertinoTabScaffold(\n  tabBar: CupertinoTabBar(\n    items: &lt;BottomNavigationBarItem&gt; [\n      \/\/ ...\n    ],\n  ),\n  tabBuilder: (BuildContext context, int index) {\n    return CupertinoTabView(\n      builder: (BuildContext context) {\n        return CupertinoPageScaffold(\n          navigationBar: CupertinoNavigationBar(\n            middle: Text('Page 1 of tab $index'),\n          ),\n          child: Center(\n            child: CupertinoButton(\n              child: const Text('Next page'),\n              onPressed: () {\n                Navigator.of(context).push(\n                  CupertinoPageRoute&lt;void&gt;(\n                    builder: (BuildContext context) {\n                      return CupertinoPageScaffold(\n                        navigationBar: CupertinoNavigationBar(\n                          middle: Text('Page 2 of tab $index'),\n                        ),\n                        child: Center(\n                          child: CupertinoButton(\n                            child: const Text('Back'),\n                            onPressed: () { Navigator.of(context).pop(); },\n                          ),\n                        ),\n                      );\n                    },\n                  ),\n                );\n              },\n            ),\n          ),\n        );\n      },\n    );\n  },\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>To push a route above all tabs instead of inside the currently selected one\n(such as when showing a dialog on top of this scaffold), use\n<code>Navigator.of(rootNavigator: true)<\/code> from inside the <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> of a\n<a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>, the bottom tab bar inserted in the scaffold.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>, the typical root content of each tab that holds its own\n<a href=\"widgets\/Navigator-class.html\">Navigator<\/a> stack.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>, a route hosting modal pages with iOS style transitions.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a>, typical contents of an iOS modal page implementing\nlayout with a navigation bar on top.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTabScaffold-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTabScaffold",
            "shortname": "CupertinoTabScaffold",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>An <a href=\"widgets\/IndexedWidgetBuilder.html\">IndexedWidgetBuilder<\/a> that's called when tabs become active.<\/p>\n<p>The widgets built by <a href=\"widgets\/IndexedWidgetBuilder.html\">IndexedWidgetBuilder<\/a> is typically a <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>\nin order to achieve the parallel hierarchies information architecture seen\non iOS apps with tab bars.<\/p>\n<p>When the tab becomes inactive, its content is still cached in the widget\ntree <a href=\"widgets\/Offstage-class.html\">Offstage<\/a> and its animations disabled.<\/p>\n<p>Content can slide under the <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> when they're translucent.\nIn that case, the child's <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>'s <a href=\"widgets\/MediaQuery-class.html\">MediaQuery<\/a> will have a\nbottom padding indicating the area of obstructing overlap from the\n<a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a>.<\/p>\n<p>Must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final IndexedWidgetBuilder tabBuilder\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabScaffold\/tabBuilder.html",
                    "isDeprecated": false,
                    "type": "widgets.IndexedWidgetBuilder",
                    "name": "tabBuilder",
                    "memberOf": "cupertino.CupertinoTabScaffold",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a layout for applications with a tab bar at the bottom.<\/p>\n<p>The <code>tabBar<\/code> and <code>tabBuilder<\/code> arguments must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTabScaffold({\n  Key key,\n  @required this.tabBar,\n  @required this.tabBuilder,\n  this.backgroundColor,\n  this.resizeToAvoidBottomInset = true,\n}) : assert(tabBar != null),\n     assert(tabBuilder != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabScaffold\/CupertinoTabScaffold.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTabScaffold",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabScaffold",
                    "params": [
                        {
                            "name": "backgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "resizeToAvoidBottomInset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "tabBar",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.CupertinoTabBar"
                        },
                        {
                            "name": "tabBuilder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.IndexedWidgetBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoTabScaffold\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoTabScaffoldState createState() =&gt; _CupertinoTabScaffoldState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabScaffold\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoTabScaffoldState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabScaffold",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The color of the widget that underlies the entire scaffold.<\/p>\n<p>By default uses <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>'s <code>scaffoldBackgroundColor<\/code> when null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabScaffold\/backgroundColor.html",
                    "name": "backgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabScaffold",
                    "params": []
                },
                {
                    "desc": "<p>Whether the <code>child<\/code> should size itself to avoid the window's bottom inset.<\/p>\n<p>For example, if there is an onscreen keyboard displayed above the\nscaffold, the body can be resized to avoid overlapping the keyboard, which\nprevents widgets inside the body from being obscured by the keyboard.<\/p>\n<p>Defaults to true and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool resizeToAvoidBottomInset\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabScaffold\/resizeToAvoidBottomInset.html",
                    "name": "resizeToAvoidBottomInset",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabScaffold",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> is a <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a> drawn at the bottom of the screen\nthat lets the user switch between different tabs in the main content area\nwhen present.<\/p>\n<p>Setting and changing <a href=\"cupertino\/CupertinoTabBar\/currentIndex.html\">CupertinoTabBar.currentIndex<\/a> programmatically will\nchange the currently selected tab item in the <a href=\"cupertino\/CupertinoTabScaffold\/tabBar.html\">tabBar<\/a> as well as change\nthe currently focused tab from the <a href=\"cupertino\/CupertinoTabScaffold\/tabBuilder.html\">tabBuilder<\/a>.\nIf <a href=\"cupertino\/CupertinoTabBar\/onTap.html\">CupertinoTabBar.onTap<\/a> is provided, it will still be called.\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a> automatically also listen to the\n<a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>'s <code>onTap<\/code> to change the <a href=\"cupertino\/CupertinoTabBar-class.html\">CupertinoTabBar<\/a>'s <code>currentIndex<\/code>\nand change the actively displayed tab in <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>'s own\nmain content area.<\/p>\n<p>If translucent, the main content may slide behind it.\nOtherwise, the main content's bottom margin will be offset by its height.<\/p>\n<p>Must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoTabBar tabBar\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabScaffold\/tabBar.html",
                    "name": "tabBar",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoTabBar",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabScaffold",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A single tab view with its own <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> state and history.<\/p>\n<p>A typical tab view used as the content of each tab in a <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>\nwhere multiple tabs with parallel navigation states and history can\nco-exist.<\/p>\n<p><a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a> configures the top-level <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> to search for routes\nin the following order:<\/p>\n<ol>\n<li>\n<p>For the <code>\/<\/code> route, the <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> property, if non-null, is used.<\/p>\n<\/li>\n<li>\n<p>Otherwise, the <a href=\"cupertino\/CupertinoTabView\/routes.html\">routes<\/a> table is used, if it has an entry for the route,\nincluding <code>\/<\/code> if <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> is not specified.<\/p>\n<\/li>\n<li>\n<p>Otherwise, <a href=\"cupertino\/CupertinoTabView\/onGenerateRoute.html\">onGenerateRoute<\/a> is called, if provided. It should return a\nnon-null value for any <em>valid<\/em> route not handled by <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> and <a href=\"cupertino\/CupertinoTabView\/routes.html\">routes<\/a>.<\/p>\n<\/li>\n<li>\n<p>Finally if all else fails <a href=\"cupertino\/CupertinoTabView\/onUnknownRoute.html\">onUnknownRoute<\/a> is called.<\/p>\n<\/li>\n<\/ol>\n<p>These navigation properties are not shared with any sibling <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>\nnor any ancestor or descendant <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> instances.<\/p>\n<p>To push a route above this <a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a> instead of inside it (such\nas when showing a dialog on top of all tabs), use\n<code>Navigator.of(rootNavigator: true)<\/code>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>, a typical host that supports switching between tabs.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>, a typical modal page route pushed onto the\n<a href=\"cupertino\/CupertinoTabView-class.html\">CupertinoTabView<\/a>'s <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTabView-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTabView",
            "shortname": "CupertinoTabView",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The widget builder for the default route of the tab view\n(<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a>, which is <code>\/<\/code>).<\/p>\n<p>If a <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> is specified, then <a href=\"cupertino\/CupertinoTabView\/routes.html\">routes<\/a> must not include an entry for <code>\/<\/code>,\nas <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> takes its place.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final WidgetBuilder builder\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/builder.html",
                    "isDeprecated": false,
                    "type": "widgets.WidgetBuilder",
                    "name": "builder",
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                },
                {
                    "desc": "<p>The route generator callback used when the tab view is navigated to a named route.<\/p>\n<p>This is used if <a href=\"cupertino\/CupertinoTabView\/routes.html\">routes<\/a> does not contain the requested route.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteFactory onGenerateRoute\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/onGenerateRoute.html",
                    "isDeprecated": false,
                    "type": "widgets.RouteFactory",
                    "name": "onGenerateRoute",
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                },
                {
                    "desc": "<p>Called when <a href=\"cupertino\/CupertinoTabView\/onGenerateRoute.html\">onGenerateRoute<\/a> also fails to generate a route.<\/p>\n<p>This callback is typically used for error handling. For example, this\ncallback might always generate a \"not found\" page that describes the route\nthat wasn't found.<\/p>\n<p>The default implementation pushes a route that displays an ugly error\nmessage.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final RouteFactory onUnknownRoute\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/onUnknownRoute.html",
                    "isDeprecated": false,
                    "type": "widgets.RouteFactory",
                    "name": "onUnknownRoute",
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates the content area for a tab in a <a href=\"cupertino\/CupertinoTabScaffold-class.html\">CupertinoTabScaffold<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTabView({\n  Key key,\n  this.builder,\n  this.navigatorKey,\n  this.defaultTitle,\n  this.routes,\n  this.onGenerateRoute,\n  this.onUnknownRoute,\n  this.navigatorObservers = const &lt;NavigatorObserver&gt;[],\n}) : assert(navigatorObservers != null),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabView\/CupertinoTabView.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTabView",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": [
                        {
                            "name": "builder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.WidgetBuilder"
                        },
                        {
                            "name": "defaultTitle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "navigatorKey",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.GlobalKey<widgets.NavigatorState>"
                        },
                        {
                            "name": "navigatorObservers",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<widgets.NavigatorObserver>"
                        },
                        {
                            "name": "onGenerateRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.RouteFactory"
                        },
                        {
                            "name": "onUnknownRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.RouteFactory"
                        },
                        {
                            "name": "routes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<dart:core.String<widgets.WidgetBuilder>>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoTabView\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoTabViewState createState() {\n  return _CupertinoTabViewState();\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTabView\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoTabViewState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The title of the default route.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String defaultTitle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/defaultTitle.html",
                    "name": "defaultTitle",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                },
                {
                    "desc": "<p>A key to use when building this widget's <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>.<\/p>\n<p>If a <a href=\"cupertino\/CupertinoTabView\/navigatorKey.html\">navigatorKey<\/a> is specified, the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> can be directly\nmanipulated without first obtaining it from a <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a> via\n<a href=\"widgets\/Navigator\/of.html\">Navigator.of<\/a>: from the <a href=\"cupertino\/CupertinoTabView\/navigatorKey.html\">navigatorKey<\/a>, use the <a href=\"widgets\/GlobalKey\/currentState.html\">GlobalKey.currentState<\/a>\ngetter.<\/p>\n<p>If this is changed, a new <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> will be created, losing all the\ntab's state in the process; in that case, the <a href=\"cupertino\/CupertinoTabView\/navigatorObservers.html\">navigatorObservers<\/a>\nmust also be changed, since the previous observers will be attached to the\nprevious navigator.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GlobalKey&lt;NavigatorState&gt; navigatorKey\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/navigatorKey.html",
                    "name": "navigatorKey",
                    "isDeprecated": false,
                    "type": "widgets.GlobalKey<widgets.NavigatorState>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                },
                {
                    "desc": "<p>The list of observers for the <a href=\"widgets\/Navigator-class.html\">Navigator<\/a> created in this tab view.<\/p>\n<p>This list of observers is not shared with ancestor or descendant <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;NavigatorObserver&gt; navigatorObservers\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/navigatorObservers.html",
                    "name": "navigatorObservers",
                    "isDeprecated": false,
                    "type": "dart:core.List<widgets.NavigatorObserver>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                },
                {
                    "desc": "<p>This tab view's routing table.<\/p>\n<p>When a named route is pushed with <a href=\"widgets\/Navigator\/pushNamed.html\">Navigator.pushNamed<\/a> inside this tab view,\nthe route name is looked up in this map. If the name is present,\nthe associated <a href=\"widgets\/WidgetBuilder.html\">WidgetBuilder<\/a> is used to construct a <a href=\"cupertino\/CupertinoPageRoute-class.html\">CupertinoPageRoute<\/a>\nthat performs an appropriate transition to the new route.<\/p>\n<p>If the tab view only has one page, then you can specify it using <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> instead.<\/p>\n<p>If <a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a> is specified, then it implies an entry in this table for the\n<a href=\"widgets\/Navigator\/defaultRouteName-constant.html\">Navigator.defaultRouteName<\/a> route (<code>\/<\/code>), and it is an error to\nredundantly provide such a route in the <a href=\"cupertino\/CupertinoTabView\/routes.html\">routes<\/a> table.<\/p>\n<p>If a route is requested that is not specified in this table (or by\n<a href=\"cupertino\/CupertinoTabView\/builder.html\">builder<\/a>), then the <a href=\"cupertino\/CupertinoTabView\/onGenerateRoute.html\">onGenerateRoute<\/a> callback is called to build the page\ninstead.<\/p>\n<p>This routing table is not shared with any routing tables of ancestor or\ndescendant <a href=\"widgets\/Navigator-class.html\">Navigator<\/a>s.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;String, WidgetBuilder&gt; routes\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTabView\/routes.html",
                    "name": "routes",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<widgets.WidgetBuilder>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTabView",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An iOS-style text field.<\/p>\n<p>A text field lets the user enter text, either with a hardware keyboard or with\nan onscreen keyboard.<\/p>\n<p>This widget corresponds to both a <code>UITextField<\/code> and an editable <code>UITextView<\/code>\non iOS.<\/p>\n<p>The text field calls the <a href=\"cupertino\/CupertinoTextField\/onChanged.html\">onChanged<\/a> callback whenever the user changes the\ntext in the field. If the user indicates that they are done typing in the\nfield (e.g., by pressing a button on the soft keyboard), the text field\ncalls the <a href=\"cupertino\/CupertinoTextField\/onSubmitted.html\">onSubmitted<\/a> callback.<\/p>\n<p>To control the text that is displayed in the text field, use the\n<a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a>. For example, to set the initial value of the text field, use\na <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> that already contains some text such as:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyPrefilledText extends StatefulWidget {\n  @override\n  _MyPrefilledTextState createState() =&gt; _MyPrefilledTextState();\n}\n\nclass _MyPrefilledTextState extends State&lt;MyPrefilledText&gt; {\n  TextEditingController _textController;\n\n  @override\n  void initState() {\n    super.initState();\n    _textController = TextEditingController(text: 'initial text');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoTextField(controller: _textController);\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> can also control the selection and composing region (and to\nobserve changes to the text, selection, and composing region).<\/p>\n<p>The text field has an overridable <a href=\"cupertino\/CupertinoTextField\/decoration.html\">decoration<\/a> that, by default, draws a\nrounded rectangle border around the text field. If you set the <a href=\"cupertino\/CupertinoTextField\/decoration.html\">decoration<\/a>\nproperty to null, the decoration will be removed entirely.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uitextfield\">developer.apple.com\/documentation\/uikit\/uitextfield<\/a><\/li>\n<li>\n<a href=\"material\/TextField-class.html\">TextField<\/a>, an alternative text field widget that follows the Material\nDesign UI conventions.<\/li>\n<li>\n<a href=\"widgets\/EditableText-class.html\">EditableText<\/a>, which is the raw text editing control at the heart of a\n<a href=\"material\/TextField-class.html\">TextField<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTextField-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTextField",
            "shortname": "CupertinoTextField",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Called when the user initiates a change to the TextField's\nvalue: when they have inserted or deleted text.<\/p>\n<p>This callback does run not when the TextField's text is changed\nprogrammatically, via the TextField's <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a>. Typically it\nisn't necessary to be notified of such changes, since they're\ninitiated by the app itself.<\/p>\n<p>To be notified of all changes to the TextField's text, cursor,\nand selection, one can add a listener to its <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> with\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">TextEditingController.addListener<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;String&gt; onChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/onChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.String>",
                    "name": "onChanged",
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Called when the user submits editable content (e.g., user presses the \"done\"\nbutton on the keyboard).<\/p>\n<p>The default implementation of <a href=\"cupertino\/CupertinoTextField\/onEditingComplete.html\">onEditingComplete<\/a> executes 2 different\nbehaviors based on the situation:<\/p>\n<ul>\n<li>\n<p>When a completion action is pressed, such as \"done\", \"go\", \"send\", or\n\"search\", the user's content is submitted to the <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a> and then\nfocus is given up.<\/p>\n<\/li>\n<li>\n<p>When a non-completion action is pressed, such as \"next\" or \"previous\",\nthe user's content is submitted to the <a href=\"cupertino\/CupertinoTextField\/controller.html\">controller<\/a>, but focus is not\ngiven up because developers may want to immediately move focus to\nanother input widget within <a href=\"cupertino\/CupertinoTextField\/onSubmitted.html\">onSubmitted<\/a>.<\/p>\n<\/li>\n<\/ul>\n<p>Providing <a href=\"cupertino\/CupertinoTextField\/onEditingComplete.html\">onEditingComplete<\/a> prevents the aforementioned default behavior.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onEditingComplete\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/onEditingComplete.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onEditingComplete",
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Called when the user indicates that they are done editing the text in the\nfield.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;String&gt; onSubmitted\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/onSubmitted.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.String>",
                    "name": "onSubmitted",
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates an iOS-style text field.<\/p>\n<p>To provide a pre-filled text entry, pass in a <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a> with\nan initial value to the <code>controller<\/code> parameter.<\/p>\n<p>To provide a hint placeholder text that appears when the text entry is\nempty, pass a <a href=\"dart-core\/String-class.html\">String<\/a> to the <code>placeholder<\/code> parameter.<\/p>\n<p>The <code>maxLines<\/code> property can be set to null to remove the restriction on\nthe number of lines. In this mode, the intrinsic height of the widget will\ngrow as the number of lines of text grows. By default, it is <code>1<\/code>, meaning\nthis is a single-line text field and will scroll horizontally when\noverflown. <code>maxLines<\/code> must not be zero.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><code>minLines<\/code><\/li>\n<li>\n<code>expands<\/code>, to allow the widget to size itself to its parent's height.<\/li>\n<li>\n<code>maxLength<\/code>, which discusses the precise meaning of \"number of\ncharacters\" and how it may differ from the intuitive meaning.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTextField({\n  Key key,\n  this.controller,\n  this.focusNode,\n  this.decoration = _kDefaultRoundedBorderDecoration,\n  this.padding = const EdgeInsets.all(6.0),\n  this.placeholder,\n  this.prefix,\n  this.prefixMode = OverlayVisibilityMode.always,\n  this.suffix,\n  this.suffixMode = OverlayVisibilityMode.always,\n  this.clearButtonMode = OverlayVisibilityMode.never,\n  TextInputType keyboardType,\n  this.textInputAction,\n  this.textCapitalization = TextCapitalization.none,\n  this.style,\n  this.strutStyle,\n  this.textAlign = TextAlign.start,\n  this.autofocus = false,\n  this.obscureText = false,\n  this.autocorrect = true,\n  this.maxLines = 1,\n  this.minLines,\n  this.expands = false,\n  this.maxLength,\n  this.maxLengthEnforced = true,\n  this.onChanged,\n  this.onEditingComplete,\n  this.onSubmitted,\n  this.inputFormatters,\n  this.enabled,\n  this.cursorWidth = 2.0,\n  this.cursorRadius = const Radius.circular(2.0),\n  this.cursorColor,\n  this.keyboardAppearance,\n  this.scrollPadding = const EdgeInsets.all(20.0),\n  this.dragStartBehavior = DragStartBehavior.start,\n}) : assert(textAlign != null),\n     assert(autofocus != null),\n     assert(obscureText != null),\n     assert(autocorrect != null),\n     assert(maxLengthEnforced != null),\n     assert(scrollPadding != null),\n     assert(dragStartBehavior != null),\n     assert(maxLines == null || maxLines &gt; 0),\n     assert(minLines == null || minLines &gt; 0),\n     assert(\n       (maxLines == null) || (minLines == null) || (maxLines &gt;= minLines),\n       'minLines can\\'t be greater than maxLines',\n     ),\n     assert(expands != null),\n     assert(\n       !expands || (maxLines == null &amp;&amp; minLines == null),\n       'minLines and maxLines must be null when expands is true.',\n     ),\n     assert(maxLength == null || maxLength &gt; 0),\n     assert(clearButtonMode != null),\n     assert(prefixMode != null),\n     assert(suffixMode != null),\n     keyboardType = keyboardType ?? (maxLines == 1 ? TextInputType.text : TextInputType.multiline),\n     super(key: key);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTextField\/CupertinoTextField.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTextField",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": [
                        {
                            "name": "autocorrect",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "autofocus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "clearButtonMode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.OverlayVisibilityMode"
                        },
                        {
                            "name": "controller",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.TextEditingController"
                        },
                        {
                            "name": "cursorColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "cursorRadius",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Radius"
                        },
                        {
                            "name": "cursorWidth",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "decoration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.BoxDecoration"
                        },
                        {
                            "name": "dragStartBehavior",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "gestures.DragStartBehavior"
                        },
                        {
                            "name": "enabled",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "expands",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "focusNode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.FocusNode"
                        },
                        {
                            "name": "inputFormatters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<services.TextInputFormatter>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "keyboardAppearance",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Brightness"
                        },
                        {
                            "name": "keyboardType",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "services.TextInputType"
                        },
                        {
                            "name": "maxLength",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "maxLengthEnforced",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "maxLines",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "minLines",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "obscureText",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "onChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.String>"
                        },
                        {
                            "name": "onEditingComplete",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onSubmitted",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.String>"
                        },
                        {
                            "name": "padding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.EdgeInsetsGeometry"
                        },
                        {
                            "name": "placeholder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "prefix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "prefixMode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.OverlayVisibilityMode"
                        },
                        {
                            "name": "scrollPadding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.EdgeInsets"
                        },
                        {
                            "name": "strutStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.StrutStyle"
                        },
                        {
                            "name": "style",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "suffix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "suffixMode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.OverlayVisibilityMode"
                        },
                        {
                            "name": "textAlign",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.TextAlign"
                        },
                        {
                            "name": "textCapitalization",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "services.TextCapitalization"
                        },
                        {
                            "name": "textInputAction",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "services.TextInputAction"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoTextField\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_CupertinoTextFieldState createState() =&gt; _CupertinoTextFieldState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTextField\/createState.html",
                    "isDeprecated": false,
                    "type": "<_CupertinoTextFieldState>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoTextField\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n\n  properties.add(DiagnosticsProperty&lt;TextEditingController&gt;('controller', controller, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;FocusNode&gt;('focusNode', focusNode, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;BoxDecoration&gt;('decoration', decoration));\n  properties.add(DiagnosticsProperty&lt;EdgeInsetsGeometry&gt;('padding', padding));\n  properties.add(StringProperty('placeholder', placeholder));\n  properties.add(DiagnosticsProperty&lt;OverlayVisibilityMode&gt;('prefix', prefix == null ? null : prefixMode));\n  properties.add(DiagnosticsProperty&lt;OverlayVisibilityMode&gt;('suffix', suffix == null ? null : suffixMode));\n  properties.add(DiagnosticsProperty&lt;OverlayVisibilityMode&gt;('clearButtonMode', clearButtonMode));\n  properties.add(DiagnosticsProperty&lt;TextInputType&gt;('keyboardType', keyboardType, defaultValue: TextInputType.text));\n  properties.add(DiagnosticsProperty&lt;TextStyle&gt;('style', style, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('autofocus', autofocus, defaultValue: false));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('autocorrect', autocorrect, defaultValue: false));\n  properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n  properties.add(IntProperty('minLines', minLines, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('expands', expands, defaultValue: false));\n  properties.add(IntProperty('maxLength', maxLength, defaultValue: null));\n  properties.add(FlagProperty('maxLengthEnforced', value: maxLengthEnforced, ifTrue: 'max length enforced'));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('cursorColor', cursorColor, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTextField\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether to enable autocorrection.<\/p>\n<p>Defaults to true. Cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autocorrect\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/autocorrect.html",
                    "name": "autocorrect",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Whether this text field should focus itself if nothing else is already\nfocused.<\/p>\n<p>If true, the keyboard will open as soon as this text field obtains focus.\nOtherwise, the keyboard is only shown after the user taps the text field.<\/p>\n<p>Defaults to false. Cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool autofocus\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/autofocus.html",
                    "name": "autofocus",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Show an iOS-style clear button to clear the current text entry.<\/p>\n<p>Can be made to appear depending on various text states of the\n<a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>.<\/p>\n<p>Will only appear if no <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> widget is appearing.<\/p>\n<p>Defaults to never appearing and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OverlayVisibilityMode clearButtonMode\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/clearButtonMode.html",
                    "name": "clearButtonMode",
                    "isDeprecated": false,
                    "type": "cupertino.OverlayVisibilityMode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Controls the text being edited.<\/p>\n<p>If null, this widget will create its own <a href=\"widgets\/TextEditingController-class.html\">TextEditingController<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextEditingController controller\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/controller.html",
                    "name": "controller",
                    "isDeprecated": false,
                    "type": "widgets.TextEditingController",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The color to use when painting the cursor.<\/p>\n<p>Defaults to the <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">CupertinoThemeData.primaryColor<\/a> of the ambient theme,\nwhich itself defaults to <a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a> in the light theme\nand <a href=\"cupertino\/CupertinoColors\/activeOrange-constant.html\">CupertinoColors.activeOrange<\/a> in the dark theme.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color cursorColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/cursorColor.html",
                    "name": "cursorColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>How rounded the corners of the cursor should be.<\/p>\n<p>By default, the cursor has no radius.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius cursorRadius\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/cursorRadius.html",
                    "name": "cursorRadius",
                    "isDeprecated": false,
                    "type": "dart:ui.Radius",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>How thick the cursor will be.<\/p>\n<p>Defaults to 2.0<\/p>\n<p>The cursor will draw under the text. The cursor width will extend\nto the right of the boundary between characters for left-to-right text\nand to the left for right-to-left text. This corresponds to extending\ndownstream relative to the selected position. Negative values may be used\nto reverse this behavior.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double cursorWidth\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/cursorWidth.html",
                    "name": "cursorWidth",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Controls the <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> of the box behind the text input.<\/p>\n<p>Defaults to having a rounded rectangle grey border and can be null to have\nno box decoration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxDecoration decoration\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/decoration.html",
                    "name": "decoration",
                    "isDeprecated": false,
                    "type": "painting.BoxDecoration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Determines the way that drag start behavior is handled.<\/p>\n<p>If set to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>, scrolling drag behavior will\nbegin upon the detection of a drag gesture. If set to\n<a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> it will begin when a down event is first detected.<\/p>\n<p>In general, setting this to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a> will make drag\nanimation smoother and setting it to <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.down<\/a> will make\ndrag behavior feel slightly more reactive.<\/p>\n<p>By default, the drag start behavior is <a href=\"gestures\/DragStartBehavior-class.html\">DragStartBehavior.start<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"cupertino\/CupertinoTextField\/dragStartBehavior.html\">DragGestureRecognizer.dragStartBehavior<\/a>, which gives an example for the different behaviors.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DragStartBehavior dragStartBehavior\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/dragStartBehavior.html",
                    "name": "dragStartBehavior",
                    "isDeprecated": false,
                    "type": "gestures.DragStartBehavior",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Disables the text field when false.<\/p>\n<p>Text fields in disabled states have a light grey background and don't\nrespond to touch events including the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a>, <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> and the clear\nbutton.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/enabled.html",
                    "name": "enabled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Whether this widget's height will be sized to fill its parent.<\/p>\n<p>If set to true and wrapped in a parent widget like <a href=\"widgets\/Expanded-class.html\">Expanded<\/a> or\n<a href=\"widgets\/SizedBox-class.html\">SizedBox<\/a>, the input will expand to fill the parent.<\/p>\n<p><a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> and <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> must both be null when this is set to true,\notherwise an error is thrown.<\/p>\n<p>Defaults to false.<\/p>\n<p>See the examples in <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> for the complete picture of how <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a>,\n<a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a>, and <a href=\"cupertino\/CupertinoTextField\/expands.html\">expands<\/a> interact to produce various behaviors.<\/p>\n<p>Input that matches the height of its parent<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Expanded(\n  child: TextField(maxLines: null, expands: true),\n)\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool expands\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/expands.html",
                    "name": "expands",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Controls whether this widget has keyboard focus.<\/p>\n<p>If null, this widget will create its own <a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FocusNode focusNode\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/focusNode.html",
                    "name": "focusNode",
                    "isDeprecated": false,
                    "type": "widgets.FocusNode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Optional input validation and formatting overrides.<\/p>\n<p>Formatters are run in the provided order when the text input changes.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;TextInputFormatter&gt; inputFormatters\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/inputFormatters.html",
                    "name": "inputFormatters",
                    "isDeprecated": false,
                    "type": "dart:core.List<services.TextInputFormatter>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The appearance of the keyboard.<\/p>\n<p>This setting is only honored on iOS devices.<\/p>\n<p>If null, defaults to <a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Brightness keyboardAppearance\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/keyboardAppearance.html",
                    "name": "keyboardAppearance",
                    "isDeprecated": false,
                    "type": "dart:ui.Brightness",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The type of keyboard to use for editing the text.<\/p>\n<p>Defaults to <a href=\"services\/TextInputType\/text-constant.html\">TextInputType.text<\/a> if <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> is one and\n<a href=\"services\/TextInputType\/multiline-constant.html\">TextInputType.multiline<\/a> otherwise.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextInputType keyboardType\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/keyboardType.html",
                    "name": "keyboardType",
                    "isDeprecated": false,
                    "type": "services.TextInputType",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The maximum number of characters (Unicode scalar values) to allow in the\ntext field.<\/p>\n<p>If set, a character counter will be displayed below the\nfield, showing how many characters have been entered and how many are\nallowed. After <a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a> characters have been input, additional input\nis ignored, unless <a href=\"cupertino\/CupertinoTextField\/maxLengthEnforced.html\">maxLengthEnforced<\/a> is set to false. The TextField\nenforces the length with a <a href=\"services\/LengthLimitingTextInputFormatter-class.html\">LengthLimitingTextInputFormatter<\/a>, which is\nevaluated after the supplied <a href=\"cupertino\/CupertinoTextField\/inputFormatters.html\">inputFormatters<\/a>, if any.<\/p>\n<p>This value must be either null or greater than zero. If set to null\n(the default), there is no limit to the number of characters allowed.<\/p>\n<p>Whitespace characters (e.g. newline, space, tab) are included in the\ncharacter count.<\/p>\n<h2 id=\"limitations\">Limitations<\/h2>\n<p>The CupertinoTextField does not currently count Unicode grapheme clusters\n(i.e. characters visible to the user), it counts Unicode scalar values,\nwhich leaves out a number of useful possible characters (like many emoji\nand composed characters), so this will be inaccurate in the presence of\nthose characters. If you expect to encounter these kinds of characters, be\ngenerous in the maxLength used.<\/p>\n<p>For instance, the character \"\u00f6\" can be represented as '\\u{006F}\\u{0308}',\nwhich is the letter \"o\" followed by a composed diaeresis \"\u00a8\", or it can\nbe represented as '\\u{00F6}', which is the Unicode scalar value \"LATIN\nSMALL LETTER O WITH DIAERESIS\". In the first case, the text field will\ncount two characters, and the second case will be counted as one\ncharacter, even though the user can see no difference in the input.<\/p>\n<p>Similarly, some emoji are represented by multiple scalar values. The\nUnicode \"THUMBS UP SIGN + MEDIUM SKIN TONE MODIFIER\", \"\ud83d\udc4d\ud83c\udffd\", should be\ncounted as a single character, but because it is a combination of two\nUnicode scalar values, '\\u{1F44D}\\u{1F3FD}', it is counted as two\ncharacters.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/LengthLimitingTextInputFormatter-class.html\">LengthLimitingTextInputFormatter<\/a> for more information on how it\ncounts characters, and how it may differ from the intuitive meaning.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLength\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/maxLength.html",
                    "name": "maxLength",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>If true, prevents the field from allowing more than <a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a>\ncharacters.<\/p>\n<p>If <a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a> is set, <a href=\"cupertino\/CupertinoTextField\/maxLengthEnforced.html\">maxLengthEnforced<\/a> indicates whether or not to\nenforce the limit, or merely provide a character counter and warning when\n<a href=\"cupertino\/CupertinoTextField\/maxLength.html\">maxLength<\/a> is exceeded.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool maxLengthEnforced\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/maxLengthEnforced.html",
                    "name": "maxLengthEnforced",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The maximum number of lines for the text to span, wrapping if necessary.<\/p>\n<p>If this is 1 (the default), the text will not wrap, but will scroll\nhorizontally instead.<\/p>\n<p>If this is null, there is no limit to the number of lines, and the text\ncontainer will start with enough vertical space for one line and\nautomatically grow to accommodate additional lines as they are entered.<\/p>\n<p>If this is not null, the value must be greater than zero, and it will lock\nthe input to the given number of lines and take up enough horizontal space\nto accommodate that number of lines. Setting <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> as well allows the\ninput to grow between the indicated range.<\/p>\n<p>The full set of behaviors possible with <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> and <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> are as\nfollows. These examples apply equally to <code>TextField<\/code>, <code>TextFormField<\/code>, and\n<code>EditableText<\/code>.<\/p>\n<p>Input that occupies a single line and scrolls horizontally as needed.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField()\n<\/code><\/pre>\n<p>Input whose height grows from one line up to as many lines as needed for\nthe text that was entered. If a height limit is imposed by its parent, it\nwill scroll vertically when its height reaches that limit.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField(maxLines: null)\n<\/code><\/pre>\n<p>The input's height is large enough for the given number of lines. If\nadditional lines are entered the input scrolls vertically.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField(maxLines: 2)\n<\/code><\/pre>\n<p>Input whose height grows with content between a min and max. An infinite\nmax is possible with <code>maxLines: null<\/code>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">TextField(minLines: 2, maxLines: 4)\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int maxLines\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/maxLines.html",
                    "name": "maxLines",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The minimum number of lines to occupy when the content spans fewer lines.\nWhen <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> is set as well, the height will grow between the indicated\nrange of lines. When <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> is null, it will grow as high as needed,\nstarting from <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a>.<\/p>\n<p>See the examples in <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a> for the complete picture of how <a href=\"cupertino\/CupertinoTextField\/maxLines.html\">maxLines<\/a>\nand <a href=\"cupertino\/CupertinoTextField\/minLines.html\">minLines<\/a> interact to produce various behaviors.<\/p>\n<p>Defaults to null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minLines\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/minLines.html",
                    "name": "minLines",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Whether to hide the text being edited (e.g., for passwords).<\/p>\n<p>When this is set to true, all the characters in the text field are\nreplaced by U+2022 BULLET characters (\u2022).<\/p>\n<p>Defaults to false. Cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscureText\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/obscureText.html",
                    "name": "obscureText",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Padding around the text entry area between the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> and <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a>\nor the clear button when <a href=\"cupertino\/CupertinoTextField\/clearButtonMode.html\">clearButtonMode<\/a> is not never.<\/p>\n<p>Defaults to a padding of 6 pixels on all sides and can be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsetsGeometry padding\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/padding.html",
                    "name": "padding",
                    "isDeprecated": false,
                    "type": "painting.EdgeInsetsGeometry",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>A lighter colored placeholder hint that appears on the first line of the\ntext field when the text entry is empty.<\/p>\n<p>Defaults to having no placeholder text.<\/p>\n<p>The text style of the placeholder text matches that of the text field's\nmain text entry except a lighter font weight and a grey font color.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String placeholder\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/placeholder.html",
                    "name": "placeholder",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>An optional <a href=\"widgets\/Widget-class.html\">Widget<\/a> to display before the text.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget prefix\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/prefix.html",
                    "name": "prefix",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Controls the visibility of the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> widget based on the state of\ntext entry when the <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> argument is not null.<\/p>\n<p>Defaults to <a href=\"cupertino\/OverlayVisibilityMode-class.html\">OverlayVisibilityMode.always<\/a> and cannot be null.<\/p>\n<p>Has no effect when <a href=\"cupertino\/CupertinoTextField\/prefix.html\">prefix<\/a> is null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OverlayVisibilityMode prefixMode\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/prefixMode.html",
                    "name": "prefixMode",
                    "isDeprecated": false,
                    "type": "cupertino.OverlayVisibilityMode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Configures padding to edges surrounding a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> when the Textfield scrolls into view.<\/p>\n<p>When this widget receives focus and is not completely visible (for example scrolled partially\noff the screen or overlapped by the keyboard)\nthen it will attempt to make itself visible by scrolling a surrounding <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a>, if one is present.\nThis value controls how far from the edges of a <a href=\"widgets\/Scrollable-class.html\">Scrollable<\/a> the TextField will be positioned after the scroll.<\/p>\n<p>Defaults to EdgeInserts.all(20.0).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsets scrollPadding\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/scrollPadding.html",
                    "name": "scrollPadding",
                    "isDeprecated": false,
                    "type": "painting.EdgeInsets",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The strut style used for the vertical layout.<\/p>\n<p><a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> is used to establish a predictable vertical layout.\nSince fonts may vary depending on user input and due to font\nfallback, <a href=\"painting\/StrutStyle\/forceStrutHeight.html\">StrutStyle.forceStrutHeight<\/a> is enabled by default\nto lock all lines to the height of the base <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>, provided by\n<a href=\"cupertino\/CupertinoTextField\/style.html\">style<\/a>. This ensures the typed text fits within the allotted space.<\/p>\n<p>If null, the strut used will is inherit values from the <a href=\"cupertino\/CupertinoTextField\/style.html\">style<\/a> and will\nhave <a href=\"painting\/StrutStyle\/forceStrutHeight.html\">StrutStyle.forceStrutHeight<\/a> set to true. When no <a href=\"cupertino\/CupertinoTextField\/style.html\">style<\/a> is\npassed, the theme's <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> will be used to generate <a href=\"cupertino\/CupertinoTextField\/strutStyle.html\">strutStyle<\/a>\ninstead.<\/p>\n<p>To disable strut-based vertical alignment and allow dynamic vertical\nlayout based on the glyphs typed, use <a href=\"painting\/StrutStyle\/disabled-constant.html\">StrutStyle.disabled<\/a>.<\/p>\n<p>Flutter's strut is based on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Strut_(typesetting)\">typesetting strut<\/a>\nand CSS's <a href=\"https:\/\/www.w3.org\/TR\/CSS2\/visudet.html#line-height\">line-height<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StrutStyle strutStyle\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/strutStyle.html",
                    "name": "strutStyle",
                    "isDeprecated": false,
                    "type": "painting.StrutStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The style to use for the text being edited.<\/p>\n<p>Also serves as a base for the <a href=\"cupertino\/CupertinoTextField\/placeholder.html\">placeholder<\/a> text's style.<\/p>\n<p>Defaults to the standard iOS font style from <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> if null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle style\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/style.html",
                    "name": "style",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>An optional <a href=\"widgets\/Widget-class.html\">Widget<\/a> to display after the text.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Widget suffix\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/suffix.html",
                    "name": "suffix",
                    "isDeprecated": false,
                    "type": "widgets.Widget",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Controls the visibility of the <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> widget based on the state of\ntext entry when the <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> argument is not null.<\/p>\n<p>Defaults to <a href=\"cupertino\/OverlayVisibilityMode-class.html\">OverlayVisibilityMode.always<\/a> and cannot be null.<\/p>\n<p>Has no effect when <a href=\"cupertino\/CupertinoTextField\/suffix.html\">suffix<\/a> is null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final OverlayVisibilityMode suffixMode\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/suffixMode.html",
                    "name": "suffixMode",
                    "isDeprecated": false,
                    "type": "cupertino.OverlayVisibilityMode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>How the text should be aligned horizontally.<\/p>\n<p>Defaults to <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a> and cannot be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextAlign textAlign\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/textAlign.html",
                    "name": "textAlign",
                    "isDeprecated": false,
                    "type": "dart:ui.TextAlign",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>Configures how the platform keyboard will select an uppercase or\nlowercase keyboard.<\/p>\n<p>Only supports text keyboards, other keyboard types will ignore this\nconfiguration. Capitalization is locale-aware.<\/p>\n<p>Defaults to <a href=\"services\/TextCapitalization-class.html\">TextCapitalization.none<\/a>. Must not be null.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"services\/TextCapitalization-class.html\">TextCapitalization<\/a>, for a description of each capitalization behavior.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextCapitalization textCapitalization\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/textCapitalization.html",
                    "name": "textCapitalization",
                    "isDeprecated": false,
                    "type": "services.TextCapitalization",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                },
                {
                    "desc": "<p>The type of action button to use for the keyboard.<\/p>\n<p>Defaults to <a href=\"services\/TextInputAction-class.html\">TextInputAction.newline<\/a> if <a href=\"cupertino\/CupertinoTextField\/keyboardType.html\">keyboardType<\/a> is\n<a href=\"services\/TextInputType\/multiline-constant.html\">TextInputType.multiline<\/a> and <a href=\"services\/TextInputAction-class.html\">TextInputAction.done<\/a> otherwise.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextInputAction textInputAction\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextField\/textInputAction.html",
                    "name": "textInputAction",
                    "isDeprecated": false,
                    "type": "services.TextInputAction",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextField",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Cupertino typography theme in a <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTextThemeData-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTextThemeData",
            "shortname": "CupertinoTextThemeData",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a <a href=\"cupertino\/CupertinoTextThemeData-class.html\">CupertinoTextThemeData<\/a>.<\/p>\n<p>The <code>primaryColor<\/code> and <code>isLight<\/code> parameters are used to derive TextStyle\ndefaults of other attributes such as <code>textStyle<\/code> and <code>actionTextStyle<\/code>\netc. The default value of <code>primaryColor<\/code> is <a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a>\nand the default value of <code>isLight<\/code> is true.<\/p>\n<p>Other <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> parameters default to default iOS text styles when\nunspecified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTextThemeData({\n  Color primaryColor,\n  Brightness brightness,\n  TextStyle textStyle,\n  TextStyle actionTextStyle,\n  TextStyle tabLabelTextStyle,\n  TextStyle navTitleTextStyle,\n  TextStyle navLargeTitleTextStyle,\n  TextStyle navActionTextStyle,\n}) : _primaryColor = primaryColor ?? CupertinoColors.activeBlue,\n     _brightness = brightness,\n     _textStyle = textStyle,\n     _actionTextStyle = actionTextStyle,\n     _tabLabelTextStyle = tabLabelTextStyle,\n     _navTitleTextStyle = navTitleTextStyle,\n     _navLargeTitleTextStyle = navLargeTitleTextStyle,\n     _navActionTextStyle = navActionTextStyle;<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTextThemeData\/CupertinoTextThemeData.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTextThemeData",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": [
                        {
                            "name": "actionTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "brightness",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Brightness"
                        },
                        {
                            "name": "navActionTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "navLargeTitleTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "navTitleTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "primaryColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "tabLabelTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "textStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "painting.TextStyle"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a copy of the current <a href=\"cupertino\/CupertinoTextThemeData-class.html\">CupertinoTextThemeData<\/a> instance with\nspecified overrides.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoTextThemeData copyWith({\n  Color primaryColor,\n  Brightness brightness,\n  TextStyle textStyle,\n  TextStyle actionTextStyle,\n  TextStyle tabLabelTextStyle,\n  TextStyle navTitleTextStyle,\n  TextStyle navLargeTitleTextStyle,\n  TextStyle navActionTextStyle,\n}) {\n  return CupertinoTextThemeData(\n    primaryColor: primaryColor ?? _primaryColor,\n    brightness: brightness ?? _brightness,\n    textStyle: textStyle ?? _textStyle,\n    actionTextStyle: actionTextStyle ?? _actionTextStyle,\n    tabLabelTextStyle: tabLabelTextStyle ?? _tabLabelTextStyle,\n    navTitleTextStyle: navTitleTextStyle ?? _navTitleTextStyle,\n    navLargeTitleTextStyle: navLargeTitleTextStyle ?? _navLargeTitleTextStyle,\n    navActionTextStyle: navActionTextStyle ?? _navActionTextStyle,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTextThemeData\/copyWith.html",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoTextThemeData",
                    "name": "copyWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": [
                        {
                            "name": "actionTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "brightness",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Brightness"
                        },
                        {
                            "name": "navActionTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "navLargeTitleTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "navTitleTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "primaryColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "tabLabelTextStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.TextStyle"
                        },
                        {
                            "name": "textStyle",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "painting.TextStyle"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Typography of interactive text content such as text in a button without background.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle get actionTextStyle {\n  return _actionTextStyle ?? _kDefaultActionTextStyle.copyWith(\n    color: _primaryColor,\n  );\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextThemeData\/actionTextStyle.html",
                    "name": "actionTextStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Typography of interactive text content in navigation bars.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle get navActionTextStyle {\n  return _navActionTextStyle ?? _kDefaultActionTextStyle.copyWith(\n    color: _primaryColor,\n  );\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextThemeData\/navActionTextStyle.html",
                    "name": "navActionTextStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Typography of large titles in sliver navigation bars.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle get navLargeTitleTextStyle {\n  return _navLargeTitleTextStyle ??\n      (_isLight ? _kDefaultLargeTitleLightTextStyle : _kDefaultLargeTitleDarkTextStyle);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextThemeData\/navLargeTitleTextStyle.html",
                    "name": "navLargeTitleTextStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Typography of titles in standard navigation bars.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle get navTitleTextStyle {\n  return _navTitleTextStyle ??\n      (_isLight ? _kDefaultMiddleTitleLightTextStyle : _kDefaultMiddleTitleDarkTextStyle);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextThemeData\/navTitleTextStyle.html",
                    "name": "navTitleTextStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Typography of unselected tabs.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle get tabLabelTextStyle =&gt; _tabLabelTextStyle ?? _kDefaultTabLabelTextStyle;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextThemeData\/tabLabelTextStyle.html",
                    "name": "tabLabelTextStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Typography of general text content for Cupertino widgets.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle get textStyle =&gt; _textStyle ?? (_isLight ? _kDefaultLightTextStyle : _kDefaultDarkTextStyle);<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTextThemeData\/textStyle.html",
                    "name": "textStyle",
                    "isDeprecated": false,
                    "type": "painting.TextStyle",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTextThemeData",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Applies a visual styling theme to descendant Cupertino widgets.<\/p>\n<p>Affects the color and text styles of Cupertino widgets whose styling\nare not overridden when constructing the respective widgets instances.<\/p>\n<p>Descendant widgets can retrieve the current <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> by calling\n<a href=\"cupertino\/CupertinoTheme\/of.html\">CupertinoTheme.of<\/a>. An <a href=\"widgets\/InheritedWidget-class.html\">InheritedWidget<\/a> dependency is created when\nan ancestor <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> is retrieved via <a href=\"cupertino\/CupertinoTheme\/of.html\">CupertinoTheme.of<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a>, specifies the theme's visual styling.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoApp-class.html\">CupertinoApp<\/a>, which will automatically add a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a>, a Material theme which will automatically add a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>\nwith a <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> derived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTheme-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTheme",
            "shortname": "CupertinoTheme",
            "extends": [
                "widgets.InheritedWidget",
                "widgets.ProxyWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> to change descendant Cupertino widgets' styling.<\/p>\n<p>The <code>data<\/code> and <code>child<\/code> parameters must not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoTheme({\n  Key key,\n  @required this.data,\n  @required Widget child,\n}) : assert(child != null),\n     assert(data != null),\n     super(key: key, child: child);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTheme\/CupertinoTheme.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTheme",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTheme",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "widgets.Widget"
                        },
                        {
                            "name": "data",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.CupertinoThemeData"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        }
                    ]
                },
                {
                    "desc": "<p>Retrieve the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> from an ancestor <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> widget.<\/p>\n<p>Returns a default <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> if no <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> widgets\nexist in the ancestry tree.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static CupertinoThemeData of(BuildContext context) {\n  final CupertinoTheme theme = context.inheritFromWidgetOfExactType(CupertinoTheme);\n  return theme?.data ?? const CupertinoThemeData();\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTheme\/of.html",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoThemeData",
                    "name": "of",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTheme",
                    "params": [
                        {
                            "name": "context",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "widgets.BuildContext"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the framework should notify widgets that inherit from this widget.<\/p>\n<p>When this widget is rebuilt, sometimes we need to rebuild the widgets that\ninherit from this widget but sometimes we do not. For example, if the data\nheld by this widget is the same as the data held by <code>oldWidget<\/code>, then we\ndo not need to rebuild the widgets that inherited the data held by\n<code>oldWidget<\/code>.<\/p>\n<p>The framework distinguishes these cases by calling this function with the\nwidget that previously occupied this location in the tree as an argument.\nThe given widget is guaranteed to have the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> as this\nobject.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool updateShouldNotify(CupertinoTheme oldWidget) =&gt; data != oldWidget.data;<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTheme\/updateShouldNotify.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "updateShouldNotify",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTheme",
                    "params": [
                        {
                            "name": "oldWidget",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "cupertino.CupertinoTheme"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> styling for this theme.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoThemeData data\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTheme\/data.html",
                    "name": "data",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoThemeData",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTheme",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Styling specifications for a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>.<\/p>\n<p>All constructor parameters can be null, in which case a\n<a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a> based default iOS theme styling is used.<\/p>\n<p>Parameters can also be partially specified, in which case some parameters\nwill cascade down to other dependent parameters to create a cohesive\nvisual effect. For instance, if a <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> is specified, it would\ncascade down to affect some fonts in <a href=\"cupertino\/CupertinoThemeData\/textTheme.html\">textTheme<\/a> if <a href=\"cupertino\/CupertinoThemeData\/textTheme.html\">textTheme<\/a> is not\nspecified.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a>, in which this <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> is inserted.<\/li>\n<li>\n<a href=\"material\/ThemeData-class.html\">ThemeData<\/a>, a Material equivalent that also configures Cupertino\nstyling via a <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> subclass <a href=\"material\/MaterialBasedCupertinoThemeData-class.html\">MaterialBasedCupertinoThemeData<\/a>.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoThemeData-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoThemeData",
            "shortname": "CupertinoThemeData",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "material.MaterialBasedCupertinoThemeData"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a <a href=\"cupertino\/CupertinoTheme-class.html\">CupertinoTheme<\/a> styling specification.<\/p>\n<p>Unspecified parameters default to a reasonable iOS default style.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CupertinoThemeData({\n  Brightness brightness,\n  Color primaryColor,\n  Color primaryContrastingColor,\n  CupertinoTextThemeData textTheme,\n  Color barBackgroundColor,\n  Color scaffoldBackgroundColor,\n}) : this.raw(\n      brightness,\n      primaryColor,\n      primaryContrastingColor,\n      textTheme,\n      barBackgroundColor,\n      scaffoldBackgroundColor,\n    );<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThemeData\/CupertinoThemeData.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoThemeData",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": [
                        {
                            "name": "barBackgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "brightness",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Brightness"
                        },
                        {
                            "name": "primaryColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "primaryContrastingColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "scaffoldBackgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "textTheme",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.CupertinoTextThemeData"
                        }
                    ]
                },
                {
                    "desc": "<p>Create a copy of <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> with specified attributes overridden.<\/p>\n<p>Only the current instance's specified attributes are copied instead of\nderived values. For instance, if the current <code>primaryColor<\/code> is implied\nto be <a href=\"cupertino\/CupertinoColors\/activeOrange-constant.html\">CupertinoColors.activeOrange<\/a> due to the current <code>brightness<\/code>,\ncopying with a different <code>brightness<\/code> will also change the copy's\nimplied <code>primaryColor<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoThemeData copyWith({\n  Brightness brightness,\n  Color primaryColor,\n  Color primaryContrastingColor,\n  CupertinoTextThemeData textTheme,\n  Color barBackgroundColor,\n  Color scaffoldBackgroundColor,\n}) {\n  return CupertinoThemeData(\n    brightness: brightness ?? _brightness,\n    primaryColor: primaryColor ?? _primaryColor,\n    primaryContrastingColor: primaryContrastingColor ?? _primaryContrastingColor,\n    textTheme: textTheme ?? _textTheme,\n    barBackgroundColor: barBackgroundColor ?? _barBackgroundColor,\n    scaffoldBackgroundColor: scaffoldBackgroundColor ?? _scaffoldBackgroundColor,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThemeData\/copyWith.html",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoThemeData",
                    "name": "copyWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": [
                        {
                            "name": "barBackgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "brightness",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Brightness"
                        },
                        {
                            "name": "primaryColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "primaryContrastingColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "scaffoldBackgroundColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "textTheme",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "cupertino.CupertinoTextThemeData"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"cupertino\/CupertinoThemeData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  const CupertinoThemeData defaultData = CupertinoThemeData();\n  properties.add(EnumProperty&lt;Brightness&gt;('brightness', brightness, defaultValue: defaultData.brightness));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primaryColor', primaryColor, defaultValue: defaultData.primaryColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('primaryContrastingColor', primaryContrastingColor, defaultValue: defaultData.primaryContrastingColor));\n  properties.add(DiagnosticsProperty&lt;CupertinoTextThemeData&gt;('textTheme', textTheme, defaultValue: defaultData.textTheme));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('barBackgroundColor', barBackgroundColor, defaultValue: defaultData.barBackgroundColor));\n  properties.add(DiagnosticsProperty&lt;Color&gt;('scaffoldBackgroundColor', scaffoldBackgroundColor, defaultValue: defaultData.scaffoldBackgroundColor));\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThemeData\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Return an instance of the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a> whose property getters\nonly return the construction time specifications with no derived values.<\/p>\n<p>Used in Material themes to let unspecified properties fallback to Material\ntheme properties instead of iOS defaults.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoThemeData noDefault() {\n  return _NoDefaultCupertinoThemeData(\n    _brightness,\n    _primaryColor,\n    _primaryContrastingColor,\n    _textTheme,\n    _barBackgroundColor,\n    _scaffoldBackgroundColor,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThemeData\/noDefault.html",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoThemeData",
                    "name": "noDefault",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Background color of the top nav bar and bottom tab bar.<\/p>\n<p>Defaults to a light gray or a dark gray translucent color depending\non the <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get barBackgroundColor {\n  return _barBackgroundColor ??\n      (_isLight ? _kDefaultBarLightBackgroundColor : _kDefaultBarDarkBackgroundColor);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThemeData\/barBackgroundColor.html",
                    "name": "barBackgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                },
                {
                    "desc": "<p>The general brightness theme of the <a href=\"cupertino\/CupertinoThemeData-class.html\">CupertinoThemeData<\/a>.<\/p>\n<p>Affects all other theme properties when unspecified. Defaults to\n<a href=\"dart-ui\/Brightness-class.html\">Brightness.light<\/a>.<\/p>\n<p>If coming from a Material <a href=\"material\/Theme-class.html\">Theme<\/a> and unspecified, <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> will be\nderived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>brightness<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Brightness get brightness =&gt; _brightness ?? Brightness.light;<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThemeData\/brightness.html",
                    "name": "brightness",
                    "isDeprecated": false,
                    "type": "dart:ui.Brightness",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                },
                {
                    "desc": "<p>A color used on interactive elements of the theme.<\/p>\n<p>This color is generally used on text and icons in buttons and tappable\nelements. Defaults to <a href=\"cupertino\/CupertinoColors\/activeBlue-constant.html\">CupertinoColors.activeBlue<\/a> or\n<a href=\"cupertino\/CupertinoColors\/activeOrange-constant.html\">CupertinoColors.activeOrange<\/a> when <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> is light or dark.<\/p>\n<p>If coming from a Material <a href=\"material\/Theme-class.html\">Theme<\/a> and unspecified, <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> will be\nderived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>colorScheme.primary<\/code>. However, in\niOS styling, the <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> is more sparsely used than in Material\nDesign where the <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> can appear on non-interactive surfaces like\nthe <a href=\"material\/AppBar-class.html\">AppBar<\/a> background, <a href=\"material\/TextField-class.html\">TextField<\/a> borders etc.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get primaryColor {\n  return _primaryColor ??\n      (_isLight ? CupertinoColors.activeBlue : CupertinoColors.activeOrange);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThemeData\/primaryColor.html",
                    "name": "primaryColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                },
                {
                    "desc": "<p>A color used for content that must contrast against a <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> background.<\/p>\n<p>For example, this color is used for a <a href=\"cupertino\/CupertinoButton-class.html\">CupertinoButton<\/a>'s text and icons\nwhen the button's background is <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a>.<\/p>\n<p>If coming from a Material <a href=\"material\/Theme-class.html\">Theme<\/a> and unspecified, <a href=\"cupertino\/CupertinoThemeData\/primaryContrastingColor.html\">primaryContrastingColor<\/a>\nwill be derived from the Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a>'s <code>colorScheme.onPrimary<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get primaryContrastingColor {\n  return _primaryContrastingColor ??\n      (_isLight ? CupertinoColors.white : CupertinoColors.black);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThemeData\/primaryContrastingColor.html",
                    "name": "primaryContrastingColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Background color of the scaffold.<\/p>\n<p>Defaults to white or black depending on the <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Color get scaffoldBackgroundColor {\n  return _scaffoldBackgroundColor ??\n      (_isLight ? CupertinoColors.white : CupertinoColors.black);\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThemeData\/scaffoldBackgroundColor.html",
                    "name": "scaffoldBackgroundColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                },
                {
                    "desc": "<p>Text styles used by Cupertino widgets.<\/p>\n<p>Derived from <a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> and <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> if unspecified, including\n<a href=\"cupertino\/CupertinoThemeData\/brightness.html\">brightness<\/a> and <a href=\"cupertino\/CupertinoThemeData\/primaryColor.html\">primaryColor<\/a> of a Material <a href=\"material\/ThemeData-class.html\">ThemeData<\/a> if coming\nfrom a Material <a href=\"material\/Theme-class.html\">Theme<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoTextThemeData get textTheme {\n  return _textTheme ?? CupertinoTextThemeData(\n    brightness: brightness,\n    primaryColor: primaryColor,\n  );\n}<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThemeData\/textTheme.html",
                    "name": "textTheme",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoTextThemeData",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThemeData",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Paints an iOS-style slider thumb.<\/p>\n<p>Used by <a href=\"cupertino\/CupertinoSwitch-class.html\">CupertinoSwitch<\/a> and <a href=\"cupertino\/CupertinoSlider-class.html\">CupertinoSlider<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoThumbPainter-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoThumbPainter",
            "shortname": "CupertinoThumbPainter",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an object that paints an iOS-style slider thumb.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoThumbPainter({\n  this.color = CupertinoColors.white,\n  this.shadowColor = const Color(0x2C000000),\n}) : _shadowPaint = BoxShadow(\n       color: shadowColor,\n       blurRadius: 1.0,\n     ).toPaint();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThumbPainter\/CupertinoThumbPainter.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoThumbPainter",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoThumbPainter",
                    "params": [
                        {
                            "name": "color",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        },
                        {
                            "name": "shadowColor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Color"
                        }
                    ]
                },
                {
                    "desc": "<p>Paints the thumb onto the given canvas in the given rectangle.<\/p>\n<p>Consider using <a href=\"cupertino\/CupertinoThumbPainter\/radius-constant.html\">radius<\/a> and <a href=\"cupertino\/CupertinoThumbPainter\/extension-constant.html\">extension<\/a> when deciding how large a\nrectangle to use for the thumb.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Rect rect) {\n  final RRect rrect = RRect.fromRectAndRadius(\n    rect,\n    Radius.circular(rect.shortestSide \/ 2.0),\n  );\n\n  canvas.drawRRect(rrect, _shadowPaint);\n  canvas.drawRRect(rrect.shift(const Offset(0.0, 3.0)), _shadowPaint);\n  canvas.drawRRect(rrect, Paint()..color = color);\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThumbPainter\/paint.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "paint",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoThumbPainter",
                    "params": [
                        {
                            "name": "canvas",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Canvas"
                        },
                        {
                            "name": "rect",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Rect"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The color of the interior of the thumb.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThumbPainter\/color.html",
                    "name": "color",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThumbPainter",
                    "params": []
                },
                {
                    "desc": "<p>The default amount the thumb should be extended horizontally when pressed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double extension = 7.0\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThumbPainter\/extension-constant.html",
                    "name": "extension",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoThumbPainter",
                    "params": []
                },
                {
                    "desc": "<p>Half the default diameter of the thumb.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double radius = 14.0\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoThumbPainter\/radius-constant.html",
                    "name": "radius",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoThumbPainter",
                    "params": []
                },
                {
                    "desc": "<p>The color of the shadow case by the thumb.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color shadowColor\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoThumbPainter\/shadowColor.html",
                    "name": "shadowColor",
                    "isDeprecated": false,
                    "type": "dart:ui.Color",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoThumbPainter",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A countdown timer picker in iOS style.<\/p>\n<p>This picker shows a countdown duration with hour, minute and second spinners.\nThe duration is bound between 0 and 23 hours 59 minutes 59 seconds.<\/p>\n<p>There are several modes of the timer picker listed in <a href=\"cupertino\/CupertinoTimerPickerMode-class.html\">CupertinoTimerPickerMode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>, the class that implements different display modes\nof the iOS-style date picker.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPicker-class.html\">CupertinoPicker<\/a>, the class that implements a content agnostic spinner UI.<\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/CupertinoTimerPicker-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTimerPicker",
            "shortname": "CupertinoTimerPicker",
            "extends": [
                "widgets.StatefulWidget",
                "widgets.Widget",
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>Callback called when the timer duration changes.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ValueChanged&lt;Duration&gt; onTimerDurationChanged\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTimerPicker\/onTimerDurationChanged.html",
                    "isDeprecated": false,
                    "type": "foundation.ValueChanged<dart:core.Duration>",
                    "name": "onTimerDurationChanged",
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Constructs an iOS style countdown timer picker.<\/p>\n<p><code>mode<\/code> is one of the modes listed in <a href=\"cupertino\/CupertinoTimerPickerMode-class.html\">CupertinoTimerPickerMode<\/a> and\ndefaults to <a href=\"cupertino\/CupertinoTimerPickerMode-class.html\">CupertinoTimerPickerMode.hms<\/a>.<\/p>\n<p><code>onTimerDurationChanged<\/code> is the callback called when the selected duration\nchanges and must not be null.<\/p>\n<p><code>initialTimerDuration<\/code> defaults to 0 second and is limited from 0 second\nto 23 hours 59 minutes 59 seconds.<\/p>\n<p><code>minuteInterval<\/code> is the granularity of the minute spinner. Must be a\npositive integer factor of 60.<\/p>\n<p><code>secondInterval<\/code> is the granularity of the second spinner. Must be a\npositive integer factor of 60.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">CupertinoTimerPicker({\n  this.mode = CupertinoTimerPickerMode.hms,\n  this.initialTimerDuration = Duration.zero,\n  this.minuteInterval = 1,\n  this.secondInterval = 1,\n  @required this.onTimerDurationChanged,\n}) : assert(mode != null),\n     assert(onTimerDurationChanged != null),\n     assert(initialTimerDuration &gt;= Duration.zero),\n     assert(initialTimerDuration &lt; const Duration(days: 1)),\n     assert(minuteInterval &gt; 0 &amp;&amp; 60 % minuteInterval == 0),\n     assert(secondInterval &gt; 0 &amp;&amp; 60 % secondInterval == 0),\n     assert(initialTimerDuration.inMinutes % minuteInterval == 0),\n     assert(initialTimerDuration.inSeconds % secondInterval == 0);<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTimerPicker\/CupertinoTimerPicker.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CupertinoTimerPicker",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": [
                        {
                            "name": "initialTimerDuration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Duration"
                        },
                        {
                            "name": "minuteInterval",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "mode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "cupertino.CupertinoTimerPickerMode"
                        },
                        {
                            "name": "onTimerDurationChanged",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.ValueChanged<dart:core.Duration>"
                        },
                        {
                            "name": "secondInterval",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates the mutable state for this widget at a given location in the tree.<\/p>\n<p>Subclasses should override this method to return a newly created\ninstance of their associated <a href=\"widgets\/State-class.html\">State<\/a> subclass:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@override\n_MyState createState() =&gt; _MyState();\n<\/code><\/pre>\n<p>The framework can call this method multiple times over the lifetime of\na <a href=\"widgets\/StatefulWidget-class.html\">StatefulWidget<\/a>. For example, if the widget is inserted into the tree\nin multiple locations, the framework will create a separate <a href=\"widgets\/State-class.html\">State<\/a> object\nfor each location. Similarly, if the widget is removed from the tree and\nlater inserted into the tree again, the framework will call <a href=\"cupertino\/CupertinoTimerPicker\/createState.html\">createState<\/a>\nagain to create a fresh <a href=\"widgets\/State-class.html\">State<\/a> object, simplifying the lifecycle of\n<a href=\"widgets\/State-class.html\">State<\/a> objects.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nState&lt;StatefulWidget&gt; createState() =&gt; _CupertinoTimerPickerState();<\/code><\/pre>\n    ",
                    "href": "cupertino\/CupertinoTimerPicker\/createState.html",
                    "isDeprecated": false,
                    "type": "widgets.State<widgets.StatefulWidget>",
                    "name": "createState",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The initial duration of the countdown timer.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Duration initialTimerDuration\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTimerPicker\/initialTimerDuration.html",
                    "name": "initialTimerDuration",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": []
                },
                {
                    "desc": "<p>The granularity of the minute spinner. Must be a positive integer factor\nof 60.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int minuteInterval\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTimerPicker\/minuteInterval.html",
                    "name": "minuteInterval",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": []
                },
                {
                    "desc": "<p>The mode of the timer picker.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final CupertinoTimerPickerMode mode\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTimerPicker\/mode.html",
                    "name": "mode",
                    "isDeprecated": false,
                    "type": "cupertino.CupertinoTimerPickerMode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": []
                },
                {
                    "desc": "<p>The granularity of the second spinner. Must be a positive integer factor\nof 60.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int secondInterval\n\n<\/code><\/pre>\n        ",
                    "href": "cupertino\/CupertinoTimerPicker\/secondInterval.html",
                    "name": "secondInterval",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.CupertinoTimerPicker",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>US English strings for the cupertino widgets.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/DefaultCupertinoLocalizations-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.DefaultCupertinoLocalizations",
            "shortname": "DefaultCupertinoLocalizations",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs an object that defines the cupertino widgets' localized strings\nfor US English (only).<\/p>\n<p><a href=\"widgets\/LocalizationsDelegate-class.html\">LocalizationsDelegate<\/a> implementations typically call the static <a href=\"cupertino\/DefaultCupertinoLocalizations\/load.html\">load<\/a>\nfunction, rather than constructing this class directly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DefaultCupertinoLocalizations();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/DefaultCupertinoLocalizations.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DefaultCupertinoLocalizations",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>Day of month that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding\nto the given day index.<\/p>\n<p>Examples: datePickerDayOfMonth(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Korean: 1\uc77c<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerDayOfMonth(int dayIndex) =&gt; dayIndex.toString();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerDayOfMonth.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerDayOfMonth",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "dayIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Hour that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding\nto the given hour value.<\/p>\n<p>Examples: datePickerHour(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0660\u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerHour(int hour) =&gt; hour.toString();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerHour.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerHour",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Semantics label for the given hour value in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerHourSemanticsLabel(int hour) =&gt; hour.toString() + \" o'clock\";<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerHourSemanticsLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerHourSemanticsLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>The medium-width date format that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>\nspinner. Abbreviates month and days of week.<\/p>\n<p>Examples:<\/p>\n<ul>\n<li>US English: Wed Sep 27<\/li>\n<li>Russian: \u0441\u0440 \u0441\u0435\u043d\u0442. 27<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerMediumDate(DateTime date) {\n  return '${_shortWeekdays[date.weekday - DateTime.monday]} '\n    '${_shortMonths[date.month - DateTime.january]} '\n    '${date.day.toString().padRight(2)}';\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerMediumDate.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMediumDate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "date",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Minute that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding\nto the given minute value.<\/p>\n<p>Examples: datePickerMinute(1) in:<\/p>\n<ul>\n<li>US English: 01<\/li>\n<li>Arabic: \u0660\u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerMinute(int minute) =&gt; minute.toString().padLeft(2, '0');<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerMinute.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMinute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Semantics label for the given minute value in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerMinuteSemanticsLabel(int minute) {\n  if (minute == 1)\n    return '1 minute';\n  return minute.toString() + ' minutes';\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerMinuteSemanticsLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMinuteSemanticsLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Month that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding to\nthe given month index.<\/p>\n<p>Examples: datePickerMonth(1) in:<\/p>\n<ul>\n<li>US English: January<\/li>\n<li>Korean: 1\uc6d4<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerMonth(int monthIndex) =&gt; _months[monthIndex - 1];<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerMonth.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerMonth",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "monthIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Year that is shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> spinner corresponding to the\ngiven year index.<\/p>\n<p>Examples: datePickerYear(1) in:<\/p>\n<ul>\n<li>US English: 2018<\/li>\n<li>Korean: 2018\ub144<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString datePickerYear(int yearIndex) =&gt; yearIndex.toString();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerYear.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "datePickerYear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "yearIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates an object that provides US English resource values for the\ncupertino library widgets.<\/p>\n<p>The <code>locale<\/code> parameter is ignored.<\/p>\n<p>This method is typically used to create a <a href=\"widgets\/LocalizationsDelegate-class.html\">LocalizationsDelegate<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;CupertinoLocalizations&gt; load(Locale locale) {\n  return SynchronousFuture&lt;CupertinoLocalizations&gt;(const DefaultCupertinoLocalizations());\n}<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/load.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<cupertino.CupertinoLocalizations>",
                    "name": "load",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "locale",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Locale"
                        }
                    ]
                },
                {
                    "desc": "<p>Hour that is shown in <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> corresponding to\nthe given hour value.<\/p>\n<p>Examples: timerPickerHour(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString timerPickerHour(int hour) =&gt; hour.toString();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/timerPickerHour.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerHour",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Label that appears next to the hour picker in\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> when selected hour value is <code>hour<\/code>.\nThis function will deal with pluralization based on the <code>hour<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString timerPickerHourLabel(int hour) =&gt; hour == 1 ? 'hour' : 'hours';<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/timerPickerHourLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerHourLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Minute that is shown in <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> corresponding to\nthe given minute value.<\/p>\n<p>Examples: timerPickerMinute(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString timerPickerMinute(int minute) =&gt; minute.toString();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/timerPickerMinute.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerMinute",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Label that appears next to the minute picker in\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> when selected minute value is <code>minute<\/code>.\nThis function will deal with pluralization based on the <code>minute<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString timerPickerMinuteLabel(int minute) =&gt; 'min';<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/timerPickerMinuteLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerMinuteLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Second that is shown in <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> corresponding to\nthe given second value.<\/p>\n<p>Examples: timerPickerSecond(1) in:<\/p>\n<ul>\n<li>US English: 1<\/li>\n<li>Arabic: \u0661<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString timerPickerSecond(int second) =&gt; second.toString();<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/timerPickerSecond.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerSecond",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "second",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Label that appears next to the minute picker in\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a> when selected minute value is <code>second<\/code>.\nThis function will deal with pluralization based on the <code>second<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString timerPickerSecondLabel(int second) =&gt; 'sec';<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/timerPickerSecondLabel.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "timerPickerSecondLabel",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": [
                        {
                            "name": "second",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The term used by the system to announce dialog alerts.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get alertDialogLabel =&gt; 'Alert';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/alertDialogLabel.html",
                    "name": "alertDialogLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The abbreviation for ante meridiem (before noon) shown in the time picker.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get anteMeridiemAbbreviation =&gt; 'AM';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/anteMeridiemAbbreviation.html",
                    "name": "anteMeridiemAbbreviation",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for copying<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get copyButtonLabel =&gt; 'Copy';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/copyButtonLabel.html",
                    "name": "copyButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for cutting<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get cutButtonLabel =&gt; 'Cut';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/cutButtonLabel.html",
                    "name": "cutButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The order of the date elements that will be shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDatePickerDateOrder get datePickerDateOrder =&gt; DatePickerDateOrder.mdy;<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerDateOrder.html",
                    "name": "datePickerDateOrder",
                    "isDeprecated": false,
                    "type": "cupertino.DatePickerDateOrder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The order of the time elements that will be shown in <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDatePickerDateTimeOrder get datePickerDateTimeOrder =&gt; DatePickerDateTimeOrder.date_time_dayPeriod;<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/datePickerDateTimeOrder.html",
                    "name": "datePickerDateTimeOrder",
                    "isDeprecated": false,
                    "type": "cupertino.DatePickerDateTimeOrder",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>A <a href=\"widgets\/LocalizationsDelegate-class.html\">LocalizationsDelegate<\/a> that uses <a href=\"cupertino\/DefaultCupertinoLocalizations\/load.html\">DefaultCupertinoLocalizations.load<\/a>\nto create an instance of this class.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const LocalizationsDelegate&lt;CupertinoLocalizations&gt; delegate = _CupertinoLocalizationsDelegate()\n\n<\/code><\/pre>\n    ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/delegate-constant.html",
                    "name": "delegate",
                    "isDeprecated": false,
                    "type": "widgets.LocalizationsDelegate<cupertino.CupertinoLocalizations>",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for pasting<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get pasteButtonLabel =&gt; 'Paste';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/pasteButtonLabel.html",
                    "name": "pasteButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The abbreviation for post meridiem (after noon) shown in the time picker.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get postMeridiemAbbreviation =&gt; 'PM';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/postMeridiemAbbreviation.html",
                    "name": "postMeridiemAbbreviation",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                },
                {
                    "desc": "<p>The term used for selecting everything<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString get selectAllButtonLabel =&gt; 'Select All';<\/code><\/pre>\n        ",
                    "href": "cupertino\/DefaultCupertinoLocalizations\/selectAllButtonLabel.html",
                    "name": "selectAllButtonLabel",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.DefaultCupertinoLocalizations",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Widget that has a preferred size and reports whether it fully obstructs\nwidgets behind it.<\/p>\n<p>Used by <a href=\"cupertino\/CupertinoPageScaffold-class.html\">CupertinoPageScaffold<\/a> to either shift away fully obstructed content\nor provide a padding guide to partially obstructed content.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "cupertino\/ObstructingPreferredSizeWidget-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.ObstructingPreferredSizeWidget",
            "shortname": "ObstructingPreferredSizeWidget",
            "extends": [
                "widgets.PreferredSizeWidget",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "cupertino\/ObstructingPreferredSizeWidget\/ObstructingPreferredSizeWidget.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ObstructingPreferredSizeWidget",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "cupertino.ObstructingPreferredSizeWidget",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>If true, this widget fully obstructs widgets behind it by the specified\nsize.<\/p>\n<p>If false, this widget partially obstructs.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get fullObstruction;<\/code><\/pre>\n        ",
                    "href": "cupertino\/ObstructingPreferredSizeWidget\/fullObstruction.html",
                    "name": "fullObstruction",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "cupertino.ObstructingPreferredSizeWidget",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [
        {
            "desc": "<p>Different display modes of <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a>, the class that implements different display modes\nof the iOS-style date picker.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPicker-class.html\">CupertinoPicker<\/a>, the class that implements a content agnostic spinner UI.<\/li>\n<\/ul>",
            "dtype": "enum",
            "example": "",
            "href": "cupertino\/CupertinoDatePickerMode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoDatePickerMode",
            "shortname": "CupertinoDatePickerMode",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Mode that shows the date in month, day of month, and year.\nName of month is spelled in full.\nColumn order is subject to internationalization.<\/p>\n<p>Example: <code>July | 13 | 2012<\/code>.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const CupertinoDatePickerMode(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "date",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoDatePickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">CupertinoDatePickerMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoDatePickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Mode that shows the date as day of the week, month, day of month and\nthe time in hour, minute, and (optional) an AM\/PM designation.\nThe AM\/PM designation is shown only if <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> does not use 24h format.\nColumn order is subject to internationalization.<\/p>\n<p>Example: <code>Fri Jul 13 | 4 | 14 | PM<\/code><\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const CupertinoDatePickerMode(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "dateAndTime",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoDatePickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Mode that shows the date in hour, minute, and (optional) an AM\/PM designation.\nThe AM\/PM designation is shown only if <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> does not use 24h format.\nColumn order is subject to internationalization.<\/p>\n<p>Example: <code>4 | 14 | PM<\/code>.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const CupertinoDatePickerMode(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "time",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoDatePickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">CupertinoDatePickerMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoDatePickerMode",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Different modes of <a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"cupertino\/CupertinoTimerPicker-class.html\">CupertinoTimerPicker<\/a>, the class that implements the iOS-style timer picker.<\/li>\n<li>\n<a href=\"cupertino\/CupertinoPicker-class.html\">CupertinoPicker<\/a>, the class that implements a content agnostic spinner UI.<\/li>\n<\/ul>",
            "dtype": "enum",
            "example": "",
            "href": "cupertino\/CupertinoTimerPickerMode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.CupertinoTimerPickerMode",
            "shortname": "CupertinoTimerPickerMode",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Mode that shows the timer duration in hour and minute.<\/p>\n<p>Examples: 16 hours | 14 min.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const CupertinoTimerPickerMode(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "hm",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoTimerPickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">CupertinoTimerPickerMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoTimerPickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Mode that shows the timer duration in hour, minute, and second.<\/p>\n<p>Examples: 16 hours | 14 min | 43 sec.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const CupertinoTimerPickerMode(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "hms",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoTimerPickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Mode that shows the timer duration in minute and second.<\/p>\n<p>Examples: 14 min | 43 sec.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const CupertinoTimerPickerMode(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "ms",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoTimerPickerMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">CupertinoTimerPickerMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.CupertinoTimerPickerMode",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Determines the order of the columns inside <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> in date mode.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "cupertino\/DatePickerDateOrder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.DatePickerDateOrder",
            "shortname": "DatePickerDateOrder",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Order of the columns, from left to right: day, month, year.<\/p>\n<p>Example: 12 | March | 1996<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateOrder(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "dmy",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: year, month, day.<\/p>\n<p>Example: 1996 | March | 12<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateOrder(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: month, day, year.<\/p>\n<p>Example: March | 12 | 1996<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateOrder(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "mdy",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">DatePickerDateOrder<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: year, day, month.<\/p>\n<p>Example: 1996 | 12 | March<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateOrder(3)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "ydm",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: year, month, day.<\/p>\n<p>Example: 1996 | March | 12<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateOrder(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "ymd",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateOrder",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Determines the order of the columns inside <a href=\"cupertino\/CupertinoDatePicker-class.html\">CupertinoDatePicker<\/a> in\ntime and date time mode.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "cupertino\/DatePickerDateTimeOrder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.DatePickerDateTimeOrder",
            "shortname": "DatePickerDateTimeOrder",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Order of the columns, from left to right: date, am\/pm, hour, minute.<\/p>\n<p>Example: Fri Aug 31 | PM | 02 | 08.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateTimeOrder(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "date_dayPeriod_time",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateTimeOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">DatePickerDateTimeOrder<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateTimeOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: date, hour, minute, am\/pm.<\/p>\n<p>Example: Fri Aug 31 | 02 | 08 | PM.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateTimeOrder(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "date_time_dayPeriod",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateTimeOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: am\/pm, hour, minute, date.<\/p>\n<p>Example: PM | 02 | 08 | Fri Aug 31.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateTimeOrder(3)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "dayPeriod_time_date",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateTimeOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Order of the columns, from left to right: hour, minute, am\/pm, date.<\/p>\n<p>Example: 02 | 08 | PM | Fri Aug 31.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DatePickerDateTimeOrder(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "time_dayPeriod_date",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateTimeOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">DatePickerDateTimeOrder<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.DatePickerDateTimeOrder",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Visibility of text field overlays based on the state of the current text entry.<\/p>\n<p>Used to toggle the visibility behavior of the optional decorating widgets\nsurrounding the <a href=\"widgets\/EditableText-class.html\">EditableText<\/a> such as the clear text button.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "cupertino\/OverlayVisibilityMode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.OverlayVisibilityMode",
            "shortname": "OverlayVisibilityMode",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Always show the overlay regardless of the text entry state.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const OverlayVisibilityMode(3)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "always",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.OverlayVisibilityMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Overlay will never appear regardless of the text entry state.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const OverlayVisibilityMode(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "\n          ",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.OverlayVisibilityMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Overlay will only appear when the current text entry is not empty.<\/p>\n<p>This includes pre-filled text that the user did not type in manually. But\ndoes not include text in placeholders.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const OverlayVisibilityMode(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "editing",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.OverlayVisibilityMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Overlay will never appear regardless of the text entry state.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const OverlayVisibilityMode(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "never",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.OverlayVisibilityMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Overlay will only appear when the current text entry is empty.<\/p>\n<p>This also includes not having pre-filled text that the user did not type\nin manually. Texts in placeholders are ignored.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const OverlayVisibilityMode(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "notEditing",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.OverlayVisibilityMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">OverlayVisibilityMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.OverlayVisibilityMode",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The current state of the refresh control.<\/p>\n<p>Passed into the <a href=\"cupertino\/RefreshControlIndicatorBuilder.html\">RefreshControlIndicatorBuilder<\/a> builder function so\nusers can show different UI in different modes.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "cupertino\/RefreshIndicatorMode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "cupertino",
            "name": "cupertino.RefreshIndicatorMode",
            "shortname": "RefreshIndicatorMode",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Dragged far enough that the onRefresh callback will run and the dragged\ndisplacement is not yet at the final refresh resting state.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const RefreshIndicatorMode(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "armed",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.RefreshIndicatorMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>While the indicator is animating away after refreshing.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const RefreshIndicatorMode(4)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "done",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.RefreshIndicatorMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>While being overscrolled but not far enough yet to trigger the refresh.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const RefreshIndicatorMode(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "drag",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.RefreshIndicatorMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>Initial state, when not being overscrolled into, or after the overscroll\nis canceled or after done and the sliver retracted away.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const RefreshIndicatorMode(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "inactive",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.RefreshIndicatorMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>While the onRefresh task is running.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const RefreshIndicatorMode(3)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "refresh",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.RefreshIndicatorMode",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">RefreshIndicatorMode<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "cupertino.RefreshIndicatorMode",
                    "params": []
                }
            ]
        }
    ],
    "typedef": []
}