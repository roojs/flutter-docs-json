{
    "name": "path",
    "href": "package-path_path\/package-path_path-library.html",
    "cn": [
        {
            "name": "path.Context",
            "extends": [],
            "memberOf": "path",
            "events": [],
            "methods": [
                {
                    "name": "Context",
                    "type": "",
                    "desc": "<p>Creates a new path context for the given style and current directory.<\/p>\n<p>If <code>style<\/code> is omitted, it uses the host operating system's path style. If\nonly <code>current<\/code> is omitted, it defaults \".\". If <em>both<\/em> <code>style<\/code> and\n<code>current<\/code> are omitted, <code>current<\/code> defaults to the real current working\ndirectory.<\/p>\n<p>On the browser, <code>style<\/code> defaults to <a href=\"package-path_path\/Style\/url.html\">Style.url<\/a> and <code>current<\/code> defaults to\nthe current URL.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "style",
                            "type": "path.Style",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "current",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-path_path\/Context\/Context.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Context({Style style, String current}) {\n  if (current == null) {\n    if (style == null) {\n      current = p.current;\n    } else {\n      current = \".\";\n    }\n  }\n\n  if (style == null) {\n    style = Style.platform;\n  } else if (style is! InternalStyle) {\n    throw new ArgumentError(\"Only styles defined by the path package are \"\n        \"allowed.\");\n  }\n\n  return new Context._(style as InternalStyle, current);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "absolute",
                    "type": "dart:core.String",
                    "desc": "<p>Creates a new path by appending the given path parts to <a href=\"package-path_path\/Context\/current.html\">current<\/a>.\nEquivalent to <a href=\"package-path_path\/Context\/join.html\">join()<\/a> with <a href=\"package-path_path\/Context\/current.html\">current<\/a> as the first argument. Example:<\/p>\n<pre class=\"language-dart\"><code>var context = new Context(current: '\/root');\ncontext.absolute('path', 'to', 'foo'); \/\/ -&gt; '\/root\/path\/to\/foo'\n<\/code><\/pre>\n<p>If <a href=\"package-path_path\/Context\/current.html\">current<\/a> isn't absolute, this won't return an absolute path.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "part1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part3",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part4",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part5",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part6",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part7",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/absolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String absolute(String part1,\n    [String part2,\n    String part3,\n    String part4,\n    String part5,\n    String part6,\n    String part7]) {\n  _validateArgList(\n      \"absolute\", [part1, part2, part3, part4, part5, part6, part7]);\n\n  \/\/ If there's a single absolute path, just return it. This is a lot faster\n  \/\/ for the common case of `p.absolute(path)`.\n  if (part2 == null &amp;&amp; isAbsolute(part1) &amp;&amp; !isRootRelative(part1)) {\n    return part1;\n  }\n\n  return join(current, part1, part2, part3, part4, part5, part6, part7);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "basename",
                    "type": "dart:core.String",
                    "desc": "<p>Gets the part of <code>path<\/code> after the last separator on the context's\nplatform.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/foo.dart'); \/\/ -&gt; 'foo.dart'\ncontext.basename('path\/to');          \/\/ -&gt; 'to'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.basename('path\/to\/'); \/\/ -&gt; 'to'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/basename.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String basename(String path) =&gt; _parse(path).basename;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "basenameWithoutExtension",
                    "type": "dart:core.String",
                    "desc": "<p>Gets the part of <code>path<\/code> after the last separator on the context's\nplatform, and without any trailing file extension.<\/p>\n<pre class=\"language-dart\"><code>context.basenameWithoutExtension('path\/to\/foo.dart'); \/\/ -&gt; 'foo'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.basenameWithoutExtension('path\/to\/foo.dart\/'); \/\/ -&gt; 'foo'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/basenameWithoutExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String basenameWithoutExtension(String path) =&gt;\n    _parse(path).basenameWithoutExtension;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "canonicalize",
                    "type": "dart:core.String",
                    "desc": "<p>Canonicalizes <code>path<\/code>.<\/p>\n<p>This is guaranteed to return the same path for two different input paths\nif and only if both input paths point to the same location. Unlike\n<a href=\"package-path_path\/Context\/normalize.html\">normalize<\/a>, it returns absolute paths when possible and canonicalizes\nASCII case on Windows.<\/p>\n<p>Note that this does not resolve symlinks.<\/p>\n<p>If you want a map that uses path keys, it's probably more efficient to\npass <a href=\"package-path_path\/Context\/equals.html\">equals<\/a> and <a href=\"package-path_path\/Context\/hash.html\">hash<\/a> to <a href=\"dart-collection\/HashMap\/HashMap.html\">new HashMap<\/a> than it is to canonicalize every\nkey.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/canonicalize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String canonicalize(String path) {\n  path = absolute(path);\n  if (style != Style.windows &amp;&amp; !_needsNormalization(path)) return path;\n\n  var parsed = _parse(path);\n  parsed.normalize(canonicalize: true);\n  return parsed.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dirname",
                    "type": "dart:core.String",
                    "desc": "<p>Gets the part of <code>path<\/code> before the last separator.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to'\ncontext.dirname('path\/to');          \/\/ -&gt; 'path'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>context.dirname('path\/to\/'); \/\/ -&gt; 'path'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/dirname.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String dirname(String path) {\n  var parsed = _parse(path);\n  parsed.removeTrailingSeparators();\n  if (parsed.parts.isEmpty) return parsed.root == null ? '.' : parsed.root;\n  if (parsed.parts.length == 1) {\n    return parsed.root == null ? '.' : parsed.root;\n  }\n  parsed.parts.removeLast();\n  parsed.separators.removeLast();\n  parsed.removeTrailingSeparators();\n  return parsed.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "equals",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if <code>path1<\/code> points to the same location as <code>path2<\/code>, and\n<code>false<\/code> otherwise.<\/p>\n<p>The <a href=\"package-path_path\/Context\/hash.html\">hash<\/a> function returns a hash code that matches these equality\nsemantics.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "path2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(String path1, String path2) =&gt;\n    _isWithinOrEquals(path1, path2) == _PathRelation.equal;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "extension",
                    "type": "dart:core.String",
                    "desc": "<p>Gets the file extension of <code>path<\/code>: the portion of <a href=\"package-path_path\/Context\/basename.html\">basename<\/a> from the last\n<code>.<\/code> to the end (including the <code>.<\/code> itself).<\/p>\n<pre class=\"language-dart\"><code>context.extension('path\/to\/foo.dart'); \/\/ -&gt; '.dart'\ncontext.extension('path\/to\/foo'); \/\/ -&gt; ''\ncontext.extension('path.to\/foo'); \/\/ -&gt; ''\ncontext.extension('path\/to\/foo.dart.js'); \/\/ -&gt; '.js'\n<\/code><\/pre>\n<p>If the file name starts with a <code>.<\/code>, then it is not considered an\nextension:<\/p>\n<pre class=\"language-dart\"><code>context.extension('~\/.bashrc');    \/\/ -&gt; ''\ncontext.extension('~\/.notes.txt'); \/\/ -&gt; '.txt'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/extension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String extension(String path) =&gt; _parse(path).extension;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "fromUri",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the path represented by <code>uri<\/code>, which may be a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n<p>For POSIX and Windows styles, <code>uri<\/code> must be a <code>file:<\/code> URI. For the URL\nstyle, this will just convert <code>uri<\/code> to a string.<\/p>\n<pre class=\"language-dart\"><code>\/\/ POSIX\ncontext.fromUri('file:\/\/\/path\/to\/foo')\n  \/\/ -&gt; '\/path\/to\/foo'\n\n\/\/ Windows\ncontext.fromUri('file:\/\/\/C:\/path\/to\/foo')\n  \/\/ -&gt; r'C:\\path\\to\\foo'\n\n\/\/ URL\ncontext.fromUri('http:\/\/dartlang.org\/path\/to\/foo')\n  \/\/ -&gt; 'http:\/\/dartlang.org\/path\/to\/foo'\n<\/code><\/pre>\n<p>If <code>uri<\/code> is relative, a relative path will be returned.<\/p>\n<pre class=\"language-dart\"><code>path.fromUri('path\/to\/foo'); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "uri",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/fromUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String fromUri(uri) =&gt; style.pathFromUri(_parseUri(uri));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hash",
                    "type": "dart:core.int",
                    "desc": "<p>Returns a hash code for <code>path<\/code> that matches the semantics of <a href=\"package-path_path\/Context\/equals.html\">equals<\/a>.<\/p>\n<p>Note that the same path may have different hash codes in different\n<a href=\"package-path_path\/Context-class.html\">Context<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/hash.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(String path) {\n  \/\/ Make [path] absolute to ensure that equivalent relative and absolute\n  \/\/ paths have the same hash code.\n  path = absolute(path);\n\n  var result = _hashFast(path);\n  if (result != null) return result;\n\n  var parsed = _parse(path);\n  parsed.normalize();\n  return _hashFast(parsed.toString());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isAbsolute",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if <code>path<\/code> is an absolute path and <code>false<\/code> if it is a\nrelative path.<\/p>\n<p>On POSIX systems, absolute paths start with a <code>\/<\/code> (forward slash). On\nWindows, an absolute path starts with <code>\\\\<\/code>, or a drive letter followed by\n<code>:\/<\/code> or <code>:\\<\/code>. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. <code>http:\/\/dartlang.org<\/code>, <code>file:\/\/<\/code>) or with a <code>\/<\/code>.<\/p>\n<p>URLs that start with <code>\/<\/code> are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, <a href=\"package-path_path\/Context\/isAbsolute.html\">isAbsolute<\/a> will return true for\nthem. They can be detected using <a href=\"package-path_path\/Context\/isRootRelative.html\">isRootRelative<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/isAbsolute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isAbsolute(String path) =&gt; style.rootLength(path) &gt; 0;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isRelative",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if <code>path<\/code> is a relative path and <code>false<\/code> if it is absolute.\nOn POSIX systems, absolute paths start with a <code>\/<\/code> (forward slash). On\nWindows, an absolute path starts with <code>\\\\<\/code>, or a drive letter followed by\n<code>:\/<\/code> or <code>:\\<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/isRelative.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isRelative(String path) =&gt; !this.isAbsolute(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isRootRelative",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if <code>path<\/code> is a root-relative path and <code>false<\/code> if it's not.<\/p>\n<p>URLs that start with <code>\/<\/code> are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are\nstill absolute in every other sense, <a href=\"package-path_path\/Context\/isAbsolute.html\">isAbsolute<\/a> will return true for\nthem. They can be detected using <a href=\"package-path_path\/Context\/isRootRelative.html\">isRootRelative<\/a>.<\/p>\n<p>No POSIX and Windows paths are root-relative.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/isRootRelative.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isRootRelative(String path) =&gt; style.isRootRelative(path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isWithin",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns <code>true<\/code> if <code>child<\/code> is a path beneath <code>parent<\/code>, and <code>false<\/code>\notherwise.<\/p>\n<pre class=\"language-dart\"><code>path.isWithin('\/root\/path', '\/root\/path\/a'); \/\/ -&gt; true\npath.isWithin('\/root\/path', '\/root\/other'); \/\/ -&gt; false\npath.isWithin('\/root\/path', '\/root\/path'); \/\/ -&gt; false\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "parent",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "child",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/isWithin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isWithin(String parent, String child) =&gt;\n    _isWithinOrEquals(parent, child) == _PathRelation.within;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "join",
                    "type": "dart:core.String",
                    "desc": "<p>Joins the given path parts into a single path. Example:<\/p>\n<pre class=\"language-dart\"><code>context.join('path', 'to', 'foo'); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n<p>If any part ends in a path separator, then a redundant separator will not\nbe added:<\/p>\n<pre class=\"language-dart\"><code>context.join('path\/', 'to', 'foo'); \/\/ -&gt; 'path\/to\/foo\n<\/code><\/pre>\n<p>If a part is an absolute path, then anything before that will be ignored:<\/p>\n<pre class=\"language-dart\"><code>context.join('path', '\/to', 'foo'); \/\/ -&gt; '\/to\/foo'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "part1",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part2",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part3",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part4",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part5",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part6",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part7",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "part8",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/join.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join(String part1,\n    [String part2,\n    String part3,\n    String part4,\n    String part5,\n    String part6,\n    String part7,\n    String part8]) {\n  var parts = &lt;String&gt;[\n    part1,\n    part2,\n    part3,\n    part4,\n    part5,\n    part6,\n    part7,\n    part8\n  ];\n  _validateArgList(\"join\", parts);\n  return joinAll(parts.where((part) =&gt; part != null));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "joinAll",
                    "type": "dart:core.String",
                    "desc": "<p>Joins the given path parts into a single path. Example:<\/p>\n<pre class=\"language-dart\"><code>context.joinAll(['path', 'to', 'foo']); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n<p>If any part ends in a path separator, then a redundant separator will not\nbe added:<\/p>\n<pre class=\"language-dart\"><code>context.joinAll(['path\/', 'to', 'foo']); \/\/ -&gt; 'path\/to\/foo\n<\/code><\/pre>\n<p>If a part is an absolute path, then anything before that will be ignored:<\/p>\n<pre class=\"language-dart\"><code>context.joinAll(['path', '\/to', 'foo']); \/\/ -&gt; '\/to\/foo'\n<\/code><\/pre>\n<p>For a fixed number of parts, <a href=\"package-path_path\/Context\/join.html\">join<\/a> is usually terser.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "parts",
                            "type": "dart:core.Iterable<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/joinAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String joinAll(Iterable&lt;String&gt; parts) {\n  var buffer = new StringBuffer();\n  var needsSeparator = false;\n  var isAbsoluteAndNotRootRelative = false;\n\n  for (var part in parts.where((part) =&gt; part != '')) {\n    if (this.isRootRelative(part) &amp;&amp; isAbsoluteAndNotRootRelative) {\n      \/\/ If the new part is root-relative, it preserves the previous root but\n      \/\/ replaces the path after it.\n      var parsed = _parse(part);\n      var path = buffer.toString();\n      parsed.root =\n          path.substring(0, style.rootLength(path, withDrive: true));\n      if (style.needsSeparator(parsed.root)) {\n        parsed.separators[0] = style.separator;\n      }\n      buffer.clear();\n      buffer.write(parsed.toString());\n    } else if (this.isAbsolute(part)) {\n      isAbsoluteAndNotRootRelative = !this.isRootRelative(part);\n      \/\/ An absolute path discards everything before it.\n      buffer.clear();\n      buffer.write(part);\n    } else {\n      if (part.length &gt; 0 &amp;&amp; style.containsSeparator(part[0])) {\n        \/\/ The part starts with a separator, so we don't need to add one.\n      } else if (needsSeparator) {\n        buffer.write(separator);\n      }\n\n      buffer.write(part);\n    }\n\n    \/\/ Unless this part ends with a separator, we'll need to add one before\n    \/\/ the next part.\n    needsSeparator = style.needsSeparator(part);\n  }\n\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "normalize",
                    "type": "dart:core.String",
                    "desc": "<p>Normalizes <code>path<\/code>, simplifying it by handling <code>..<\/code>, and <code>.<\/code>, and\nremoving redundant path separators whenever possible.<\/p>\n<p>Note that this is <em>not<\/em> guaranteed to return the same result for two\nequivalent input paths. For that, see <a href=\"package-path_path\/Context\/canonicalize.html\">canonicalize<\/a>. Or, if you're using\npaths as map keys, pass <a href=\"package-path_path\/Context\/equals.html\">equals<\/a> and <a href=\"package-path_path\/Context\/hash.html\">hash<\/a> to <a href=\"dart-collection\/HashMap\/HashMap.html\">new HashMap<\/a>.<\/p>\n<pre class=\"language-dart\"><code>context.normalize('path\/.\/to\/..\/\/file.text'); \/\/ -&gt; 'path\/file.txt'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/normalize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String normalize(String path) {\n  if (!_needsNormalization(path)) return path;\n\n  var parsed = _parse(path);\n  parsed.normalize();\n  return parsed.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "prettyUri",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a terse, human-readable representation of <code>uri<\/code>.<\/p>\n<p><code>uri<\/code> can be a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>. If it can be made relative to the\ncurrent working directory, that's done. Otherwise, it's returned as-is.\nThis gracefully handles non-<code>file:<\/code> URIs for <a href=\"package-path_path\/Style\/posix.html\">Style.posix<\/a> and\n<a href=\"package-path_path\/Style\/windows.html\">Style.windows<\/a>.<\/p>\n<p>The returned value is meant for human consumption, and may be either URI-\nor path-formatted.<\/p>\n<pre class=\"language-dart\"><code>\/\/ POSIX\nvar context = new Context(current: '\/root\/path');\ncontext.prettyUri('file:\/\/\/root\/path\/a\/b.dart'); \/\/ -&gt; 'a\/b.dart'\ncontext.prettyUri('http:\/\/dartlang.org\/'); \/\/ -&gt; 'http:\/\/dartlang.org'\n\n\/\/ Windows\nvar context = new Context(current: r'C:\\root\\path');\ncontext.prettyUri('file:\/\/\/C:\/root\/path\/a\/b.dart'); \/\/ -&gt; r'a\\b.dart'\ncontext.prettyUri('http:\/\/dartlang.org\/'); \/\/ -&gt; 'http:\/\/dartlang.org'\n\n\/\/ URL\nvar context = new Context(current: 'http:\/\/dartlang.org\/root\/path');\ncontext.prettyUri('http:\/\/dartlang.org\/root\/path\/a\/b.dart');\n    \/\/ -&gt; r'a\/b.dart'\ncontext.prettyUri('file:\/\/\/root\/path'); \/\/ -&gt; 'file:\/\/\/root\/path'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "uri",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/prettyUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String prettyUri(uri) {\n  var typedUri = _parseUri(uri);\n  if (typedUri.scheme == 'file' &amp;&amp; style == Style.url) {\n    return typedUri.toString();\n  } else if (typedUri.scheme != 'file' &amp;&amp;\n      typedUri.scheme != '' &amp;&amp;\n      style != Style.url) {\n    return typedUri.toString();\n  }\n\n  var path = normalize(fromUri(typedUri));\n  var rel = relative(path);\n\n  \/\/ Only return a relative path if it's actually shorter than the absolute\n  \/\/ path. This avoids ugly things like long \"..\/\" chains to get to the root\n  \/\/ and then go back down.\n  return split(rel).length &gt; split(path).length ? path : rel;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "relative",
                    "type": "dart:core.String",
                    "desc": "<p>Attempts to convert <code>path<\/code> to an equivalent relative path relative to\n<code>root<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var context = new Context(current: '\/root\/path');\ncontext.relative('\/root\/path\/a\/b.dart'); \/\/ -&gt; 'a\/b.dart'\ncontext.relative('\/root\/other.dart'); \/\/ -&gt; '..\/other.dart'\n<\/code><\/pre>\n<p>If the <code>from<\/code> argument is passed, <code>path<\/code> is made relative to that instead.<\/p>\n<pre class=\"language-dart\"><code>context.relative('\/root\/path\/a\/b.dart',\n    from: '\/root\/path'); \/\/ -&gt; 'a\/b.dart'\ncontext.relative('\/root\/other.dart',\n    from: '\/root\/path'); \/\/ -&gt; '..\/other.dart'\n<\/code><\/pre>\n<p>If <code>path<\/code> and\/or <code>from<\/code> are relative paths, they are assumed to be\nrelative to <a href=\"package-path_path\/Context\/current.html\">current<\/a>.<\/p>\n<p>Since there is no relative path from one drive letter to another on\nWindows, this will return an absolute path in that case.<\/p>\n<pre class=\"language-dart\"><code>context.relative(r'D:\\other', from: r'C:\\other'); \/\/ -&gt; 'D:\\other'\n<\/code><\/pre>\n<p>This will also return an absolute path if an absolute <code>path<\/code> is passed to\na context with a relative path for <a href=\"package-path_path\/Context\/current.html\">current<\/a>.<\/p>\n<pre class=\"language-dart\"><code>var context = new Context(r'some\/relative\/path');\ncontext.relative(r'\/absolute\/path'); \/\/ -&gt; '\/absolute\/path'\n<\/code><\/pre>\n<p>If <code>root<\/code> is relative, it may be impossible to determine a path from\n<code>from<\/code> to <code>path<\/code>. For example, if <code>root<\/code> and <code>path<\/code> are \".\" and <code>from<\/code> is\n\"\/\", no path can be determined. In this case, a <a href=\"package-path_path\/PathException-class.html\">PathException<\/a> will be\nthrown.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "from",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/relative.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String relative(String path, {String from}) {\n  \/\/ Avoid expensive computation if the path is already relative.\n  if (from == null &amp;&amp; this.isRelative(path)) return this.normalize(path);\n\n  from = from == null ? current : absolute(from);\n\n  \/\/ We can't determine the path from a relative path to an absolute path.\n  if (this.isRelative(from) &amp;&amp; this.isAbsolute(path)) {\n    return this.normalize(path);\n  }\n\n  \/\/ If the given path is relative, resolve it relative to the context's\n  \/\/ current directory.\n  if (this.isRelative(path) || this.isRootRelative(path)) {\n    path = this.absolute(path);\n  }\n\n  \/\/ If the path is still relative and `from` is absolute, we're unable to\n  \/\/ find a path from `from` to `path`.\n  if (this.isRelative(path) &amp;&amp; this.isAbsolute(from)) {\n    throw new PathException('Unable to find a path to \"$path\" from \"$from\".');\n  }\n\n  var fromParsed = _parse(from)..normalize();\n  var pathParsed = _parse(path)..normalize();\n\n  if (fromParsed.parts.length &gt; 0 &amp;&amp; fromParsed.parts[0] == '.') {\n    return pathParsed.toString();\n  }\n\n  \/\/ If the root prefixes don't match (for example, different drive letters\n  \/\/ on Windows), then there is no relative path, so just return the absolute\n  \/\/ one. In Windows, drive letters are case-insenstive and we allow\n  \/\/ calculation of relative paths, even if a path has not been normalized.\n  if (fromParsed.root != pathParsed.root &amp;&amp;\n      ((fromParsed.root == null || pathParsed.root == null) ||\n          !style.pathsEqual(fromParsed.root, pathParsed.root))) {\n    return pathParsed.toString();\n  }\n\n  \/\/ Strip off their common prefix.\n  while (fromParsed.parts.length &gt; 0 &amp;&amp;\n      pathParsed.parts.length &gt; 0 &amp;&amp;\n      style.pathsEqual(fromParsed.parts[0], pathParsed.parts[0])) {\n    fromParsed.parts.removeAt(0);\n    fromParsed.separators.removeAt(1);\n    pathParsed.parts.removeAt(0);\n    pathParsed.separators.removeAt(1);\n  }\n\n  \/\/ If there are any directories left in the from path, we need to walk up\n  \/\/ out of them. If a directory left in the from path is '..', it cannot\n  \/\/ be cancelled by adding a '..'.\n  if (fromParsed.parts.length &gt; 0 &amp;&amp; fromParsed.parts[0] == '..') {\n    throw new PathException('Unable to find a path to \"$path\" from \"$from\".');\n  }\n  pathParsed.parts\n      .insertAll(0, new List.filled(fromParsed.parts.length, '..'));\n  pathParsed.separators[0] = '';\n  pathParsed.separators.insertAll(\n      1, new List.filled(fromParsed.parts.length, style.separator));\n\n  \/\/ Corner case: the paths completely collapsed.\n  if (pathParsed.parts.length == 0) return '.';\n\n  \/\/ Corner case: path was '.' and some '..' directories were added in front.\n  \/\/ Don't add a final '\/.' in that case.\n  if (pathParsed.parts.length &gt; 1 &amp;&amp; pathParsed.parts.last == '.') {\n    pathParsed.parts.removeLast();\n    pathParsed.separators\n      ..removeLast()\n      ..removeLast()\n      ..add('');\n  }\n\n  \/\/ Make it relative.\n  pathParsed.root = '';\n  pathParsed.removeTrailingSeparators();\n\n  return pathParsed.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "rootPrefix",
                    "type": "dart:core.String",
                    "desc": "<p>Returns the root of <code>path<\/code> if it's absolute, or an empty string if it's\nrelative.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Unix\ncontext.rootPrefix('path\/to\/foo'); \/\/ -&gt; ''\ncontext.rootPrefix('\/path\/to\/foo'); \/\/ -&gt; '\/'\n\n\/\/ Windows\ncontext.rootPrefix(r'path\\to\\foo'); \/\/ -&gt; ''\ncontext.rootPrefix(r'C:\\path\\to\\foo'); \/\/ -&gt; r'C:\\'\n\n\/\/ URL\ncontext.rootPrefix('path\/to\/foo'); \/\/ -&gt; ''\ncontext.rootPrefix('http:\/\/dartlang.org\/path\/to\/foo');\n  \/\/ -&gt; 'http:\/\/dartlang.org'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/rootPrefix.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String rootPrefix(String path) =&gt; path.substring(0, style.rootLength(path));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "setExtension",
                    "type": "dart:core.String",
                    "desc": "<p>Returns <code>path<\/code> with the trailing extension set to <code>extension<\/code>.<\/p>\n<p>If <code>path<\/code> doesn't have a trailing extension, this just adds <code>extension<\/code> to\nthe end.<\/p>\n<pre class=\"language-dart\"><code>context.setExtension('path\/to\/foo.dart', '.js')\n  \/\/ -&gt; 'path\/to\/foo.js'\ncontext.setExtension('path\/to\/foo.dart.js', '.map')\n  \/\/ -&gt; 'path\/to\/foo.dart.map'\ncontext.setExtension('path\/to\/foo', '.js')\n  \/\/ -&gt; 'path\/to\/foo.js'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "extension",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/setExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String setExtension(String path, String extension) =&gt;\n    withoutExtension(path) + extension;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "split",
                    "type": "dart:core.List<dart:core.String>",
                    "desc": "<p>Splits <code>path<\/code> into its components using the current platform's\n<a href=\"package-path_path\/Context\/separator.html\">separator<\/a>. Example:<\/p>\n<pre class=\"language-dart\"><code>context.split('path\/to\/foo'); \/\/ -&gt; ['path', 'to', 'foo']\n<\/code><\/pre>\n<p>The path will <em>not<\/em> be normalized before splitting.<\/p>\n<pre class=\"language-dart\"><code>context.split('path\/..\/foo'); \/\/ -&gt; ['path', '..', 'foo']\n<\/code><\/pre>\n<p>If <code>path<\/code> is absolute, the root directory will be the first element in the\narray. Example:<\/p>\n<pre class=\"language-dart\"><code>\/\/ Unix\ncontext.split('\/path\/to\/foo'); \/\/ -&gt; ['\/', 'path', 'to', 'foo']\n\n\/\/ Windows\ncontext.split(r'C:\\path\\to\\foo'); \/\/ -&gt; [r'C:\\', 'path', 'to', 'foo']\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/split.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; split(String path) {\n  var parsed = _parse(path);\n  \/\/ Filter out empty parts that exist due to multiple separators in a row.\n  parsed.parts = parsed.parts.where((part) =&gt; !part.isEmpty).toList();\n  if (parsed.root != null) parsed.parts.insert(0, parsed.root);\n  return parsed.parts;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "toUri",
                    "type": "dart:core.Uri",
                    "desc": "<p>Returns the URI that represents <code>path<\/code>.<\/p>\n<p>For POSIX and Windows styles, this will return a <code>file:<\/code> URI. For the URL\nstyle, this will just convert <code>path<\/code> to a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n<pre class=\"language-dart\"><code>\/\/ POSIX\ncontext.toUri('\/path\/to\/foo')\n  \/\/ -&gt; Uri.parse('file:\/\/\/path\/to\/foo')\n\n\/\/ Windows\ncontext.toUri(r'C:\\path\\to\\foo')\n  \/\/ -&gt; Uri.parse('file:\/\/\/C:\/path\/to\/foo')\n\n\/\/ URL\ncontext.toUri('http:\/\/dartlang.org\/path\/to\/foo')\n  \/\/ -&gt; Uri.parse('http:\/\/dartlang.org\/path\/to\/foo')\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/toUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri toUri(String path) {\n  if (isRelative(path)) {\n    return style.relativePathToUri(path);\n  } else {\n    return style.absolutePathToUri(join(current, path));\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withoutExtension",
                    "type": "dart:core.String",
                    "desc": "<p>Removes a trailing extension from the last part of <code>path<\/code>.<\/p>\n<pre class=\"language-dart\"><code>context.withoutExtension('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.Context",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Context\/withoutExtension.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String withoutExtension(String path) {\n  var parsed = _parse(path);\n\n  for (var i = parsed.parts.length - 1; i &gt;= 0; i--) {\n    if (!parsed.parts[i].isEmpty) {\n      parsed.parts[i] = parsed.basenameWithoutExtension;\n      break;\n    }\n  }\n\n  return parsed.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "current",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The current directory that relative paths are relative to.<\/p>\n        ",
                    "memberOf": "path.Context",
                    "isConstant": false,
                    "href": "package-path_path\/Context\/current.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get current =&gt; _current != null ? _current : p.current;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "separator",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>Gets the path separator for the context's <a href=\"package-path_path\/Context\/style.html\">style<\/a>. On Mac and Linux,\nthis is <code>\/<\/code>. On Windows, it's <code>\\<\/code>.<\/p>\n        ",
                    "memberOf": "path.Context",
                    "isConstant": false,
                    "href": "package-path_path\/Context\/separator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get separator =&gt; style.separator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "",
                    "types": [],
                    "desc": "<p>The style of path that this context works with.<\/p>\n        ",
                    "memberOf": "path.Context",
                    "isConstant": false,
                    "href": "package-path_path\/Context\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final InternalStyle style\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-path_path\/Context-class.html",
            "desc": "<p>An instantiable class for manipulating paths. Unlike the top-level\nfunctions, this lets you explicitly select what platform the paths will use.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Context"
        },
        {
            "name": "path.PathException",
            "extends": [],
            "memberOf": "path",
            "events": [],
            "methods": [
                {
                    "name": "PathException",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.PathException",
                    "sig": "",
                    "params": [
                        {
                            "name": "message",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-path_path\/PathException\/PathException.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PathException(this.message);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathException",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-path_path\/PathException\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"PathException: $message\";<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "message",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "path.PathException",
                    "isConstant": false,
                    "href": "package-path_path\/PathException\/message.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String message\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-path_path\/PathException-class.html",
            "desc": "<p>An exception class that's thrown when a path operation is unable to be\ncomputed accurately.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PathException"
        },
        {
            "name": "path.PathMap",
            "extends": [
                "dart:core.String",
                "dart:collection.MapView",
                "dart:core.Object"
            ],
            "memberOf": "path",
            "events": [],
            "methods": [
                {
                    "name": "PathMap",
                    "type": "",
                    "desc": "<p>Creates an empty <a href=\"package-path_path\/PathMap-class.html\">PathMap<\/a> whose keys are compared using <code>context.equals<\/code>\nand <code>context.hash<\/code>.<\/p>\n<p>The <code>context<\/code> defaults to the current path context.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "context",
                            "type": "path.Context",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-path_path\/PathMap\/PathMap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PathMap({p.Context context}) : super(_create(context));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "PathMap.of",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"package-path_path\/PathMap-class.html\">PathMap<\/a> with the same keys and values as <code>other<\/code> whose keys\nare compared using <code>context.equals<\/code> and <code>context.hash<\/code>.<\/p>\n<p>The <code>context<\/code> defaults to the current path context. If multiple keys in\n<code>other<\/code> represent the same logical path, the last key's value will be\nused.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathMap",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Map<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "context",
                            "type": "path.Context",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-path_path\/PathMap\/PathMap.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PathMap.of(Map&lt;String, V&gt; other, {p.Context context})\n    : super(_create(context)..addAll(other));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-path_path\/PathMap-class.html",
            "desc": "<p>A map whose keys are paths, compared using <a href=\"package-path_path\/equals.html\">equals<\/a> and <a href=\"package-path_path\/hash.html\">hash<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PathMap"
        },
        {
            "name": "path.PathSet",
            "extends": [
                "dart:core.String",
                "dart:collection.IterableBase",
                "dart:core.String",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "memberOf": "path",
            "events": [],
            "methods": [
                {
                    "name": "PathSet",
                    "type": "",
                    "desc": "<p>Creates an empty <a href=\"package-path_path\/PathSet-class.html\">PathSet<\/a> whose contents are compared using\n<code>context.equals<\/code> and <code>context.hash<\/code>.<\/p>\n<p>The <code>context<\/code> defaults to the current path context.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "context",
                            "type": "path.Context",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-path_path\/PathSet\/PathSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PathSet({p.Context context}) : _inner = _create(context);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "dart:core.bool",
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(String value) =&gt; _inner.add(value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addAll",
                    "type": "",
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"package-path_path\/PathSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/addAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;String&gt; elements) =&gt; _inner.addAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "cast",
                    "type": "dart:core.Set",
                    "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"package-path_path\/PathSet\/add.html\">add<\/a> or <a href=\"package-path_path\/PathSet\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/cast.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;T&gt; cast&lt;T&gt;() =&gt; _inner.cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; _inner.clear();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "contains",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if <code>value<\/code> is in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/contains.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object other) =&gt; _inner.contains(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "containsAll",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/containsAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) =&gt; _inner.containsAll(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "difference",
                    "type": "dart:core.Set<dart:core.String>",
                    "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/difference.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;String&gt; difference(Set&lt;Object&gt; other) =&gt; _inner.difference(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "intersection",
                    "type": "dart:core.Set<dart:core.String>",
                    "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/intersection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;String&gt; intersection(Set&lt;Object&gt; other) =&gt; _inner.intersection(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "lookup",
                    "type": "dart:core.String",
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"package-path_path\/PathSet\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"package-path_path\/PathSet\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/lookup.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String lookup(Object element) =&gt; _inner.lookup(element);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "PathSet.of",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"package-path_path\/PathSet-class.html\">PathSet<\/a> with the same contents as <code>other<\/code> whose elements are\ncompared using <code>context.equals<\/code> and <code>context.hash<\/code>.<\/p>\n<p>The <code>context<\/code> defaults to the current path context. If multiple elements\nin <code>other<\/code> represent the same logical path, the first value will be\nused.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Iterable<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "context",
                            "type": "path.Context",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "package-path_path\/PathSet\/PathSet.of.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">PathSet.of(Iterable&lt;String&gt; other, {p.Context context})\n    : _inner = _create(context)..addAll(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "remove",
                    "type": "dart:core.bool",
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/remove.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; _inner.remove(value);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "removeAll",
                    "type": "",
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/removeAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) =&gt; _inner.removeAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeWhere",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/removeWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(String element)) =&gt; _inner.removeWhere(test);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainAll",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "elements",
                            "type": "dart:core.Iterable<dart:core.Object>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Iterable",
                                "dart:core.Object"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/retainAll.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) =&gt; _inner.retainAll(elements);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "retainWhere",
                    "type": "",
                    "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "element",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "element",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/retainWhere.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(String element)) =&gt; _inner.retainWhere(test);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toSet",
                    "type": "dart:core.Set<dart:core.String>",
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/toSet.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;String&gt; toSet() =&gt; _inner.toSet();<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "union",
                    "type": "dart:core.Set<dart:core.String>",
                    "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.PathSet",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Set<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Set",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/PathSet\/union.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;String&gt; union(Set&lt;String&gt; other) =&gt; _inner.union(other);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Set",
                        "dart:core.String"
                    ]
                }
            ],
            "props": [
                {
                    "name": "iterator",
                    "type": "dart:core.Iterator<dart:core.String>",
                    "types": [
                        "dart:core.Iterator",
                        "dart:core.String"
                    ],
                    "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
                    "memberOf": "path.PathSet",
                    "isConstant": false,
                    "href": "package-path_path\/PathSet\/iterator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;String&gt; get iterator =&gt; _inner.iterator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "length",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Returns the number of elements in <a href=\"package-path_path\/PathSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "memberOf": "path.PathSet",
                    "isConstant": false,
                    "href": "package-path_path\/PathSet\/length.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _inner.length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-path_path\/PathSet-class.html",
            "desc": "<p>A set containing paths, compared using <a href=\"package-path_path\/equals.html\">equals<\/a> and <a href=\"package-path_path\/hash.html\">hash<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "PathSet"
        },
        {
            "name": "path.Style",
            "extends": [],
            "memberOf": "path",
            "events": [],
            "methods": [
                {
                    "name": "Style",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "package-path_path\/Style\/Style.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "absolutePathToUri",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Style\/absolutePathToUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most style members will be removed in path 2.0.\")\nUri absolutePathToUri(String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getRelativeRoot",
                    "type": "dart:core.String",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Style\/getRelativeRoot.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most style members will be removed in path 2.0.\")\nString getRelativeRoot(String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getRoot",
                    "type": "dart:core.String",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Style\/getRoot.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most style members will be removed in path 2.0.\")\nString getRoot(String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "pathFromUri",
                    "type": "dart:core.String",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [
                        {
                            "name": "uri",
                            "type": "dart:core.Uri",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Style\/pathFromUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most style members will be removed in path 2.0.\")\nString pathFromUri(Uri uri);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "relativePathToUri",
                    "type": "dart:core.Uri",
                    "desc": "",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "package-path_path\/Style\/relativePathToUri.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most style members will be removed in path 2.0.\")\nUri relativePathToUri(String path);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "path.Style",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "package-path_path\/Style\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; name;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "context",
                    "type": "path.Context",
                    "types": [],
                    "desc": "<p>A <a href=\"package-path_path\/Context-class.html\">Context<\/a> that uses this style.<\/p>\n        ",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/context.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Context get context =&gt; new Context(style: this);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of this path style. Will be \"posix\" or \"windows\".<\/p>\n        ",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get name;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "needsSeparatorPattern",
                    "type": "dart:core.Pattern",
                    "types": [],
                    "desc": "",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/needsSeparatorPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most Style members will be removed in path 2.0.\")\nPattern get needsSeparatorPattern;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "platform",
                    "type": "path.Style",
                    "types": [],
                    "desc": "<p>The style of the host platform.<\/p>\n<p>When running on the command line, this will be <a href=\"package-path_path\/Style\/windows.html\">windows<\/a> or <a href=\"package-path_path\/Style\/posix.html\">posix<\/a> based\non the host operating system. On a browser, this will be <a href=\"package-path_path\/Style\/url.html\">url<\/a>.<\/p>\n        ",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/platform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Style platform = _getPlatformStyle()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "posix",
                    "type": "path.Style",
                    "types": [],
                    "desc": "<p>POSIX-style paths use \"\/\" (forward slash) as separators. Absolute paths\nstart with \"\/\". Used by UNIX, Linux, Mac OS X, and others.<\/p>\n        ",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/posix.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Style posix = new PosixStyle()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "relativeRootPattern",
                    "type": "dart:core.Pattern",
                    "types": [],
                    "desc": "",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/relativeRootPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most Style members will be removed in path 2.0.\")\nPattern get relativeRootPattern;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "rootPattern",
                    "type": "dart:core.Pattern",
                    "types": [],
                    "desc": "",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/rootPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most Style members will be removed in path 2.0.\")\nPattern get rootPattern;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "separator",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/separator.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most Style members will be removed in path 2.0.\")\nString get separator;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "separatorPattern",
                    "type": "dart:core.Pattern",
                    "types": [],
                    "desc": "",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/separatorPattern.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Most Style members will be removed in path 2.0.\")\nPattern get separatorPattern;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "url",
                    "type": "path.Style",
                    "types": [],
                    "desc": "<p>URLs aren't filesystem paths, but they're supported to make it easier to\nmanipulate URL paths in the browser.<\/p>\n<p>URLs use \"\/\" (forward slash) as separators. Absolute paths either start\nwith a protocol and optional hostname (e.g. <code>http:\/\/dartlang.org<\/code>,\n<code>file:\/\/<\/code>) or with \"\/\".<\/p>\n        ",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/url.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Style url = new UrlStyle()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "windows",
                    "type": "path.Style",
                    "types": [],
                    "desc": "<p>Windows paths use \"\" (backslash) as separators. Absolute paths start with\na drive letter followed by a colon (example, \"C:\") or two backslashes\n(\"\\\") for UNC paths.<\/p>\n        ",
                    "memberOf": "path.Style",
                    "isConstant": false,
                    "href": "package-path_path\/Style\/windows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static final Style windows = new WindowsStyle()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "package-path_path\/Style-class.html",
            "desc": "<p>An enum type describing a \"flavor\" of path.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Style"
        },
        {
            "name": "absolute",
            "type": "dart:core.String",
            "desc": "<p>Creates a new path by appending the given path parts to <a href=\"package-path_path\/current.html\">current<\/a>.\nEquivalent to <a href=\"package-path_path\/join.html\">join()<\/a> with <a href=\"package-path_path\/current.html\">current<\/a> as the first argument. Example:<\/p>\n<pre class=\"language-dart\"><code>p.absolute('path', 'to\/foo'); \/\/ -&gt; '\/your\/current\/dir\/path\/to\/foo'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "part1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part3",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part4",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part5",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part6",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part7",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part3",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part4",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part5",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part6",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part7",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/absolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String absolute(String part1,\n        [String part2,\n        String part3,\n        String part4,\n        String part5,\n        String part6,\n        String part7]) =&gt;\n    context.absolute(part1, part2, part3, part4, part5, part6, part7);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "basename",
            "type": "dart:core.String",
            "desc": "<p>Gets the part of <code>path<\/code> after the last separator.<\/p>\n<pre class=\"language-dart\"><code>p.basename('path\/to\/foo.dart'); \/\/ -&gt; 'foo.dart'\np.basename('path\/to');          \/\/ -&gt; 'to'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>p.basename('path\/to\/'); \/\/ -&gt; 'to'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/basename.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String basename(String path) =&gt; context.basename(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "basenameWithoutExtension",
            "type": "dart:core.String",
            "desc": "<p>Gets the part of <code>path<\/code> after the last separator, and without any trailing\nfile extension.<\/p>\n<pre class=\"language-dart\"><code>p.basenameWithoutExtension('path\/to\/foo.dart'); \/\/ -&gt; 'foo'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>p.basenameWithoutExtension('path\/to\/foo.dart\/'); \/\/ -&gt; 'foo'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/basenameWithoutExtension.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String basenameWithoutExtension(String path) =&gt;\n    context.basenameWithoutExtension(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "canonicalize",
            "type": "dart:core.String",
            "desc": "<p>Canonicalizes <code>path<\/code>.<\/p>\n<p>This is guaranteed to return the same path for two different input paths\nif and only if both input paths point to the same location. Unlike\n<a href=\"package-path_path\/normalize.html\">normalize<\/a>, it returns absolute paths when possible and canonicalizes\nASCII case on Windows.<\/p>\n<p>Note that this does not resolve symlinks.<\/p>\n<p>If you want a map that uses path keys, it's probably more efficient to\npass <a href=\"package-path_path\/equals.html\">equals<\/a> and <a href=\"package-path_path\/hash.html\">hash<\/a> to <a href=\"dart-collection\/HashMap\/HashMap.html\">new HashMap<\/a> than it is to canonicalize every\nkey.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/canonicalize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String canonicalize(String path) =&gt; context.canonicalize(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "dirname",
            "type": "dart:core.String",
            "desc": "<p>Gets the part of <code>path<\/code> before the last separator.<\/p>\n<pre class=\"language-dart\"><code>p.dirname('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to'\np.dirname('path\/to');          \/\/ -&gt; 'path'\n<\/code><\/pre>\n<p>Trailing separators are ignored.<\/p>\n<pre class=\"language-dart\"><code>p.dirname('path\/to\/'); \/\/ -&gt; 'path'\n<\/code><\/pre>\n<p>If an absolute path contains no directories, only a root, then the root\nis returned.<\/p>\n<pre class=\"language-dart\"><code>p.dirname('\/');  \/\/ -&gt; '\/' (posix)\np.dirname('c:\\');  \/\/ -&gt; 'c:\\' (windows)\n<\/code><\/pre>\n<p>If a relative path has no directories, then '.' is returned.<\/p>\n<pre class=\"language-dart\"><code>p.dirname('foo');  \/\/ -&gt; '.'\np.dirname('');  \/\/ -&gt; '.'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/dirname.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String dirname(String path) =&gt; context.dirname(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "equals",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if <code>path1<\/code> points to the same location as <code>path2<\/code>, and\n<code>false<\/code> otherwise.<\/p>\n<p>The <a href=\"package-path_path\/hash.html\">hash<\/a> function returns a hash code that matches these equality\nsemantics.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/equals.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool equals(String path1, String path2) =&gt; context.equals(path1, path2);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "extension",
            "type": "dart:core.String",
            "desc": "<p>Gets the file extension of <code>path<\/code>: the portion of <a href=\"package-path_path\/basename.html\">basename<\/a> from the last\n<code>.<\/code> to the end (including the <code>.<\/code> itself).<\/p>\n<pre class=\"language-dart\"><code>p.extension('path\/to\/foo.dart');    \/\/ -&gt; '.dart'\np.extension('path\/to\/foo');         \/\/ -&gt; ''\np.extension('path.to\/foo');         \/\/ -&gt; ''\np.extension('path\/to\/foo.dart.js'); \/\/ -&gt; '.js'\n<\/code><\/pre>\n<p>If the file name starts with a <code>.<\/code>, then that is not considered the\nextension:<\/p>\n<pre class=\"language-dart\"><code>p.extension('~\/.bashrc');    \/\/ -&gt; ''\np.extension('~\/.notes.txt'); \/\/ -&gt; '.txt'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/extension.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String extension(String path) =&gt; context.extension(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "fromUri",
            "type": "dart:core.String",
            "desc": "<p>Returns the path represented by <code>uri<\/code>, which may be a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n<p>For POSIX and Windows styles, <code>uri<\/code> must be a <code>file:<\/code> URI. For the URL\nstyle, this will just convert <code>uri<\/code> to a string.<\/p>\n<pre class=\"language-dart\"><code>\/\/ POSIX\np.fromUri('file:\/\/\/path\/to\/foo') \/\/ -&gt; '\/path\/to\/foo'\n\n\/\/ Windows\np.fromUri('file:\/\/\/C:\/path\/to\/foo') \/\/ -&gt; r'C:\\path\\to\\foo'\n\n\/\/ URL\np.fromUri('http:\/\/dartlang.org\/path\/to\/foo')\n  \/\/ -&gt; 'http:\/\/dartlang.org\/path\/to\/foo'\n<\/code><\/pre>\n<p>If <code>uri<\/code> is relative, a relative path will be returned.<\/p>\n<pre class=\"language-dart\"><code>p.fromUri('path\/to\/foo'); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "uri",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "uri",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/fromUri.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String fromUri(uri) =&gt; context.fromUri(uri);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "hash",
            "type": "dart:core.int",
            "desc": "<p>Returns a hash code for <code>path<\/code> such that, if <a href=\"package-path_path\/equals.html\">equals<\/a> returns <code>true<\/code> for two\npaths, their hash codes are the same.<\/p>\n<p>Note that the same path may have different hash codes on different platforms\nor with different <a href=\"package-path_path\/current.html\">current<\/a> directories.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/hash.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int hash(String path) =&gt; context.hash(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isAbsolute",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if <code>path<\/code> is an absolute path and <code>false<\/code> if it is a\nrelative path.<\/p>\n<p>On POSIX systems, absolute paths start with a <code>\/<\/code> (forward slash). On\nWindows, an absolute path starts with <code>\\\\<\/code>, or a drive letter followed by\n<code>:\/<\/code> or <code>:\\<\/code>. For URLs, absolute paths either start with a protocol and\noptional hostname (e.g. <code>http:\/\/dartlang.org<\/code>, <code>file:\/\/<\/code>) or with a <code>\/<\/code>.<\/p>\n<p>URLs that start with <code>\/<\/code> are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, <a href=\"package-path_path\/isAbsolute.html\">isAbsolute<\/a> will return true for them. They\ncan be detected using <a href=\"package-path_path\/isRootRelative.html\">isRootRelative<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/isAbsolute.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isAbsolute(String path) =&gt; context.isAbsolute(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isRelative",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if <code>path<\/code> is a relative path and <code>false<\/code> if it is absolute.\nOn POSIX systems, absolute paths start with a <code>\/<\/code> (forward slash). On\nWindows, an absolute path starts with <code>\\\\<\/code>, or a drive letter followed by\n<code>:\/<\/code> or <code>:\\<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/isRelative.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isRelative(String path) =&gt; context.isRelative(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isRootRelative",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if <code>path<\/code> is a root-relative path and <code>false<\/code> if it's not.<\/p>\n<p>URLs that start with <code>\/<\/code> are known as \"root-relative\", since they're\nrelative to the root of the current URL. Since root-relative paths are still\nabsolute in every other sense, <a href=\"package-path_path\/isAbsolute.html\">isAbsolute<\/a> will return true for them. They\ncan be detected using <a href=\"package-path_path\/isRootRelative.html\">isRootRelative<\/a>.<\/p>\n<p>No POSIX and Windows paths are root-relative.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/isRootRelative.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isRootRelative(String path) =&gt; context.isRootRelative(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "isWithin",
            "type": "dart:core.bool",
            "desc": "<p>Returns <code>true<\/code> if <code>child<\/code> is a path beneath <code>parent<\/code>, and <code>false<\/code> otherwise.<\/p>\n<pre class=\"language-dart\"><code>p.isWithin('\/root\/path', '\/root\/path\/a'); \/\/ -&gt; true\np.isWithin('\/root\/path', '\/root\/other'); \/\/ -&gt; false\np.isWithin('\/root\/path', '\/root\/path') \/\/ -&gt; false\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "parent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "parent",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "child",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/isWithin.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isWithin(String parent, String child) =&gt; context.isWithin(parent, child);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "join",
            "type": "dart:core.String",
            "desc": "<p>Joins the given path parts into a single path using the current platform's\n<a href=\"package-path_path\/separator.html\">separator<\/a>. Example:<\/p>\n<pre class=\"language-dart\"><code>p.join('path', 'to', 'foo'); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n<p>If any part ends in a path separator, then a redundant separator will not\nbe added:<\/p>\n<pre class=\"language-dart\"><code>p.join('path\/', 'to', 'foo'); \/\/ -&gt; 'path\/to\/foo\n<\/code><\/pre>\n<p>If a part is an absolute path, then anything before that will be ignored:<\/p>\n<pre class=\"language-dart\"><code>p.join('path', '\/to', 'foo'); \/\/ -&gt; '\/to\/foo'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "part1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part3",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part4",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part5",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part6",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part7",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part8",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part1",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part2",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part3",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part4",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part5",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part6",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part7",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "part8",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/join.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join(String part1,\n        [String part2,\n        String part3,\n        String part4,\n        String part5,\n        String part6,\n        String part7,\n        String part8]) =&gt;\n    context.join(part1, part2, part3, part4, part5, part6, part7, part8);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "joinAll",
            "type": "dart:core.String",
            "desc": "<p>Joins the given path parts into a single path using the current platform's\n<a href=\"package-path_path\/separator.html\">separator<\/a>. Example:<\/p>\n<pre class=\"language-dart\"><code>p.joinAll(['path', 'to', 'foo']); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n<p>If any part ends in a path separator, then a redundant separator will not\nbe added:<\/p>\n<pre class=\"language-dart\"><code>p.joinAll(['path\/', 'to', 'foo']); \/\/ -&gt; 'path\/to\/foo\n<\/code><\/pre>\n<p>If a part is an absolute path, then anything before that will be ignored:<\/p>\n<pre class=\"language-dart\"><code>p.joinAll(['path', '\/to', 'foo']); \/\/ -&gt; '\/to\/foo'\n<\/code><\/pre>\n<p>For a fixed number of parts, <a href=\"package-path_path\/join.html\">join<\/a> is usually terser.<\/p>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "parts",
                    "type": "dart:core.Iterable<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.String"
                    ]
                },
                {
                    "name": "parts",
                    "type": "dart:core.Iterable<dart:core.String>",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.Iterable",
                        "dart:core.String"
                    ]
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/joinAll.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String joinAll(Iterable&lt;String&gt; parts) =&gt; context.joinAll(parts);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "normalize",
            "type": "dart:core.String",
            "desc": "<p>Normalizes <code>path<\/code>, simplifying it by handling <code>..<\/code>, and <code>.<\/code>, and\nremoving redundant path separators whenever possible.<\/p>\n<p>Note that this is <em>not<\/em> guaranteed to return the same result for two\nequivalent input paths. For that, see <a href=\"package-path_path\/canonicalize.html\">canonicalize<\/a>. Or, if you're using\npaths as map keys, pass <a href=\"package-path_path\/equals.html\">equals<\/a> and <a href=\"package-path_path\/hash.html\">hash<\/a> to <a href=\"dart-collection\/HashMap\/HashMap.html\">new HashMap<\/a>.<\/p>\n<pre class=\"language-dart\"><code>p.normalize('path\/.\/to\/..\/\/file.text'); \/\/ -&gt; 'path\/file.txt'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/normalize.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String normalize(String path) =&gt; context.normalize(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "prettyUri",
            "type": "dart:core.String",
            "desc": "<p>Returns a terse, human-readable representation of <code>uri<\/code>.<\/p>\n<p><code>uri<\/code> can be a <a href=\"dart-core\/String-class.html\">String<\/a> or a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>. If it can be made relative to the\ncurrent working directory, that's done. Otherwise, it's returned as-is. This\ngracefully handles non-<code>file:<\/code> URIs for <a href=\"package-path_path\/Style\/posix.html\">Style.posix<\/a> and <a href=\"package-path_path\/Style\/windows.html\">Style.windows<\/a>.<\/p>\n<p>The returned value is meant for human consumption, and may be either URI-\nor path-formatted.<\/p>\n<pre class=\"language-dart\"><code>\/\/ POSIX at \"\/root\/path\"\np.prettyUri('file:\/\/\/root\/path\/a\/b.dart'); \/\/ -&gt; 'a\/b.dart'\np.prettyUri('http:\/\/dartlang.org\/'); \/\/ -&gt; 'http:\/\/dartlang.org'\n\n\/\/ Windows at \"C:\\root\\path\"\np.prettyUri('file:\/\/\/C:\/root\/path\/a\/b.dart'); \/\/ -&gt; r'a\\b.dart'\np.prettyUri('http:\/\/dartlang.org\/'); \/\/ -&gt; 'http:\/\/dartlang.org'\n\n\/\/ URL at \"http:\/\/dartlang.org\/root\/path\"\np.prettyUri('http:\/\/dartlang.org\/root\/path\/a\/b.dart'); \/\/ -&gt; r'a\/b.dart'\np.prettyUri('file:\/\/\/root\/path'); \/\/ -&gt; 'file:\/\/\/root\/path'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "uri",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "uri",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/prettyUri.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String prettyUri(uri) =&gt; context.prettyUri(uri);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "relative",
            "type": "dart:core.String",
            "desc": "<p>Attempts to convert <code>path<\/code> to an equivalent relative path from the current\ndirectory.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Given current directory is \/root\/path:\np.relative('\/root\/path\/a\/b.dart'); \/\/ -&gt; 'a\/b.dart'\np.relative('\/root\/other.dart'); \/\/ -&gt; '..\/other.dart'\n<\/code><\/pre>\n<p>If the <code>from<\/code> argument is passed, <code>path<\/code> is made relative to that instead.<\/p>\n<pre class=\"language-dart\"><code>p.relative('\/root\/path\/a\/b.dart', from: '\/root\/path'); \/\/ -&gt; 'a\/b.dart'\np.relative('\/root\/other.dart', from: '\/root\/path');\n  \/\/ -&gt; '..\/other.dart'\n<\/code><\/pre>\n<p>If <code>path<\/code> and\/or <code>from<\/code> are relative paths, they are assumed to be relative\nto the current directory.<\/p>\n<p>Since there is no relative path from one drive letter to another on Windows,\nor from one hostname to another for URLs, this will return an absolute path\nin those cases.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Windows\np.relative(r'D:\\other', from: r'C:\\home'); \/\/ -&gt; 'D:\\other'\n\n\/\/ URL\np.relative('http:\/\/dartlang.org', from: 'http:\/\/pub.dartlang.org');\n  \/\/ -&gt; 'http:\/\/dartlang.org'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "from",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "from",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/relative.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String relative(String path, {String from}) =&gt;\n    context.relative(path, from: from);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "rootPrefix",
            "type": "dart:core.String",
            "desc": "<p>Returns the root of <code>path<\/code>, if it's absolute, or the empty string if it's\nrelative.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Unix\np.rootPrefix('path\/to\/foo'); \/\/ -&gt; ''\np.rootPrefix('\/path\/to\/foo'); \/\/ -&gt; '\/'\n\n\/\/ Windows\np.rootPrefix(r'path\\to\\foo'); \/\/ -&gt; ''\np.rootPrefix(r'C:\\path\\to\\foo'); \/\/ -&gt; r'C:\\'\n\n\/\/ URL\np.rootPrefix('path\/to\/foo'); \/\/ -&gt; ''\np.rootPrefix('http:\/\/dartlang.org\/path\/to\/foo');\n  \/\/ -&gt; 'http:\/\/dartlang.org'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/rootPrefix.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String rootPrefix(String path) =&gt; context.rootPrefix(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "setExtension",
            "type": "dart:core.String",
            "desc": "<p>Returns <code>path<\/code> with the trailing extension set to <code>extension<\/code>.<\/p>\n<p>If <code>path<\/code> doesn't have a trailing extension, this just adds <code>extension<\/code> to\nthe end.<\/p>\n<pre class=\"language-dart\"><code>p.setExtension('path\/to\/foo.dart', '.js') \/\/ -&gt; 'path\/to\/foo.js'\np.setExtension('path\/to\/foo.dart.js', '.map')\n  \/\/ -&gt; 'path\/to\/foo.dart.map'\np.setExtension('path\/to\/foo', '.js') \/\/ -&gt; 'path\/to\/foo.js'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "extension",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "extension",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/setExtension.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String setExtension(String path, String extension) =&gt;\n    context.setExtension(path, extension);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "split",
            "type": "dart:core.List<dart:core.String>",
            "desc": "<p>Splits <code>path<\/code> into its components using the current platform's <a href=\"package-path_path\/separator.html\">separator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>p.split('path\/to\/foo'); \/\/ -&gt; ['path', 'to', 'foo']\n<\/code><\/pre>\n<p>The path will <em>not<\/em> be normalized before splitting.<\/p>\n<pre class=\"language-dart\"><code>p.split('path\/..\/foo'); \/\/ -&gt; ['path', '..', 'foo']\n<\/code><\/pre>\n<p>If <code>path<\/code> is absolute, the root directory will be the first element in the\narray. Example:<\/p>\n<pre class=\"language-dart\"><code>\/\/ Unix\np.split('\/path\/to\/foo'); \/\/ -&gt; ['\/', 'path', 'to', 'foo']\n\n\/\/ Windows\np.split(r'C:\\path\\to\\foo'); \/\/ -&gt; [r'C:\\', 'path', 'to', 'foo']\n\n\/\/ Browser\np.split('http:\/\/dartlang.org\/path\/to\/foo');\n  \/\/ -&gt; ['http:\/\/dartlang.org', 'path', 'to', 'foo']\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/split.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; split(String path) =&gt; context.split(path);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "dart:core.String"
            ]
        },
        {
            "name": "toUri",
            "type": "dart:core.Uri",
            "desc": "<p>Returns the URI that represents <code>path<\/code>.<\/p>\n<p>For POSIX and Windows styles, this will return a <code>file:<\/code> URI. For the URL\nstyle, this will just convert <code>path<\/code> to a <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n<pre class=\"language-dart\"><code>\/\/ POSIX\np.toUri('\/path\/to\/foo')\n  \/\/ -&gt; Uri.parse('file:\/\/\/path\/to\/foo')\n\n\/\/ Windows\np.toUri(r'C:\\path\\to\\foo')\n  \/\/ -&gt; Uri.parse('file:\/\/\/C:\/path\/to\/foo')\n\n\/\/ URL\np.toUri('http:\/\/dartlang.org\/path\/to\/foo')\n  \/\/ -&gt; Uri.parse('http:\/\/dartlang.org\/path\/to\/foo')\n<\/code><\/pre>\n<p>If <code>path<\/code> is relative, a relative URI will be returned.<\/p>\n<pre class=\"language-dart\"><code>p.toUri('path\/to\/foo') \/\/ -&gt; Uri.parse('path\/to\/foo')\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/toUri.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri toUri(String path) =&gt; context.toUri(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "withoutExtension",
            "type": "dart:core.String",
            "desc": "<p>Removes a trailing extension from the last part of <code>path<\/code>.<\/p>\n<pre class=\"language-dart\"><code>p.withoutExtension('path\/to\/foo.dart'); \/\/ -&gt; 'path\/to\/foo'\n<\/code><\/pre>\n    ",
            "static": false,
            "memberOf": "path",
            "sig": "",
            "params": [
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "path",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "package-path_path\/withoutExtension.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String withoutExtension(String path) =&gt; context.withoutExtension(path);<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}