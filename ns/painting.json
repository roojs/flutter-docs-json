{
    "name": "painting",
    "href": "painting\/painting-library.html",
    "cn": [
        {
            "name": "painting.Alignment",
            "extends": [
                "painting.AlignmentGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.Alignment",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator %(double other) {\n  return Alignment(x % other, y % other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.Alignment",
                    "desc": "<p>Scales the <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator *(double other) {\n  return Alignment(x * other, y * other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.Alignment",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/Alignment-class.html\">Alignment<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Alignment operator +(Alignment other) {\n  return Alignment(x + other.x, y + other.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.Alignment",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/Alignment-class.html\">Alignment<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Alignment operator -(Alignment other) {\n  return Alignment(x - other.x, y - other.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.Alignment",
                    "desc": "<p>Divides the <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator \/(double other) {\n  return Alignment(x \/ other, y \/ other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Alignment",
                    "type": "",
                    "desc": "<p>Creates an alignment.<\/p>\n<p>The <code>x<\/code> and <code>y<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "x",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/Alignment\/Alignment.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Alignment(this.x, this.y)\n  : assert(x != null),\n    assert(y != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/Alignment-class.html\">Alignment<\/a> or two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/Alignment\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/Alignment\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentGeometry add(AlignmentGeometry other) {\n  if (other is Alignment)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "alongOffset",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the offset that is this fraction in the direction of the given offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/alongOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset alongOffset(Offset other) {\n  final double centerX = other.dx \/ 2.0;\n  final double centerY = other.dy \/ 2.0;\n  return Offset(centerX + x * centerX, centerY + y * centerY);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "alongSize",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the offset that is this fraction within the given size.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/alongSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset alongSize(Size other) {\n  final double centerX = other.width \/ 2.0;\n  final double centerY = other.height \/ 2.0;\n  return Offset(centerX + x * centerX, centerY + y * centerY);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inscribe",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a rect of the given size, aligned within given rect as specified\nby this alignment.<\/p>\n<p>For example, a 100\u00d7100 size inscribed on a 200\u00d7200 rect using\n<a href=\"painting\/Alignment\/topLeft-constant.html\">Alignment.topLeft<\/a> would be the 100\u00d7100 rect at the top left of\nthe 200\u00d7200 rect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/inscribe.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect inscribe(Size size, Rect rect) {\n  final double halfWidthDelta = (rect.width - size.width) \/ 2.0;\n  final double halfHeightDelta = (rect.height - size.height) \/ 2.0;\n  return Rect.fromLTWH(\n    rect.left + halfWidthDelta + x * halfWidthDelta,\n    rect.top + halfHeightDelta + y * halfHeightDelta,\n    size.width,\n    size.height,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.Alignment",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/Alignment-class.html\">Alignment<\/a>s.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Alignment lerp(Alignment a, Alignment b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return Alignment(ui.lerpDouble(0.0, b.x, t), ui.lerpDouble(0.0, b.y, t));\n  if (b == null)\n    return Alignment(ui.lerpDouble(a.x, 0.0, t), ui.lerpDouble(a.y, 0.0, t));\n  return Alignment(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.Alignment",
                    "desc": "<p>Convert this instance into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses literal\ncoordinates (the <code>x<\/code> coordinate being explicitly a distance from the\nleft).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment resolve(TextDirection direction) =&gt; this;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; _stringify(x, y);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.Alignment",
                    "desc": "<p>Returns the negation of the given <a href=\"painting\/Alignment-class.html\">Alignment<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator -() {\n  return Alignment(-x, -y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withinRect",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the point that is this fraction within the given rect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/withinRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset withinRect(Rect rect) {\n  final double halfWidth = rect.width \/ 2.0;\n  final double halfHeight = rect.height \/ 2.0;\n  return Offset(\n    rect.left + halfWidth + x * halfWidth,\n    rect.top + halfHeight + y * halfHeight,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.Alignment",
                    "desc": "<p>Integer divides the <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Alignment",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Alignment\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator ~\/(double other) {\n  return Alignment((x ~\/ other).toDouble(), (y ~\/ other).toDouble());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "painting\/Alignment\/bottomCenter-constant.html",
                    "desc": "<p>The center point along the bottom edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment bottomCenter = Alignment(0.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomCenter",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/bottomLeft-constant.html",
                    "desc": "<p>The bottom left corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment bottomLeft = Alignment(-1.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomLeft",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/bottomRight-constant.html",
                    "desc": "<p>The bottom right corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment bottomRight = Alignment(1.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomRight",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/center-constant.html",
                    "desc": "<p>The center point, both horizontally and vertically.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment center = Alignment(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "center",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/centerLeft-constant.html",
                    "desc": "<p>The center point along the left edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment centerLeft = Alignment(-1.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centerLeft",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/centerRight-constant.html",
                    "desc": "<p>The center point along the right edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment centerRight = Alignment(1.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centerRight",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/topCenter-constant.html",
                    "desc": "<p>The center point along the top edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment topCenter = Alignment(0.0, -1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topCenter",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/topLeft-constant.html",
                    "desc": "<p>The top left corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment topLeft = Alignment(-1.0, -1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topLeft",
                    "memberOf": "painting.Alignment"
                },
                {
                    "type": "",
                    "href": "painting\/Alignment\/topRight-constant.html",
                    "desc": "<p>The top right corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Alignment topRight = Alignment(1.0, -1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topRight",
                    "memberOf": "painting.Alignment"
                },
                {
                    "name": "x",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance fraction in the horizontal direction.<\/p>\n<p>A value of -1.0 corresponds to the leftmost edge. A value of 1.0\ncorresponds to the rightmost edge. Values are not limited to that range;\nvalues less than -1.0 represent positions to the left of the left edge,\nand values greater than 1.0 represent positions to the right of the right\nedge.<\/p>\n        ",
                    "memberOf": "painting.Alignment",
                    "isConstant": false,
                    "href": "painting\/Alignment\/x.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double x\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "y",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance fraction in the vertical direction.<\/p>\n<p>A value of -1.0 corresponds to the topmost edge. A value of 1.0\ncorresponds to the bottommost edge. Values are not limited to that range;\nvalues less than -1.0 represent positions above the top, and values\ngreater than 1.0 represent positions below the bottom.<\/p>\n        ",
                    "memberOf": "painting.Alignment",
                    "isConstant": false,
                    "href": "painting\/Alignment\/y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "painting.FractionalOffset",
                "rendering.AlignmentTween"
            ],
            "realImplementors": [
                "painting.FractionalOffset",
                "rendering.AlignmentTween"
            ],
            "cn": [],
            "href": "painting\/Alignment-class.html",
            "desc": "<p>A point within a rectangle.<\/p>\n<p><code>Alignment(0.0, 0.0)<\/code> represents the center of the rectangle. The distance\nfrom -1.0 to +1.0 is the distance from one side of the rectangle to the\nother side of the rectangle. Therefore, 2.0 units horizontally (or\nvertically) is equivalent to the width (or height) of the rectangle.<\/p>\n<p><code>Alignment(-1.0, -1.0)<\/code> represents the top left of the rectangle.<\/p>\n<p><code>Alignment(1.0, 1.0)<\/code> represents the bottom right of the rectangle.<\/p>\n<p><code>Alignment(0.0, 3.0)<\/code> represents a point that is horizontally centered with\nrespect to the rectangle and vertically below the bottom of the rectangle by\nthe height of the rectangle.<\/p>\n<p><code>Alignment(0.0, -0.5)<\/code> represents a point that is horizontally centered with\nrespect to the rectangle and vertically half way between the top edge and\nthe center.<\/p>\n<p><code>Alignment(x, y)<\/code> in a rectangle with height h and width w describes\nthe point (x * w\/2 + w\/2, y * h\/2 + h\/2) in the coordinate system of the\nrectangle.<\/p>\n<p><a href=\"painting\/Alignment-class.html\">Alignment<\/a> uses visual coordinates, which means increasing <a href=\"painting\/Alignment\/x.html\">x<\/a> moves the\npoint from left to right. To support layouts with a right-to-left\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, consider using <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, in which the\ndirection the point moves when increasing the horizontal value depends on\nthe <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>A variety of widgets use <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in their configuration, most\nnotably:<\/p>\n<ul><li>\n<a href=\"widgets\/Align-class.html\">Align<\/a> positions a child according to an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>.<\/li><\/ul>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which has a horizontal coordinate orientation\nthat depends on the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>, which is an abstract type that is agnostic as to\nwhether the horizontal direction depends on the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Alignment"
        },
        {
            "name": "painting.AlignmentDirectional",
            "extends": [
                "painting.AlignmentGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentDirectional operator %(double other) {\n  return AlignmentDirectional(start % other, y % other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Scales the <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentDirectional operator *(double other) {\n  return AlignmentDirectional(start * other, y * other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.AlignmentDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentDirectional operator +(AlignmentDirectional other) {\n  return AlignmentDirectional(start + other.start, y + other.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.AlignmentDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentDirectional operator -(AlignmentDirectional other) {\n  return AlignmentDirectional(start - other.start, y - other.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Divides the <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentDirectional operator \/(double other) {\n  return AlignmentDirectional(start \/ other, y \/ other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "AlignmentDirectional",
                    "type": "",
                    "desc": "<p>Creates a directional alignment.<\/p>\n<p>The <code>start<\/code> and <code>y<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "y",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/AlignmentDirectional\/AlignmentDirectional.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlignmentDirectional(this.start, this.y)\n  : assert(start != null),\n    assert(y != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/Alignment-class.html\">Alignment<\/a> or two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/AlignmentDirectional\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentGeometry add(AlignmentGeometry other) {\n  if (other is AlignmentDirectional)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>s.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/AlignmentDirectional\/center-constant.html\">AlignmentDirectional.center<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.AlignmentDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.AlignmentDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AlignmentDirectional lerp(AlignmentDirectional a, AlignmentDirectional b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return AlignmentDirectional(ui.lerpDouble(0.0, b.start, t), ui.lerpDouble(0.0, b.y, t));\n  if (b == null)\n    return AlignmentDirectional(ui.lerpDouble(a.start, 0.0, t), ui.lerpDouble(a.y, 0.0, t));\n  return AlignmentDirectional(ui.lerpDouble(a.start, b.start, t), ui.lerpDouble(a.y, b.y, t));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.Alignment",
                    "desc": "<p>Convert this instance into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses literal\ncoordinates (the <code>x<\/code> coordinate being explicitly a distance from the\nleft).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment resolve(TextDirection direction) {\n  assert(direction != null);\n  switch (direction) {\n    case TextDirection.rtl:\n      return Alignment(-start, y);\n    case TextDirection.ltr:\n      return Alignment(start, y);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; _stringify(start, y);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Returns the negation of the given <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentDirectional operator -() {\n  return AlignmentDirectional(-start, -y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.AlignmentDirectional",
                    "desc": "<p>Integer divides the <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentDirectional\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignmentDirectional operator ~\/(double other) {\n  return AlignmentDirectional((start ~\/ other).toDouble(), (y ~\/ other).toDouble());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/bottomCenter-constant.html",
                    "desc": "<p>The center point along the bottom edge.<\/p>\n<p>Consider using <a href=\"painting\/AlignmentDirectional\/bottomCenter-constant.html\">Alignment.bottomCenter<\/a> instead, as it does not\nneed to be <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>d to be used.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional bottomCenter = AlignmentDirectional(0.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomCenter",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/bottomEnd-constant.html",
                    "desc": "<p>The bottom corner on the \"end\" side.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional bottomEnd = AlignmentDirectional(1.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomEnd",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/bottomStart-constant.html",
                    "desc": "<p>The bottom corner on the \"start\" side.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional bottomStart = AlignmentDirectional(-1.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomStart",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/center-constant.html",
                    "desc": "<p>The center point, both horizontally and vertically.<\/p>\n<p>Consider using <a href=\"painting\/AlignmentDirectional\/center-constant.html\">Alignment.center<\/a> instead, as it does not need to\nbe <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>d to be used.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional center = AlignmentDirectional(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "center",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/centerEnd-constant.html",
                    "desc": "<p>The center point along the \"end\" edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional centerEnd = AlignmentDirectional(1.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centerEnd",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/centerStart-constant.html",
                    "desc": "<p>The center point along the \"start\" edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional centerStart = AlignmentDirectional(-1.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centerStart",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "name": "start",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance fraction in the horizontal direction.<\/p>\n<p>A value of -1.0 corresponds to the edge on the \"start\" side, which is the\nleft side in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> contexts and the right side in\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> contexts. A value of 1.0 corresponds to the opposite\nedge, the \"end\" side. Values are not limited to that range; values less\nthan -1.0 represent positions beyond the start edge, and values greater than\n1.0 represent positions beyond the end edge.<\/p>\n<p>This value is normalized into an <a href=\"painting\/Alignment\/x.html\">Alignment.x<\/a> value by the <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>\nmethod.<\/p>\n        ",
                    "memberOf": "painting.AlignmentDirectional",
                    "isConstant": false,
                    "href": "painting\/AlignmentDirectional\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double start\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/topCenter-constant.html",
                    "desc": "<p>The center point along the top edge.<\/p>\n<p>Consider using <a href=\"painting\/AlignmentDirectional\/topCenter-constant.html\">Alignment.topCenter<\/a> instead, as it does not need\nto be <a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a>d to be used.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional topCenter = AlignmentDirectional(0.0, -1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topCenter",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/topEnd-constant.html",
                    "desc": "<p>The top corner on the \"end\" side.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional topEnd = AlignmentDirectional(1.0, -1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topEnd",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "type": "",
                    "href": "painting\/AlignmentDirectional\/topStart-constant.html",
                    "desc": "<p>The top corner on the \"start\" side.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const AlignmentDirectional topStart = AlignmentDirectional(-1.0, -1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topStart",
                    "memberOf": "painting.AlignmentDirectional"
                },
                {
                    "name": "y",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance fraction in the vertical direction.<\/p>\n<p>A value of -1.0 corresponds to the topmost edge. A value of 1.0\ncorresponds to the bottommost edge. Values are not limited to that range;\nvalues less than -1.0 represent positions above the top, and values\ngreater than 1.0 represent positions below the bottom.<\/p>\n<p>This value is passed through to <a href=\"painting\/AlignmentDirectional\/y.html\">Alignment.y<\/a> unmodified by the\n<a href=\"painting\/AlignmentDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
                    "memberOf": "painting.AlignmentDirectional",
                    "isConstant": false,
                    "href": "painting\/AlignmentDirectional\/y.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double y\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/AlignmentDirectional-class.html",
            "desc": "<p>An offset that's expressed as a fraction of a <a href=\"dart-ui\/Size-class.html\">Size<\/a>, but whose horizontal\ncomponent is dependent on the writing direction.<\/p>\n<p>This can be used to indicate an offset from the left in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>\ntext and an offset from the right in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> text without having\nto be aware of the current text direction.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a variant that is defined in physical terms (i.e.\nwhose horizontal component does not depend on the text direction).<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AlignmentDirectional"
        },
        {
            "name": "painting.AlignmentGeometry",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry operator %(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Scales the <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry operator *(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Divides the <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry operator \/(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/AlignmentGeometry\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! AlignmentGeometry)\n    return false;\n  final AlignmentGeometry typedOther = other;\n  return _x == typedOther._x &amp;&amp;\n         _start == typedOther._start &amp;&amp;\n         _y == typedOther._y;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "AlignmentGeometry",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/AlignmentGeometry\/AlignmentGeometry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AlignmentGeometry();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/Alignment-class.html\">Alignment<\/a> or two <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/AlignmentGeometry\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/AlignmentGeometry\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry add(AlignmentGeometry other) {\n  return _MixedAlignment(\n    _x + other._x,\n    _start + other._start,\n    _y + other._y,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>, and\nthe result is an object of the same type as the non-null argument.<\/p>\n<p>If <a href=\"painting\/AlignmentGeometry\/lerp.html\">lerp<\/a> is applied to two objects of the same type (<a href=\"painting\/Alignment-class.html\">Alignment<\/a> or\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/Alignment-class.html\">Alignment<\/a> using <a href=\"painting\/AlignmentGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static AlignmentGeometry lerp(AlignmentGeometry a, AlignmentGeometry b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  if (a is Alignment &amp;&amp; b is Alignment)\n    return Alignment.lerp(a, b, t);\n  if (a is AlignmentDirectional &amp;&amp; b is AlignmentDirectional)\n    return AlignmentDirectional.lerp(a, b, t);\n  return _MixedAlignment(\n    ui.lerpDouble(a._x, b._x, t),\n    ui.lerpDouble(a._start, b._start, t),\n    ui.lerpDouble(a._y, b._y, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.Alignment",
                    "desc": "<p>Convert this instance into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses literal\ncoordinates (the <code>x<\/code> coordinate being explicitly a distance from the\nleft).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Alignment resolve(TextDirection direction);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_start == 0.0)\n    return Alignment._stringify(_x, _y);\n  if (_x == 0.0)\n    return AlignmentDirectional._stringify(_start, _y);\n  return Alignment._stringify(_x, _y) + ' + ' + AlignmentDirectional._stringify(_start, 0.0);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Returns the negation of the given <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> object.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry operator -();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.AlignmentGeometry",
                    "desc": "<p>Integer divides the <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AlignmentGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AlignmentGeometry\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AlignmentGeometry operator ~\/(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/AlignmentGeometry\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/AlignmentGeometry\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.AlignmentGeometry",
                    "isConstant": false,
                    "href": "painting\/AlignmentGeometry\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_x, _start, _y);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.Alignment",
                "painting.AlignmentDirectional",
                "painting.FractionalOffset",
                "rendering.AlignmentGeometryTween"
            ],
            "realImplementors": [
                "painting.Alignment",
                "painting.AlignmentDirectional",
                "painting.FractionalOffset",
                "rendering.AlignmentGeometryTween"
            ],
            "cn": [],
            "href": "painting\/AlignmentGeometry-class.html",
            "desc": "<p>Base class for <a href=\"painting\/Alignment-class.html\">Alignment<\/a> that allows for text-direction aware\nresolution.<\/p>\n<p>A property or argument of this type accepts classes created either with <a href=\"painting\/Alignment\/Alignment.html\">new\nAlignment<\/a> and its variants, or <a href=\"painting\/AlignmentDirectional\/AlignmentDirectional.html\">new AlignmentDirectional<\/a>.<\/p>\n<p>To convert an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a> object of indeterminate type into an\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a> object, call the <a href=\"painting\/AlignmentGeometry\/resolve.html\">resolve<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AlignmentGeometry"
        },
        {
            "name": "painting.AssetBundleImageKey",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/AssetBundleImageKey\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetBundleImageKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AssetBundleImageKey\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final AssetBundleImageKey typedOther = other;\n  return bundle == typedOther.bundle\n      &amp;&amp; name == typedOther.name\n      &amp;&amp; scale == typedOther.scale;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "AssetBundleImageKey",
                    "type": "",
                    "desc": "<p>Creates the key for an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> or <a href=\"painting\/AssetBundleImageProvider-class.html\">AssetBundleImageProvider<\/a>.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetBundleImageKey",
                    "sig": "",
                    "params": [
                        {
                            "name": "bundle",
                            "type": "services.AssetBundle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/AssetBundleImageKey\/AssetBundleImageKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AssetBundleImageKey({\n  @required this.bundle,\n  @required this.name,\n  @required this.scale,\n}) : assert(bundle != null),\n     assert(name != null),\n     assert(scale != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetBundleImageKey",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AssetBundleImageKey\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(bundle: $bundle, name: \"$name\", scale: $scale)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bundle",
                    "type": "services.AssetBundle",
                    "types": [],
                    "desc": "<p>The bundle from which the image will be obtained.<\/p>\n<p>The image is obtained by calling <a href=\"services\/AssetBundle\/load.html\">AssetBundle.load<\/a> on the given <a href=\"painting\/AssetBundleImageKey\/bundle.html\">bundle<\/a>\nusing the key given by <a href=\"painting\/AssetBundleImageKey\/name.html\">name<\/a>.<\/p>\n        ",
                    "memberOf": "painting.AssetBundleImageKey",
                    "isConstant": false,
                    "href": "painting\/AssetBundleImageKey\/bundle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AssetBundle bundle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/AssetBundleImageKey\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/AssetBundleImageKey\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/AssetBundleImageKey\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/AssetBundleImageKey\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/AssetBundleImageKey\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/AssetBundleImageKey\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.AssetBundleImageKey",
                    "isConstant": false,
                    "href": "painting\/AssetBundleImageKey\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(bundle, name, scale);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "name",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The key to use to obtain the resource from the <a href=\"painting\/AssetBundleImageKey\/bundle.html\">bundle<\/a>. This is the\nargument passed to <a href=\"services\/AssetBundle\/load.html\">AssetBundle.load<\/a>.<\/p>\n        ",
                    "memberOf": "painting.AssetBundleImageKey",
                    "isConstant": false,
                    "href": "painting\/AssetBundleImageKey\/name.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
                    "memberOf": "painting.AssetBundleImageKey",
                    "isConstant": false,
                    "href": "painting\/AssetBundleImageKey\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "painting.AssetBundleImageProvider",
                "painting.AssetImage",
                "painting.ExactAssetImage"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/AssetBundleImageKey-class.html",
            "desc": "<p>Key for the image obtained by an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> or <a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a>.<\/p>\n<p>This is used to identify the precise resource in the <a href=\"painting\/imageCache.html\">imageCache<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AssetBundleImageKey"
        },
        {
            "name": "painting.AssetBundleImageProvider",
            "extends": [
                "painting.AssetBundleImageKey",
                "painting.ImageProvider",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "AssetBundleImageProvider",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetBundleImageProvider",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/AssetBundleImageProvider\/AssetBundleImageProvider.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AssetBundleImageProvider();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "load",
                    "type": "painting.ImageStreamCompleter",
                    "desc": "<p>Converts a key into an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a>, and begins fetching the\nimage using <code>loadAsync<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetBundleImageProvider",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "painting.AssetBundleImageKey",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AssetBundleImageProvider\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nImageStreamCompleter load(AssetBundleImageKey key) {\n  return MultiFrameImageStreamCompleter(\n    codec: _loadAsync(key),\n    scale: key.scale,\n    informationCollector: (StringBuffer information) {\n      information.writeln('Image provider: $this');\n      information.write('Image key: $key');\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.AssetImage",
                "painting.ExactAssetImage"
            ],
            "realImplementors": [
                "painting.AssetImage",
                "painting.ExactAssetImage"
            ],
            "cn": [],
            "href": "painting\/AssetBundleImageProvider-class.html",
            "desc": "<p>A subclass of <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> that knows about <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>s.<\/p>\n<p>This factors out the common logic of <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>-based <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>\nclasses, simplifying what subclasses must implement to just <a href=\"painting\/ImageProvider\/obtainKey.html\">obtainKey<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AssetBundleImageProvider"
        },
        {
            "name": "painting.AssetImage",
            "extends": [
                "painting.AssetBundleImageProvider",
                "painting.AssetBundleImageKey",
                "painting.ImageProvider",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/AssetImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AssetImage\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final AssetImage typedOther = other;\n  return keyName == typedOther.keyName\n      &amp;&amp; bundle == typedOther.bundle;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "AssetImage",
                    "type": "",
                    "desc": "<p>Creates an object that fetches an image from an asset bundle.<\/p>\n<p>The <code>assetName<\/code> argument must not be null. It should name the main asset\nfrom the set of images to choose from. The <code>package<\/code> argument must be\nnon-null when fetching an asset that is included in package. See the\ndocumentation for the <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> class itself for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "assetName",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bundle",
                            "type": "services.AssetBundle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "package",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/AssetImage\/AssetImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AssetImage(\n  this.assetName, {\n  this.bundle,\n  this.package,\n}) : assert(assetName != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "obtainKey",
                    "type": "dart:async.Future<painting.AssetBundleImageKey>",
                    "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/AssetBundleImageProvider\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AssetImage\/obtainKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;AssetBundleImageKey&gt; obtainKey(ImageConfiguration configuration) {\n  \/\/ This function tries to return a SynchronousFuture if possible. We do this\n  \/\/ because otherwise showing an image would always take at least one frame,\n  \/\/ which would be sad. (This code is called from inside build\/layout\/paint,\n  \/\/ which all happens in one call frame; using native Futures would guarantee\n  \/\/ that we resolve each future in a new call frame, and thus not in this\n  \/\/ build\/layout\/paint sequence.)\n  final AssetBundle chosenBundle = bundle ?? configuration.bundle ?? rootBundle;\n  Completer&lt;AssetBundleImageKey&gt; completer;\n  Future&lt;AssetBundleImageKey&gt; result;\n\n  chosenBundle.loadStructuredData&lt;Map&lt;String, List&lt;String&gt;&gt;&gt;(_kAssetManifestFileName, _manifestParser).then&lt;void&gt;(\n    (Map&lt;String, List&lt;String&gt;&gt; manifest) {\n      final String chosenName = _chooseVariant(\n        keyName,\n        configuration,\n        manifest == null ? null : manifest[keyName],\n      );\n      final double chosenScale = _parseScale(chosenName);\n      final AssetBundleImageKey key = AssetBundleImageKey(\n        bundle: chosenBundle,\n        name: chosenName,\n        scale: chosenScale,\n      );\n      if (completer != null) {\n        \/\/ We already returned from this function, which means we are in the\n        \/\/ asynchronous mode. Pass the value to the completer. The completer's\n        \/\/ future is what we returned.\n        completer.complete(key);\n      } else {\n        \/\/ We haven't yet returned, so we must have been called synchronously\n        \/\/ just after loadStructuredData returned (which means it provided us\n        \/\/ with a SynchronousFuture). Let's return a SynchronousFuture\n        \/\/ ourselves.\n        result = SynchronousFuture&lt;AssetBundleImageKey&gt;(key);\n      }\n    }\n  ).catchError((dynamic error, StackTrace stack) {\n    \/\/ We had an error. (This guarantees we weren't called synchronously.)\n    \/\/ Forward the error to the caller.\n    assert(completer != null);\n    assert(result == null);\n    completer.completeError(error, stack);\n  });\n  if (result != null) {\n    \/\/ The code above ran synchronously, and came up with an answer.\n    \/\/ Return the SynchronousFuture that we created above.\n    return result;\n  }\n  \/\/ The code above hasn't yet run its \"then\" handler yet. Let's prepare a\n  \/\/ completer for it to use when it does run.\n  completer = Completer&lt;AssetBundleImageKey&gt;();\n  return completer.future;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "painting.AssetBundleImageKey"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AssetImage",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AssetImage\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(bundle: $bundle, name: \"$keyName\")';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "assetName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the main asset from the set of images to choose from. See the\ndocumentation for the <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> class itself for details.<\/p>\n        ",
                    "memberOf": "painting.AssetImage",
                    "isConstant": false,
                    "href": "painting\/AssetImage\/assetName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String assetName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bundle",
                    "type": "services.AssetBundle",
                    "types": [],
                    "desc": "<p>The bundle from which the image will be obtained.<\/p>\n<p>If the provided <a href=\"painting\/AssetImage\/bundle.html\">bundle<\/a> is null, the bundle provided in the\n<a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> passed to the <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a> call will be used instead. If\nthat is also null, the <a href=\"services\/rootBundle.html\">rootBundle<\/a> is used.<\/p>\n<p>The image is obtained by calling <a href=\"painting\/AssetBundleImageProvider\/load.html\">AssetBundle.load<\/a> on the given <a href=\"painting\/AssetImage\/bundle.html\">bundle<\/a>\nusing the key given by <a href=\"painting\/AssetImage\/keyName.html\">keyName<\/a>.<\/p>\n        ",
                    "memberOf": "painting.AssetImage",
                    "isConstant": false,
                    "href": "painting\/AssetImage\/bundle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AssetBundle bundle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/AssetImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/AssetImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/AssetImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/AssetImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/AssetImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/AssetImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.AssetImage",
                    "isConstant": false,
                    "href": "painting\/AssetImage\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(keyName, bundle);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name used to generate the key to obtain the asset. For local assets\nthis is <a href=\"painting\/AssetImage\/assetName.html\">assetName<\/a>, and for assets from packages the <a href=\"painting\/AssetImage\/assetName.html\">assetName<\/a> is\nprefixed 'packages\/&lt;package_name&gt;\/'.<\/p>\n        ",
                    "memberOf": "painting.AssetImage",
                    "isConstant": false,
                    "href": "painting\/AssetImage\/keyName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get keyName =&gt; package == null ? assetName : 'packages\/$package\/$assetName';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "package",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the package from which the image is included. See the\ndocumentation for the <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> class itself for details.<\/p>\n        ",
                    "memberOf": "painting.AssetImage",
                    "isConstant": false,
                    "href": "painting\/AssetImage\/package.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String package\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/AssetImage-class.html",
            "desc": "<p>Fetches an image from an <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>, having determined the exact image to\nuse based on the context.<\/p>\n<p>Given a main asset and a set of variants, AssetImage chooses the most\nappropriate asset for the current context, based on the device pixel ratio\nand size given in the configuration passed to <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a>.<\/p>\n<p>To show a specific image from a bundle without any asset resolution, use an\n<a href=\"painting\/AssetBundleImageProvider-class.html\">AssetBundleImageProvider<\/a>.<\/p>\n<h2 id=\"naming-assets-for-matching-with-different-pixel-densities\">Naming assets for matching with different pixel densities<\/h2>\n<p>Main assets are presumed to match a nominal pixel ratio of 1.0. To specify\nassets targeting different pixel ratios, place the variant assets in\nthe application bundle under subdirectories named in the form \"Nx\", where\nN is the nominal device pixel ratio for that asset.<\/p>\n<p>For example, suppose an application wants to use an icon named\n\"heart.png\". This icon has representations at 1.0 (the main icon), as well\nas 1.5 and 2.0 pixel ratios (variants). The asset bundle should then contain\nthe following assets:<\/p>\n<pre class=\"language-dart\"><code>heart.png\n1.5x\/heart.png\n2.0x\/heart.png\n<\/code><\/pre>\n<p>On a device with a 1.0 device pixel ratio, the image chosen would be\nheart.png; on a device with a 1.3 device pixel ratio, the image chosen\nwould be 1.5x\/heart.png.<\/p>\n<p>The directory level of the asset does not matter as long as the variants are\nat the equivalent level; that is, the following is also a valid bundle\nstructure:<\/p>\n<pre class=\"language-dart\"><code>icons\/heart.png\nicons\/1.5x\/heart.png\nicons\/2.0x\/heart.png\n<\/code><\/pre>\n<p>assets\/icons\/3.0x\/heart.png would be a valid variant of\nassets\/icons\/heart.png.<\/p>\n<h2 id=\"fetching-assets\">Fetching assets<\/h2>\n<p>When fetching an image provided by the app itself, use the <a href=\"painting\/AssetImage\/assetName.html\">assetName<\/a>\nargument to name the asset to choose. For instance, consider the structure\nabove. First, the <code>pubspec.yaml<\/code> of the project should specify its assets in\nthe <code>flutter<\/code> section:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  assets:\n    - icons\/heart.png\n<\/code><\/pre>\n<p>Then, to fetch the image, use<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetImage('icons\/heart.png')\n<\/code><\/pre>\n<h2 id=\"assets-in-packages\">Assets in packages<\/h2>\n<p>To fetch an asset from a package, the <a href=\"painting\/AssetImage\/package.html\">package<\/a> argument must be provided.\nFor instance, suppose the structure above is inside a package called\n<code>my_icons<\/code>. Then to fetch the image, use:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetImage('icons\/heart.png', package: 'my_icons')\n<\/code><\/pre>\n<p>Assets used by the package itself should also be fetched using the <a href=\"painting\/AssetImage\/package.html\">package<\/a>\nargument as above.<\/p>\n<p>If the desired asset is specified in the <code>pubspec.yaml<\/code> of the package, it\nis bundled automatically with the app. In particular, assets used by the\npackage itself must be specified in its <code>pubspec.yaml<\/code>.<\/p>\n<p>A package can also choose to have assets in its 'lib\/' folder that are not\nspecified in its <code>pubspec.yaml<\/code>. In this case for those images to be\nbundled, the app has to specify which ones to include. For instance a\npackage named <code>fancy_backgrounds<\/code> could have:<\/p>\n<pre class=\"language-dart\"><code>lib\/backgrounds\/background1.png\nlib\/backgrounds\/background2.png\nlib\/backgrounds\/background3.png\n<\/code><\/pre>\n<p>To include, say the first image, the <code>pubspec.yaml<\/code> of the app should specify\nit in the <code>assets<\/code> section:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  assets:\n    - packages\/fancy_backgrounds\/backgrounds\/background1.png\n<\/code><\/pre>\n<p>The <code>lib\/<\/code> is implied, so it should not be included in the asset path.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Image\/Image.asset.html\">Image.asset<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a>\nwhen used without a scale.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AssetImage"
        },
        {
            "name": "painting.AutomaticNotchedShape",
            "extends": [
                "painting.NotchedShape",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "AutomaticNotchedShape",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a> that is defined by two <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>s.<\/p>\n<p>The <code>host<\/code> must not be null.<\/p>\n<p>The <code>guest<\/code> may be null, in which case no notch is created even\nif a guest rectangle is provided to <a href=\"painting\/AutomaticNotchedShape\/getOuterPath.html\">getOuterPath<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AutomaticNotchedShape",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "guest",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/AutomaticNotchedShape\/AutomaticNotchedShape.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AutomaticNotchedShape(this.host, [ this.guest ]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outline of the shape.<\/p>\n<p>The <code>host<\/code> is the bounding rectangle of the shape.<\/p>\n<p>The <code>guest<\/code> is the bounding rectangle of the shape for which a notch will\nbe made. It is null when there is no guest.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AutomaticNotchedShape",
                    "sig": "",
                    "params": [
                        {
                            "name": "hostRect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "guestRect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/AutomaticNotchedShape\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect hostRect, Rect guestRect) { \/\/ ignore: avoid_renaming_method_parameters, the\n  \/\/ parameters are renamed over the baseclass because they would clash\n  \/\/ with properties of this object, and the use of all four of them in\n  \/\/ the code below is really confusing if they have the same names.\n  final Path hostPath = host.getOuterPath(hostRect);\n  if (guest != null &amp;&amp; guestRect != null) {\n    final Path guestPath = guest.getOuterPath(guestRect);\n    return Path.combine(PathOperation.difference, hostPath, guestPath);\n  }\n  return hostPath;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "guest",
                    "type": "painting.ShapeBorder",
                    "types": [],
                    "desc": "<p>The shape to subtract from the <a href=\"painting\/AutomaticNotchedShape\/host.html\">host<\/a> to make the notch.<\/p>\n<p>This shape cannot depend on the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, as no text direction\nis available to <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a>s.<\/p>\n<p>If this is null, <a href=\"painting\/AutomaticNotchedShape\/getOuterPath.html\">getOuterPath<\/a> ignores the guest rectangle.<\/p>\n        ",
                    "memberOf": "painting.AutomaticNotchedShape",
                    "isConstant": false,
                    "href": "painting\/AutomaticNotchedShape\/guest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder guest\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "host",
                    "type": "painting.ShapeBorder",
                    "types": [],
                    "desc": "<p>The shape of the widget that uses the <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a> (typically a\n<a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a>).<\/p>\n<p>This shape cannot depend on the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, as no text direction\nis available to <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a>s.<\/p>\n        ",
                    "memberOf": "painting.AutomaticNotchedShape",
                    "isConstant": false,
                    "href": "painting\/AutomaticNotchedShape\/host.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder host\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/AutomaticNotchedShape-class.html",
            "desc": "<p>A <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a> created from <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>s.<\/p>\n<p>Two shapes can be provided. The <a href=\"painting\/AutomaticNotchedShape\/host.html\">host<\/a> is the shape of the widget that\nuses the <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a> (typically a <a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a>). The <a href=\"painting\/AutomaticNotchedShape\/guest.html\">guest<\/a> is\nsubtracted from the <a href=\"painting\/AutomaticNotchedShape\/host.html\">host<\/a> to create the notch (typically to make room\nfor a <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "AutomaticNotchedShape"
        },
        {
            "type": "",
            "name": "painting.Axis",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Axis",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/Axis\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/Axis-class.html",
            "desc": "<p>The two cardinal directions in two dimensions.<\/p>\n<p>The axis is always relative to the current coordinate space. This means, for\nexample, that a <a href=\"painting\/Axis-class.html\">horizontal<\/a> axis might actually be diagonally from top\nright to bottom left, due to some local <a href=\"widgets\/Transform-class.html\">Transform<\/a> applied to the scene.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a>, which is a directional version of this enum (with values\nlight left and right, rather than just horizontal).<\/li>\n<li>\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, which disambiguates between left-to-right horizontal\ncontent and right-to-left horizontal content.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "Axis"
        },
        {
            "type": "",
            "name": "painting.AxisDirection",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.AxisDirection",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/AxisDirection\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/AxisDirection-class.html",
            "desc": "<p>A direction along either the horizontal or vertical <a href=\"painting\/Axis-class.html\">Axis<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "AxisDirection"
        },
        {
            "name": "painting.BeveledRectangleBorder",
            "extends": [
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/BeveledRectangleBorder\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (runtimeType != other.runtimeType)\n    return false;\n  final BeveledRectangleBorder typedOther = other;\n  return side == typedOther.side\n      &amp;&amp; borderRadius == typedOther.borderRadius;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BeveledRectangleBorder",
                    "type": "",
                    "desc": "<p>Creates a border like a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> except that the corners\nare joined by straight lines instead of arcs.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "side",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BeveledRectangleBorder\/BeveledRectangleBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BeveledRectangleBorder({\n  this.side = BorderSide.none,\n  this.borderRadius = BorderRadius.zero,\n}) : assert(side != null),\n     assert(borderRadius != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/BeveledRectangleBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/BeveledRectangleBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BeveledRectangleBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  return _getPath(borderRadius.resolve(textDirection).toRRect(rect).deflate(side.width));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/BeveledRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/BeveledRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BeveledRectangleBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  return _getPath(borderRadius.resolve(textDirection).toRRect(rect));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/BeveledRectangleBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/BeveledRectangleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  assert(t != null);\n  if (a is BeveledRectangleBorder) {\n    return BeveledRectangleBorder(\n      side: BorderSide.lerp(a.side, side, t),\n      borderRadius: BorderRadiusGeometry.lerp(a.borderRadius, borderRadius, t),\n    );\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/BeveledRectangleBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/BeveledRectangleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  assert(t != null);\n  if (b is BeveledRectangleBorder) {\n    return BeveledRectangleBorder(\n      side: BorderSide.lerp(side, b.side, t),\n      borderRadius: BorderRadiusGeometry.lerp(borderRadius, b.borderRadius, t),\n    );\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Rect rect, { TextDirection textDirection }) {\n  if (rect.isEmpty)\n    return;\n  switch (side.style) {\n    case BorderStyle.none:\n      break;\n    case BorderStyle.solid:\n    final Path path = getOuterPath(rect, textDirection: textDirection)\n        ..addPath(getInnerPath(rect, textDirection: textDirection), Offset.zero);\n      canvas.drawPath(path, side.toPaint());\n      break;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/BeveledRectangleBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder scale(double t) {\n  return BeveledRectangleBorder(\n    side: side.scale(t),\n    borderRadius: borderRadius * t,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BeveledRectangleBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BeveledRectangleBorder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($side, $borderRadius)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadiusGeometry",
                    "types": [],
                    "desc": "<p>The radii for each corner.<\/p>\n<p>Each corner <a href=\"dart-ui\/Radius-class.html\">Radius<\/a> defines the endpoints of a line segment that\nspans the corner. The endpoints are located in the same place as\nthey would be for <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>, but they're connected\nby a straight line instead of an arc.<\/p>\n<p>Negative radius values are clamped to 0.0 by <a href=\"painting\/BeveledRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> and\n<a href=\"painting\/BeveledRectangleBorder\/getOuterPath.html\">getOuterPath<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BeveledRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/BeveledRectangleBorder\/borderRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadiusGeometry borderRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/BeveledRectangleBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/BeveledRectangleBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BeveledRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/BeveledRectangleBorder\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.all(side.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BeveledRectangleBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BeveledRectangleBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BeveledRectangleBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BeveledRectangleBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BeveledRectangleBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BeveledRectangleBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.BeveledRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/BeveledRectangleBorder\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(side, borderRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "side",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The style of this border.<\/p>\n        ",
                    "memberOf": "painting.BeveledRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/BeveledRectangleBorder\/side.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide side\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BeveledRectangleBorder-class.html",
            "desc": "<p>A rectangular border with flattened or \"beveled\" corners.<\/p>\n<p>The line segments that connect the rectangle's four sides will\nbegin and at locations offset by the corresponding border radius,\nbut not farther than the side's center. If all the border radii\nexceed the sides' half widths\/heights the resulting shape is\ndiamond made by connecting the centers of the sides.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BeveledRectangleBorder"
        },
        {
            "name": "painting.Border",
            "extends": [
                "painting.BoxBorder",
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/Border\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final Border typedOther = other;\n  return top == typedOther.top &amp;&amp;\n         right == typedOther.right &amp;&amp;\n         bottom == typedOther.bottom &amp;&amp;\n         left == typedOther.left;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Border",
                    "type": "",
                    "desc": "<p>Creates a border.<\/p>\n<p>All the sides of the border default to <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "top",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "left",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/Border\/Border.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Border({\n  this.top = BorderSide.none,\n  this.right = BorderSide.none,\n  this.bottom = BorderSide.none,\n  this.left = BorderSide.none,\n}) : assert(top != null),\n     assert(right != null),\n     assert(bottom != null),\n     assert(left != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.Border",
                    "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reversed",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorder add(ShapeBorder other, { bool reversed = false }) {\n  if (other is! Border)\n    return null;\n  final Border typedOther = other;\n  if (BorderSide.canMerge(top, typedOther.top) &amp;&amp;\n      BorderSide.canMerge(right, typedOther.right) &amp;&amp;\n      BorderSide.canMerge(bottom, typedOther.bottom) &amp;&amp;\n      BorderSide.canMerge(left, typedOther.left)) {\n    return Border.merge(this, typedOther);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "Border.all",
                    "type": "",
                    "desc": "<p>A uniform border with all sides the same color and width.<\/p>\n<p>The sides default to black solid borders, one logical pixel wide.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "painting.BorderStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/Border\/Border.all.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Border.all({\n  Color color = const Color(0xFF000000),\n  double width = 1.0,\n  BorderStyle style = BorderStyle.solid,\n}) {\n  final BorderSide side = BorderSide(color: color, width: width, style: style);\n  return Border(top: side, right: side, bottom: side, left: side);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.Border",
                    "desc": "<p>Linearly interpolate between two borders.<\/p>\n<p>If a border is null, it is treated as having four <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nborders.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Border",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.Border",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Border lerp(Border a, Border b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return Border(\n    top: BorderSide.lerp(a.top, b.top, t),\n    right: BorderSide.lerp(a.right, b.right, t),\n    bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n    left: BorderSide.lerp(a.left, b.left, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Border\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/Border\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/Border\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Border\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a is Border)\n    return Border.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/Border\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Border\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/Border\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Border\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b is Border)\n    return Border.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "merge",
                    "type": "painting.Border",
                    "desc": "<p>Creates a <a href=\"painting\/Border-class.html\">Border<\/a> that represents the addition of the two given\n<a href=\"painting\/Border-class.html\">Border<\/a>s.<\/p>\n<p>It is only valid to call this if <a href=\"painting\/BorderSide\/canMerge.html\">BorderSide.canMerge<\/a> returns true for\nthe pairwise combination of each side on both <a href=\"painting\/Border-class.html\">Border<\/a>s.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Border",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.Border",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/merge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Border merge(Border a, Border b) {\n  assert(a != null);\n  assert(b != null);\n  assert(BorderSide.canMerge(a.top, b.top));\n  assert(BorderSide.canMerge(a.right, b.right));\n  assert(BorderSide.canMerge(a.bottom, b.bottom));\n  assert(BorderSide.canMerge(a.left, b.left));\n  return Border(\n    top: BorderSide.merge(a.top, b.top),\n    right: BorderSide.merge(a.right, b.right),\n    bottom: BorderSide.merge(a.bottom, b.bottom),\n    left: BorderSide.merge(a.left, b.left),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>Uniform borders are more efficient to paint than more complex borders.<\/p>\n<p>You can provide a <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a> to draw the border on. If the <code>shape<\/code> in\n<a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, there is the requirement that the border <a href=\"painting\/Border\/isUniform.html\">isUniform<\/a>.<\/p>\n<p>If you specify a rectangular box shape (<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>), then you\nmay specify a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>. If a <code>borderRadius<\/code> is specified, there is\nthe requirement that the border <a href=\"painting\/Border\/isUniform.html\">isUniform<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> and <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> methods do not know about the\n<code>shape<\/code> and <code>borderRadius<\/code> arguments.<\/p>\n<p>The <code>textDirection<\/code> argument is not used by this paint method.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/paintBorder.html\">paintBorder<\/a>, which is used if the border is not uniform.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shape",
                            "type": "painting.BoxShape",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  Canvas canvas,\n  Rect rect, {\n  TextDirection textDirection,\n  BoxShape shape = BoxShape.rectangle,\n  BorderRadius borderRadius,\n}) {\n  if (isUniform) {\n    switch (top.style) {\n      case BorderStyle.none:\n        return;\n      case BorderStyle.solid:\n        switch (shape) {\n          case BoxShape.circle:\n            assert(borderRadius == null, 'A borderRadius can only be given for rectangular boxes.');\n            BoxBorder._paintUniformBorderWithCircle(canvas, rect, top);\n            break;\n          case BoxShape.rectangle:\n            if (borderRadius != null) {\n              BoxBorder._paintUniformBorderWithRadius(canvas, rect, top, borderRadius);\n              return;\n            }\n            BoxBorder._paintUniformBorderWithRectangle(canvas, rect, top);\n            break;\n        }\n        return;\n    }\n  }\n\n  assert(borderRadius == null, 'A borderRadius can only be given for uniform borders.');\n  assert(shape == BoxShape.rectangle, 'A border can only be drawn as a circle if it is uniform.');\n\n  paintBorder(canvas, rect, top: top, right: right, bottom: bottom, left: left);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.Border",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/Border\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Border\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorder scale(double t) {\n  return Border(\n    top: top.scale(t),\n    right: right.scale(t),\n    bottom: bottom.scale(t),\n    left: left.scale(t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Border",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/Border\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (isUniform)\n    return '$runtimeType.all($top)';\n  final List&lt;String&gt; arguments = &lt;String&gt;[];\n  if (top != BorderSide.none)\n    arguments.add('top: $top');\n  if (right != BorderSide.none)\n    arguments.add('right: $right');\n  if (bottom != BorderSide.none)\n    arguments.add('bottom: $bottom');\n  if (left != BorderSide.none)\n    arguments.add('left: $left');\n  return '$runtimeType(${arguments.join(\", \")})';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The bottom side of this border.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide bottom\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/Border\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/Border\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.fromLTRB(left.width, top.width, right.width, bottom.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/Border\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/Border\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(top, right, bottom, left);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isUniform",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether all four sides of the border are identical. Uniform borders are\ntypically more efficient to paint.<\/p>\n<p>A uniform border by definition has no text direction dependency and\ntherefore could be expressed as a <a href=\"painting\/Border-class.html\">Border<\/a>, even if it is currently a\n<a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. A uniform border can also be expressed as a\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/isUniform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isUniform {\n  final Color topColor = top.color;\n  if (right.color != topColor ||\n      bottom.color != topColor ||\n      left.color != topColor)\n    return false;\n\n  final double topWidth = top.width;\n  if (right.width != topWidth ||\n      bottom.width != topWidth ||\n      left.width != topWidth)\n    return false;\n\n  final BorderStyle topStyle = top.style;\n  if (right.style != topStyle ||\n      bottom.style != topStyle ||\n      left.style != topStyle)\n    return false;\n\n  return true;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The left side of this border.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide left\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The right side of this border.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide right\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The top side of this border.<\/p>\n<p>This getter is available on both <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. If\n<a href=\"painting\/Border\/isUniform.html\">isUniform<\/a> is true, then this is the same style as all the other sides.<\/p>\n        ",
                    "memberOf": "painting.Border",
                    "isConstant": false,
                    "href": "painting\/Border\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.BorderTween"
            ],
            "realImplementors": [
                "widgets.BorderTween"
            ],
            "cn": [],
            "href": "painting\/Border-class.html",
            "desc": "<p>A border of a box, comprised of four sides: top, right, bottom, left.<\/p>\n<p>The sides are represented by <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nAll four borders the same, two-pixel wide solid white:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Border.all(width: 2.0, color: const Color(0xFFFFFFFF))<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe border for a material design divider:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Border(bottom: BorderSide(color: Theme.of(context).dividerColor))<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA 1990s-era \"OK\" button:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: const BoxDecoration(\n    border: Border(\n      top: BorderSide(width: 1.0, color: Color(0xFFFFFFFFFF)),\n      left: BorderSide(width: 1.0, color: Color(0xFFFFFFFFFF)),\n      right: BorderSide(width: 1.0, color: Color(0xFFFF000000)),\n      bottom: BorderSide(width: 1.0, color: Color(0xFFFF000000)),\n    ),\n  ),\n  child: Container(\n    padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 2.0),\n    decoration: const BoxDecoration(\n      border: Border(\n        top: BorderSide(width: 1.0, color: Color(0xFFFFDFDFDF)),\n        left: BorderSide(width: 1.0, color: Color(0xFFFFDFDFDF)),\n        right: BorderSide(width: 1.0, color: Color(0xFFFF7F7F7F)),\n        bottom: BorderSide(width: 1.0, color: Color(0xFFFF7F7F7F)),\n      ),\n      color: Color(0xFFBFBFBF),\n    ),\n    child: const Text(\n      'OK',\n      textAlign: TextAlign.center,\n      style: TextStyle(color: Color(0xFF000000))\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which uses this class to describe its edge decoration.<\/li>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a>, from the material layer, which can be queried to obtain appropriate colors\nto use for borders in a material app, as shown in the \"divider\" sample above.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Border"
        },
        {
            "name": "painting.BorderDirectional",
            "extends": [
                "painting.BoxBorder",
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/BorderDirectional\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final BorderDirectional typedOther = other;\n  return top == typedOther.top &amp;&amp;\n         start == typedOther.start &amp;&amp;\n         end == typedOther.end &amp;&amp;\n         bottom == typedOther.bottom;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderDirectional",
                    "type": "",
                    "desc": "<p>Creates a border.<\/p>\n<p>The <code>start<\/code> and <code>end<\/code> sides represent the horizontal sides; the start side\nis on the leading edge given the reading direction, and the end side is on\nthe trailing edge. They are resolved during <a href=\"painting\/BorderDirectional\/paint.html\">paint<\/a>.<\/p>\n<p>All the sides of the border default to <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "top",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "start",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderDirectional\/BorderDirectional.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderDirectional({\n  this.top = BorderSide.none,\n  this.start = BorderSide.none,\n  this.end = BorderSide.none,\n  this.bottom = BorderSide.none,\n}) : assert(top != null),\n     assert(start != null),\n     assert(end != null),\n     assert(bottom != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.BoxBorder",
                    "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reversed",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxBorder add(ShapeBorder other, { bool reversed = false }) {\n  if (other is BorderDirectional) {\n    final BorderDirectional typedOther = other;\n    if (BorderSide.canMerge(top, typedOther.top) &amp;&amp;\n        BorderSide.canMerge(start, typedOther.start) &amp;&amp;\n        BorderSide.canMerge(end, typedOther.end) &amp;&amp;\n        BorderSide.canMerge(bottom, typedOther.bottom)) {\n      return BorderDirectional.merge(this, typedOther);\n    }\n    return null;\n  }\n  if (other is Border) {\n    final Border typedOther = other;\n    if (!BorderSide.canMerge(typedOther.top, top) ||\n        !BorderSide.canMerge(typedOther.bottom, bottom))\n      return null;\n    if (start != BorderSide.none ||\n        end != BorderSide.none) {\n      if (typedOther.left != BorderSide.none ||\n          typedOther.right != BorderSide.none)\n        return null;\n      assert(typedOther.left == BorderSide.none);\n      assert(typedOther.right == BorderSide.none);\n      return BorderDirectional(\n        top: BorderSide.merge(typedOther.top, top),\n        start: start,\n        end: end,\n        bottom: BorderSide.merge(typedOther.bottom, bottom),\n      );\n    }\n    assert(start == BorderSide.none);\n    assert(end == BorderSide.none);\n    return Border(\n      top: BorderSide.merge(typedOther.top, top),\n      right: typedOther.right,\n      bottom: BorderSide.merge(typedOther.bottom, bottom),\n      left: typedOther.left,\n    );\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BorderDirectional",
                    "desc": "<p>Linearly interpolate between two borders.<\/p>\n<p>If a border is null, it is treated as having four <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nborders.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderDirectional lerp(BorderDirectional a, BorderDirectional b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return BorderDirectional(\n    top: BorderSide.lerp(a.top, b.top, t),\n    end: BorderSide.lerp(a.end, b.end, t),\n    bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n    start: BorderSide.lerp(a.start, b.start, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/BorderDirectional\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/BorderDirectional\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/BorderDirectional\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/BorderDirectional\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a is BorderDirectional)\n    return BorderDirectional.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/BorderDirectional\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/BorderDirectional\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/BorderDirectional\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/BorderDirectional\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b is BorderDirectional)\n    return BorderDirectional.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "merge",
                    "type": "painting.BorderDirectional",
                    "desc": "<p>Creates a <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> that represents the addition of the two\ngiven <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>s.<\/p>\n<p>It is only valid to call this if <a href=\"painting\/BorderSide\/canMerge.html\">BorderSide.canMerge<\/a> returns true for\nthe pairwise combination of each side on both <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>s.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/merge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderDirectional merge(BorderDirectional a, BorderDirectional b) {\n  assert(a != null);\n  assert(b != null);\n  assert(BorderSide.canMerge(a.top, b.top));\n  assert(BorderSide.canMerge(a.start, b.start));\n  assert(BorderSide.canMerge(a.end, b.end));\n  assert(BorderSide.canMerge(a.bottom, b.bottom));\n  return BorderDirectional(\n    top: BorderSide.merge(a.top, b.top),\n    start: BorderSide.merge(a.start, b.start),\n    end: BorderSide.merge(a.end, b.end),\n    bottom: BorderSide.merge(a.bottom, b.bottom),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>Uniform borders are more efficient to paint than more complex borders.<\/p>\n<p>You can provide a <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a> to draw the border on. If the <code>shape<\/code> in\n<a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, there is the requirement that the border <a href=\"painting\/BorderDirectional\/isUniform.html\">isUniform<\/a>.<\/p>\n<p>If you specify a rectangular box shape (<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>), then you\nmay specify a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>. If a <code>borderRadius<\/code> is specified, there is\nthe requirement that the border <a href=\"painting\/BorderDirectional\/isUniform.html\">isUniform<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> and <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> methods do not know about the\n<code>shape<\/code> and <code>borderRadius<\/code> arguments.<\/p>\n<p>The <code>textDirection<\/code> argument is used to determine which of <a href=\"painting\/BorderDirectional\/start.html\">start<\/a> and\n<a href=\"painting\/BorderDirectional\/end.html\">end<\/a> map to the left and right. For <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>, the <a href=\"painting\/BorderDirectional\/start.html\">start<\/a> is\nthe left and the <a href=\"painting\/BorderDirectional\/end.html\">end<\/a> is the right; for <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>, it is the\nreverse.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/paintBorder.html\">paintBorder<\/a>, which is used if the border is not uniform.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shape",
                            "type": "painting.BoxShape",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  Canvas canvas,\n  Rect rect, {\n  TextDirection textDirection,\n  BoxShape shape = BoxShape.rectangle,\n  BorderRadius borderRadius,\n}) {\n  if (isUniform) {\n    switch (top.style) {\n      case BorderStyle.none:\n        return;\n      case BorderStyle.solid:\n        switch (shape) {\n          case BoxShape.circle:\n            assert(borderRadius == null, 'A borderRadius can only be given for rectangular boxes.');\n            BoxBorder._paintUniformBorderWithCircle(canvas, rect, top);\n            break;\n          case BoxShape.rectangle:\n            if (borderRadius != null) {\n              BoxBorder._paintUniformBorderWithRadius(canvas, rect, top, borderRadius);\n              return;\n            }\n            BoxBorder._paintUniformBorderWithRectangle(canvas, rect, top);\n            break;\n        }\n        return;\n    }\n  }\n\n  assert(borderRadius == null, 'A borderRadius can only be given for uniform borders.');\n  assert(shape == BoxShape.rectangle, 'A border can only be drawn as a circle if it is uniform.');\n\n  BorderSide left, right;\n  assert(textDirection != null, 'Non-uniform BorderDirectional objects require a TextDirection when painting.');\n  switch (textDirection) {\n    case TextDirection.rtl:\n      left = end;\n      right = start;\n      break;\n    case TextDirection.ltr:\n      left = start;\n      right = end;\n      break;\n  }\n  paintBorder(canvas, rect, top: top, left: left, bottom: bottom, right: right);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.BorderDirectional",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/BorderDirectional\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderDirectional scale(double t) {\n  return BorderDirectional(\n    top: top.scale(t),\n    start: start.scale(t),\n    end: end.scale(t),\n    bottom: bottom.scale(t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderDirectional",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderDirectional\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; arguments = &lt;String&gt;[];\n  if (top != BorderSide.none)\n    arguments.add('top: $top');\n  if (start != BorderSide.none)\n    arguments.add('start: $start');\n  if (end != BorderSide.none)\n    arguments.add('end: $end');\n  if (bottom != BorderSide.none)\n    arguments.add('bottom: $bottom');\n  return '$runtimeType(${arguments.join(\", \")})';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The bottom side of this border.<\/p>\n        ",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide bottom\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/BorderDirectional\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/BorderDirectional\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsetsDirectional.fromSTEB(start.width, top.width, end.width, bottom.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The end side of this border.<\/p>\n<p>This is the side on the right in left-to-right text and on the left in\nright-to-left text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, which is used to describe the reading direction.<\/li><\/ul>",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/end.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide end\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BorderDirectional\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BorderDirectional\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BorderDirectional\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BorderDirectional\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BorderDirectional\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BorderDirectional\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(top, start, end, bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isUniform",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether all four sides of the border are identical. Uniform borders are\ntypically more efficient to paint.<\/p>\n<p>A uniform border by definition has no text direction dependency and\ntherefore could be expressed as a <a href=\"painting\/Border-class.html\">Border<\/a>, even if it is currently a\n<a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. A uniform border can also be expressed as a\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/isUniform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isUniform {\n  final Color topColor = top.color;\n  if (start.color != topColor ||\n      end.color != topColor ||\n      bottom.color != topColor)\n    return false;\n\n  final double topWidth = top.width;\n  if (start.width != topWidth ||\n      end.width != topWidth ||\n      bottom.width != topWidth)\n    return false;\n\n  final BorderStyle topStyle = top.style;\n  if (start.style != topStyle ||\n      end.style != topStyle ||\n      bottom.style != topStyle)\n    return false;\n\n  return true;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The start side of this border.<\/p>\n<p>This is the side on the left in left-to-right text and on the right in\nright-to-left text.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, which is used to describe the reading direction.<\/li><\/ul>",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide start\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The top side of this border.<\/p>\n<p>This getter is available on both <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. If\n<a href=\"painting\/BorderDirectional\/isUniform.html\">isUniform<\/a> is true, then this is the same style as all the other sides.<\/p>\n        ",
                    "memberOf": "painting.BorderDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderDirectional\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BorderDirectional-class.html",
            "desc": "<p>A border of a box, comprised of four sides, the lateral sides of which\nflip over based on the reading direction.<\/p>\n<p>The lateral sides are called <a href=\"painting\/BorderDirectional\/start.html\">start<\/a> and <a href=\"painting\/BorderDirectional\/end.html\">end<\/a>. When painted in\nleft-to-right environments, the <a href=\"painting\/BorderDirectional\/start.html\">start<\/a> side will be painted on the left and\nthe <a href=\"painting\/BorderDirectional\/end.html\">end<\/a> side on the right; in right-to-left environments, it is the\nreverse. The other two sides are <a href=\"painting\/BorderDirectional\/top.html\">top<\/a> and <a href=\"painting\/BorderDirectional\/bottom.html\">bottom<\/a>.<\/p>\n<p>The sides are represented by <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects.<\/p>\n<p>If the <a href=\"painting\/BorderDirectional\/start.html\">start<\/a> and <a href=\"painting\/BorderDirectional\/end.html\">end<\/a> sides are the same, then it is slightly more\nefficient to use a <a href=\"painting\/Border-class.html\">Border<\/a> object rather than a <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> object.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which uses this class to describe its edge decoration.<\/li>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"material\/Theme-class.html\">Theme<\/a>, from the material layer, which can be queried to obtain appropriate colors\nto use for borders in a material app, as shown in the \"divider\" sample above.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BorderDirectional"
        },
        {
            "name": "painting.BorderRadius",
            "extends": [
                "painting.BorderRadiusGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Computes the remainder of each corner by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator %(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft % other,\n    topRight: topRight % other,\n    bottomLeft: bottomLeft % other,\n    bottomRight: bottomRight % other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Scales each corner of the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator *(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft * other,\n    topRight: topRight * other,\n    bottomLeft: bottomLeft * other,\n    bottomRight: bottomRight * other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius operator +(BorderRadius other) {\n  return BorderRadius.only(\n    topLeft: topLeft + other.topLeft,\n    topRight: topRight + other.topRight,\n    bottomLeft: bottomLeft + other.bottomLeft,\n    bottomRight: bottomRight + other.bottomRight,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius operator -(BorderRadius other) {\n  return BorderRadius.only(\n    topLeft: topLeft - other.topLeft,\n    topRight: topRight - other.topRight,\n    bottomLeft: bottomLeft - other.bottomLeft,\n    bottomRight: bottomRight - other.bottomRight,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Divides each corner of the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator \/(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft \/ other,\n    topRight: topRight \/ other,\n    bottomLeft: bottomLeft \/ other,\n    bottomRight: bottomRight \/ other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadius\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadius\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusGeometry add(BorderRadiusGeometry other) {\n  if (other is BorderRadius)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadius.all",
                    "type": "",
                    "desc": "<p>Creates a border radius where all radii are <code>radius<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadius\/BorderRadius.all.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.all(Radius radius) : this.only(\n  topLeft: radius,\n  topRight: radius,\n  bottomLeft: radius,\n  bottomRight: radius,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadius.circular",
                    "type": "",
                    "desc": "<p>Creates a border radius where all radii are <a href=\"painting\/BorderRadius\/BorderRadius.circular.html\">Radius.circular(radius)<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadius\/BorderRadius.circular.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius.circular(double radius) : this.all(\n  Radius.circular(radius),\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadius.horizontal",
                    "type": "",
                    "desc": "<p>Creates a horizontally symmetrical border radius where the left and right\nsides of the rectangle have the same radii.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadius\/BorderRadius.horizontal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.horizontal({\n  Radius left = Radius.zero,\n  Radius right = Radius.zero,\n}) : this.only(\n  topLeft: left,\n  topRight: right,\n  bottomLeft: left,\n  bottomRight: right,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/BorderRadius\/zero-constant.html\">BorderRadius.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderRadius lerp(BorderRadius a, BorderRadius b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return BorderRadius.only(\n    topLeft: Radius.lerp(a.topLeft, b.topLeft, t),\n    topRight: Radius.lerp(a.topRight, b.topRight, t),\n    bottomLeft: Radius.lerp(a.bottomLeft, b.bottomLeft, t),\n    bottomRight: Radius.lerp(a.bottomRight, b.bottomRight, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadius.only",
                    "type": "",
                    "desc": "<p>Creates a border radius with only the given non-zero values. The other\ncorners will be right angles.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "topLeft",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "topRight",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomLeft",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomRight",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadius\/BorderRadius.only.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.only({\n  this.topLeft = Radius.zero,\n  this.topRight = Radius.zero,\n  this.bottomLeft = Radius.zero,\n  this.bottomRight = Radius.zero,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Convert this instance into a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, so that the radii are\nexpressed for specific physical corners (top-left, top-right, etc) rather\nthan in a direction-dependent manner.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius resolve(TextDirection direction) =&gt; this;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "subtract",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadius\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadius\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/BorderRadius\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/subtract.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusGeometry subtract(BorderRadiusGeometry other) {\n  if (other is BorderRadius)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toRRect",
                    "type": "dart:ui.RRect",
                    "desc": "<p>Creates an <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> from the current border radius and a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/toRRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RRect toRRect(Rect rect) {\n  return RRect.fromRectAndCorners(\n    rect,\n    topLeft: topLeft,\n    topRight: topRight,\n    bottomLeft: bottomLeft,\n    bottomRight: bottomRight,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Returns the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> object with each corner negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator -() {\n  return BorderRadius.only(\n    topLeft: -topLeft,\n    topRight: -topRight,\n    bottomLeft: -bottomLeft,\n    bottomRight: -bottomRight,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadius.vertical",
                    "type": "",
                    "desc": "<p>Creates a vertically symmetric border radius where the top and bottom\nsides of the rectangle have the same radii.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "top",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadius\/BorderRadius.vertical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadius.vertical({\n  Radius top = Radius.zero,\n  Radius bottom = Radius.zero,\n}) : this.only(\n  topLeft: top,\n  topRight: top,\n  bottomLeft: bottom,\n  bottomRight: bottom,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Integer divides each corner of the <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadius",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadius\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius operator ~\/(double other) {\n  return BorderRadius.only(\n    topLeft: topLeft ~\/ other,\n    topRight: topRight ~\/ other,\n    bottomLeft: bottomLeft ~\/ other,\n    bottomRight: bottomRight ~\/ other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottomLeft",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The bottom-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadius",
                    "isConstant": false,
                    "href": "painting\/BorderRadius\/bottomLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius bottomLeft\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomRight",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The bottom-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadius",
                    "isConstant": false,
                    "href": "painting\/BorderRadius\/bottomRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius bottomRight\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topLeft",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The top-left <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadius",
                    "isConstant": false,
                    "href": "painting\/BorderRadius\/topLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius topLeft\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topRight",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The top-right <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadius",
                    "isConstant": false,
                    "href": "painting\/BorderRadius\/topRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius topRight\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/BorderRadius\/zero-constant.html",
                    "desc": "<p>A border radius with all zero radii.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BorderRadius zero = BorderRadius.all(Radius.zero)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "painting.BorderRadius"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.BorderRadiusTween"
            ],
            "realImplementors": [
                "widgets.BorderRadiusTween"
            ],
            "cn": [],
            "href": "painting\/BorderRadius-class.html",
            "desc": "<p>An immutable set of radii for each corner of a rectangle.<\/p>\n<p>Used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> when the shape is a <a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>.<\/p>\n<p>The <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> class specifies offsets in terms of visual corners, e.g.\n<a href=\"painting\/BorderRadius\/topLeft.html\">topLeft<\/a>. These values are not affected by the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. To support\nboth left-to-right and right-to-left layouts, consider using\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>, which is expressed in terms that are relative to\na <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> (typically obtained from the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BorderRadius"
        },
        {
            "name": "painting.BorderRadiusDirectional",
            "extends": [
                "painting.BorderRadiusGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Computes the remainder of each corner by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusDirectional operator %(double other) {\n  return BorderRadiusDirectional.only(\n    topStart: topStart % other,\n    topEnd: topEnd % other,\n    bottomStart: bottomStart % other,\n    bottomEnd: bottomEnd % other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Scales each corner of the <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusDirectional operator *(double other) {\n  return BorderRadiusDirectional.only(\n    topStart: topStart * other,\n    topEnd: topEnd * other,\n    bottomStart: bottomStart * other,\n    bottomEnd: bottomEnd * other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusDirectional operator +(BorderRadiusDirectional other) {\n  return BorderRadiusDirectional.only(\n    topStart: topStart + other.topStart,\n    topEnd: topEnd + other.topEnd,\n    bottomStart: bottomStart + other.bottomStart,\n    bottomEnd: bottomEnd + other.bottomEnd,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusDirectional operator -(BorderRadiusDirectional other) {\n  return BorderRadiusDirectional.only(\n    topStart: topStart - other.topStart,\n    topEnd: topEnd - other.topEnd,\n    bottomStart: bottomStart - other.bottomStart,\n    bottomEnd: bottomEnd - other.bottomEnd,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Divides each corner of the <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusDirectional operator \/(double other) {\n  return BorderRadiusDirectional.only(\n    topStart: topStart \/ other,\n    topEnd: topEnd \/ other,\n    bottomStart: bottomStart \/ other,\n    bottomEnd: bottomEnd \/ other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadiusDirectional\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadiusDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusGeometry add(BorderRadiusGeometry other) {\n  if (other is BorderRadiusDirectional)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadiusDirectional.all",
                    "type": "",
                    "desc": "<p>Creates a border radius where all radii are <code>radius<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadiusDirectional\/BorderRadiusDirectional.all.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadiusDirectional.all(Radius radius) : this.only(\n  topStart: radius,\n  topEnd: radius,\n  bottomStart: radius,\n  bottomEnd: radius,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadiusDirectional.circular",
                    "type": "",
                    "desc": "<p>Creates a border radius where all radii are <a href=\"painting\/BorderRadiusDirectional\/BorderRadiusDirectional.circular.html\">Radius.circular(radius)<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadiusDirectional\/BorderRadiusDirectional.circular.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusDirectional.circular(double radius) : this.all(\n  Radius.circular(radius),\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadiusDirectional.horizontal",
                    "type": "",
                    "desc": "<p>Creates a horizontally symmetrical border radius where the start and end\nsides of the rectangle have the same radii.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadiusDirectional\/BorderRadiusDirectional.horizontal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadiusDirectional.horizontal({\n  Radius start = Radius.zero,\n  Radius end = Radius.zero,\n}) : this.only(\n  topStart: start,\n  topEnd: end,\n  bottomStart: start,\n  bottomEnd: end,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/BorderRadiusDirectional\/zero-constant.html\">BorderRadiusDirectional.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderRadiusDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderRadiusDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderRadiusDirectional lerp(BorderRadiusDirectional a, BorderRadiusDirectional b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return BorderRadiusDirectional.only(\n    topStart: Radius.lerp(a.topStart, b.topStart, t),\n    topEnd: Radius.lerp(a.topEnd, b.topEnd, t),\n    bottomStart: Radius.lerp(a.bottomStart, b.bottomStart, t),\n    bottomEnd: Radius.lerp(a.bottomEnd, b.bottomEnd, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadiusDirectional.only",
                    "type": "",
                    "desc": "<p>Creates a border radius with only the given non-zero values. The other\ncorners will be right angles.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "topStart",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "topEnd",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomStart",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottomEnd",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadiusDirectional\/BorderRadiusDirectional.only.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadiusDirectional.only({\n  this.topStart = Radius.zero,\n  this.topEnd = Radius.zero,\n  this.bottomStart = Radius.zero,\n  this.bottomEnd = Radius.zero,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Convert this instance into a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, so that the radii are\nexpressed for specific physical corners (top-left, top-right, etc) rather\nthan in a direction-dependent manner.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadius resolve(TextDirection direction) {\n  assert(direction != null);\n  switch (direction) {\n    case TextDirection.rtl:\n      return BorderRadius.only(\n        topLeft: topEnd,\n        topRight: topStart,\n        bottomLeft: bottomEnd,\n        bottomRight: bottomStart,\n      );\n    case TextDirection.ltr:\n      return BorderRadius.only(\n        topLeft: topStart,\n        topRight: topEnd,\n        bottomLeft: bottomStart,\n        bottomRight: bottomEnd,\n      );\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "subtract",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadiusDirectional\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadiusDirectional\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/BorderRadiusDirectional\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/subtract.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusGeometry subtract(BorderRadiusGeometry other) {\n  if (other is BorderRadiusDirectional)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Returns the <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> object with each corner negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusDirectional operator -() {\n  return BorderRadiusDirectional.only(\n    topStart: -topStart,\n    topEnd: -topEnd,\n    bottomStart: -bottomStart,\n    bottomEnd: -bottomEnd,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadiusDirectional.vertical",
                    "type": "",
                    "desc": "<p>Creates a vertically symmetric border radius where the top and bottom\nsides of the rectangle have the same radii.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "top",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:ui.Radius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderRadiusDirectional\/BorderRadiusDirectional.vertical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadiusDirectional.vertical({\n  Radius top = Radius.zero,\n  Radius bottom = Radius.zero,\n}) : this.only(\n  topStart: top,\n  topEnd: top,\n  bottomStart: bottom,\n  bottomEnd: bottom,\n);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.BorderRadiusDirectional",
                    "desc": "<p>Integer divides each corner of the <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusDirectional\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBorderRadiusDirectional operator ~\/(double other) {\n  return BorderRadiusDirectional.only(\n    topStart: topStart ~\/ other,\n    topEnd: topEnd ~\/ other,\n    bottomStart: bottomStart ~\/ other,\n    bottomEnd: bottomEnd ~\/ other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottomEnd",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The bottom-end <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadiusDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderRadiusDirectional\/bottomEnd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius bottomEnd\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomStart",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The bottom-start <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadiusDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderRadiusDirectional\/bottomStart.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius bottomStart\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topEnd",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The top-end <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadiusDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderRadiusDirectional\/topEnd.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius topEnd\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topStart",
                    "type": "dart:ui.Radius",
                    "types": [],
                    "desc": "<p>The top-start <a href=\"dart-ui\/Radius-class.html\">Radius<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderRadiusDirectional",
                    "isConstant": false,
                    "href": "painting\/BorderRadiusDirectional\/topStart.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Radius topStart\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/BorderRadiusDirectional\/zero-constant.html",
                    "desc": "<p>A border radius with all zero radii.<\/p>\n<p>Consider using <a href=\"painting\/BorderRadiusDirectional\/zero-constant.html\">EdgeInsets.zero<\/a> instead, since that object has the same\neffect, but will be cheaper to <a href=\"painting\/BorderRadiusDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BorderRadiusDirectional zero = BorderRadiusDirectional.all(Radius.zero)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "painting.BorderRadiusDirectional"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BorderRadiusDirectional-class.html",
            "desc": "<p>An immutable set of radii for each corner of a rectangle, but with the\ncorners specified in a manner dependent on the writing direction.<\/p>\n<p>This can be used to specify a corner radius on the leading or trailing edge\nof a box, so that it flips to the other side when the text alignment flips\n(e.g. being on the top right in English text but the top left in Arabic\ntext).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, a variant that uses physical labels (<code>topLeft<\/code> and\n<code>topRight<\/code> instead of <code>topStart<\/code> and <code>topEnd<\/code>).<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BorderRadiusDirectional"
        },
        {
            "name": "painting.BorderRadiusGeometry",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Computes the remainder of each corner by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n<p>This operator may have unexpected results when applied to a mixture of\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> and <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry operator %(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Scales the <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> object's corners by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry operator *(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Divides the <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> object's corners by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry operator \/(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/BorderRadiusGeometry\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final BorderRadiusGeometry typedOther = other;\n  return _topLeft == typedOther._topLeft\n      &amp;&amp; _topRight == typedOther._topRight\n      &amp;&amp; _bottomLeft == typedOther._bottomLeft\n      &amp;&amp; _bottomRight == typedOther._bottomRight\n      &amp;&amp; _topStart == typedOther._topStart\n      &amp;&amp; _topEnd == typedOther._topEnd\n      &amp;&amp; _bottomStart == typedOther._bottomStart\n      &amp;&amp; _bottomEnd == typedOther._bottomEnd;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderRadiusGeometry",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/BorderRadiusGeometry\/BorderRadiusGeometry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderRadiusGeometry();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadiusGeometry\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadiusGeometry\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry add(BorderRadiusGeometry other) {\n  return _MixedBorderRadius(\n    _topLeft + other._topLeft,\n    _topRight + other._topRight,\n    _bottomLeft + other._bottomLeft,\n    _bottomRight + other._bottomRight,\n    _topStart + other._topStart,\n    _topEnd + other._topEnd,\n    _bottomStart + other._bottomStart,\n    _bottomEnd + other._bottomEnd,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/BorderRadius\/zero-constant.html\">BorderRadius.zero<\/a>,\nand the result is an object of the same type as the non-null argument. (If\nboth are null, this returns null.)<\/p>\n<p>If <a href=\"painting\/BorderRadiusGeometry\/lerp.html\">lerp<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadiusGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderRadiusGeometry lerp(BorderRadiusGeometry a, BorderRadiusGeometry b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  a ??= BorderRadius.zero;\n  b ??= BorderRadius.zero;\n  return a.add((b.subtract(a)) * t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.BorderRadius",
                    "desc": "<p>Convert this instance into a <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, so that the radii are\nexpressed for specific physical corners (top-left, top-right, etc) rather\nthan in a direction-dependent manner.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadius resolve(TextDirection direction);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "subtract",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or two\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/BorderRadiusGeometry\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> or\n<a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> using <a href=\"painting\/BorderRadiusGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/BorderRadiusGeometry\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/subtract.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry subtract(BorderRadiusGeometry other) {\n  return _MixedBorderRadius(\n    _topLeft - other._topLeft,\n    _topRight - other._topRight,\n    _bottomLeft - other._bottomLeft,\n    _bottomRight - other._bottomRight,\n    _topStart - other._topStart,\n    _topEnd - other._topEnd,\n    _bottomStart - other._bottomStart,\n    _bottomEnd - other._bottomEnd,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  String visual, logical;\n  if (_topLeft == _topRight &amp;&amp;\n      _topRight == _bottomLeft &amp;&amp;\n      _bottomLeft == _bottomRight) {\n    if (_topLeft != Radius.zero) {\n      if (_topLeft.x == _topLeft.y) {\n        visual = 'BorderRadius.circular(${_topLeft.x.toStringAsFixed(1)})';\n      } else {\n        visual = 'BorderRadius.all($_topLeft)';\n      }\n    }\n  } else {\n    \/\/ visuals aren't the same and at least one isn't zero\n    final StringBuffer result = StringBuffer();\n    result.write('BorderRadius.only(');\n    bool comma = false;\n    if (_topLeft != Radius.zero) {\n      result.write('topLeft: $_topLeft');\n      comma = true;\n    }\n    if (_topRight != Radius.zero) {\n      if (comma)\n        result.write(', ');\n      result.write('topRight: $_topRight');\n      comma = true;\n    }\n    if (_bottomLeft != Radius.zero) {\n      if (comma)\n        result.write(', ');\n      result.write('bottomLeft: $_bottomLeft');\n      comma = true;\n    }\n    if (_bottomRight != Radius.zero) {\n      if (comma)\n        result.write(', ');\n      result.write('bottomRight: $_bottomRight');\n    }\n    result.write(')');\n    visual = result.toString();\n  }\n  if (_topStart == _topEnd &amp;&amp;\n      _topEnd == _bottomEnd &amp;&amp;\n      _bottomEnd == _bottomStart) {\n    if (_topStart != Radius.zero) {\n      if (_topStart.x == _topStart.y) {\n        logical = 'BorderRadiusDirectional.circular(${_topStart.x.toStringAsFixed(1)})';\n      } else {\n        logical = 'BorderRadiusDirectional.all($_topStart)';\n      }\n    }\n  } else {\n    \/\/ logicals aren't the same and at least one isn't zero\n    final StringBuffer result = StringBuffer();\n    result.write('BorderRadiusDirectional.only(');\n    bool comma = false;\n    if (_topStart != Radius.zero) {\n      result.write('topStart: $_topStart');\n      comma = true;\n    }\n    if (_topEnd != Radius.zero) {\n      if (comma)\n        result.write(', ');\n      result.write('topEnd: $_topEnd');\n      comma = true;\n    }\n    if (_bottomStart != Radius.zero) {\n      if (comma)\n        result.write(', ');\n      result.write('bottomStart: $_bottomStart');\n      comma = true;\n    }\n    if (_bottomEnd != Radius.zero) {\n      if (comma)\n        result.write(', ');\n      result.write('bottomEnd: $_bottomEnd');\n    }\n    result.write(')');\n    logical = result.toString();\n  }\n  if (visual != null &amp;&amp; logical != null)\n    return '$visual + $logical';\n  if (visual != null)\n    return visual;\n  if (logical != null)\n    return logical;\n  return 'BorderRadius.zero';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Returns the <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> object with each corner radius negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry operator -();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.BorderRadiusGeometry",
                    "desc": "<p>Integer divides the <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> object's corners by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n<p>This operator may have unexpected results when applied to a mixture of\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> and <a href=\"painting\/BorderRadiusDirectional-class.html\">BorderRadiusDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderRadiusGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderRadiusGeometry\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderRadiusGeometry operator ~\/(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BorderRadiusGeometry\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BorderRadiusGeometry\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BorderRadiusGeometry\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BorderRadiusGeometry\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BorderRadiusGeometry\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BorderRadiusGeometry\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.BorderRadiusGeometry",
                    "isConstant": false,
                    "href": "painting\/BorderRadiusGeometry\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    _topLeft,\n    _topRight,\n    _bottomLeft,\n    _bottomRight,\n    _topStart,\n    _topEnd,\n    _bottomStart,\n    _bottomEnd,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.BorderRadius",
                "painting.BorderRadiusDirectional"
            ],
            "realImplementors": [
                "painting.BorderRadius",
                "painting.BorderRadiusDirectional"
            ],
            "cn": [],
            "href": "painting\/BorderRadiusGeometry-class.html",
            "desc": "<p>Base class for <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> that allows for text-direction aware resolution.<\/p>\n<p>A property or argument of this type accepts classes created either with <a href=\"painting\/BorderRadius\/BorderRadius.only.html\">new\nBorderRadius.only<\/a> and its variants, or <a href=\"painting\/BorderRadiusDirectional\/BorderRadiusDirectional.only.html\">new BorderRadiusDirectional.only<\/a>\nand its variants.<\/p>\n<p>To convert a <a href=\"painting\/BorderRadiusGeometry-class.html\">BorderRadiusGeometry<\/a> object of indeterminate type into a\n<a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a> object, call the <a href=\"painting\/BorderRadiusGeometry\/resolve.html\">resolve<\/a> method.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BorderRadiusGeometry"
        },
        {
            "name": "painting.BorderSide",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/BorderSide\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final BorderSide typedOther = other;\n  return color == typedOther.color &amp;&amp;\n         width == typedOther.width &amp;&amp;\n         style == typedOther.style;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BorderSide",
                    "type": "",
                    "desc": "<p>Creates the side of a border.<\/p>\n<p>By default, the border is 1.0 logical pixels wide and solid black.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "painting.BorderStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BorderSide\/BorderSide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BorderSide({\n  this.color = const Color(0xFF000000),\n  this.width = 1.0,\n  this.style = BorderStyle.solid,\n}) : assert(color != null),\n     assert(width != null),\n     assert(width &gt;= 0.0),\n     assert(style != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "canMerge",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether the two given <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>s can be merged using <a href=\"painting\/BorderSide\/merge.html\">new\nBorderSide.merge<\/a>.<\/p>\n<p>Two sides can be merged if one or both are zero-width with\n<a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>, or if they both have the same color and style.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/canMerge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool canMerge(BorderSide a, BorderSide b) {\n  assert(a != null);\n  assert(b != null);\n  if ((a.style == BorderStyle.none &amp;&amp; a.width == 0.0) ||\n      (b.style == BorderStyle.none &amp;&amp; b.width == 0.0))\n    return true;\n  return a.style == b.style\n      &amp;&amp; a.color == b.color;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "painting.BorderSide",
                    "desc": "<p>Creates a copy of this border but with the given fields replaced with the new values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "width",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "painting.BorderStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide copyWith({\n  Color color,\n  double width,\n  BorderStyle style,\n}) {\n  assert(width == null || width &gt;= 0.0);\n  return BorderSide(\n    color: color ?? this.color,\n    width: width ?? this.width,\n    style: style ?? this.style,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BorderSide",
                    "desc": "<p>Linearly interpolate between two border sides.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderSide lerp(BorderSide a, BorderSide b, double t) {\n  assert(a != null);\n  assert(b != null);\n  assert(t != null);\n  if (t == 0.0)\n    return a;\n  if (t == 1.0)\n    return b;\n  final double width = ui.lerpDouble(a.width, b.width, t);\n  if (width &lt; 0.0)\n    return BorderSide.none;\n  if (a.style == b.style) {\n    return BorderSide(\n      color: Color.lerp(a.color, b.color, t),\n      width: width,\n      style: a.style, \/\/ == b.style\n    );\n  }\n  Color colorA, colorB;\n  switch (a.style) {\n    case BorderStyle.solid:\n      colorA = a.color;\n      break;\n    case BorderStyle.none:\n      colorA = a.color.withAlpha(0x00);\n      break;\n  }\n  switch (b.style) {\n    case BorderStyle.solid:\n      colorB = b.color;\n      break;\n    case BorderStyle.none:\n      colorB = b.color.withAlpha(0x00);\n      break;\n  }\n  return BorderSide(\n    color: Color.lerp(colorA, colorB, t),\n    width: width,\n    style: BorderStyle.solid,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "merge",
                    "type": "painting.BorderSide",
                    "desc": "<p>Creates a <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> that represents the addition of the two given\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>s.<\/p>\n<p>It is only valid to call this if <a href=\"painting\/BorderSide\/canMerge.html\">canMerge<\/a> returns true for the two\nsides.<\/p>\n<p>If one of the sides is zero-width with <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>, then the other\nside is return as-is. If both of the sides are zero-width with\n<a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>, then <code>BorderSide.zero<\/code> is returned.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/merge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BorderSide merge(BorderSide a, BorderSide b) {\n  assert(a != null);\n  assert(b != null);\n  assert(canMerge(a, b));\n  final bool aIsNone = a.style == BorderStyle.none &amp;&amp; a.width == 0.0;\n  final bool bIsNone = b.style == BorderStyle.none &amp;&amp; b.width == 0.0;\n  if (aIsNone &amp;&amp; bIsNone)\n    return BorderSide.none;\n  if (aIsNone)\n    return b;\n  if (bIsNone)\n    return a;\n  assert(a.color == b.color);\n  assert(a.style == b.style);\n  return BorderSide(\n    color: a.color, \/\/ == b.color\n    width: a.width + b.width,\n    style: a.style, \/\/ == b.style\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "painting.BorderSide",
                    "desc": "<p>Creates a copy of this border side description but with the width scaled\nby the factor <code>t<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are treated like zero.<\/p>\n<p>Since a zero width is normally painted as a hairline width rather than no\nborder at all, the zero factor is special-cased to instead change the\nstyle no <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide scale(double t) {\n  assert(t != null);\n  return BorderSide(\n    color: color,\n    width: math.max(0.0, width * t),\n    style: t &lt;= 0.0 ? BorderStyle.none : style,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toPaint",
                    "type": "dart:ui.Paint",
                    "desc": "<p>Create a <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object that, if used to stroke a line, will draw the line\nin this border's style.<\/p>\n<p>Not all borders use this method to paint their border sides. For example,\nnon-uniform rectangular <a href=\"painting\/Border-class.html\">Border<\/a>s have beveled edges and so paint their\nborder sides as filled shapes rather than using a stroke.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/toPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Paint toPaint() {\n  switch (style) {\n    case BorderStyle.solid:\n      return Paint()\n        ..color = color\n        ..strokeWidth = width\n        ..style = PaintingStyle.stroke;\n    case BorderStyle.none:\n      return Paint()\n        ..color = const Color(0x00000000)\n        ..strokeWidth = 0.0\n        ..style = PaintingStyle.stroke;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderSide",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderSide\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($color, ${width.toStringAsFixed(1)}, $style)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color of this side of the border.<\/p>\n        ",
                    "memberOf": "painting.BorderSide",
                    "isConstant": false,
                    "href": "painting\/BorderSide\/color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BorderSide\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BorderSide\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.BorderSide",
                    "isConstant": false,
                    "href": "painting\/BorderSide\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(color, width, style);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/BorderSide\/none-constant.html",
                    "desc": "<p>A hairline black border that is not rendered.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const BorderSide none = BorderSide(width: 0.0, style: BorderStyle.none)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "none",
                    "memberOf": "painting.BorderSide"
                },
                {
                    "name": "style",
                    "type": "painting.BorderStyle",
                    "types": [],
                    "desc": "<p>The style of this side of the border.<\/p>\n<p>To omit a side, set <a href=\"painting\/BorderSide\/style.html\">style<\/a> to <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>. This skips\npainting the border, but the border still has a <a href=\"painting\/BorderSide\/width.html\">width<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderSide",
                    "isConstant": false,
                    "href": "painting\/BorderSide\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderStyle style\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The width of this side of the border, in logical pixels. A\nzero-width border is a hairline border. To omit the border\nentirely, set the <a href=\"painting\/BorderSide\/style.html\">style<\/a> to <a href=\"painting\/BorderSide\/none-constant.html\">BorderStyle.none<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BorderSide",
                    "isConstant": false,
                    "href": "painting\/BorderSide\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double width\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BorderSide-class.html",
            "desc": "<p>A side of a border of a box.<\/p>\n<p>A <a href=\"painting\/Border-class.html\">Border<\/a> consists of four <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects: <a href=\"painting\/Border\/top.html\">Border.top<\/a>,\n<a href=\"painting\/Border\/left.html\">Border.left<\/a>, <a href=\"painting\/Border\/right.html\">Border.right<\/a>, and <a href=\"painting\/Border\/bottom.html\">Border.bottom<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample shows how <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects can be used in a <a href=\"widgets\/Container-class.html\">Container<\/a>, via\na <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> and a <a href=\"painting\/Border-class.html\">Border<\/a>, to decorate some <a href=\"widgets\/Text-class.html\">Text<\/a>. In this example,\nthe text has a thick bar above it that is light blue, and a thick bar below\nit that is a darker shade of blue.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  padding: EdgeInsets.all(8.0),\n  decoration: BoxDecoration(\n    border: Border(\n      top: BorderSide(width: 16.0, color: Colors.lightBlue.shade50),\n      bottom: BorderSide(width: 16.0, color: Colors.lightBlue.shade900),\n    ),\n  ),\n  child: Text('Flutter in the sky', textAlign: TextAlign.center),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which uses <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects to represent its sides.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which optionally takes a <a href=\"painting\/Border-class.html\">Border<\/a> object.<\/li>\n<li>\n<a href=\"rendering\/TableBorder-class.html\">TableBorder<\/a>, which is similar to <a href=\"painting\/Border-class.html\">Border<\/a> but has two more sides\n(<a href=\"rendering\/TableBorder\/horizontalInside.html\">TableBorder.horizontalInside<\/a> and <a href=\"rendering\/TableBorder\/verticalInside.html\">TableBorder.verticalInside<\/a>), both\nof which are also <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> objects.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BorderSide"
        },
        {
            "type": "",
            "name": "painting.BorderStyle",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BorderStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BorderStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BorderStyle-class.html",
            "desc": "<p>The style of line to draw for a <a href=\"painting\/BorderSide-class.html\">BorderSide<\/a> in a <a href=\"painting\/Border-class.html\">Border<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BorderStyle"
        },
        {
            "name": "painting.BoxBorder",
            "extends": [
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "BoxBorder",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/BoxBorder\/BoxBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BoxBorder();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.BoxBorder",
                    "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reversed",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxBorder\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxBorder add(ShapeBorder other, { bool reversed = false }) =&gt; null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BoxBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { @required TextDirection textDirection }) {\n  assert(textDirection != null, 'The textDirection argument to $runtimeType.getInnerPath must not be null.');\n  return Path()\n    ..addRect(dimensions.resolve(textDirection).deflateRect(rect));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BoxBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { @required TextDirection textDirection }) {\n  assert(textDirection != null, 'The textDirection argument to $runtimeType.getOuterPath must not be null.');\n  return Path()\n    ..addRect(rect);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BoxBorder",
                    "desc": "<p>Linearly interpolate between two borders.<\/p>\n<p>If a border is null, it is treated as having four <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nborders.<\/p>\n<p>This supports interpolating between <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>\nobjects. If both objects are different types but both have sides on one or\nboth of their lateral edges (the two sides that aren't the top and bottom)\nother than <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>, then the sides are interpolated by reducing\n<code>a<\/code>'s lateral edges to <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a> over the first half of the\nanimation, and then bringing <code>b<\/code>'s lateral edges <em>from<\/em> <a href=\"painting\/BorderSide\/none-constant.html\">BorderSide.none<\/a>\nover the second half of the animation.<\/p>\n<p>For a more flexible approach, consider <a href=\"painting\/BoxBorder\/lerp.html\">ShapeBorder.lerp<\/a>, which would\ninstead <a href=\"painting\/BoxBorder\/add.html\">add<\/a> the two sets of sides and interpolate them simultaneously.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BoxBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BoxBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxBorder\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BoxBorder lerp(BoxBorder a, BoxBorder b, double t) {\n  assert(t != null);\n  if ((a is Border || a == null) &amp;&amp; (b is Border || b == null))\n    return Border.lerp(a, b, t);\n  if ((a is BorderDirectional || a == null) &amp;&amp; (b is BorderDirectional || b == null))\n    return BorderDirectional.lerp(a, b, t);\n  if (b is Border &amp;&amp; a is BorderDirectional) {\n    final BoxBorder c = b;\n    b = a;\n    a = c;\n    t = 1.0 - t;\n    \/\/ fall through to next case\n  }\n  if (a is Border &amp;&amp; b is BorderDirectional) {\n    if (b.start == BorderSide.none &amp;&amp; b.end == BorderSide.none) {\n      \/\/ The fact that b is a BorderDirectional really doesn't matter, it turns out.\n      return Border(\n        top: BorderSide.lerp(a.top, b.top, t),\n        right: BorderSide.lerp(a.right, BorderSide.none, t),\n        bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n        left: BorderSide.lerp(a.left, BorderSide.none, t),\n      );\n    }\n    if (a.left == BorderSide.none &amp;&amp; a.right == BorderSide.none) {\n      \/\/ The fact that a is a Border really doesn't matter, it turns out.\n      return BorderDirectional(\n        top: BorderSide.lerp(a.top, b.top, t),\n        start: BorderSide.lerp(BorderSide.none, b.start, t),\n        end: BorderSide.lerp(BorderSide.none, b.end, t),\n        bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n      );\n    }\n    \/\/ Since we have to swap a visual border for a directional one,\n    \/\/ we speed up the horizontal sides' transitions and switch from\n    \/\/ one mode to the other at t=0.5.\n    if (t &lt; 0.5) {\n      return Border(\n        top: BorderSide.lerp(a.top, b.top, t),\n        right: BorderSide.lerp(a.right, BorderSide.none, t * 2.0),\n        bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n        left: BorderSide.lerp(a.left, BorderSide.none, t * 2.0),\n      );\n    }\n    return BorderDirectional(\n      top: BorderSide.lerp(a.top, b.top, t),\n      start: BorderSide.lerp(BorderSide.none, b.start, (t - 0.5) * 2.0),\n      end: BorderSide.lerp(BorderSide.none, b.end, (t - 0.5) * 2.0),\n      bottom: BorderSide.lerp(a.bottom, b.bottom, t),\n    );\n  }\n  throw FlutterError(\n    'BoxBorder.lerp can only interpolate Border and BorderDirectional classes.\\n'\n    'BoxBorder.lerp() was called with two objects of type ${a.runtimeType} and ${b.runtimeType}:\\n'\n    '  $a\\n'\n    '  $b\\n'\n    'However, only Border and BorderDirectional classes are supported by this method. '\n    'For a more general interpolation method, consider using ShapeBorder.lerp instead.'\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>This is an extension of the <a href=\"painting\/BoxBorder\/paint.html\">ShapeBorder.paint<\/a> method. It allows\n<a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a> borders to be applied to different <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a>s and with\ndifferent <code>borderRadius<\/code> parameters, without changing the <a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a>\nobject itself.<\/p>\n<p>The <code>shape<\/code> argument specifies the <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a> to draw the border on.<\/p>\n<p>If the <code>shape<\/code> is specifies a rectangular box shape\n(<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>), then the <code>borderRadius<\/code> argument describes the\ncorners of the rectangle.<\/p>\n<p>The <a href=\"painting\/BoxBorder\/getInnerPath.html\">getInnerPath<\/a> and <a href=\"painting\/BoxBorder\/getOuterPath.html\">getOuterPath<\/a> methods do not know about the\n<code>shape<\/code> and <code>borderRadius<\/code> arguments.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/paintBorder.html\">paintBorder<\/a>, which is used if the border is not uniform.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.BoxBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shape",
                            "type": "painting.BoxShape",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadius",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(\n  Canvas canvas,\n  Rect rect, {\n  TextDirection textDirection,\n  BoxShape shape = BoxShape.rectangle,\n  BorderRadius borderRadius,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The bottom side of this border.<\/p>\n        ",
                    "memberOf": "painting.BoxBorder",
                    "isConstant": false,
                    "href": "painting\/BoxBorder\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide get bottom;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isUniform",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether all four sides of the border are identical. Uniform borders are\ntypically more efficient to paint.<\/p>\n<p>A uniform border by definition has no text direction dependency and\ntherefore could be expressed as a <a href=\"painting\/Border-class.html\">Border<\/a>, even if it is currently a\n<a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. A uniform border can also be expressed as a\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BoxBorder",
                    "isConstant": false,
                    "href": "painting\/BoxBorder\/isUniform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isUniform;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The top side of this border.<\/p>\n<p>This getter is available on both <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a>. If\n<a href=\"painting\/BoxBorder\/isUniform.html\">isUniform<\/a> is true, then this is the same style as all the other sides.<\/p>\n        ",
                    "memberOf": "painting.BoxBorder",
                    "isConstant": false,
                    "href": "painting\/BoxBorder\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BorderSide get top;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.Border",
                "painting.BorderDirectional"
            ],
            "realImplementors": [
                "painting.Border",
                "painting.BorderDirectional"
            ],
            "cn": [],
            "href": "painting\/BoxBorder-class.html",
            "desc": "<p>Base class for box borders that can paint as rectangles, circles, or rounded\nrectangles.<\/p>\n<p>This class is extended by <a href=\"painting\/Border-class.html\">Border<\/a> and <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> to provide\nconcrete versions of four-sided borders using different conventions for\nspecifying the sides.<\/p>\n<p>The only API difference that this class introduces over <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> is\nthat its <a href=\"painting\/BoxBorder\/paint.html\">paint<\/a> method takes additional arguments.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>, another way of describing a box's border.<\/li>\n<li>\n<a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>, another way of describing a circle border.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which uses a <a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a> to describe its borders.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BoxBorder"
        },
        {
            "name": "painting.BoxDecoration",
            "extends": [
                "painting.Decoration",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/BoxDecoration\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final BoxDecoration typedOther = other;\n  return color == typedOther.color &amp;&amp;\n         image == typedOther.image &amp;&amp;\n         border == typedOther.border &amp;&amp;\n         borderRadius == typedOther.borderRadius &amp;&amp;\n         boxShadow == typedOther.boxShadow &amp;&amp;\n         gradient == typedOther.gradient &amp;&amp;\n         shape == typedOther.shape;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BoxDecoration",
                    "type": "",
                    "desc": "<p>Creates a box decoration.<\/p>\n<ul>\n<li>If <code>color<\/code> is null, this decoration does not paint a background color.<\/li>\n<li>If <code>image<\/code> is null, this decoration does not paint a background image.<\/li>\n<li>If <code>border<\/code> is null, this decoration does not paint a border.<\/li>\n<li>If <code>borderRadius<\/code> is null, this decoration uses more efficient background\npainting commands. The <code>borderRadius<\/code> argument must be null if <code>shape<\/code> is\n<a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>.<\/li>\n<li>If <code>boxShadow<\/code> is null, this decoration does not paint a shadow.<\/li>\n<li>If <code>gradient<\/code> is null, this decoration does not paint gradients.<\/li>\n<li>If <code>backgroundBlendMode<\/code> is null, this decoration paints with <a href=\"dart-ui\/BlendMode-class.html\">BlendMode.srcOver<\/a>\n<\/li>\n<\/ul>\n<p>The <code>shape<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "image",
                            "type": "painting.DecorationImage",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "border",
                            "type": "painting.BoxBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "boxShadow",
                            "type": "dart:core.List<painting.BoxShadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "painting.BoxShadow"
                            ]
                        },
                        {
                            "name": "gradient",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backgroundBlendMode",
                            "type": "dart:ui.BlendMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shape",
                            "type": "painting.BoxShape",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BoxDecoration\/BoxDecoration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BoxDecoration({\n  this.color,\n  this.image,\n  this.border,\n  this.borderRadius,\n  this.boxShadow,\n  this.gradient,\n  this.backgroundBlendMode,\n  this.shape = BoxShape.rectangle,\n}) : assert(shape != null),\n     assert(\n       backgroundBlendMode == null || color != null || gradient != null,\n       'backgroundBlendMode applies to BoxDecoration\\'s background color or '\n       'gradient, but no color or gradient was provided.'\n     );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createBoxPainter",
                    "type": "",
                    "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "onChanged",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/createBoxPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_BoxDecorationPainter createBoxPainter([ VoidCallback onChanged ]) {\n  assert(onChanged != null || image == null);\n  return _BoxDecorationPainter(this, onChanged);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "debugAssertIsValid",
                    "type": "dart:core.bool",
                    "desc": "<p>In checked mode, throws an exception if the object is not in a\nvalid configuration. Otherwise, returns true.<\/p>\n<p>This is intended to be used as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(myDecoration.debugAssertIsValid());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/debugAssertIsValid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool debugAssertIsValid() {\n  assert(shape != BoxShape.circle ||\n        borderRadius == null); \/\/ Can't have a border radius if you're a circle.\n  return super.debugAssertIsValid();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/BoxDecoration\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties\n    ..defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.whitespace\n    ..emptyBodyDescription = '&lt;no decorations specified&gt;';\n\n  properties.add(DiagnosticsProperty&lt;Color&gt;('color', color, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;DecorationImage&gt;('image', image, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;BoxBorder&gt;('border', border, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;BorderRadiusGeometry&gt;('borderRadius', borderRadius, defaultValue: null));\n  properties.add(IterableProperty&lt;BoxShadow&gt;('boxShadow', boxShadow, defaultValue: null, style: DiagnosticsTreeStyle.whitespace));\n  properties.add(DiagnosticsProperty&lt;Gradient&gt;('gradient', gradient, defaultValue: null));\n  properties.add(EnumProperty&lt;BoxShape&gt;('shape', shape, defaultValue: BoxShape.rectangle));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "hitTest",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests whether the given point, on a rectangle of a given size,\nwould be considered to hit the decoration or not. For example,\nif the decoration only draws a circle, this function might\nreturn true if the point was inside the circle and false\notherwise.<\/p>\n<p>The decoration may be sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\n<code>textDirection<\/code> argument should therefore be provided. If it is known that\nthe decoration is not affected by the text direction, then the argument\nmay be omitted or set to null.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <code>textDirection<\/code> parameter will be populated\nbased on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> (by way of the <a href=\"rendering\/RenderDecoratedBox-class.html\">RenderDecoratedBox<\/a>\nrenderer).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "position",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/hitTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(Size size, Offset position, { TextDirection textDirection }) {\n  assert(shape != null);\n  assert((Offset.zero &amp; size).contains(position));\n  switch (shape) {\n    case BoxShape.rectangle:\n      if (borderRadius != null) {\n        final RRect bounds = borderRadius.resolve(textDirection).toRRect(Offset.zero &amp; size);\n        return bounds.contains(position);\n      }\n      return true;\n    case BoxShape.circle:\n      \/\/ Circles are inscribed into our smallest dimension.\n      final Offset center = size.center(Offset.zero);\n      final double distance = (position - center).distance;\n      return distance &lt;= math.min(size.width, size.height) \/ 2.0;\n  }\n  assert(shape != null);\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BoxDecoration",
                    "desc": "<p>Linearly interpolate between two box decorations.<\/p>\n<p>Interpolates each parameter of the box decoration separately.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> is not interpolated. To interpolate the shape, consider using\na <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> with different border shapes.<\/p>\n<p>If both values are null, this returns null. Otherwise, it returns a\nnon-null value. If one of the values is null, then the result is obtained\nby applying <a href=\"painting\/BoxDecoration\/scale.html\">scale<\/a> to the other value. If neither value is null and <code>t ==\n0.0<\/code>, then <code>a<\/code> is returned unmodified; if <code>t == 1.0<\/code> then <code>b<\/code> is returned\nunmodified. Otherwise, the values are computed by interpolating the\nproperties appropriately.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BoxDecoration\/lerp.html\">Decoration.lerp<\/a>, which can interpolate between any two types of\n<a href=\"painting\/Decoration-class.html\">Decoration<\/a>s, not just <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>s.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration\/lerpFrom.html\">lerpFrom<\/a> and <a href=\"painting\/BoxDecoration\/lerpTo.html\">lerpTo<\/a>, which are used to implement <a href=\"painting\/BoxDecoration\/lerp.html\">Decoration.lerp<\/a>\nand which use <a href=\"painting\/BoxDecoration\/lerp.html\">BoxDecoration.lerp<\/a> when interpolating two\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>s or a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> to or from null.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BoxDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BoxDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BoxDecoration lerp(BoxDecoration a, BoxDecoration b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  if (t == 0.0)\n    return a;\n  if (t == 1.0)\n    return b;\n  return BoxDecoration(\n    color: Color.lerp(a.color, b.color, t),\n    image: t &lt; 0.5 ? a.image : b.image, \/\/ TODO(ianh): cross-fade the image\n    border: BoxBorder.lerp(a.border, b.border, t),\n    borderRadius: BorderRadiusGeometry.lerp(a.borderRadius, b.borderRadius, t),\n    boxShadow: BoxShadow.lerpList(a.boxShadow, b.boxShadow, t),\n    gradient: Gradient.lerp(a.gradient, b.gradient, t),\n    shape: t &lt; 0.5 ? a.shape : b.shape,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.BoxDecoration",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/BoxDecoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/BoxDecoration\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/BoxDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/BoxDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxDecoration lerpFrom(Decoration a, double t) {\n  if (a == null)\n    return scale(t);\n  if (a is BoxDecoration)\n    return BoxDecoration.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.BoxDecoration",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/BoxDecoration\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/BoxDecoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/BoxDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/BoxDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxDecoration lerpTo(Decoration b, double t) {\n  if (b == null)\n    return scale(1.0 - t);\n  if (b is BoxDecoration)\n    return BoxDecoration.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "painting.BoxDecoration",
                    "desc": "<p>Returns a new box decoration that is scaled by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxDecoration\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxDecoration scale(double factor) {\n  return BoxDecoration(\n    color: Color.lerp(null, color, factor),\n    image: image, \/\/ TODO(ianh): fade the image from transparent\n    border: BoxBorder.lerp(null, border, factor),\n    borderRadius: BorderRadiusGeometry.lerp(null, borderRadius, factor),\n    boxShadow: BoxShadow.lerpList(null, boxShadow, factor),\n    gradient: gradient?.scale(factor),\n    shape: shape,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "backgroundBlendMode",
                    "type": "dart:ui.BlendMode",
                    "types": [],
                    "desc": "<p>The blend mode applied to the <a href=\"painting\/BoxDecoration\/color.html\">color<\/a> or <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a> background of the box.<\/p>\n<p>If no <a href=\"painting\/BoxDecoration\/backgroundBlendMode.html\">backgroundBlendMode<\/a> is provided then the default painting blend\nmode is used.<\/p>\n<p>If no <a href=\"painting\/BoxDecoration\/color.html\">color<\/a> or <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a> is provided then the blend mode has no impact.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/backgroundBlendMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BlendMode backgroundBlendMode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "border",
                    "type": "painting.BoxBorder",
                    "types": [],
                    "desc": "<p>A border to draw above the background <a href=\"painting\/BoxDecoration\/color.html\">color<\/a>, <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a>, or <a href=\"painting\/BoxDecoration\/image.html\">image<\/a>.<\/p>\n<p>Follows the <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> and <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a>.<\/p>\n<p>Use <a href=\"painting\/Border-class.html\">Border<\/a> objects to describe borders that do not depend on the reading\ndirection.<\/p>\n<p>Use <a href=\"painting\/BoxBorder-class.html\">BoxBorder<\/a> objects to describe borders that should flip their left\nand right edges based on whether the text is being read left-to-right or\nright-to-left.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/border.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxBorder border\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadiusGeometry",
                    "types": [],
                    "desc": "<p>If non-null, the corners of this box are rounded by this <a href=\"painting\/BorderRadius-class.html\">BorderRadius<\/a>.<\/p>\n<p>Applies only to boxes with rectangular shapes; ignored if <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> is not\n<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> or the <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a> won't clip the children of the\ndecorated <a href=\"widgets\/Container-class.html\">Container<\/a>. If the clip is required, insert a clip widget\n(e.g., <a href=\"widgets\/ClipRect-class.html\">ClipRect<\/a>, <a href=\"widgets\/ClipRRect-class.html\">ClipRRect<\/a>, <a href=\"widgets\/ClipPath-class.html\">ClipPath<\/a>) as the child of the <a href=\"widgets\/Container-class.html\">Container<\/a>.\nBe aware that clipping may be costly in terms of performance.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/borderRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadiusGeometry borderRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "boxShadow",
                    "type": "dart:core.List<painting.BoxShadow>",
                    "types": [
                        "dart:core.List",
                        "painting.BoxShadow"
                    ],
                    "desc": "<p>A list of shadows cast by this box behind the box.<\/p>\n<p>The shadow follows the <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> of the box.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/boxShadow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;BoxShadow&gt; boxShadow\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color to fill in the background of the box.<\/p>\n<p>The color is filled into the <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> of the box (e.g., either a rectangle,\npotentially with a <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a>, or a circle).<\/p>\n<p>This is ignored if <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a> is non-null.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/color.html\">color<\/a> is drawn under the <a href=\"painting\/BoxDecoration\/image.html\">image<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "gradient",
                    "type": "painting.Gradient",
                    "types": [],
                    "desc": "<p>A gradient to use when filling the box.<\/p>\n<p>If this is specified, <a href=\"painting\/BoxDecoration\/color.html\">color<\/a> has no effect.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a> is drawn under the <a href=\"painting\/BoxDecoration\/image.html\">image<\/a>.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/gradient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Gradient gradient\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BoxDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BoxDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BoxDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BoxDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BoxDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BoxDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    color,\n    image,\n    border,\n    borderRadius,\n    boxShadow,\n    gradient,\n    shape,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "painting.DecorationImage",
                    "types": [],
                    "desc": "<p>An image to paint above the background <a href=\"painting\/BoxDecoration\/color.html\">color<\/a> or <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a>.<\/p>\n<p>If <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> is <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a> then the image is clipped to the circle's\nboundary; if <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a> is non-null then the image is clipped to the\ngiven radii.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/image.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DecorationImage image\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isComplex",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this decoration is complex enough to benefit from caching its painting.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/isComplex.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isComplex =&gt; boxShadow != null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>Returns the insets to apply when using this decoration on a box\nthat has contents, so that the contents do not overlap the edges\nof the decoration. For example, if the decoration draws a frame\naround its edge, the padding would return the distance by which\nto inset the children so as to not overlap the frame.<\/p>\n<p>This only works for decorations that have absolute sizes. If the padding\nneeded would change based on the size at which the decoration is drawn,\nthen this will return incorrect padding values.<\/p>\n<p>For example, when a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> has <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, the padding\ndoes not take into account that the circle is drawn in the center of the\nbox regardless of the ratio of the box; it does not provide the extra\npadding that is implied by changing the ratio.<\/p>\n<p>The value returned by this getter must be resolved (using\n<a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">EdgeInsetsGeometry.resolve<\/a> to obtain an absolute <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>. (For\nexample, <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> will return an <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> for\nits <a href=\"painting\/BoxDecoration\/padding.html\">padding<\/a>.)<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/padding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get padding =&gt; border?.dimensions;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.BoxShape",
                    "types": [],
                    "desc": "<p>The shape to fill the background <a href=\"painting\/BoxDecoration\/color.html\">color<\/a>, <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a>, and <a href=\"painting\/BoxDecoration\/image.html\">image<\/a> into and\nto cast as the <a href=\"painting\/BoxDecoration\/boxShadow.html\">boxShadow<\/a>.<\/p>\n<p>If this is <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a> then <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a> is ignored.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> cannot be interpolated; animating between two <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>s\nwith different <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a>s will result in a discontinuity in the rendering.\nTo interpolate between two shapes, consider using <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> and\ndifferent <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>s; in particular, <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a> instead of\n<a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a> and <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> instead of\n<a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> or the <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a> won't clip the children of the\ndecorated <a href=\"widgets\/Container-class.html\">Container<\/a>. If the clip is required, insert a clip widget\n(e.g., <a href=\"widgets\/ClipRect-class.html\">ClipRect<\/a>, <a href=\"widgets\/ClipRRect-class.html\">ClipRRect<\/a>, <a href=\"widgets\/ClipPath-class.html\">ClipPath<\/a>) as the child of the <a href=\"widgets\/Container-class.html\">Container<\/a>.\nBe aware that clipping may be costly in terms of performance.<\/p>\n        ",
                    "memberOf": "painting.BoxDecoration",
                    "isConstant": false,
                    "href": "painting\/BoxDecoration\/shape.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxShape shape\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BoxDecoration-class.html",
            "desc": "<p>An immutable description of how to paint a box.<\/p>\n<p>The <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> class provides a variety of ways to draw a box.<\/p>\n<p>The box has a <a href=\"painting\/BoxDecoration\/border.html\">border<\/a>, a body, and may cast a <a href=\"painting\/BoxDecoration\/boxShadow.html\">boxShadow<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> of the box can be a circle or a rectangle. If it is a rectangle,\nthen the <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a> property controls the roundness of the corners.<\/p>\n<p>The body of the box is painted in layers. The bottom-most layer is the\n<a href=\"painting\/BoxDecoration\/color.html\">color<\/a>, which fills the box. Above that is the <a href=\"painting\/BoxDecoration\/gradient.html\">gradient<\/a>, which also fills\nthe box. Finally there is the <a href=\"painting\/BoxDecoration\/image.html\">image<\/a>, the precise alignment of which is\ncontrolled by the <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a> class.<\/p>\n<p>The <a href=\"painting\/BoxDecoration\/border.html\">border<\/a> paints over the body; the <a href=\"painting\/BoxDecoration\/boxShadow.html\">boxShadow<\/a>, naturally, paints below it.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following example uses the <a href=\"widgets\/Container-class.html\">Container<\/a> widget from the widgets layer to\ndraw an image with a border:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: BoxDecoration(\n    color: const Color(0xff7c94b6),\n    image: DecorationImage(\n      image: ExactAssetImage('images\/flowers.jpeg'),\n      fit: BoxFit.cover,\n    ),\n    border: Border.all(\n      color: Colors.black,\n      width: 8.0,\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The <a href=\"painting\/BoxDecoration\/shape.html\">shape<\/a> or the <a href=\"painting\/BoxDecoration\/borderRadius.html\">borderRadius<\/a> won't clip the children of the\ndecorated <a href=\"widgets\/Container-class.html\">Container<\/a>. If the clip is required, insert a clip widget\n(e.g., <a href=\"widgets\/ClipRect-class.html\">ClipRect<\/a>, <a href=\"widgets\/ClipRRect-class.html\">ClipRRect<\/a>, <a href=\"widgets\/ClipPath-class.html\">ClipPath<\/a>) as the child of the <a href=\"widgets\/Container-class.html\">Container<\/a>.\nBe aware that clipping may be costly in terms of performance.\nSee also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> and <a href=\"widgets\/Container-class.html\">Container<\/a>, widgets that can be configured with\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> objects.<\/li>\n<li>\n<a href=\"widgets\/CustomPaint-class.html\">CustomPaint<\/a>, a widget that lets you draw arbitrary graphics.<\/li>\n<li>\n<a href=\"painting\/Decoration-class.html\">Decoration<\/a>, the base class which lets you define other decorations.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BoxDecoration"
        },
        {
            "type": "",
            "name": "painting.BoxFit",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxFit",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxFit\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BoxFit-class.html",
            "desc": "<p>How a box should be inscribed into another box.<\/p>\n<p>See also <a href=\"painting\/applyBoxFit.html\">applyBoxFit<\/a>, which applies the sizing semantics of these values\n(though not the alignment semantics).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BoxFit"
        },
        {
            "name": "painting.BoxPainter",
            "extends": [],
            "memberOf": "painting",
            "events": [
                {
                    "name": "onChanged",
                    "type": "dart:ui.VoidCallback",
                    "desc": "<p>Callback that is invoked if an asynchronously-loading resource used by the\ndecoration finishes loading. For example, an image. When this is invoked,\nthe <a href=\"painting\/BoxPainter\/paint.html\">paint<\/a> method should be called again.<\/p>\n<p>Resources might not start to load until after <a href=\"painting\/BoxPainter\/paint.html\">paint<\/a> has been called,\nbecause they might depend on the configuration.<\/p>\n        ",
                    "static": false,
                    "memberOf": "",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxPainter\/onChanged.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onChanged\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false,
                    "isConstant": false
                }
            ],
            "methods": [
                {
                    "name": "BoxPainter",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "onChanged",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BoxPainter\/BoxPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BoxPainter([this.onChanged]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Discard any resources being held by the object.<\/p>\n<p>The <a href=\"painting\/BoxPainter\/onChanged.html\">onChanged<\/a> callback will not be invoked after this method has been\ncalled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxPainter",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxPainter\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() { }<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the <a href=\"painting\/Decoration-class.html\">Decoration<\/a> for which this object was created on the\ngiven canvas using the given configuration.<\/p>\n<p>The <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> object passed as the third argument must, at a\nminimum, have a non-null <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>If this object caches resources for painting (e.g. <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> objects), the\ncache may be flushed when <a href=\"painting\/BoxPainter\/paint.html\">paint<\/a> is called with a new configuration. For\nthis reason, it may be more efficient to call\n<a href=\"painting\/Decoration\/createBoxPainter.html\">Decoration.createBoxPainter<\/a> for each different rectangle that is being\npainted in a particular frame.<\/p>\n<p>For example, if a decoration's owner wants to paint a particular\ndecoration once for its whole size, and once just in the bottom\nright, it might get two <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> instances, one for each.\nHowever, when its size changes, it could continue using those\nsame instances, since the previous resources would no longer be\nrelevant and thus losing them would not be an issue.<\/p>\n<p>Implementations should paint their decorations on the canvas in a\nrectangle whose top left corner is at the given <code>offset<\/code> and whose size is\ngiven by <code>configuration.size<\/code>.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <a href=\"painting\/ImageConfiguration\/textDirection.html\">ImageConfiguration.textDirection<\/a> property\nwill be populated based on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxPainter\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Offset offset, ImageConfiguration configuration);<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BoxPainter-class.html",
            "desc": "<p>A stateful class that can paint a particular <a href=\"painting\/Decoration-class.html\">Decoration<\/a>.<\/p>\n<p><a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> objects can cache resources so that they can be used\nmultiple times.<\/p>\n<p>Some resources used by <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> may load asynchronously. When this\nhappens, the <a href=\"painting\/BoxPainter\/onChanged.html\">onChanged<\/a> callback will be invoked. To stop this callback\nfrom being called after the painter has been discarded, call <a href=\"painting\/BoxPainter\/dispose.html\">dispose<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BoxPainter"
        },
        {
            "name": "painting.BoxShadow",
            "extends": [
                "dart:ui.Shadow",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/BoxShadow\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxShadow\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final BoxShadow typedOther = other;\n  return color == typedOther.color &amp;&amp;\n         offset == typedOther.offset &amp;&amp;\n         blurRadius == typedOther.blurRadius &amp;&amp;\n         spreadRadius == typedOther.spreadRadius;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "BoxShadow",
                    "type": "",
                    "desc": "<p>Creates a box shadow.<\/p>\n<p>By default, the shadow is solid black with zero <code>offset<\/code>, <code>blurRadius<\/code>,\nand <code>spreadRadius<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "blurRadius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "spreadRadius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/BoxShadow\/BoxShadow.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const BoxShadow({\n  Color color = const Color(0xFF000000),\n  Offset offset = Offset.zero,\n  double blurRadius = 0.0,\n  this.spreadRadius = 0.0,\n}) : super(color: color, offset: offset, blurRadius: blurRadius);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.BoxShadow",
                    "desc": "<p>Linearly interpolate between two box shadows.<\/p>\n<p>If either box shadow is null, this function linearly interpolates from a\na box shadow that matches the other box shadow in color but has a zero\noffset and a zero blurRadius.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.BoxShadow",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.BoxShadow",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxShadow\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static BoxShadow lerp(BoxShadow a, BoxShadow b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  return BoxShadow(\n    color: Color.lerp(a.color, b.color, t),\n    offset: Offset.lerp(a.offset, b.offset, t),\n    blurRadius: ui.lerpDouble(a.blurRadius, b.blurRadius, t),\n    spreadRadius: ui.lerpDouble(a.spreadRadius, b.spreadRadius, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpList",
                    "type": "dart:core.List<painting.BoxShadow>",
                    "desc": "<p>Linearly interpolate between two lists of box shadows.<\/p>\n<p>If the lists differ in length, excess items are lerped with null.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "dart:core.List<painting.BoxShadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "painting.BoxShadow"
                            ]
                        },
                        {
                            "name": "b",
                            "type": "dart:core.List<painting.BoxShadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "painting.BoxShadow"
                            ]
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxShadow\/lerpList.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;BoxShadow&gt; lerpList(List&lt;BoxShadow&gt; a, List&lt;BoxShadow&gt; b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  a ??= &lt;BoxShadow&gt;[];\n  b ??= &lt;BoxShadow&gt;[];\n  final List&lt;BoxShadow&gt; result = &lt;BoxShadow&gt;[];\n  final int commonLength = math.min(a.length, b.length);\n  for (int i = 0; i &lt; commonLength; i += 1)\n    result.add(BoxShadow.lerp(a[i], b[i], t));\n  for (int i = commonLength; i &lt; a.length; i += 1)\n    result.add(a[i].scale(1.0 - t));\n  for (int i = commonLength; i &lt; b.length; i += 1)\n    result.add(b[i].scale(t));\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "painting.BoxShadow"
                    ]
                },
                {
                    "name": "scale",
                    "type": "painting.BoxShadow",
                    "desc": "<p>Returns a new box shadow with its offset, blurRadius, and spreadRadius scaled by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/BoxShadow\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxShadow scale(double factor) {\n  return BoxShadow(\n    color: color,\n    offset: offset * factor,\n    blurRadius: blurRadius * factor,\n    spreadRadius: spreadRadius * factor,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toPaint",
                    "type": "dart:ui.Paint",
                    "desc": "<p>Create the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object that corresponds to this shadow description.<\/p>\n<p>The <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> and <a href=\"painting\/BoxShadow\/spreadRadius.html\">spreadRadius<\/a> are not represented in the <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> object.\nTo honor those as well, the shape should be inflated by <a href=\"painting\/BoxShadow\/spreadRadius.html\">spreadRadius<\/a> pixels\nin every direction and then translated by <a href=\"dart-ui\/Shadow\/offset.html\">offset<\/a> before being filled using\nthis <a href=\"dart-ui\/Paint-class.html\">Paint<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxShadow\/toPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPaint toPaint() {\n  final Paint result = Paint()\n    ..color = color\n    ..maskFilter = MaskFilter.blur(BlurStyle.normal, blurSigma);\n  assert(() {\n    if (debugDisableShadows)\n      result.maskFilter = null;\n    return true;\n  }());\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShadow",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxShadow\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; 'BoxShadow($color, $offset, $blurRadius, $spreadRadius)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/BoxShadow\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/BoxShadow\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.BoxShadow",
                    "isConstant": false,
                    "href": "painting\/BoxShadow\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(color, offset, blurRadius, spreadRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "spreadRadius",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The amount the box should be inflated prior to applying the blur.<\/p>\n        ",
                    "memberOf": "painting.BoxShadow",
                    "isConstant": false,
                    "href": "painting\/BoxShadow\/spreadRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double spreadRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BoxShadow-class.html",
            "desc": "<p>A shadow cast by a box.<\/p>\n<p>Inherits from <a href=\"dart-ui\/Shadow-class.html\">Shadow<\/a><\/p>\n<p><a href=\"painting\/BoxShadow-class.html\">BoxShadow<\/a> can cast non-rectangular shadows if the box is non-rectangular\n(e.g., has a border radius or a circular shape).<\/p>\n<p>This class is similar to CSS box-shadow.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"dart-ui\/Canvas\/drawShadow.html\">Canvas.drawShadow<\/a>, which is a more efficient way to draw shadows.<\/li>\n<li>\n<a href=\"dart-ui\/Shadow-class.html\">Shadow<\/a>, which is the parent class that lacks <a href=\"painting\/BoxShadow\/spreadRadius.html\">spreadRadius<\/a>.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "BoxShadow"
        },
        {
            "type": "",
            "name": "painting.BoxShape",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.BoxShape",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/BoxShape\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/BoxShape-class.html",
            "desc": "<p>The shape to use when rendering a <a href=\"painting\/Border-class.html\">Border<\/a> or <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>.<\/p>\n<p>Consider using <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses directly (with <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>),\ninstead of using <a href=\"painting\/BoxShape-class.html\">BoxShape<\/a> and <a href=\"painting\/Border-class.html\">Border<\/a>, if the shapes will need to be\ninterpolated or animated. The <a href=\"painting\/Border-class.html\">Border<\/a> class cannot interpolate between\ndifferent shapes.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "BoxShape"
        },
        {
            "name": "painting.CircleBorder",
            "extends": [
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/CircleBorder\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (runtimeType != other.runtimeType)\n    return false;\n  final CircleBorder typedOther = other;\n  return side == typedOther.side;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "CircleBorder",
                    "type": "",
                    "desc": "<p>Create a circle border.<\/p>\n<p>The <code>side<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "side",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/CircleBorder\/CircleBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CircleBorder({ this.side = BorderSide.none }) : assert(side != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/CircleBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/CircleBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/CircleBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addOval(Rect.fromCircle(\n      center: rect.center,\n      radius: math.max(0.0, rect.shortestSide \/ 2.0 - side.width),\n    ));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/CircleBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/CircleBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/CircleBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addOval(Rect.fromCircle(\n      center: rect.center,\n      radius: rect.shortestSide \/ 2.0,\n    ));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/CircleBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/CircleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a is CircleBorder)\n    return CircleBorder(side: BorderSide.lerp(a.side, side, t));\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/CircleBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/CircleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b is CircleBorder)\n    return CircleBorder(side: BorderSide.lerp(side, b.side, t));\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Rect rect, { TextDirection textDirection }) {\n  switch (side.style) {\n    case BorderStyle.none:\n      break;\n    case BorderStyle.solid:\n      canvas.drawCircle(rect.center, (rect.shortestSide - side.width) \/ 2.0, side.toPaint());\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/CircleBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder scale(double t) =&gt; CircleBorder(side: side.scale(t));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircleBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/CircleBorder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($side)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/CircleBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/CircleBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.CircleBorder",
                    "isConstant": false,
                    "href": "painting\/CircleBorder\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.all(side.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/CircleBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/CircleBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.CircleBorder",
                    "isConstant": false,
                    "href": "painting\/CircleBorder\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; side.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "side",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The style of this border.<\/p>\n        ",
                    "memberOf": "painting.CircleBorder",
                    "isConstant": false,
                    "href": "painting\/CircleBorder\/side.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide side\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/CircleBorder-class.html",
            "desc": "<p>A border that fits a circle within the available space.<\/p>\n<p>Typically used with <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> to draw a circle.<\/p>\n<p>The <a href=\"painting\/CircleBorder\/dimensions.html\">dimensions<\/a> assume that the border is being used in a square space.\nWhen applied to a rectangular space, the border paints in the center of the\nrectangle.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which, when used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, can also\ndescribe a circle.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CircleBorder"
        },
        {
            "name": "painting.CircularNotchedRectangle",
            "extends": [
                "painting.NotchedShape",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "CircularNotchedRectangle",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"painting\/CircularNotchedRectangle-class.html\">CircularNotchedRectangle<\/a>.<\/p>\n<p>The same object can be used to create multiple shapes.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircularNotchedRectangle",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/CircularNotchedRectangle\/CircularNotchedRectangle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CircularNotchedRectangle();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes a rectangle with a smooth circular notch.<\/p>\n<p><code>host<\/code> is the bounding box for the returned shape. Conceptually this is\nthe rectangle to which the notch will be applied.<\/p>\n<p><code>guest<\/code> is the bounding box of a circle that the notch accommodates. All\npoints in the circle bounded by <code>guest<\/code> will be outside of the returned\npath.<\/p>\n<p>The notch is curve that smoothly connects the host's top edge and\nthe guest circle.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.CircularNotchedRectangle",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "guest",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/CircularNotchedRectangle\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(amirh): add an example diagram here.\n@override\nPath getOuterPath(Rect host, Rect guest) {\n  if (guest == null || !host.overlaps(guest))\n    return Path()..addRect(host);\n\n  \/\/ The guest's shape is a circle bounded by the guest rectangle.\n  \/\/ So the guest's radius is half the guest width.\n  final double notchRadius = guest.width \/ 2.0;\n\n  \/\/ We build a path for the notch from 3 segments:\n  \/\/ Segment A - a Bezier curve from the host's top edge to segment B.\n  \/\/ Segment B - an arc with radius notchRadius.\n  \/\/ Segment C - a Bezier curve from segment B back to the host's top edge.\n  \/\/\n  \/\/ A detailed explanation and the derivation of the formulas below is\n  \/\/ available at: https:\/\/goo.gl\/Ufzrqn\n\n  const double s1 = 15.0;\n  const double s2 = 1.0;\n\n  final double r = notchRadius;\n  final double a = -1.0 * r - s2;\n  final double b = host.top - guest.center.dy;\n\n  final double n2 = math.sqrt(b * b * r * r * (a * a + b * b - r * r));\n  final double p2xA = ((a * r * r) - n2) \/ (a * a + b * b);\n  final double p2xB = ((a * r * r) + n2) \/ (a * a + b * b);\n  final double p2yA = math.sqrt(r * r - p2xA * p2xA);\n  final double p2yB = math.sqrt(r * r - p2xB * p2xB);\n\n  final List&lt;Offset&gt; p = List&lt;Offset&gt;(6);\n\n  \/\/ p0, p1, and p2 are the control points for segment A.\n  p[0] = Offset(a - s1, b);\n  p[1] = Offset(a, b);\n  final double cmp = b &lt; 0 ? -1.0 : 1.0;\n  p[2] = cmp * p2yA &gt; cmp * p2yB ? Offset(p2xA, p2yA) : Offset(p2xB, p2yB);\n\n  \/\/ p3, p4, and p5 are the control points for segment B, which is a mirror\n  \/\/ of segment A around the y axis.\n  p[3] = Offset(-1.0 * p[2].dx, p[2].dy);\n  p[4] = Offset(-1.0 * p[1].dx, p[1].dy);\n  p[5] = Offset(-1.0 * p[0].dx, p[0].dy);\n\n  \/\/ translate all points back to the absolute coordinate system.\n  for (int i = 0; i &lt; p.length; i += 1)\n    p[i] += guest.center;\n\n  return Path()\n    ..moveTo(host.left, host.top)\n    ..lineTo(p[0].dx, p[0].dy)\n    ..quadraticBezierTo(p[1].dx, p[1].dy, p[2].dx, p[2].dy)\n    ..arcToPoint(\n      p[3],\n      radius: Radius.circular(notchRadius),\n      clockwise: false,\n    )\n    ..quadraticBezierTo(p[4].dx, p[4].dy, p[5].dx, p[5].dy)\n    ..lineTo(host.right, host.top)\n    ..lineTo(host.right, host.bottom)\n    ..lineTo(host.left, host.bottom)\n    ..close();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/CircularNotchedRectangle-class.html",
            "desc": "<p>A rectangle with a smooth circular notch.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>, a <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> that describes a circle.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "CircularNotchedRectangle"
        },
        {
            "name": "painting.ClipContext",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "ClipContext",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "painting.ClipContext",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ClipContext\/ClipContext.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "clipPathAndPaint",
                    "type": "",
                    "desc": "<p>Clip <a href=\"painting\/ClipContext\/canvas.html\">canvas<\/a> with <a href=\"dart-ui\/Path-class.html\">Path<\/a> according to <a href=\"dart-ui\/Clip-class.html\">Clip<\/a> and then paint. <a href=\"painting\/ClipContext\/canvas.html\">canvas<\/a> is\nrestored to the pre-clip status afterwards.<\/p>\n<p><code>bounds<\/code> is the saveLayer bounds used for <a href=\"dart-ui\/Clip-class.html\">Clip.antiAliasWithSaveLayer<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ClipContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "path",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bounds",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "painter",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ClipContext\/clipPathAndPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clipPathAndPaint(Path path, Clip clipBehavior, Rect bounds, void painter()) {\n  _clipAndPaint((bool doAntiAias) =&gt; canvas.clipPath(path, doAntiAlias: doAntiAias), clipBehavior, bounds, painter);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clipRRectAndPaint",
                    "type": "",
                    "desc": "<p>Clip <a href=\"painting\/ClipContext\/canvas.html\">canvas<\/a> with <a href=\"dart-ui\/Path-class.html\">Path<\/a> according to <a href=\"dart-ui\/RRect-class.html\">RRect<\/a> and then paint. <a href=\"painting\/ClipContext\/canvas.html\">canvas<\/a> is\nrestored to the pre-clip status afterwards.<\/p>\n<p><code>bounds<\/code> is the saveLayer bounds used for <a href=\"dart-ui\/Clip-class.html\">Clip.antiAliasWithSaveLayer<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ClipContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "rrect",
                            "type": "dart:ui.RRect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bounds",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "painter",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ClipContext\/clipRRectAndPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clipRRectAndPaint(RRect rrect, Clip clipBehavior, Rect bounds, void painter()) {\n  _clipAndPaint((bool doAntiAias) =&gt; canvas.clipRRect(rrect, doAntiAlias: doAntiAias), clipBehavior, bounds, painter);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "clipRectAndPaint",
                    "type": "",
                    "desc": "<p>Clip <a href=\"painting\/ClipContext\/canvas.html\">canvas<\/a> with <a href=\"dart-ui\/Path-class.html\">Path<\/a> according to <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> and then paint. <a href=\"painting\/ClipContext\/canvas.html\">canvas<\/a> is\nrestored to the pre-clip status afterwards.<\/p>\n<p><code>bounds<\/code> is the saveLayer bounds used for <a href=\"dart-ui\/Clip-class.html\">Clip.antiAliasWithSaveLayer<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ClipContext",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipBehavior",
                            "type": "dart:ui.Clip",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bounds",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "painter",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ClipContext\/clipRectAndPaint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clipRectAndPaint(Rect rect, Clip clipBehavior, Rect bounds, void painter()) {\n  _clipAndPaint((bool doAntiAias) =&gt; canvas.clipRect(rect, doAntiAlias: doAntiAias), clipBehavior, bounds, painter);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "types": [],
                    "desc": "<p>The canvas on which to paint.<\/p>\n        ",
                    "memberOf": "painting.ClipContext",
                    "isConstant": false,
                    "href": "painting\/ClipContext\/canvas.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Canvas get canvas;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "rendering.PaintingContext"
            ],
            "realImplementors": [
                "rendering.PaintingContext"
            ],
            "cn": [],
            "href": "painting\/ClipContext-class.html",
            "desc": "<p>Clip utilities used by <a href=\"rendering\/PaintingContext-class.html\">PaintingContext<\/a> and <code>TestRecordingPaintingContext<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ClipContext"
        },
        {
            "name": "painting.ColorSwatch",
            "extends": [
                "dart:ui.Color",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ColorSwatch\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ColorSwatch",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ColorSwatch\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ColorSwatch&lt;T&gt; typedOther = other;\n  return super == other &amp;&amp; _swatch == typedOther._swatch;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ColorSwatch",
                    "type": "",
                    "desc": "<p>Creates a color that has a small table of related colors called a \"swatch\".<\/p>\n<p>The <code>primary<\/code> argument should be the 32 bit ARGB value of one of the\nvalues in the swatch, as would be passed to the <a href=\"dart-ui\/Color\/Color.html\">new Color<\/a> constructor\nfor that same color, and as is exposed by <a href=\"dart-ui\/Color\/value.html\">value<\/a>. (This is distinct from\nthe specific index of the color in the swatch.)<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ColorSwatch",
                    "sig": "",
                    "params": [
                        {
                            "name": "primary",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "_swatch",
                            "type": "dart:core.Map<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:ui.Color"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ColorSwatch\/ColorSwatch.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ColorSwatch(int primary, this._swatch) : super(primary);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator []",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns an element of the swatch table.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ColorSwatch",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ColorSwatch\/operator_get.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color operator [](T index) =&gt; _swatch[index];<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ColorSwatch",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ColorSwatch\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(primary value: ${super.toString()})';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ColorSwatch\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ColorSwatch\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ColorSwatch\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ColorSwatch\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ColorSwatch\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ColorSwatch\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.ColorSwatch",
                    "isConstant": false,
                    "href": "painting\/ColorSwatch\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(runtimeType, value, _swatch);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "material.MaterialAccentColor",
                "material.MaterialColor"
            ],
            "realImplementors": [
                "material.MaterialAccentColor",
                "material.MaterialColor"
            ],
            "cn": [],
            "href": "painting\/ColorSwatch-class.html",
            "desc": "<p>A color that has a small table of related colors called a \"swatch\".<\/p>\n<p>The table is indexed by values of type <code>T<\/code>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"material\/MaterialColor-class.html\">MaterialColor<\/a> and <a href=\"material\/MaterialAccentColor-class.html\">MaterialAccentColor<\/a>, which define material design\nprimary and accent color swatches.<\/li>\n<li>\n<a href=\"material\/Colors-class.html\">material.Colors<\/a>, which defines all of the standard material design\ncolors.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ColorSwatch"
        },
        {
            "name": "painting.ContinuousRectangleBorder",
            "extends": [
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ContinuousRectangleBorder\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (runtimeType != other.runtimeType)\n    return false;\n  final ContinuousRectangleBorder typedOther = other;\n  return side == typedOther.side\n      &amp;&amp; borderRadius == typedOther.borderRadius;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ContinuousRectangleBorder",
                    "type": "",
                    "desc": "<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "side",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ContinuousRectangleBorder\/ContinuousRectangleBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ContinuousRectangleBorder({\n  this.side = BorderSide.none,\n  this.borderRadius = BorderRadius.zero,\n}) : assert(side != null),\n     assert(borderRadius != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/ContinuousRectangleBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/ContinuousRectangleBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ContinuousRectangleBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  return _getPath(borderRadius.resolve(textDirection).toRRect(rect).deflate(side.width));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/ContinuousRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/ContinuousRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ContinuousRectangleBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  return _getPath(borderRadius.resolve(textDirection).toRRect(rect));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/ContinuousRectangleBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/ContinuousRectangleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  assert(t != null);\n  if (a is ContinuousRectangleBorder) {\n    return ContinuousRectangleBorder(\n      side: BorderSide.lerp(a.side, side, t),\n      borderRadius: BorderRadiusGeometry.lerp(a.borderRadius, borderRadius, t),\n    );\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/ContinuousRectangleBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/ContinuousRectangleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  assert(t != null);\n  if (b is ContinuousRectangleBorder) {\n    return ContinuousRectangleBorder(\n      side: BorderSide.lerp(side, b.side, t),\n      borderRadius: BorderRadiusGeometry.lerp(borderRadius, b.borderRadius, t),\n    );\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Rect rect, { TextDirection textDirection }) {\n  if (rect.isEmpty)\n    return;\n  switch (side.style) {\n    case BorderStyle.none:\n    break;\n    case BorderStyle.solid:\n      final Path path = getOuterPath(rect, textDirection: textDirection);\n      final Paint paint = side.toPaint();\n      canvas.drawPath(path, paint);\n      break;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/ContinuousRectangleBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder scale(double t) {\n  return ContinuousRectangleBorder(\n    side: side.scale(t),\n    borderRadius: borderRadius * t,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ContinuousRectangleBorder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($side, $borderRadius)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadiusGeometry",
                    "types": [],
                    "desc": "<p>The radius for each corner.<\/p>\n<p>Negative radius values are clamped to 0.0 by <a href=\"painting\/ContinuousRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> and\n<a href=\"painting\/ContinuousRectangleBorder\/getOuterPath.html\">getOuterPath<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/ContinuousRectangleBorder\/borderRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadiusGeometry borderRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/ContinuousRectangleBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/ContinuousRectangleBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/ContinuousRectangleBorder\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions =&gt; EdgeInsets.all(side.width);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ContinuousRectangleBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ContinuousRectangleBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ContinuousRectangleBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ContinuousRectangleBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ContinuousRectangleBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ContinuousRectangleBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/ContinuousRectangleBorder\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(side, borderRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "side",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The style of this border.<\/p>\n        ",
                    "memberOf": "painting.ContinuousRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/ContinuousRectangleBorder\/side.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide side\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ContinuousRectangleBorder-class.html",
            "desc": "<p>A rectangular border with smooth continuous transitions between the straight\nsides and the rounded corners.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Widget build(BuildContext context) {\n  return Material(\n    shape: ContinuousRectangleBorder(\n      borderRadius: BorderRadius.circular(28.0),\n    ),\n  );\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a> Which creates rectangles with rounded corners,\nhowever its straight sides change into a rounded corner with a circular\nradius in a step function instead of gradually like the\n<a href=\"painting\/ContinuousRectangleBorder-class.html\">ContinuousRectangleBorder<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ContinuousRectangleBorder"
        },
        {
            "name": "painting.Decoration",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "Decoration",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/Decoration\/Decoration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Decoration();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createBoxPainter",
                    "type": "painting.BoxPainter",
                    "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "onChanged",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/createBoxPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BoxPainter createBoxPainter([ VoidCallback onChanged ]);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugAssertIsValid",
                    "type": "dart:core.bool",
                    "desc": "<p>In checked mode, throws an exception if the object is not in a\nvalid configuration. Otherwise, returns true.<\/p>\n<p>This is intended to be used as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(myDecoration.debugAssertIsValid());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/debugAssertIsValid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertIsValid() =&gt; true;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hitTest",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests whether the given point, on a rectangle of a given size,\nwould be considered to hit the decoration or not. For example,\nif the decoration only draws a circle, this function might\nreturn true if the point was inside the circle and false\notherwise.<\/p>\n<p>The decoration may be sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\n<code>textDirection<\/code> argument should therefore be provided. If it is known that\nthe decoration is not affected by the text direction, then the argument\nmay be omitted or set to null.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <code>textDirection<\/code> parameter will be populated\nbased on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> (by way of the <a href=\"rendering\/RenderDecoratedBox-class.html\">RenderDecoratedBox<\/a>\nrenderer).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "position",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/hitTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hitTest(Size size, Offset position, { TextDirection textDirection }) =&gt; true;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.Decoration",
                    "desc": "<p>Linearly interpolates between two <a href=\"painting\/Decoration-class.html\">Decoration<\/a>s.<\/p>\n<p>This attempts to use <a href=\"painting\/Decoration\/lerpFrom.html\">lerpFrom<\/a> and <a href=\"painting\/Decoration\/lerpTo.html\">lerpTo<\/a> on <code>b<\/code> and <code>a<\/code>\nrespectively to find a solution. If the two values can't directly be\ninterpolated, then the interpolation is done via null (at <code>t == 0.5<\/code>).<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Decoration lerp(Decoration a, Decoration b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.lerpFrom(null, t) ?? b;\n  if (b == null)\n    return a.lerpTo(null, t) ?? a;\n  if (t == 0.0)\n    return a;\n  if (t == 1.0)\n    return b;\n  return b.lerpFrom(a, t)\n      ?? a.lerpTo(b, t)\n      ?? (t &lt; 0.5 ? (a.lerpTo(null, t * 2.0) ?? a) : (b.lerpFrom(null, (t - 0.5) * 2.0) ?? b));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.Decoration",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Decoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/Decoration\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDecoration lerpFrom(Decoration a, double t) =&gt; null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.Decoration",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/Decoration\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Decoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Decoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nDecoration lerpTo(Decoration b, double t) =&gt; null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.Decoration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/Decoration\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "isComplex",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this decoration is complex enough to benefit from caching its painting.<\/p>\n        ",
                    "memberOf": "painting.Decoration",
                    "isConstant": false,
                    "href": "painting\/Decoration\/isComplex.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isComplex =&gt; false;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>Returns the insets to apply when using this decoration on a box\nthat has contents, so that the contents do not overlap the edges\nof the decoration. For example, if the decoration draws a frame\naround its edge, the padding would return the distance by which\nto inset the children so as to not overlap the frame.<\/p>\n<p>This only works for decorations that have absolute sizes. If the padding\nneeded would change based on the size at which the decoration is drawn,\nthen this will return incorrect padding values.<\/p>\n<p>For example, when a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> has <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a>, the padding\ndoes not take into account that the circle is drawn in the center of the\nbox regardless of the ratio of the box; it does not provide the extra\npadding that is implied by changing the ratio.<\/p>\n<p>The value returned by this getter must be resolved (using\n<a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">EdgeInsetsGeometry.resolve<\/a> to obtain an absolute <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>. (For\nexample, <a href=\"painting\/BorderDirectional-class.html\">BorderDirectional<\/a> will return an <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> for\nits <a href=\"painting\/Decoration\/padding.html\">padding<\/a>.)<\/p>\n        ",
                    "memberOf": "painting.Decoration",
                    "isConstant": false,
                    "href": "painting\/Decoration\/padding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get padding =&gt; EdgeInsets.zero;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "material.UnderlineTabIndicator",
                "painting.BoxDecoration",
                "painting.FlutterLogoDecoration",
                "painting.ShapeDecoration",
                "widgets.DecorationTween"
            ],
            "realImplementors": [
                "material.UnderlineTabIndicator",
                "painting.BoxDecoration",
                "painting.FlutterLogoDecoration",
                "painting.ShapeDecoration",
                "widgets.DecorationTween"
            ],
            "cn": [],
            "href": "painting\/Decoration-class.html",
            "desc": "<p>A description of a box decoration (a decoration applied to a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>).<\/p>\n<p>This class presents the abstract interface for all decorations.\nSee <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> for a concrete example.<\/p>\n<p>To actually paint a <a href=\"painting\/Decoration-class.html\">Decoration<\/a>, use the <a href=\"painting\/Decoration\/createBoxPainter.html\">createBoxPainter<\/a>\nmethod to obtain a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a>. <a href=\"painting\/Decoration-class.html\">Decoration<\/a> objects can be\nshared between boxes; <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> objects can cache resources to\nmake painting on a particular surface faster.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Decoration"
        },
        {
            "name": "painting.DecorationImage",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/DecorationImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/DecorationImage\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final DecorationImage typedOther = other;\n  return image == typedOther.image\n      &amp;&amp; colorFilter == typedOther.colorFilter\n      &amp;&amp; fit == typedOther.fit\n      &amp;&amp; alignment == typedOther.alignment\n      &amp;&amp; centerSlice == typedOther.centerSlice\n      &amp;&amp; repeat == typedOther.repeat\n      &amp;&amp; matchTextDirection == typedOther.matchTextDirection;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "DecorationImage",
                    "type": "",
                    "desc": "<p>Creates an image to show in a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>.<\/p>\n<p>The <code>image<\/code>, <code>alignment<\/code>, <code>repeat<\/code>, and <code>matchTextDirection<\/code> arguments\nmust not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "painting.ImageProvider",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colorFilter",
                            "type": "dart:ui.ColorFilter",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fit",
                            "type": "painting.BoxFit",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "alignment",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "centerSlice",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "repeat",
                            "type": "painting.ImageRepeat",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "matchTextDirection",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/DecorationImage\/DecorationImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DecorationImage({\n  @required this.image,\n  this.colorFilter,\n  this.fit,\n  this.alignment = Alignment.center,\n  this.centerSlice,\n  this.repeat = ImageRepeat.noRepeat,\n  this.matchTextDirection = false,\n}) : assert(image != null),\n     assert(alignment != null),\n     assert(repeat != null),\n     assert(matchTextDirection != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createPainter",
                    "type": "painting.DecorationImagePainter",
                    "desc": "<p>Creates a <a href=\"painting\/DecorationImagePainter-class.html\">DecorationImagePainter<\/a> for this <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>.<\/p>\n<p>The <code>onChanged<\/code> argument must not be null. It will be called whenever the\nimage needs to be repainted, e.g. because it is loading incrementally or\nbecause it is animated.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "onChanged",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/DecorationImage\/createPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DecorationImagePainter createPainter(VoidCallback onChanged) {\n  assert(onChanged != null);\n  return DecorationImagePainter._(this, onChanged);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImage",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/DecorationImage\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; properties = &lt;String&gt;[];\n  properties.add('$image');\n  if (colorFilter != null)\n    properties.add('$colorFilter');\n  if (fit != null &amp;&amp;\n      !(fit == BoxFit.fill &amp;&amp; centerSlice != null) &amp;&amp;\n      !(fit == BoxFit.scaleDown &amp;&amp; centerSlice == null))\n    properties.add('$fit');\n  properties.add('$alignment');\n  if (centerSlice != null)\n    properties.add('centerSlice: $centerSlice');\n  if (repeat != ImageRepeat.noRepeat)\n    properties.add('$repeat');\n  if (matchTextDirection)\n    properties.add('match text direction');\n  return '$runtimeType(${properties.join(\", \")})';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "alignment",
                    "type": "painting.AlignmentGeometry",
                    "types": [],
                    "desc": "<p>How to align the image within its bounds.<\/p>\n<p>The alignment aligns the given position in the image to the given position\nin the layout bounds. For example, an <a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (-1.0,\n-1.0) aligns the image to the top-left corner of its layout bounds, while a\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a> alignment of (1.0, 1.0) aligns the bottom right of the\nimage with the bottom right corner of its layout bounds. Similarly, an\nalignment of (0.0, 1.0) aligns the bottom middle of the image with the\nmiddle of the bottom edge of its layout bounds.<\/p>\n<p>To display a subpart of an image, consider using a <a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a> and\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>.<\/p>\n<p>If the <a href=\"painting\/DecorationImage\/alignment.html\">alignment<\/a> is <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>-dependent (i.e. if it is a\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>), then a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> must be available\nwhen the image is painted.<\/p>\n<p>Defaults to <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, a class with convenient constants typically used to\nspecify an <a href=\"painting\/AlignmentGeometry-class.html\">AlignmentGeometry<\/a>.<\/li>\n<li>\n<a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, like <a href=\"painting\/Alignment-class.html\">Alignment<\/a> for specifying alignments\nrelative to text direction.<\/li>\n<\/ul>",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/alignment.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry alignment\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "centerSlice",
                    "type": "dart:ui.Rect",
                    "types": [],
                    "desc": "<p>The center slice for a nine-patch image.<\/p>\n<p>The region of the image inside the center slice will be stretched both\nhorizontally and vertically to fit the image into its destination. The\nregion of the image above and below the center slice will be stretched\nonly horizontally and the region of the image to the left and right of\nthe center slice will be stretched only vertically.<\/p>\n<p>The stretching will be applied in order to make the image fit into the box\nspecified by <a href=\"painting\/DecorationImage\/fit.html\">fit<\/a>. When <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> is not null, <a href=\"painting\/DecorationImage\/fit.html\">fit<\/a> defaults to\n<a href=\"painting\/BoxFit-class.html\">BoxFit.fill<\/a>, which distorts the destination image size relative to the\nimage's original aspect ratio. Values of <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> which do not distort the\ndestination image size will result in <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> having no effect\n(since the nine regions of the image will be rendered with the same\nscaling, as if it wasn't specified).<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/centerSlice.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Rect centerSlice\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "colorFilter",
                    "type": "dart:ui.ColorFilter",
                    "types": [],
                    "desc": "<p>A color filter to apply to the image before painting it.<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/colorFilter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ColorFilter colorFilter\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fit",
                    "type": "painting.BoxFit",
                    "types": [],
                    "desc": "<p>How the image should be inscribed into the box.<\/p>\n<p>The default is <a href=\"painting\/BoxFit-class.html\">BoxFit.scaleDown<\/a> if <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> is null, and\n<a href=\"painting\/BoxFit-class.html\">BoxFit.fill<\/a> if <a href=\"painting\/DecorationImage\/centerSlice.html\">centerSlice<\/a> is not null.<\/p>\n<p>See the discussion at <a href=\"painting\/paintImage.html\">paintImage<\/a> for more details.<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/fit.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BoxFit fit\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/DecorationImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/DecorationImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(image, colorFilter, fit, alignment, centerSlice, repeat, matchTextDirection);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "painting.ImageProvider",
                    "types": [],
                    "desc": "<p>The image to be painted into the decoration.<\/p>\n<p>Typically this will be an <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a> (for an image shipped with the\napplication) or a <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a> (for an image obtained from the network).<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/image.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageProvider image\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "matchTextDirection",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether to paint the image in the direction of the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>If this is true, then in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> contexts, the image will be\ndrawn with its origin in the top left (the \"normal\" painting direction for\nimages); and in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> contexts, the image will be drawn with\na scaling factor of -1 in the horizontal direction so that the origin is\nin the top right.<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/matchTextDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool matchTextDirection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "repeat",
                    "type": "painting.ImageRepeat",
                    "types": [],
                    "desc": "<p>How to paint any portions of the box that would not otherwise be covered\nby the image.<\/p>\n        ",
                    "memberOf": "painting.DecorationImage",
                    "isConstant": false,
                    "href": "painting\/DecorationImage\/repeat.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ImageRepeat repeat\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/DecorationImage-class.html",
            "desc": "<p>An image for a box decoration.<\/p>\n<p>The image is painted using <a href=\"painting\/paintImage.html\">paintImage<\/a>, which describes the meanings of the\nvarious fields on this class in more detail.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DecorationImage"
        },
        {
            "name": "painting.DecorationImagePainter",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "dispose",
                    "type": "",
                    "desc": "<p>Releases the resources used by this painter.<\/p>\n<p>This should be called whenever the painter is no longer needed.<\/p>\n<p>After this method has been called, the object is no longer usable.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImagePainter",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/DecorationImagePainter\/dispose.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@mustCallSuper\nvoid dispose() {\n  _imageStream?.removeListener(_imageListener);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Draw the image onto the given canvas.<\/p>\n<p>The image is drawn at the position and size given by the <code>rect<\/code> argument.<\/p>\n<p>The image is clipped to the given <code>clipPath<\/code>, if any.<\/p>\n<p>The <code>configuration<\/code> object is used to resolve the image (e.g. to pick\nresolution-specific assets), and to implement the\n<a href=\"painting\/DecorationImage\/matchTextDirection.html\">DecorationImage.matchTextDirection<\/a> feature.<\/p>\n<p>If the image needs to be painted again, e.g. because it is animated or\nbecause it had not yet been loaded the first time this method was called,\nthen the <code>onChanged<\/code> callback passed to <a href=\"painting\/DecorationImage\/createPainter.html\">DecorationImage.createPainter<\/a>\nwill be called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImagePainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "clipPath",
                            "type": "dart:ui.Path",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/DecorationImagePainter\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Rect rect, Path clipPath, ImageConfiguration configuration) {\n  assert(canvas != null);\n  assert(rect != null);\n  assert(configuration != null);\n\n  bool flipHorizontally = false;\n  if (_details.matchTextDirection) {\n    assert(() {\n      \/\/ We check this first so that the assert will fire immediately, not just\n      \/\/ when the image is ready.\n      if (configuration.textDirection == null) {\n        throw FlutterError(\n          'ImageDecoration.matchTextDirection can only be used when a TextDirection is available.\\n'\n          'When DecorationImagePainter.paint() was called, there was no text direction provided '\n          'in the ImageConfiguration object to match.\\n'\n          'The DecorationImage was:\\n'\n          '  $_details\\n'\n          'The ImageConfiguration was:\\n'\n          '  $configuration'\n        );\n      }\n      return true;\n    }());\n    if (configuration.textDirection == TextDirection.rtl)\n      flipHorizontally = true;\n  }\n\n  final ImageStream newImageStream = _details.image.resolve(configuration);\n  if (newImageStream.key != _imageStream?.key) {\n    _imageStream?.removeListener(_imageListener);\n    _imageStream = newImageStream;\n    _imageStream.addListener(_imageListener);\n  }\n  if (_image == null)\n    return;\n\n  if (clipPath != null) {\n    canvas.save();\n    canvas.clipPath(clipPath);\n  }\n\n  paintImage(\n    canvas: canvas,\n    rect: rect,\n    image: _image.image,\n    scale: _image.scale,\n    colorFilter: _details.colorFilter,\n    fit: _details.fit,\n    alignment: _details.alignment.resolve(configuration.textDirection),\n    centerSlice: _details.centerSlice,\n    repeat: _details.repeat,\n    flipHorizontally: flipHorizontally,\n    filterQuality: FilterQuality.low,\n  );\n\n  if (clipPath != null)\n    canvas.restore();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DecorationImagePainter",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/DecorationImagePainter\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType(stream: $_imageStream, image: $_image) for $_details';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/DecorationImagePainter-class.html",
            "desc": "<p>The painter for a <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>.<\/p>\n<p>To obtain a painter, call <a href=\"painting\/DecorationImage\/createPainter.html\">DecorationImage.createPainter<\/a>.<\/p>\n<p>To paint, call <a href=\"painting\/DecorationImagePainter\/paint.html\">paint<\/a>. The <code>onChanged<\/code> callback passed to\n<a href=\"painting\/DecorationImage\/createPainter.html\">DecorationImage.createPainter<\/a> will be called if the image needs to paint\nagain (e.g. because it is animated or because it had not yet loaded the\nfirst time the <a href=\"painting\/DecorationImagePainter\/paint.html\">paint<\/a> method was called).<\/p>\n<p>This object should be disposed using the <a href=\"painting\/DecorationImagePainter\/dispose.html\">dispose<\/a> method when it is no\nlonger needed.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DecorationImagePainter"
        },
        {
            "name": "painting.DefaultShaderWarmUp",
            "extends": [
                "painting.ShaderWarmUp",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "DefaultShaderWarmUp",
                    "type": "",
                    "desc": "<p>Allow <a href=\"painting\/DefaultShaderWarmUp-class.html\">DefaultShaderWarmUp<\/a> to be used as the default value of parameters.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DefaultShaderWarmUp",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/DefaultShaderWarmUp\/DefaultShaderWarmUp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const DefaultShaderWarmUp();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "warmUpOnCanvas",
                    "type": "dart:async.Future",
                    "desc": "<p>Trigger common draw operations on a canvas to warm up GPU shader\ncompilation cache.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.DefaultShaderWarmUp",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/DefaultShaderWarmUp\/warmUpOnCanvas.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;void&gt; warmUpOnCanvas(ui.Canvas canvas) async {\n  final ui.RRect rrect = ui.RRect.fromLTRBXY(20.0, 20.0, 60.0, 60.0, 10.0, 10.0);\n  final ui.Path rrectPath = ui.Path()..addRRect(rrect);\n\n  final ui.Path circlePath = ui.Path()..addOval(\n      ui.Rect.fromCircle(center: const ui.Offset(40.0, 40.0), radius: 20.0)\n  );\n\n  \/\/ The following path is based on\n  \/\/ https:\/\/skia.org\/user\/api\/SkCanvas_Reference#SkCanvas_drawPath\n  final ui.Path path = ui.Path();\n  path.moveTo(20.0, 60.0);\n  path.quadraticBezierTo(60.0, 20.0, 60.0, 60.0);\n  path.close();\n  path.moveTo(60.0, 20.0);\n  path.quadraticBezierTo(60.0, 60.0, 20.0, 60.0);\n\n  final ui.Path convexPath = ui.Path();\n  convexPath.moveTo(20.0, 30.0);\n  convexPath.lineTo(40.0, 20.0);\n  convexPath.lineTo(60.0, 30.0);\n  convexPath.lineTo(60.0, 60.0);\n  convexPath.lineTo(20.0, 60.0);\n  convexPath.close();\n\n  \/\/ Skia uses different shaders based on the kinds of paths being drawn and\n  \/\/ the associated paint configurations. According to our experience and\n  \/\/ tracing, drawing the following paths\/paints generates various of\n  \/\/ shaders that are commonly used.\n  final List&lt;ui.Path&gt; paths = &lt;ui.Path&gt;[rrectPath, circlePath, path, convexPath];\n\n  final List&lt;ui.Paint&gt; paints = &lt;ui.Paint&gt;[\n    ui.Paint()\n      ..isAntiAlias = true\n      ..style = ui.PaintingStyle.fill,\n    ui.Paint()\n      ..isAntiAlias = false\n      ..style = ui.PaintingStyle.fill,\n    ui.Paint()\n      ..isAntiAlias = true\n      ..style = ui.PaintingStyle.stroke\n      ..strokeWidth = 10,\n    ui.Paint()\n      ..isAntiAlias = true\n      ..style = ui.PaintingStyle.stroke\n      ..strokeWidth = 0.1,  \/\/ hairline\n  ];\n\n  \/\/ Warm up path stroke and fill shaders.\n  for (int i = 0; i &lt; paths.length; i += 1) {\n    canvas.save();\n    for (ui.Paint paint in paints) {\n      canvas.drawPath(paths[i], paint);\n      canvas.translate(80.0, 0.0);\n    }\n    canvas.restore();\n    canvas.translate(0.0, 80.0);\n  }\n\n  \/\/ Warm up shadow shaders.\n  const ui.Color black = ui.Color(0xFF000000);\n  canvas.save();\n  canvas.drawShadow(rrectPath, black, 10.0, true);\n  canvas.translate(80.0, 0.0);\n  canvas.drawShadow(rrectPath, black, 10.0, false);\n  canvas.restore();\n\n  \/\/ Warm up text shaders.\n  canvas.translate(0.0, 80.0);\n  final ui.ParagraphBuilder paragraphBuilder = ui.ParagraphBuilder(\n    ui.ParagraphStyle(textDirection: ui.TextDirection.ltr),\n  )..pushStyle(ui.TextStyle(color: black))..addText('_');\n  final ui.Paragraph paragraph = paragraphBuilder.build()\n    ..layout(const ui.ParagraphConstraints(width: 60.0));\n  canvas.drawParagraph(paragraph, const ui.Offset(20.0, 20.0));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/DefaultShaderWarmUp-class.html",
            "desc": "<p>Default way of warming up Skia shader compilations.<\/p>\n<p>The draw operations being warmed up here are decided according to Flutter\nengineers' observation and experience based on the apps and the performance\nissues seen so far.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "DefaultShaderWarmUp"
        },
        {
            "name": "painting.EdgeInsets",
            "extends": [
                "painting.EdgeInsetsGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets operator %(double other) {\n  return EdgeInsets.fromLTRB(\n    left % other,\n    top % other,\n    right % other,\n    bottom % other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Scales the <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets operator *(double other) {\n  return EdgeInsets.fromLTRB(\n    left * other,\n    top * other,\n    right * other,\n    bottom * other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsets",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets operator +(EdgeInsets other) {\n  return EdgeInsets.fromLTRB(\n    left + other.left,\n    top + other.top,\n    right + other.right,\n    bottom + other.bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsets",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets operator -(EdgeInsets other) {\n  return EdgeInsets.fromLTRB(\n    left - other.left,\n    top - other.top,\n    right - other.right,\n    bottom - other.bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Divides the <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets operator \/(double other) {\n  return EdgeInsets.fromLTRB(\n    left \/ other,\n    top \/ other,\n    right \/ other,\n    bottom \/ other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsets\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsets\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry add(EdgeInsetsGeometry other) {\n  if (other is EdgeInsets)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsets.all",
                    "type": "",
                    "desc": "<p>Creates insets where all the offsets are <code>value<\/code>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTypical eight-pixel margin on all sides:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.all(8.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsets\/EdgeInsets.all.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsets.all(double value)\n  : left = value,\n    top = value,\n    right = value,\n    bottom = value;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Creates a copy of this EdgeInsets but with the given fields replaced\nwith the new values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets copyWith({\n  double left,\n  double top,\n  double right,\n  double bottom,\n}) {\n  return EdgeInsets.only(\n    left: left ?? this.left,\n    top: top ?? this.top,\n    right: right ?? this.right,\n    bottom: bottom ?? this.bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "deflateRect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rect that is smaller than the given rect in each direction by\nthe amount of inset in each direction. Specifically, the left edge of the\nrect is moved right by <a href=\"painting\/EdgeInsets\/left.html\">left<\/a>, the top edge of the rect is moved down by\n<a href=\"painting\/EdgeInsets\/top.html\">top<\/a>, the right edge of the rect is moved left by <a href=\"painting\/EdgeInsets\/right.html\">right<\/a>, and the\nbottom edge of the rect is moved up by <a href=\"painting\/EdgeInsets\/bottom.html\">bottom<\/a>.<\/p>\n<p>If the argument's <a href=\"dart-ui\/Rect\/size.html\">Rect.size<\/a> is smaller than <a href=\"painting\/EdgeInsetsGeometry\/collapsedSize.html\">collapsedSize<\/a>, then the\nresulting rectangle will have negative dimensions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/deflateSize.html\">deflateSize<\/a>, to deflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/li>\n<li>\n<a href=\"painting\/EdgeInsets\/inflateRect.html\">inflateRect<\/a>, to inflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than deflating it.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/deflateRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect deflateRect(Rect rect) {\n  return Rect.fromLTRB(rect.left + left, rect.top + top, rect.right - right, rect.bottom - bottom);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsets.fromLTRB",
                    "type": "",
                    "desc": "<p>Creates insets from offsets from the left, top, right, and bottom.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsets\/EdgeInsets.fromLTRB.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsets.fromLTRB(this.left, this.top, this.right, this.bottom);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsets.fromWindowPadding",
                    "type": "",
                    "desc": "<p>Creates insets that match the given window padding.<\/p>\n<p>If you need the current system padding or view insets in the context of a\nwidget, consider using <a href=\"widgets\/MediaQuery\/of.html\">MediaQuery.of<\/a> to obtain these values rather than\nusing the value from <a href=\"dart-ui\/window.html\">dart:ui.window<\/a>, so that you get notified of\nchanges.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "padding",
                            "type": "dart:ui.WindowPadding",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "devicePixelRatio",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsets\/EdgeInsets.fromWindowPadding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets.fromWindowPadding(ui.WindowPadding padding, double devicePixelRatio)\n  : left = padding.left \/ devicePixelRatio,\n    top = padding.top \/ devicePixelRatio,\n    right = padding.right \/ devicePixelRatio,\n    bottom = padding.bottom \/ devicePixelRatio;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inflateRect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a new rect that is bigger than the given rect in each direction by\nthe amount of inset in each direction. Specifically, the left edge of the\nrect is moved left by <a href=\"painting\/EdgeInsets\/left.html\">left<\/a>, the top edge of the rect is moved up by\n<a href=\"painting\/EdgeInsets\/top.html\">top<\/a>, the right edge of the rect is moved right by <a href=\"painting\/EdgeInsets\/right.html\">right<\/a>, and the\nbottom edge of the rect is moved down by <a href=\"painting\/EdgeInsets\/bottom.html\">bottom<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/inflateSize.html\">inflateSize<\/a>, to inflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/li>\n<li>\n<a href=\"painting\/EdgeInsets\/deflateRect.html\">deflateRect<\/a>, to deflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than inflating it.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/inflateRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Rect inflateRect(Rect rect) {\n  return Rect.fromLTRB(rect.left - left, rect.top - top, rect.right + right, rect.bottom + bottom);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/EdgeInsets\/zero-constant.html\">EdgeInsets.zero<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.EdgeInsets",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.EdgeInsets",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EdgeInsets lerp(EdgeInsets a, EdgeInsets b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return EdgeInsets.fromLTRB(\n    ui.lerpDouble(a.left, b.left, t),\n    ui.lerpDouble(a.top, b.top, t),\n    ui.lerpDouble(a.right, b.right, t),\n    ui.lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsets.only",
                    "type": "",
                    "desc": "<p>Creates insets with only the given values non-zero.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nLeft margin indent of 40 pixels:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.only(left: 40.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "left",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "right",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsets\/EdgeInsets.only.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsets.only({\n  this.left = 0.0,\n  this.top = 0.0,\n  this.right = 0.0,\n  this.bottom = 0.0,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Convert this instance into an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, which uses literal coordinates\n(i.e. the <code>left<\/code> coordinate being explicitly a distance from the left, and\nthe <code>right<\/code> coordinate being explicitly a distance from the right).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets resolve(TextDirection direction) =&gt; this;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "subtract",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsets\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsets\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/EdgeInsets\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/subtract.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry subtract(EdgeInsetsGeometry other) {\n  if (other is EdgeInsets)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsets.symmetric",
                    "type": "",
                    "desc": "<p>Creates insets with symmetrical vertical and horizontal offsets.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nEight pixel margin above and below, no horizontal margins:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.symmetric(vertical: 8.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "vertical",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "horizontal",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsets\/EdgeInsets.symmetric.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsets.symmetric({\n  double vertical = 0.0,\n  double horizontal = 0.0,\n}) : left = horizontal,\n     top = vertical,\n     right = horizontal,\n     bottom = vertical;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Returns the <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> object with each dimension negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets operator -() {\n  return EdgeInsets.fromLTRB(\n    -left,\n    -top,\n    -right,\n    -bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Integer divides the <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsets",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsets\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets operator ~\/(double other) {\n  return EdgeInsets.fromLTRB(\n    (left ~\/ other).toDouble(),\n    (top ~\/ other).toDouble(),\n    (right ~\/ other).toDouble(),\n    (bottom ~\/ other).toDouble(),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the bottom.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomLeft",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>An Offset describing the vector from the bottom left of a rectangle to the\nbottom left of that rectangle inset by this object.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/bottomLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomLeft =&gt; Offset(left, -bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bottomRight",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>An Offset describing the vector from the bottom right of a rectangle to the\nbottom right of that rectangle inset by this object.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/bottomRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get bottomRight =&gt; Offset(-right, -bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flipped",
                    "type": "painting.EdgeInsets",
                    "types": [],
                    "desc": "<p>An <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> with top and bottom as well as left and right flipped.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/flipped.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets get flipped =&gt; EdgeInsets.fromLTRB(right, bottom, left, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the left.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/left.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double left\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the right.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/right.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double right\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the top.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topLeft",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>An Offset describing the vector from the top left of a rectangle to the\ntop left of that rectangle inset by this object.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/topLeft.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topLeft =&gt; Offset(left, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "topRight",
                    "type": "dart:ui.Offset",
                    "types": [],
                    "desc": "<p>An Offset describing the vector from the top right of a rectangle to the\ntop right of that rectangle inset by this object.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsets",
                    "isConstant": false,
                    "href": "painting\/EdgeInsets\/topRight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Offset get topRight =&gt; Offset(-right, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/EdgeInsets\/zero-constant.html",
                    "desc": "<p>An <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> with zero offsets in each direction.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const EdgeInsets zero = EdgeInsets.only()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "painting.EdgeInsets"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.EdgeInsetsTween"
            ],
            "realImplementors": [
                "widgets.EdgeInsetsTween"
            ],
            "cn": [],
            "href": "painting\/EdgeInsets-class.html",
            "desc": "<p>An immutable set of offsets in each of the four cardinal directions.<\/p>\n<p>Typically used for an offset from each of the four sides of a box. For\nexample, the padding inside a box can be represented using this class.<\/p>\n<p>The <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> class specifies offsets in terms of visual edges, left,\ntop, right, and bottom. These values are not affected by the\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. To support both left-to-right and right-to-left layouts,\nconsider using <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which is expressed in terms of\n<em>start<\/em>, top, <em>end<\/em>, and bottom, where start and end are resolved in terms\nof a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> (typically obtained from the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>).<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere are some examples of how to create <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> instances:\n<p>Typical eight-pixel margin on all sides:\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.all(8.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nEight pixel margin above and below, no horizontal margins:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.symmetric(vertical: 8.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nLeft margin indent of 40 pixels:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsets.only(left: 40.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Padding-class.html\">Padding<\/a>, a widget that accepts <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> to describe its margins.<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which (for properties and arguments that accept\nthe type <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a>) allows the horizontal insets to be\nspecified in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>-aware manner.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "EdgeInsets"
        },
        {
            "name": "painting.EdgeInsetsDirectional",
            "extends": [
                "painting.EdgeInsetsGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator %(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start % other,\n    top % other,\n    end % other,\n    bottom % other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Scales the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator *(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start * other,\n    top * other,\n    end * other,\n    bottom * other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsDirectional operator +(EdgeInsetsDirectional other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start + other.start,\n    top + other.top,\n    end + other.end,\n    bottom + other.bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsDirectional operator -(EdgeInsetsDirectional other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start - other.start,\n    top - other.top,\n    end - other.end,\n    bottom - other.bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Divides the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator \/(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    start \/ other,\n    top \/ other,\n    end \/ other,\n    bottom \/ other,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsDirectional\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry add(EdgeInsetsGeometry other) {\n  if (other is EdgeInsetsDirectional)\n    return this + other;\n  return super.add(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsetsDirectional.fromSTEB",
                    "type": "",
                    "desc": "<p>Creates insets from offsets from the start, top, end, and bottom.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsetsDirectional\/EdgeInsetsDirectional.fromSTEB.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsetsDirectional.fromSTEB(this.start, this.top, this.end, this.bottom);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/EdgeInsetsDirectional\/zero-constant.html\">EdgeInsetsDirectional.zero<\/a>.<\/p>\n<p>To interpolate between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects of arbitrary type\n(either <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), consider the\n<a href=\"painting\/EdgeInsetsDirectional\/lerp.html\">EdgeInsetsGeometry.lerp<\/a> static method.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.EdgeInsetsDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.EdgeInsetsDirectional",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EdgeInsetsDirectional lerp(EdgeInsetsDirectional a, EdgeInsetsDirectional b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  return EdgeInsetsDirectional.fromSTEB(\n    ui.lerpDouble(a.start, b.start, t),\n    ui.lerpDouble(a.top, b.top, t),\n    ui.lerpDouble(a.end, b.end, t),\n    ui.lerpDouble(a.bottom, b.bottom, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsetsDirectional.only",
                    "type": "",
                    "desc": "<p>Creates insets with only the given values non-zero.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nA margin indent of 40 pixels on the leading side:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const EdgeInsetsDirectional.only(start: 40.0)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "start",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "top",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bottom",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsetsDirectional\/EdgeInsetsDirectional.only.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsetsDirectional.only({\n  this.start = 0.0,\n  this.top = 0.0,\n  this.end = 0.0,\n  this.bottom = 0.0,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Convert this instance into an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, which uses literal coordinates\n(i.e. the <code>left<\/code> coordinate being explicitly a distance from the left, and\nthe <code>right<\/code> coordinate being explicitly a distance from the right).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets resolve(TextDirection direction) {\n  assert(direction != null);\n  switch (direction) {\n    case TextDirection.rtl:\n      return EdgeInsets.fromLTRB(end, top, start, bottom);\n    case TextDirection.ltr:\n      return EdgeInsets.fromLTRB(start, top, end, bottom);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "subtract",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsDirectional\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/EdgeInsetsDirectional\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/subtract.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry subtract(EdgeInsetsGeometry other) {\n  if (other is EdgeInsetsDirectional)\n    return this - other;\n  return super.subtract(other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Returns the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object with each dimension negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator -() {\n  return EdgeInsetsDirectional.fromSTEB(\n    -start,\n    -top,\n    -end,\n    -bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.EdgeInsetsDirectional",
                    "desc": "<p>Integer divides the <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> object in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsDirectional\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional operator ~\/(double other) {\n  return EdgeInsetsDirectional.fromSTEB(\n    (start ~\/ other).toDouble(),\n    (top ~\/ other).toDouble(),\n    (end ~\/ other).toDouble(),\n    (bottom ~\/ other).toDouble(),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bottom",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the bottom.<\/p>\n<p>This value is passed through to <a href=\"painting\/EdgeInsetsDirectional\/bottom.html\">EdgeInsets.bottom<\/a> unmodified by the\n<a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsDirectional\/bottom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double bottom\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the end side, the side on which the user ends reading\ntext.<\/p>\n<p>This value is normalized into an <a href=\"painting\/EdgeInsets\/left.html\">EdgeInsets.left<\/a> or <a href=\"painting\/EdgeInsets\/right.html\">EdgeInsets.right<\/a>\nvalue by the <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsDirectional\/end.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double end\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flipped",
                    "type": "painting.EdgeInsetsDirectional",
                    "types": [],
                    "desc": "<p>An <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> with <a href=\"painting\/EdgeInsetsDirectional\/top.html\">top<\/a> and <a href=\"painting\/EdgeInsetsDirectional\/bottom.html\">bottom<\/a> as well as <a href=\"painting\/EdgeInsetsDirectional\/start.html\">start<\/a> and <a href=\"painting\/EdgeInsetsDirectional\/end.html\">end<\/a> flipped.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsDirectional\/flipped.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsDirectional get flipped =&gt; EdgeInsetsDirectional.fromSTEB(end, bottom, start, top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNonNegative",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether every dimension is non-negative.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsDirectional\/isNonNegative.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isNonNegative =&gt; start &gt;= 0.0 &amp;&amp; top &gt;= 0.0 &amp;&amp; end &gt;= 0.0 &amp;&amp; bottom &gt;= 0.0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the start side, the side from which the user will start\nreading text.<\/p>\n<p>This value is normalized into an <a href=\"painting\/EdgeInsets\/left.html\">EdgeInsets.left<\/a> or <a href=\"painting\/EdgeInsets\/right.html\">EdgeInsets.right<\/a>\nvalue by the <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsDirectional\/start.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double start\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The offset from the top.<\/p>\n<p>This value is passed through to <a href=\"painting\/EdgeInsetsDirectional\/top.html\">EdgeInsets.top<\/a> unmodified by the\n<a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a> method.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsDirectional",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsDirectional\/top.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double top\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/EdgeInsetsDirectional\/zero-constant.html",
                    "desc": "<p>An <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> with zero offsets in each direction.<\/p>\n<p>Consider using <a href=\"painting\/EdgeInsetsDirectional\/zero-constant.html\">EdgeInsets.zero<\/a> instead, since that object has the same\neffect, but will be cheaper to <a href=\"painting\/EdgeInsetsDirectional\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const EdgeInsetsDirectional zero = EdgeInsetsDirectional.only()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "zero",
                    "memberOf": "painting.EdgeInsetsDirectional"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/EdgeInsetsDirectional-class.html",
            "desc": "<p>An immutable set of offsets in each of the four cardinal directions, but\nwhose horizontal components are dependent on the writing direction.<\/p>\n<p>This can be used to indicate padding from the left in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>\ntext and padding from the right in <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> text without having\nto be aware of the current text direction.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, a variant that uses physical labels (left and right instead\nof start and end).<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "EdgeInsetsDirectional"
        },
        {
            "name": "painting.EdgeInsetsGeometry",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n<p>This operator may have unexpected results when applied to a mixture of\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> and <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator %(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Scales the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator *(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Divides the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator \/(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/EdgeInsetsGeometry\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other is! EdgeInsetsGeometry)\n    return false;\n  final EdgeInsetsGeometry typedOther = other;\n  return _left == typedOther._left\n      &amp;&amp; _right == typedOther._right\n      &amp;&amp; _start == typedOther._start\n      &amp;&amp; _end == typedOther._end\n      &amp;&amp; _top == typedOther._top\n      &amp;&amp; _bottom == typedOther._bottom;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "EdgeInsetsGeometry",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/EdgeInsetsGeometry\/EdgeInsetsGeometry.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const EdgeInsetsGeometry();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are adding two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>\nobjects, consider using the <code>+<\/code> operator instead, which always returns an\nobject of the same type as the operands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/add.html\">add<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry add(EdgeInsetsGeometry other) {\n  return _MixedEdgeInsets.fromLRSETB(\n    _left + other._left,\n    _right + other._right,\n    _start + other._start,\n    _end + other._end,\n    _top + other._top,\n    _bottom + other._bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "along",
                    "type": "dart:core.double",
                    "desc": "<p>The total offset in the given direction.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "axis",
                            "type": "painting.Axis",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/along.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double along(Axis axis) {\n  assert(axis != null);\n  switch (axis) {\n    case Axis.horizontal:\n      return horizontal;\n    case Axis.vertical:\n      return vertical;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "deflateSize",
                    "type": "dart:ui.Size",
                    "desc": "<p>Returns a new size that is smaller than the given size by the amount of\ninset in the horizontal and vertical directions.<\/p>\n<p>If the argument is smaller than <a href=\"painting\/EdgeInsetsGeometry\/collapsedSize.html\">collapsedSize<\/a>, then the resulting size\nwill have negative dimensions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets\/deflateRect.html\">EdgeInsets.deflateRect<\/a>, to deflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than a <a href=\"dart-ui\/Size-class.html\">Size<\/a>. (for\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, requires first calling <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a> to establish\nhow the start and end map to the left or right).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/inflateSize.html\">inflateSize<\/a>, to inflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than deflating it.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/deflateSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size deflateSize(Size size) {\n  return Size(size.width - horizontal, size.height - vertical);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inflateSize",
                    "type": "dart:ui.Size",
                    "desc": "<p>Returns a new size that is bigger than the given size by the amount of\ninset in the horizontal and vertical directions.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets\/inflateRect.html\">EdgeInsets.inflateRect<\/a>, to inflate a <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> rather than a <a href=\"dart-ui\/Size-class.html\">Size<\/a> (for\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, requires first calling <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a> to establish\nhow the start and end map to the left or right).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsGeometry\/deflateSize.html\">deflateSize<\/a>, to deflate a <a href=\"dart-ui\/Size-class.html\">Size<\/a> rather than inflating it.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/inflateSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Size inflateSize(Size size) {\n  return Size(size.width + horizontal, size.height + vertical);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/EdgeInsets\/zero-constant.html\">EdgeInsets.zero<\/a>, and\nthe result is an object of the same type as the non-null argument.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/lerp.html\">lerp<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static EdgeInsetsGeometry lerp(EdgeInsetsGeometry a, EdgeInsetsGeometry b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b * t;\n  if (b == null)\n    return a * (1.0 - t);\n  if (a is EdgeInsets &amp;&amp; b is EdgeInsets)\n    return EdgeInsets.lerp(a, b, t);\n  if (a is EdgeInsetsDirectional &amp;&amp; b is EdgeInsetsDirectional)\n    return EdgeInsetsDirectional.lerp(a, b, t);\n  return _MixedEdgeInsets.fromLRSETB(\n    ui.lerpDouble(a._left, b._left, t),\n    ui.lerpDouble(a._right, b._right, t),\n    ui.lerpDouble(a._start, b._start, t),\n    ui.lerpDouble(a._end, b._end, t),\n    ui.lerpDouble(a._top, b._top, t),\n    ui.lerpDouble(a._bottom, b._bottom, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.EdgeInsets",
                    "desc": "<p>Convert this instance into an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, which uses literal coordinates\n(i.e. the <code>left<\/code> coordinate being explicitly a distance from the left, and\nthe <code>right<\/code> coordinate being explicitly a distance from the right).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>, for which this is a no-op (returns itself).<\/li>\n<li>\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>, which flips the horizontal direction\nbased on the <code>direction<\/code> argument.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "direction",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsets resolve(TextDirection direction);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "subtract",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> objects.<\/p>\n<p>If you know you are applying this to two <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or two\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects, consider using the binary infix <code>-<\/code>\noperator instead, which always returns an object of the same type as the\noperands, and is typed accordingly.<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/subtract.html\">subtract<\/a> is applied to two objects of the same type (<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> or\n<a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a>), an object of that type will be returned (though\nthis is not reflected in the type system). Otherwise, an object\nrepresenting a combination of both is returned. That object can be turned\ninto a concrete <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> using <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a>.<\/p>\n<p>This method returns the same result as <a href=\"painting\/EdgeInsetsGeometry\/add.html\">add<\/a> applied to the result of\nnegating the argument (using the prefix unary <code>-<\/code> operator or multiplying\nthe argument by -1.0 using the <code>*<\/code> operator).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.EdgeInsetsGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/subtract.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry subtract(EdgeInsetsGeometry other) {\n  return _MixedEdgeInsets.fromLRSETB(\n    _left - other._left,\n    _right - other._right,\n    _start - other._start,\n    _end - other._end,\n    _top - other._top,\n    _bottom - other._bottom,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  if (_start == 0.0 &amp;&amp; _end == 0.0) {\n    if (_left == 0.0 &amp;&amp; _right == 0.0 &amp;&amp; _top == 0.0 &amp;&amp; _bottom == 0.0)\n      return 'EdgeInsets.zero';\n    if (_left == _right &amp;&amp; _right == _top &amp;&amp; _top == _bottom)\n      return 'EdgeInsets.all(${_left.toStringAsFixed(1)})';\n    return 'EdgeInsets(${_left.toStringAsFixed(1)}, '\n                      '${_top.toStringAsFixed(1)}, '\n                      '${_right.toStringAsFixed(1)}, '\n                      '${_bottom.toStringAsFixed(1)})';\n  }\n  if (_left == 0.0 &amp;&amp; _right == 0.0) {\n    return 'EdgeInsetsDirectional(${_start.toStringAsFixed(1)}, '\n                                 '${_top.toStringAsFixed(1)}, '\n                                 '${_end.toStringAsFixed(1)}, '\n                                 '${_bottom.toStringAsFixed(1)})';\n  }\n  return 'EdgeInsets(${_left.toStringAsFixed(1)}, '\n                    '${_top.toStringAsFixed(1)}, '\n                    '${_right.toStringAsFixed(1)}, '\n                    '${_bottom.toStringAsFixed(1)})'\n         ' + '\n         'EdgeInsetsDirectional(${_start.toStringAsFixed(1)}, '\n                               '0.0, '\n                               '${_end.toStringAsFixed(1)}, '\n                               '0.0)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Returns the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object with each dimension negated.<\/p>\n<p>This is the same as multiplying the object by -1.0.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator -();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.EdgeInsetsGeometry",
                    "desc": "<p>Integer divides the <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object in each dimension by the given factor.<\/p>\n<p>This operator returns an object of the same type as the operand.<\/p>\n<p>This operator may have unexpected results when applied to a mixture of\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> and <a href=\"painting\/EdgeInsetsDirectional-class.html\">EdgeInsetsDirectional<\/a> objects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/EdgeInsetsGeometry\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry operator ~\/(double other);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "collapsedSize",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The size that this <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> would occupy with an empty interior.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsGeometry\/collapsedSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get collapsedSize =&gt; Size(horizontal, vertical);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "flipped",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>An <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> with top and bottom, left and right, and start and end flipped.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsGeometry\/flipped.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get flipped =&gt; _MixedEdgeInsets.fromLRSETB(_right, _left, _end, _start, _bottom, _top);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/EdgeInsetsGeometry\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/EdgeInsetsGeometry\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsGeometry\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(_left, _right, _start, _end, _top, _bottom);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "horizontal",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The total offset in the horizontal direction.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsGeometry\/horizontal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get horizontal =&gt; _left + _right + _start + _end;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isNonNegative",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether every dimension is non-negative.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsGeometry\/isNonNegative.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNonNegative {\n  return _left &gt;= 0.0\n      &amp;&amp; _right &gt;= 0.0\n      &amp;&amp; _start &gt;= 0.0\n      &amp;&amp; _end &gt;= 0.0\n      &amp;&amp; _top &gt;= 0.0\n      &amp;&amp; _bottom &gt;= 0.0;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "vertical",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The total offset in the vertical direction.<\/p>\n        ",
                    "memberOf": "painting.EdgeInsetsGeometry",
                    "isConstant": false,
                    "href": "painting\/EdgeInsetsGeometry\/vertical.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get vertical =&gt; _top + _bottom;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.EdgeInsets",
                "painting.EdgeInsetsDirectional",
                "widgets.EdgeInsetsGeometryTween"
            ],
            "realImplementors": [
                "painting.EdgeInsets",
                "painting.EdgeInsetsDirectional",
                "widgets.EdgeInsetsGeometryTween"
            ],
            "cn": [],
            "href": "painting\/EdgeInsetsGeometry-class.html",
            "desc": "<p>Base class for <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> that allows for text-direction aware\nresolution.<\/p>\n<p>A property or argument of this type accepts classes created either with <a href=\"painting\/EdgeInsets\/EdgeInsets.fromLTRB.html\">new\nEdgeInsets.fromLTRB<\/a> and its variants, or <a href=\"painting\/EdgeInsetsDirectional\/EdgeInsetsDirectional.fromSTEB.html\">new\nEdgeInsetsDirectional.fromSTEB<\/a> and its variants.<\/p>\n<p>To convert an <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a> object of indeterminate type into a\n<a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a> object, call the <a href=\"painting\/EdgeInsetsGeometry\/resolve.html\">resolve<\/a> method.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Padding-class.html\">Padding<\/a>, a widget that describes margins using <a href=\"painting\/EdgeInsetsGeometry-class.html\">EdgeInsetsGeometry<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "EdgeInsetsGeometry"
        },
        {
            "name": "painting.ExactAssetImage",
            "extends": [
                "painting.AssetBundleImageProvider",
                "painting.AssetBundleImageKey",
                "painting.ImageProvider",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ExactAssetImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ExactAssetImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ExactAssetImage\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ExactAssetImage typedOther = other;\n  return keyName == typedOther.keyName\n      &amp;&amp; scale == typedOther.scale\n      &amp;&amp; bundle == typedOther.bundle;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ExactAssetImage",
                    "type": "",
                    "desc": "<p>Creates an object that fetches the given image from an asset bundle.<\/p>\n<p>The <code>assetName<\/code> and <code>scale<\/code> arguments must not be null. The <code>scale<\/code> arguments\ndefaults to 1.0. The <code>bundle<\/code> argument may be null, in which case the\nbundle provided in the <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> passed to the <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a> call\nwill be used instead.<\/p>\n<p>The <code>package<\/code> argument must be non-null when fetching an asset that is\nincluded in a package. See the documentation for the <a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a> class\nitself for details.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ExactAssetImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "assetName",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "bundle",
                            "type": "services.AssetBundle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "package",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ExactAssetImage\/ExactAssetImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ExactAssetImage(\n  this.assetName, {\n  this.scale = 1.0,\n  this.bundle,\n  this.package,\n}) : assert(assetName != null),\n     assert(scale != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "obtainKey",
                    "type": "dart:async.Future<painting.AssetBundleImageKey>",
                    "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/AssetBundleImageProvider\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ExactAssetImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ExactAssetImage\/obtainKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;AssetBundleImageKey&gt; obtainKey(ImageConfiguration configuration) {\n  return SynchronousFuture&lt;AssetBundleImageKey&gt;(AssetBundleImageKey(\n    bundle: bundle ?? configuration.bundle ?? rootBundle,\n    name: keyName,\n    scale: scale,\n  ));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "painting.AssetBundleImageKey"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ExactAssetImage",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ExactAssetImage\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(name: \"$keyName\", scale: $scale, bundle: $bundle)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "assetName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the asset.<\/p>\n        ",
                    "memberOf": "painting.ExactAssetImage",
                    "isConstant": false,
                    "href": "painting\/ExactAssetImage\/assetName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String assetName\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "bundle",
                    "type": "services.AssetBundle",
                    "types": [],
                    "desc": "<p>The bundle from which the image will be obtained.<\/p>\n<p>If the provided <a href=\"painting\/ExactAssetImage\/bundle.html\">bundle<\/a> is null, the bundle provided in the\n<a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> passed to the <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a> call will be used instead. If\nthat is also null, the <a href=\"services\/rootBundle.html\">rootBundle<\/a> is used.<\/p>\n<p>The image is obtained by calling <a href=\"painting\/AssetBundleImageProvider\/load.html\">AssetBundle.load<\/a> on the given <a href=\"painting\/ExactAssetImage\/bundle.html\">bundle<\/a>\nusing the key given by <a href=\"painting\/ExactAssetImage\/keyName.html\">keyName<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ExactAssetImage",
                    "isConstant": false,
                    "href": "painting\/ExactAssetImage\/bundle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AssetBundle bundle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ExactAssetImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ExactAssetImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.ExactAssetImage",
                    "isConstant": false,
                    "href": "painting\/ExactAssetImage\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(keyName, scale, bundle);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "keyName",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The key to use to obtain the resource from the <a href=\"painting\/ExactAssetImage\/bundle.html\">bundle<\/a>. This is the\nargument passed to <a href=\"painting\/AssetBundleImageProvider\/load.html\">AssetBundle.load<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ExactAssetImage",
                    "isConstant": false,
                    "href": "painting\/ExactAssetImage\/keyName.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get keyName =&gt; package == null ? assetName : 'packages\/$package\/$assetName';<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "package",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the package from which the image is included. See the\ndocumentation for the <a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a> class itself for details.<\/p>\n        ",
                    "memberOf": "painting.ExactAssetImage",
                    "isConstant": false,
                    "href": "painting\/ExactAssetImage\/package.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String package\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
                    "memberOf": "painting.ExactAssetImage",
                    "isConstant": false,
                    "href": "painting\/ExactAssetImage\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ExactAssetImage-class.html",
            "desc": "<p>Fetches an image from an <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a>, associating it with the given scale.<\/p>\n<p>This implementation requires an explicit final <a href=\"painting\/ExactAssetImage\/assetName.html\">assetName<\/a> and <a href=\"painting\/ExactAssetImage\/scale.html\">scale<\/a> on\nconstruction, and ignores the device pixel ratio and size in the\nconfiguration passed into <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a>. For a resolution-aware variant that\nuses the configuration to pick an appropriate image based on the device\npixel ratio and size, see <a href=\"painting\/AssetImage-class.html\">AssetImage<\/a>.<\/p>\n<h2 id=\"fetching-assets\">Fetching assets<\/h2>\n<p>When fetching an image provided by the app itself, use the <a href=\"painting\/ExactAssetImage\/assetName.html\">assetName<\/a>\nargument to name the asset to choose. For instance, consider a directory\n<code>icons<\/code> with an image <code>heart.png<\/code>. First, the <code>pubspec.yaml<\/code> of the project\nshould specify its assets in the <code>flutter<\/code> section:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  assets:\n    - icons\/heart.png\n<\/code><\/pre>\n<p>Then, to fetch the image and associate it with scale <code>1.5<\/code>, use<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetImage('icons\/heart.png', scale: 1.5)\n<\/code><\/pre>\n<h2 id=\"assets-in-packages\">Assets in packages<\/h2>\n<p>To fetch an asset from a package, the <a href=\"painting\/ExactAssetImage\/package.html\">package<\/a> argument must be provided.\nFor instance, suppose the structure above is inside a package called\n<code>my_icons<\/code>. Then to fetch the image, use:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">AssetImage('icons\/heart.png', scale: 1.5, package: 'my_icons')\n<\/code><\/pre>\n<p>Assets used by the package itself should also be fetched using the <a href=\"painting\/ExactAssetImage\/package.html\">package<\/a>\nargument as above.<\/p>\n<p>If the desired asset is specified in the <code>pubspec.yaml<\/code> of the package, it\nis bundled automatically with the app. In particular, assets used by the\npackage itself must be specified in its <code>pubspec.yaml<\/code>.<\/p>\n<p>A package can also choose to have assets in its 'lib\/' folder that are not\nspecified in its <code>pubspec.yaml<\/code>. In this case for those images to be\nbundled, the app has to specify which ones to include. For instance a\npackage named <code>fancy_backgrounds<\/code> could have:<\/p>\n<pre class=\"language-dart\"><code>lib\/backgrounds\/background1.png\nlib\/backgrounds\/background2.png\nlib\/backgrounds\/background3.png\n<\/code><\/pre>\n<p>To include, say the first image, the <code>pubspec.yaml<\/code> of the app should specify\nit in the <code>assets<\/code> section:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  assets:\n    - packages\/fancy_backgrounds\/backgrounds\/background1.png\n<\/code><\/pre>\n<p>The <code>lib\/<\/code> is implied, so it should not be included in the asset path.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Image\/Image.asset.html\">Image.asset<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by\n<a href=\"painting\/ExactAssetImage-class.html\">ExactAssetImage<\/a> when using a scale.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ExactAssetImage"
        },
        {
            "name": "painting.FileImage",
            "extends": [
                "painting.FileImage",
                "painting.ImageProvider",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/FileImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FileImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FileImage\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final FileImage typedOther = other;\n  return file?.path == typedOther.file?.path\n      &amp;&amp; scale == typedOther.scale;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "FileImage",
                    "type": "",
                    "desc": "<p>Creates an object that decodes a <a href=\"dart-io\/File-class.html\">File<\/a> as an image.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FileImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "file",
                            "type": "dart:io.File",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/FileImage\/FileImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FileImage(this.file, { this.scale = 1.0 })\n  : assert(file != null),\n    assert(scale != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "load",
                    "type": "painting.ImageStreamCompleter",
                    "desc": "<p>Converts a key into an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a>, and begins fetching the\nimage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FileImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "painting.FileImage",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FileImage\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nImageStreamCompleter load(FileImage key) {\n  return MultiFrameImageStreamCompleter(\n    codec: _loadAsync(key),\n    scale: key.scale,\n    informationCollector: (StringBuffer information) {\n      information.writeln('Path: ${file?.path}');\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "obtainKey",
                    "type": "dart:async.Future<painting.FileImage>",
                    "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/FileImage\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FileImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FileImage\/obtainKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;FileImage&gt; obtainKey(ImageConfiguration configuration) {\n  return SynchronousFuture&lt;FileImage&gt;(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "painting.FileImage"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FileImage",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/FileImage\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(\"${file?.path}\", scale: $scale)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "file",
                    "type": "dart:io.File",
                    "types": [],
                    "desc": "<p>The file to decode into an image.<\/p>\n        ",
                    "memberOf": "painting.FileImage",
                    "isConstant": false,
                    "href": "painting\/FileImage\/file.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final File file\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/FileImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/FileImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/FileImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/FileImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/FileImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/FileImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.FileImage",
                    "isConstant": false,
                    "href": "painting\/FileImage\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(file?.path, scale);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
                    "memberOf": "painting.FileImage",
                    "isConstant": false,
                    "href": "painting\/FileImage\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "painting.FileImage"
            ],
            "realImplementors": [
                "painting.FileImage"
            ],
            "cn": [],
            "href": "painting\/FileImage-class.html",
            "desc": "<p>Decodes the given <a href=\"dart-io\/File-class.html\">File<\/a> object as an image, associating it with the given\nscale.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/FileImage\/file.html\">Image.file<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by <a href=\"painting\/FileImage-class.html\">FileImage<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FileImage"
        },
        {
            "name": "painting.FittedSizes",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "FittedSizes",
                    "type": "",
                    "desc": "<p>Creates an object to store a pair of sizes,\nas would be returned by <a href=\"painting\/applyBoxFit.html\">applyBoxFit<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FittedSizes",
                    "sig": "",
                    "params": [
                        {
                            "name": "source",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "destination",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/FittedSizes\/FittedSizes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FittedSizes(this.source, this.destination);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "destination",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The size of the part of the output on which to show the input.<\/p>\n        ",
                    "memberOf": "painting.FittedSizes",
                    "isConstant": false,
                    "href": "painting\/FittedSizes\/destination.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size destination\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "source",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The size of the part of the input to show on the output.<\/p>\n        ",
                    "memberOf": "painting.FittedSizes",
                    "isConstant": false,
                    "href": "painting\/FittedSizes\/source.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size source\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/FittedSizes-class.html",
            "desc": "<p>The pair of sizes returned by <a href=\"painting\/applyBoxFit.html\">applyBoxFit<\/a>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FittedSizes"
        },
        {
            "name": "painting.FlutterLogoDecoration",
            "extends": [
                "painting.Decoration",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/FlutterLogoDecoration\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  assert(debugAssertIsValid());\n  if (identical(this, other))\n    return true;\n  if (other is! FlutterLogoDecoration)\n    return false;\n  final FlutterLogoDecoration typedOther = other;\n  return lightColor == typedOther.lightColor\n      &amp;&amp; darkColor == typedOther.darkColor\n      &amp;&amp; textColor == typedOther.textColor\n      &amp;&amp; _position == typedOther._position\n      &amp;&amp; _opacity == typedOther._opacity;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "FlutterLogoDecoration",
                    "type": "",
                    "desc": "<p>Creates a decoration that knows how to paint Flutter's logo.<\/p>\n<p>The <code>lightColor<\/code> and <code>darkColor<\/code> are used to fill the logo. The <code>style<\/code>\ncontrols whether and where to draw the \"Flutter\" label. If one is shown,\nthe <code>textColor<\/code> controls the color of the label.<\/p>\n<p>The <code>lightColor<\/code>, <code>darkColor<\/code>, <code>textColor<\/code>, <code>style<\/code>, and <code>margin<\/code>\narguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "lightColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "darkColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "style",
                            "type": "painting.FlutterLogoStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "margin",
                            "type": "painting.EdgeInsets",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/FlutterLogoDecoration\/FlutterLogoDecoration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FlutterLogoDecoration({\n  this.lightColor = const Color(0xFF42A5F5), \/\/ Colors.blue[400]\n  this.darkColor = const Color(0xFF0D47A1), \/\/ Colors.blue[900]\n  this.textColor = const Color(0xFF616161),\n  this.style = FlutterLogoStyle.markOnly,\n  this.margin = EdgeInsets.zero,\n}) : assert(lightColor != null),\n     assert(darkColor != null),\n     assert(textColor != null),\n     assert(style != null),\n     assert(margin != null),\n     _position = style == FlutterLogoStyle.markOnly ? 0.0 : style == FlutterLogoStyle.horizontal ? 1.0 : -1.0, \/\/ ignore: CONST_EVAL_TYPE_BOOL_NUM_STRING\n     \/\/ (see https:\/\/github.com\/dart-lang\/sdk\/issues\/26980 for details about that ignore statement)\n     _opacity = 1.0;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createBoxPainter",
                    "type": "painting.BoxPainter",
                    "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "onChanged",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/createBoxPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nBoxPainter createBoxPainter([ VoidCallback onChanged ]) {\n  assert(debugAssertIsValid());\n  return _FlutterLogoPainter(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugAssertIsValid",
                    "type": "dart:core.bool",
                    "desc": "<p>In checked mode, throws an exception if the object is not in a\nvalid configuration. Otherwise, returns true.<\/p>\n<p>This is intended to be used as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(myDecoration.debugAssertIsValid());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/debugAssertIsValid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool debugAssertIsValid() {\n  assert(lightColor != null\n      &amp;&amp; darkColor != null\n      &amp;&amp; textColor != null\n      &amp;&amp; style != null\n      &amp;&amp; margin != null\n      &amp;&amp; _position != null\n      &amp;&amp; _position.isFinite\n      &amp;&amp; _opacity != null\n      &amp;&amp; _opacity &gt;= 0.0\n      &amp;&amp; _opacity &lt;= 1.0);\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/FlutterLogoDecoration\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsNode.message('$lightColor\/$darkColor on $textColor'));\n  properties.add(EnumProperty&lt;FlutterLogoStyle&gt;('style', style));\n  if (_inTransition)\n    properties.add(DiagnosticsNode.message('transition $_position:$_opacity'));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "hitTest",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests whether the given point, on a rectangle of a given size,\nwould be considered to hit the decoration or not. For example,\nif the decoration only draws a circle, this function might\nreturn true if the point was inside the circle and false\notherwise.<\/p>\n<p>The decoration may be sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\n<code>textDirection<\/code> argument should therefore be provided. If it is known that\nthe decoration is not affected by the text direction, then the argument\nmay be omitted or set to null.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <code>textDirection<\/code> parameter will be populated\nbased on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> (by way of the <a href=\"rendering\/RenderDecoratedBox-class.html\">RenderDecoratedBox<\/a>\nrenderer).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "position",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/hitTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO(ianh): better hit testing\nbool hitTest(Size size, Offset position, { TextDirection textDirection }) =&gt; true;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.FlutterLogoDecoration",
                    "desc": "<p>Linearly interpolate between two Flutter logo descriptions.<\/p>\n<p>Interpolates both the color and the style in a continuous fashion.<\/p>\n<p>If both values are null, this returns null. Otherwise, it returns a\nnon-null value. If one of the values is null, then the result is obtained\nby scaling the other value's opacity and <a href=\"painting\/FlutterLogoDecoration\/margin.html\">margin<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/FlutterLogoDecoration\/lerp.html\">Decoration.lerp<\/a>, which interpolates between arbitrary decorations.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.FlutterLogoDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.FlutterLogoDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FlutterLogoDecoration lerp(FlutterLogoDecoration a, FlutterLogoDecoration b, double t) {\n  assert(t != null);\n  assert(a == null || a.debugAssertIsValid());\n  assert(b == null || b.debugAssertIsValid());\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null) {\n    return FlutterLogoDecoration._(\n      b.lightColor,\n      b.darkColor,\n      b.textColor,\n      b.style,\n      b.margin * t,\n      b._position,\n      b._opacity * t.clamp(0.0, 1.0),\n    );\n  }\n  if (b == null) {\n    return FlutterLogoDecoration._(\n      a.lightColor,\n      a.darkColor,\n      a.textColor,\n      a.style,\n      a.margin * t,\n      a._position,\n      a._opacity * (1.0 - t).clamp(0.0, 1.0),\n    );\n  }\n  if (t == 0.0)\n    return a;\n  if (t == 1.0)\n    return b;\n  return FlutterLogoDecoration._(\n    Color.lerp(a.lightColor, b.lightColor, t),\n    Color.lerp(a.darkColor, b.darkColor, t),\n    Color.lerp(a.textColor, b.textColor, t),\n    t &lt; 0.5 ? a.style : b.style,\n    EdgeInsets.lerp(a.margin, b.margin, t),\n    a._position + (b._position - a._position) * t,\n    (a._opacity + (b._opacity - a._opacity) * t).clamp(0.0, 1.0),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.FlutterLogoDecoration",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/FlutterLogoDecoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/FlutterLogoDecoration\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/FlutterLogoDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/FlutterLogoDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFlutterLogoDecoration lerpFrom(Decoration a, double t) {\n  assert(debugAssertIsValid());\n  if (a == null || a is FlutterLogoDecoration) {\n    assert(a == null || a.debugAssertIsValid());\n    return FlutterLogoDecoration.lerp(a, this, t);\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.FlutterLogoDecoration",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/FlutterLogoDecoration\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/FlutterLogoDecoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/FlutterLogoDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/FlutterLogoDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoDecoration\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFlutterLogoDecoration lerpTo(Decoration b, double t) {\n  assert(debugAssertIsValid());\n  if (b == null || b is FlutterLogoDecoration) {\n    assert(b == null || b.debugAssertIsValid());\n    return FlutterLogoDecoration.lerp(this, b, t);\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "darkColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The darker of the two colors used to paint the logo.<\/p>\n<p>See <a href=\"painting\/FlutterLogoDecoration\/lightColor.html\">lightColor<\/a> for more information about selecting the logo's colors.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/darkColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color darkColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/FlutterLogoDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/FlutterLogoDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/FlutterLogoDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/FlutterLogoDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/FlutterLogoDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/FlutterLogoDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  assert(debugAssertIsValid());\n  return hashValues(\n    lightColor,\n    darkColor,\n    textColor,\n    _position,\n    _opacity,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isComplex",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this decoration is complex enough to benefit from caching its painting.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/isComplex.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isComplex =&gt; !_inTransition;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lightColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The lighter of the two colors used to paint the logo.<\/p>\n<p>If possible, the default should be used. It corresponds to the 400 and 900\nvalues of <a href=\"material\/Colors\/blue-constant.html\">material.Colors.blue<\/a> from the Material library.<\/p>\n<p>If for some reason that color scheme is impractical, the same entries from\n<a href=\"material\/Colors\/amber-constant.html\">material.Colors.amber<\/a>, <a href=\"material\/Colors\/red-constant.html\">material.Colors.red<\/a>, or\n<a href=\"material\/Colors\/indigo-constant.html\">material.Colors.indigo<\/a> colors can be used. These are Flutter's secondary\ncolors.<\/p>\n<p>In extreme cases where none of those four color schemes will work,\n<a href=\"material\/Colors\/pink-constant.html\">material.Colors.pink<\/a>, <a href=\"material\/Colors\/purple-constant.html\">material.Colors.purple<\/a>, or\n<a href=\"material\/Colors\/cyan-constant.html\">material.Colors.cyan<\/a> can be used. These are Flutter's tertiary colors.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/lightColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color lightColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "margin",
                    "type": "painting.EdgeInsets",
                    "types": [],
                    "desc": "<p>How far to inset the logo from the edge of the container.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/margin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final EdgeInsets margin\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "painting.FlutterLogoStyle",
                    "types": [],
                    "desc": "<p>Whether and where to draw the \"Flutter\" text. By default, only the logo\nitself is drawn.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FlutterLogoStyle style\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color used to paint the \"Flutter\" text on the logo, if <a href=\"painting\/FlutterLogoDecoration\/style.html\">style<\/a> is\n<a href=\"painting\/FlutterLogoStyle-class.html\">FlutterLogoStyle.horizontal<\/a> or <a href=\"painting\/FlutterLogoStyle-class.html\">FlutterLogoStyle.stacked<\/a>. The\nappropriate color is <code>const Color(0xFF616161)<\/code> (a medium gray), against a\nwhite background.<\/p>\n        ",
                    "memberOf": "painting.FlutterLogoDecoration",
                    "isConstant": false,
                    "href": "painting\/FlutterLogoDecoration\/textColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color textColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/FlutterLogoDecoration-class.html",
            "desc": "<p>An immutable description of how to paint Flutter's logo.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FlutterLogoDecoration"
        },
        {
            "type": "",
            "name": "painting.FlutterLogoStyle",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FlutterLogoStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/FlutterLogoStyle\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/FlutterLogoStyle-class.html",
            "desc": "<p>Possible ways to draw Flutter's logo.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "FlutterLogoStyle"
        },
        {
            "name": "painting.FractionalOffset",
            "extends": [
                "painting.Alignment",
                "painting.AlignmentGeometry",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator %",
                    "type": "painting.FractionalOffset",
                    "desc": "<p>Computes the remainder in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_modulo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFractionalOffset operator %(double other) {\n  return FractionalOffset(dx % other, dy % other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator *",
                    "type": "painting.FractionalOffset",
                    "desc": "<p>Scales the <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_multiply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFractionalOffset operator *(double other) {\n  return FractionalOffset(dx * other, dy * other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator +",
                    "type": "painting.Alignment",
                    "desc": "<p>Returns the sum of two <a href=\"painting\/Alignment-class.html\">Alignment<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator +(Alignment other) {\n  if (other is! FractionalOffset)\n    return super + other;\n  final FractionalOffset typedOther = other;\n  return FractionalOffset(dx + typedOther.dx, dy + typedOther.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator -",
                    "type": "painting.Alignment",
                    "desc": "<p>Returns the difference between two <a href=\"painting\/Alignment-class.html\">Alignment<\/a>s.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.Alignment",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nAlignment operator -(Alignment other) {\n  if (other is! FractionalOffset)\n    return super - other;\n  final FractionalOffset typedOther = other;\n  return FractionalOffset(dx - typedOther.dx, dy - typedOther.dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator \/",
                    "type": "painting.FractionalOffset",
                    "desc": "<p>Divides the <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFractionalOffset operator \/(double other) {\n  return FractionalOffset(dx \/ other, dy \/ other);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "FractionalOffset",
                    "type": "",
                    "desc": "<p>Creates a fractional offset.<\/p>\n<p>The <code>dx<\/code> and <code>dy<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "dx",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "dy",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/FractionalOffset\/FractionalOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const FractionalOffset(double dx, double dy)\n  : assert(dx != null),\n    assert(dy != null),\n    super(dx * 2.0 - 1.0, dy * 2.0 - 1.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "FractionalOffset.fromOffsetAndRect",
                    "type": "",
                    "desc": "<p>Creates a fractional offset from a specific offset and rectangle.<\/p>\n<p>The offset is assumed to be relative to the same origin as the rectangle.<\/p>\n<p>If the offset is relative to the top left of the rectangle, use <a href=\"painting\/FractionalOffset\/FractionalOffset.fromOffsetAndSize.html\">new\nFractionalOffset.fromOffsetAndSize<\/a> instead, passing <code>rect.size<\/code>.<\/p>\n<p>The returned <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> describes the position of the\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a> in the <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>, as a fraction of the <a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/FractionalOffset\/FractionalOffset.fromOffsetAndRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory FractionalOffset.fromOffsetAndRect(Offset offset, Rect rect) {\n  return FractionalOffset.fromOffsetAndSize(\n    offset - rect.topLeft,\n    rect.size,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "FractionalOffset.fromOffsetAndSize",
                    "type": "",
                    "desc": "<p>Creates a fractional offset from a specific offset and size.<\/p>\n<p>The returned <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> describes the position of the\n<a href=\"dart-ui\/Offset-class.html\">Offset<\/a> in the <a href=\"dart-ui\/Size-class.html\">Size<\/a>, as a fraction of the <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/FractionalOffset\/FractionalOffset.fromOffsetAndSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory FractionalOffset.fromOffsetAndSize(Offset offset, Size size) {\n  assert(size != null);\n  assert(offset != null);\n  return FractionalOffset(\n    offset.dx \/ size.width,\n    offset.dy \/ size.height,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.FractionalOffset",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a>s.<\/p>\n<p>If either is null, this function interpolates from <a href=\"painting\/FractionalOffset\/center-constant.html\">FractionalOffset.center<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.FractionalOffset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.FractionalOffset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static FractionalOffset lerp(FractionalOffset a, FractionalOffset b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return FractionalOffset(ui.lerpDouble(0.5, b.dx, t), ui.lerpDouble(0.5, b.dy, t));\n  if (b == null)\n    return FractionalOffset(ui.lerpDouble(a.dx, 0.5, t), ui.lerpDouble(a.dy, 0.5, t));\n  return FractionalOffset(ui.lerpDouble(a.dx, b.dx, t), ui.lerpDouble(a.dy, b.dy, t));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'FractionalOffset(${dx.toStringAsFixed(1)}, '\n                          '${dy.toStringAsFixed(1)})';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator unary-",
                    "type": "painting.FractionalOffset",
                    "desc": "<p>Returns the negation of the given <a href=\"painting\/Alignment-class.html\">Alignment<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_unary_minus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFractionalOffset operator -() {\n  return FractionalOffset(-dx, -dy);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "operator ~\/",
                    "type": "painting.FractionalOffset",
                    "desc": "<p>Integer divides the <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in each dimension by the given factor.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.FractionalOffset",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/FractionalOffset\/operator_truncate_divide.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFractionalOffset operator ~\/(double other) {\n  return FractionalOffset((dx ~\/ other).toDouble(), (dy ~\/ other).toDouble());\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/bottomCenter-constant.html",
                    "desc": "<p>The center point along the bottom edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset bottomCenter = FractionalOffset(0.5, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomCenter",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/bottomLeft-constant.html",
                    "desc": "<p>The bottom left corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset bottomLeft = FractionalOffset(0.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomLeft",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/bottomRight-constant.html",
                    "desc": "<p>The bottom right corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset bottomRight = FractionalOffset(1.0, 1.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "bottomRight",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/center-constant.html",
                    "desc": "<p>The center point, both horizontally and vertically.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset center = FractionalOffset(0.5, 0.5)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "center",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/centerLeft-constant.html",
                    "desc": "<p>The center point along the left edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset centerLeft = FractionalOffset(0.0, 0.5)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centerLeft",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/centerRight-constant.html",
                    "desc": "<p>The center point along the right edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset centerRight = FractionalOffset(1.0, 0.5)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "centerRight",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "name": "dx",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance fraction in the horizontal direction.<\/p>\n<p>A value of 0.0 corresponds to the leftmost edge. A value of 1.0\ncorresponds to the rightmost edge. Values are not limited to that range;\nnegative values represent positions to the left of the left edge, and\nvalues greater than 1.0 represent positions to the right of the right\nedge.<\/p>\n        ",
                    "memberOf": "painting.FractionalOffset",
                    "isConstant": false,
                    "href": "painting\/FractionalOffset\/dx.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get dx =&gt; (x + 1.0) \/ 2.0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dy",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The distance fraction in the vertical direction.<\/p>\n<p>A value of 0.0 corresponds to the topmost edge. A value of 1.0 corresponds\nto the bottommost edge. Values are not limited to that range; negative\nvalues represent positions above the top, and values greater than 1.0\nrepresent positions below the bottom.<\/p>\n        ",
                    "memberOf": "painting.FractionalOffset",
                    "isConstant": false,
                    "href": "painting\/FractionalOffset\/dy.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get dy =&gt; (y + 1.0) \/ 2.0;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/topCenter-constant.html",
                    "desc": "<p>The center point along the top edge.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset topCenter = FractionalOffset(0.5, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topCenter",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/topLeft-constant.html",
                    "desc": "<p>The top left corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset topLeft = FractionalOffset(0.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topLeft",
                    "memberOf": "painting.FractionalOffset"
                },
                {
                    "type": "",
                    "href": "painting\/FractionalOffset\/topRight-constant.html",
                    "desc": "<p>The top right corner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const FractionalOffset topRight = FractionalOffset(1.0, 0.0)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "topRight",
                    "memberOf": "painting.FractionalOffset"
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "rendering.FractionalOffsetTween"
            ],
            "realImplementors": [
                "rendering.FractionalOffsetTween"
            ],
            "cn": [],
            "href": "painting\/FractionalOffset-class.html",
            "desc": "<p>An offset that's expressed as a fraction of a <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p><code>FractionalOffset(1.0, 0.0)<\/code> represents the top right of the <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p><code>FractionalOffset(0.0, 1.0)<\/code> represents the bottom left of the <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p><code>FractionalOffset(0.5, 2.0)<\/code> represents a point half way across the <a href=\"dart-ui\/Size-class.html\">Size<\/a>,\nbelow the bottom of the rectangle by the height of the <a href=\"dart-ui\/Size-class.html\">Size<\/a>.<\/p>\n<p>The <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> class specifies offsets in terms of a distance from\nthe top left, regardless of the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<h2 id=\"design-discussion\">Design discussion<\/h2>\n<p><a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> and <a href=\"painting\/Alignment-class.html\">Alignment<\/a> are two different representations of the\nsame information: the location within a rectangle relative to the size of\nthe rectangle. The difference between the two classes is in the coordinate\nsystem they use to represent the location.<\/p>\n<p><a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> uses a coordinate system with an origin in the top-left\ncorner of the rectangle whereas <a href=\"painting\/Alignment-class.html\">Alignment<\/a> uses a coordinate system with an\norigin in the center of the rectangle.<\/p>\n<p>Historically, <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> predates <a href=\"painting\/Alignment-class.html\">Alignment<\/a>. When we attempted to\nmake a version of <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> that adapted to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, we\nran into difficulty because placing the origin in the top-left corner\nintroduced a left-to-right bias that was hard to remove.<\/p>\n<p>By placing the origin in the center, <a href=\"painting\/Alignment-class.html\">Alignment<\/a> and <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>\nare able to use the same origin, which means we can use a linear function to\nresolve an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> into an <a href=\"painting\/Alignment-class.html\">Alignment<\/a> in both\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> and <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>.<\/p>\n<p><a href=\"painting\/Alignment-class.html\">Alignment<\/a> is better for most purposes than <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> and should\nbe used instead of <a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a>. We continue to implement\n<a href=\"painting\/FractionalOffset-class.html\">FractionalOffset<\/a> to support code that predates <a href=\"painting\/Alignment-class.html\">Alignment<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/Alignment-class.html\">Alignment<\/a>, which uses a coordinate system based on the center of the\nrectangle instead of the top left corner of the rectangle.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "FractionalOffset"
        },
        {
            "name": "painting.Gradient",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "Gradient",
                    "type": "",
                    "desc": "<p>Initialize the gradient's colors and stops.<\/p>\n<p>The <code>colors<\/code> argument must not be null, and must have at least two colors\n(the length is not verified until the <a href=\"painting\/Gradient\/createShader.html\">createShader<\/a> method is called).<\/p>\n<p>If specified, the <code>stops<\/code> argument must have the same number of entries as\n<code>colors<\/code> (this is also not verified until the <a href=\"painting\/Gradient\/createShader.html\">createShader<\/a> method is\ncalled).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "stops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/Gradient\/Gradient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Gradient({\n  @required this.colors,\n  this.stops,\n}) : assert(colors != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createShader",
                    "type": "dart:ui.Shader",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Gradient\/createShader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Shader createShader(Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates between two <a href=\"painting\/Gradient-class.html\">Gradient<\/a>s.<\/p>\n<p>This defers to <code>b<\/code>'s <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a> function if <code>b<\/code> is not null. If <code>b<\/code> is\nnull or if its <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a> returns null, it uses <code>a<\/code>'s <a href=\"painting\/Gradient\/lerpFrom.html\">lerpFrom<\/a>\nfunction instead. If both return null, it returns <code>a<\/code> before <code>t == 0.5<\/code>\nand <code>b<\/code> after <code>t == 0.5<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Gradient\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Gradient lerp(Gradient a, Gradient b, double t) {\n  assert(t != null);\n  Gradient result;\n  if (b != null)\n    result = b.lerpFrom(a, t); \/\/ if a is null, this must return non-null\n  if (result == null &amp;&amp; a != null)\n    result = a.lerpTo(b, t); \/\/ if b is null, this must return non-null\n  if (result != null)\n    return result;\n  if (a == null &amp;&amp; b == null)\n    return null;\n  assert(a != null &amp;&amp; b != null);\n  return t &lt; 0.5 ? a.scale(1.0 - (t * 2.0)) : b.scale((t - 0.5) * 2.0);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/Gradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/Gradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Gradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Gradient\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null)\n    return scale(t);\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/Gradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/Gradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/Gradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/Gradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Gradient\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nGradient lerpTo(Gradient b, double t) {\n  if (b == null)\n    return scale(1.0 - t);\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "painting.Gradient",
                    "desc": "<p>Returns a new gradient with its properties scaled by the given factor.<\/p>\n<p>A factor of 0.0 (or less) should result in a variant of the gradient that\nis invisible; any two factors epsilon apart should be unnoticeably\ndifferent from each other at first glance. From this it follows that\nscaling a gradient with values from 1.0 to 0.0 over time should cause the\ngradient to smoothly disappear.<\/p>\n<p>Typically this is the same as interpolating from null (with <a href=\"painting\/Gradient\/lerp.html\">lerp<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.Gradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/Gradient\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Gradient scale(double factor);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "colors",
                    "type": "dart:core.List<dart:ui.Color>",
                    "types": [
                        "dart:core.List",
                        "dart:ui.Color"
                    ],
                    "desc": "<p>The colors the gradient should obtain at each of the stops.<\/p>\n<p>If <a href=\"painting\/Gradient\/stops.html\">stops<\/a> is non-null, this list must have the same length as <a href=\"painting\/Gradient\/stops.html\">stops<\/a>.<\/p>\n<p>This list must have at least two colors in it (otherwise, it's not a\ngradient!).<\/p>\n        ",
                    "memberOf": "painting.Gradient",
                    "isConstant": false,
                    "href": "painting\/Gradient\/colors.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;Color&gt; colors\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "stops",
                    "type": "dart:core.List<dart:core.double>",
                    "types": [
                        "dart:core.List",
                        "dart:core.double"
                    ],
                    "desc": "<p>A list of values from 0.0 to 1.0 that denote fractions along the gradient.<\/p>\n<p>If non-null, this list must have the same length as <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>If the first value is not 0.0, then a stop with position 0.0 and a color\nequal to the first color in <a href=\"painting\/Gradient\/colors.html\">colors<\/a> is implied.<\/p>\n<p>If the last value is not 1.0, then a stop with position 1.0 and a color\nequal to the last color in <a href=\"painting\/Gradient\/colors.html\">colors<\/a> is implied.<\/p>\n<p>The values in the <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list must be in ascending order. If a value in\nthe <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list is less than an earlier value in the list, then its value\nis assumed to equal the previous value.<\/p>\n<p>If stops is null, then a set of uniformly distributed stops is implied,\nwith the first stop at 0.0 and the last stop at 1.0.<\/p>\n        ",
                    "memberOf": "painting.Gradient",
                    "isConstant": false,
                    "href": "painting\/Gradient\/stops.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;double&gt; stops\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.LinearGradient",
                "painting.RadialGradient",
                "painting.SweepGradient"
            ],
            "realImplementors": [
                "painting.LinearGradient",
                "painting.RadialGradient",
                "painting.SweepGradient"
            ],
            "cn": [],
            "href": "painting\/Gradient-class.html",
            "desc": "<p>A 2D gradient.<\/p>\n<p>This is an interface that allows <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>, <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, and\n<a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a> classes to be used interchangeably in <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>s.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/dart-ui\/Gradient-class.html\">Gradient<\/a>, the class in the <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> library.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "Gradient"
        },
        {
            "name": "painting.HSLColor",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/HSLColor\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! HSLColor)\n    return false;\n  final HSLColor typedOther = other;\n  return typedOther.alpha == alpha\n      &amp;&amp; typedOther.hue == hue\n      &amp;&amp; typedOther.saturation == saturation\n      &amp;&amp; typedOther.lightness == lightness;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HSLColor.fromAHSL",
                    "type": "",
                    "desc": "<p>Creates a color.<\/p>\n<p>All the arguments must not be null and be in their respective ranges. See\nthe fields for each parameter for a description of their ranges.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "alpha",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hue",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "saturation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "lightness",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/HSLColor\/HSLColor.fromAHSL.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HSLColor.fromAHSL(this.alpha, this.hue, this.saturation, this.lightness)\n  : assert(alpha != null),\n    assert(hue != null),\n    assert(saturation != null),\n    assert(lightness != null),\n    assert(alpha &gt;= 0.0),\n    assert(alpha &lt;= 1.0),\n    assert(hue &gt;= 0.0),\n    assert(hue &lt;= 360.0),\n    assert(saturation &gt;= 0.0),\n    assert(saturation &lt;= 1.0),\n    assert(lightness &gt;= 0.0),\n    assert(lightness &lt;= 1.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HSLColor.fromColor",
                    "type": "",
                    "desc": "<p>Creates an <a href=\"painting\/HSLColor-class.html\">HSLColor<\/a> from an RGB <a href=\"dart-ui\/Color-class.html\">Color<\/a>.<\/p>\n<p>This constructor does not necessarily round-trip with <a href=\"painting\/HSLColor\/toColor.html\">toColor<\/a> because\nof floating point imprecision.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/HSLColor\/HSLColor.fromColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HSLColor.fromColor(Color color) {\n  final double red = color.red \/ 0xFF;\n  final double green = color.green \/ 0xFF;\n  final double blue = color.blue \/ 0xFF;\n\n  final double max = math.max(red, math.max(green, blue));\n  final double min = math.min(red, math.min(green, blue));\n  final double delta = max - min;\n\n  final double alpha = color.alpha \/ 0xFF;\n  final double hue = _getHue(red, green, blue, max, delta);\n  final double lightness = (max + min) \/ 2.0;\n  \/\/ Saturation can exceed 1.0 with rounding errors, so clamp it.\n  final double saturation = lightness == 1.0\n    ? 0.0\n    : (delta \/ (1.0 - (2.0 * lightness - 1.0).abs())).clamp(0.0, 1.0);\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.HSLColor",
                    "desc": "<p>Linearly interpolate between two HSLColors.<\/p>\n<p>The colors are interpolated by interpolating the <a href=\"painting\/HSLColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSLColor\/hue.html\">hue<\/a>,\n<a href=\"painting\/HSLColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSLColor\/lightness.html\">lightness<\/a> channels separately, which usually leads to\na more pleasing effect than <a href=\"painting\/HSLColor\/lerp.html\">Color.lerp<\/a> (which interpolates the red,\ngreen, and blue channels separately).<\/p>\n<p>If either color is null, this function linearly interpolates from a\ntransparent instance of the other color. This is usually preferable to\ninterpolating from <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a> (<code>const Color(0x00000000)<\/code>) since\nthat will interpolate from a transparent red and cycle through the hues to\nmatch the target color, regardless of what that color's hue is.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values between them\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid\n(and can easily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values outside of the valid range for each channel will be clamped.<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.HSLColor",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.HSLColor",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static HSLColor lerp(HSLColor a, HSLColor b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b._scaleAlpha(t);\n  if (b == null)\n    return a._scaleAlpha(1.0 - t);\n  return HSLColor.fromAHSL(\n    lerpDouble(a.alpha, b.alpha, t).clamp(0.0, 1.0),\n    lerpDouble(a.hue, b.hue, t) % 360.0,\n    lerpDouble(a.saturation, b.saturation, t).clamp(0.0, 1.0),\n    lerpDouble(a.lightness, b.lightness, t).clamp(0.0, 1.0),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toColor",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns this HSL color in RGB.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/toColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color toColor() {\n  final double chroma = (1.0 - (2.0 * lightness - 1.0).abs()) * saturation;\n  final double secondary = chroma * (1.0 - (((hue \/ 60.0) % 2.0) - 1.0).abs());\n  final double match = lightness - chroma \/ 2.0;\n\n  return _colorFromHue(alpha, hue, chroma, secondary, match);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($alpha, $hue, $saturation, $lightness)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withAlpha",
                    "type": "painting.HSLColor",
                    "desc": "<p>Returns a copy of this color with the alpha parameter replaced with the\ngiven value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "alpha",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/withAlpha.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withAlpha(double alpha) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withHue",
                    "type": "painting.HSLColor",
                    "desc": "<p>Returns a copy of this color with the <code>hue<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "hue",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/withHue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withHue(double hue) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withLightness",
                    "type": "painting.HSLColor",
                    "desc": "<p>Returns a copy of this color with the <code>lightness<\/code> parameter replaced with\nthe given value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "lightness",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/withLightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withLightness(double lightness) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withSaturation",
                    "type": "painting.HSLColor",
                    "desc": "<p>Returns a copy of this color with the <code>saturation<\/code> parameter replaced with\nthe given value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSLColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "saturation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSLColor\/withSaturation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSLColor withSaturation(double saturation) {\n  return HSLColor.fromAHSL(alpha, hue, saturation, lightness);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "alpha",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Alpha, from 0.0 to 1.0. The describes the transparency of the color.\nA value of 0.0 is fully transparent, and 1.0 is fully opaque.<\/p>\n        ",
                    "memberOf": "painting.HSLColor",
                    "isConstant": false,
                    "href": "painting\/HSLColor\/alpha.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double alpha\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/HSLColor\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/HSLColor\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.HSLColor",
                    "isConstant": false,
                    "href": "painting\/HSLColor\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(alpha, hue, saturation, lightness);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hue",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Hue, from 0.0 to 360.0. Describes which color of the spectrum is\nrepresented. A value of 0.0 represents red, as does 360.0. Values in\nbetween go through all the hues representable in RGB. You can think of\nthis as selecting which color filter is placed over a light.<\/p>\n        ",
                    "memberOf": "painting.HSLColor",
                    "isConstant": false,
                    "href": "painting\/HSLColor\/hue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double hue\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "lightness",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Lightness, from 0.0 to 1.0. The lightness of a color describes how bright\na color is. A value of 0.0 indicates black, and 1.0 indicates white. You\ncan think of this as the intensity of the light behind the filter. As the\nlightness approaches 0.5, the colors get brighter and appear more\nsaturated, and over 0.5, the colors start to become less saturated and\napproach white at 1.0.<\/p>\n        ",
                    "memberOf": "painting.HSLColor",
                    "isConstant": false,
                    "href": "painting\/HSLColor\/lightness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double lightness\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "saturation",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Saturation, from 0.0 to 1.0. This describes how colorful the color is.\n0.0 implies a shade of grey (i.e. no pigment), and 1.0 implies a color as\nvibrant as that hue gets. You can think of this as the purity of the\ncolor filter over the light.<\/p>\n        ",
                    "memberOf": "painting.HSLColor",
                    "isConstant": false,
                    "href": "painting\/HSLColor\/saturation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double saturation\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/HSLColor-class.html",
            "desc": "<p>A color represented using <a href=\"painting\/HSLColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSLColor\/hue.html\">hue<\/a>, <a href=\"painting\/HSLColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSLColor\/lightness.html\">lightness<\/a>.<\/p>\n<p>An <a href=\"painting\/HSLColor-class.html\">HSLColor<\/a> is represented in a parameter space that's based up human\nperception of colored light. The representation is useful for some color\ncomputations (e.g., combining colors of light), because interpolation and\npicking of colors as red, green, and blue channels doesn't always produce\nintuitive results.<\/p>\n<p>HSL is a perceptual color model, placing fully saturated colors around a\ncircle (conceptually) at a lightness of \u200b0.5, with a lightness of 0.0 being\ncompletely black, and a lightness of 1.0 being completely white. As the\nlightness increases or decreases from 0.5, the apparent saturation decreases\nproportionally (even though the <a href=\"painting\/HSLColor\/saturation.html\">saturation<\/a> parameter hasn't changed).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/HSVColor-class.html\">HSVColor<\/a>, a color that uses a color space based on human perception of\npigments (e.g. paint and printer's ink).<\/li>\n<li>\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/HSL_and_HSV\">HSV and HSL<\/a> Wikipedia\narticle, which this implementation is based upon.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HSLColor"
        },
        {
            "name": "painting.HSVColor",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/HSVColor\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other is! HSVColor)\n    return false;\n  final HSVColor typedOther = other;\n  return typedOther.alpha == alpha\n      &amp;&amp; typedOther.hue == hue\n      &amp;&amp; typedOther.saturation == saturation\n      &amp;&amp; typedOther.value == value;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HSVColor.fromAHSV",
                    "type": "",
                    "desc": "<p>Creates a color.<\/p>\n<p>All the arguments must not be null and be in their respective ranges. See\nthe fields for each parameter for a description of their ranges.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "alpha",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "hue",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "saturation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/HSVColor\/HSVColor.fromAHSV.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const HSVColor.fromAHSV(this.alpha, this.hue, this.saturation, this.value)\n  : assert(alpha != null),\n    assert(hue != null),\n    assert(saturation != null),\n    assert(value != null),\n    assert(alpha &gt;= 0.0),\n    assert(alpha &lt;= 1.0),\n    assert(hue &gt;= 0.0),\n    assert(hue &lt;= 360.0),\n    assert(saturation &gt;= 0.0),\n    assert(saturation &lt;= 1.0),\n    assert(value &gt;= 0.0),\n    assert(value &lt;= 1.0);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "HSVColor.fromColor",
                    "type": "",
                    "desc": "<p>Creates an <a href=\"painting\/HSVColor-class.html\">HSVColor<\/a> from an RGB <a href=\"dart-ui\/Color-class.html\">Color<\/a>.<\/p>\n<p>This constructor does not necessarily round-trip with <a href=\"painting\/HSVColor\/toColor.html\">toColor<\/a> because\nof floating point imprecision.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/HSVColor\/HSVColor.fromColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory HSVColor.fromColor(Color color) {\n  final double red = color.red \/ 0xFF;\n  final double green = color.green \/ 0xFF;\n  final double blue = color.blue \/ 0xFF;\n\n  final double max = math.max(red, math.max(green, blue));\n  final double min = math.min(red, math.min(green, blue));\n  final double delta = max - min;\n\n  final double alpha = color.alpha \/ 0xFF;\n  final double hue = _getHue(red, green, blue, max, delta);\n  final double saturation = max == 0.0 ? 0.0 : delta \/ max;\n\n  return HSVColor.fromAHSV(alpha, hue, saturation, max);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.HSVColor",
                    "desc": "<p>Linearly interpolate between two HSVColors.<\/p>\n<p>The colors are interpolated by interpolating the <a href=\"painting\/HSVColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSVColor\/hue.html\">hue<\/a>,\n<a href=\"painting\/HSVColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSVColor\/value.html\">value<\/a> channels separately, which usually leads to a\nmore pleasing effect than <a href=\"painting\/HSVColor\/lerp.html\">Color.lerp<\/a> (which interpolates the red, green,\nand blue channels separately).<\/p>\n<p>If either color is null, this function linearly interpolates from a\ntransparent instance of the other color. This is usually preferable to\ninterpolating from <a href=\"material\/Colors\/transparent-constant.html\">Colors.transparent<\/a> (<code>const Color(0x00000000)<\/code>) since\nthat will interpolate from a transparent red and cycle through the hues to\nmatch the target color, regardless of what that color's hue is.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Values outside of the valid range for each channel will be clamped.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.HSVColor",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.HSVColor",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static HSVColor lerp(HSVColor a, HSVColor b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b._scaleAlpha(t);\n  if (b == null)\n    return a._scaleAlpha(1.0 - t);\n  return HSVColor.fromAHSV(\n    lerpDouble(a.alpha, b.alpha, t).clamp(0.0, 1.0),\n    lerpDouble(a.hue, b.hue, t) % 360.0,\n    lerpDouble(a.saturation, b.saturation, t).clamp(0.0, 1.0),\n    lerpDouble(a.value, b.value, t).clamp(0.0, 1.0),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toColor",
                    "type": "dart:ui.Color",
                    "desc": "<p>Returns this color in RGB.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/toColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Color toColor() {\n  final double chroma = saturation * value;\n  final double secondary = chroma * (1.0 - (((hue \/ 60.0) % 2.0) - 1.0).abs());\n  final double match = value - chroma;\n\n  return _colorFromHue(alpha, hue, chroma, secondary, match);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($alpha, $hue, $saturation, $value)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withAlpha",
                    "type": "painting.HSVColor",
                    "desc": "<p>Returns a copy of this color with the <code>alpha<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "alpha",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/withAlpha.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withAlpha(double alpha) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withHue",
                    "type": "painting.HSVColor",
                    "desc": "<p>Returns a copy of this color with the <code>hue<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "hue",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/withHue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withHue(double hue) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withSaturation",
                    "type": "painting.HSVColor",
                    "desc": "<p>Returns a copy of this color with the <code>saturation<\/code> parameter replaced with\nthe given value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "saturation",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/withSaturation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withSaturation(double saturation) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "withValue",
                    "type": "painting.HSVColor",
                    "desc": "<p>Returns a copy of this color with the <code>value<\/code> parameter replaced with the\ngiven value.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.HSVColor",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/HSVColor\/withValue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HSVColor withValue(double value) {\n  return HSVColor.fromAHSV(alpha, hue, saturation, value);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "alpha",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Alpha, from 0.0 to 1.0. The describes the transparency of the color.\nA value of 0.0 is fully transparent, and 1.0 is fully opaque.<\/p>\n        ",
                    "memberOf": "painting.HSVColor",
                    "isConstant": false,
                    "href": "painting\/HSVColor\/alpha.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double alpha\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/HSVColor\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/HSVColor\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.HSVColor",
                    "isConstant": false,
                    "href": "painting\/HSVColor\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(alpha, hue, saturation, value);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hue",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Hue, from 0.0 to 360.0. Describes which color of the spectrum is\nrepresented. A value of 0.0 represents red, as does 360.0. Values in\nbetween go through all the hues representable in RGB. You can think of\nthis as selecting which pigment will be added to a color.<\/p>\n        ",
                    "memberOf": "painting.HSVColor",
                    "isConstant": false,
                    "href": "painting\/HSVColor\/hue.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double hue\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "saturation",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Saturation, from 0.0 to 1.0. This describes how colorful the color is.\n0.0 implies a shade of grey (i.e. no pigment), and 1.0 implies a color as\nvibrant as that hue gets. You can think of this as the equivalent of\nhow much of a pigment is added.<\/p>\n        ",
                    "memberOf": "painting.HSVColor",
                    "isConstant": false,
                    "href": "painting\/HSVColor\/saturation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double saturation\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "value",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>Value, from 0.0 to 1.0. The \"value\" of a color that, in this context,\ndescribes how bright a color is. A value of 0.0 indicates black, and 1.0\nindicates full intensity color. You can think of this as the equivalent of\nremoving black from the color as value increases.<\/p>\n        ",
                    "memberOf": "painting.HSVColor",
                    "isConstant": false,
                    "href": "painting\/HSVColor\/value.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double value\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/HSVColor-class.html",
            "desc": "<p>A color represented using <a href=\"painting\/HSVColor\/alpha.html\">alpha<\/a>, <a href=\"painting\/HSVColor\/hue.html\">hue<\/a>, <a href=\"painting\/HSVColor\/saturation.html\">saturation<\/a>, and <a href=\"painting\/HSVColor\/value.html\">value<\/a>.<\/p>\n<p>An <a href=\"painting\/HSVColor-class.html\">HSVColor<\/a> is represented in a parameter space that's based on human\nperception of color in pigments (e.g. paint and printer's ink). The\nrepresentation is useful for some color computations (e.g. rotating the hue\nthrough the colors), because interpolation and picking of\ncolors as red, green, and blue channels doesn't always produce intuitive\nresults.<\/p>\n<p>The HSV color space models the way that different pigments are perceived\nwhen mixed. The hue describes which pigment is used, the saturation\ndescribes which shade of the pigment, and the value resembles mixing the\npigment with different amounts of black or white pigment.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/HSLColor-class.html\">HSLColor<\/a>, a color that uses a color space based on human perception of\ncolored light.<\/li>\n<li>\n<a href=\"https:\/\/en.wikipedia.org\/wiki\/HSL_and_HSV\">HSV and HSL<\/a> Wikipedia\narticle, which this implementation is based upon.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "HSVColor"
        },
        {
            "name": "painting.ImageCache",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "ImageCache",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "painting.ImageCache",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ImageCache\/ImageCache.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "clear",
                    "type": "",
                    "desc": "<p>Evicts all entries from the cache.<\/p>\n<p>This is useful if, for instance, the root asset bundle has been updated\nand therefore new images must be obtained.<\/p>\n<p>Images which have not finished loading yet will not be removed from the\ncache, and when they complete they will be inserted as normal.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageCache",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ImageCache\/clear.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _cache.clear();\n  _pendingImages.clear();\n  _currentSizeBytes = 0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "evict",
                    "type": "dart:core.bool",
                    "desc": "<p>Evicts a single entry from the cache, returning true if successful.\nPending images waiting for completion are removed as well, returning true if successful.<\/p>\n<p>When a pending image is removed the listener on it is removed as well to prevent\nit from adding itself to the cache if it eventually completes.<\/p>\n<p>The <code>key<\/code> must be equal to an object used to cache an image in\n<a href=\"painting\/ImageCache\/putIfAbsent.html\">ImageCache.putIfAbsent<\/a>.<\/p>\n<p>If the key is not immediately available, as is common, consider using\n<a href=\"painting\/ImageCache\/evict.html\">ImageProvider.evict<\/a> to call this method indirectly instead.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>, for providing images to the <a href=\"widgets\/Image-class.html\">Image<\/a> widget.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.ImageCache",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageCache\/evict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool evict(Object key) {\n  final _PendingImage pendingImage = _pendingImages.remove(key);\n  if (pendingImage != null) {\n    pendingImage.removeListener();\n    return true;\n  }\n  final _CachedImage image = _cache.remove(key);\n  if (image != null) {\n    _currentSizeBytes -= image.sizeBytes;\n    return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "putIfAbsent",
                    "type": "painting.ImageStreamCompleter",
                    "desc": "<p>Returns the previously cached <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> for the given key, if available;\nif not, calls the given callback to obtain it first. In either case, the\nkey is moved to the \"most recently used\" position.<\/p>\n<p>The arguments must not be null. The <code>loader<\/code> cannot return null.<\/p>\n<p>In the event that the loader throws an exception, it will be caught only if\n<code>onError<\/code> is also provided. When an exception is caught resolving an image,\nno completers are cached and <code>null<\/code> is returned instead of a new\ncompleter.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageCache",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "loader",
                            "type": "painting.ImageStreamCompleter",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "painting.ImageErrorListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageCache\/putIfAbsent.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImageStreamCompleter putIfAbsent(Object key, ImageStreamCompleter loader(), { ImageErrorListener onError }) {\n  assert(key != null);\n  assert(loader != null);\n  ImageStreamCompleter result = _pendingImages[key]?.completer;\n  \/\/ Nothing needs to be done because the image hasn't loaded yet.\n  if (result != null)\n    return result;\n  \/\/ Remove the provider from the list so that we can move it to the\n  \/\/ recently used position below.\n  final _CachedImage image = _cache.remove(key);\n  if (image != null) {\n    _cache[key] = image;\n    return image.completer;\n  }\n  try {\n    result = loader();\n  } catch (error, stackTrace) {\n    if (onError != null) {\n      onError(error, stackTrace);\n      return null;\n    } else {\n      rethrow;\n    }\n  }\n  void listener(ImageInfo info, bool syncCall) {\n    \/\/ Images that fail to load don't contribute to cache size.\n    final int imageSize = info?.image == null ? 0 : info.image.height * info.image.width * 4;\n    final _CachedImage image = _CachedImage(result, imageSize);\n    \/\/ If the image is bigger than the maximum cache size, and the cache size\n    \/\/ is not zero, then increase the cache size to the size of the image plus\n    \/\/ some change.\n    if (maximumSizeBytes &gt; 0 &amp;&amp; imageSize &gt; maximumSizeBytes) {\n      _maximumSizeBytes = imageSize + 1000;\n    }\n    _currentSizeBytes += imageSize;\n    final _PendingImage pendingImage = _pendingImages.remove(key);\n    if (pendingImage != null) {\n      pendingImage.removeListener();\n    }\n\n    _cache[key] = image;\n    _checkCacheSize();\n  }\n  if (maximumSize &gt; 0 &amp;&amp; maximumSizeBytes &gt; 0) {\n    _pendingImages[key] = _PendingImage(result, listener);\n    result.addListener(listener);\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "currentSize",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current number of cached entries.<\/p>\n        ",
                    "memberOf": "painting.ImageCache",
                    "isConstant": false,
                    "href": "painting\/ImageCache\/currentSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get currentSize =&gt; _cache.length;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "currentSizeBytes",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The current size of cached entries in bytes.<\/p>\n        ",
                    "memberOf": "painting.ImageCache",
                    "isConstant": false,
                    "href": "painting\/ImageCache\/currentSizeBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get currentSizeBytes =&gt; _currentSizeBytes;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maximumSize",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Maximum number of entries to store in the cache.<\/p>\n<p>Once this many entries have been cached, the least-recently-used entry is\nevicted when adding a new entry.<\/p>\n        ",
                    "memberOf": "painting.ImageCache",
                    "isConstant": false,
                    "href": "painting\/ImageCache\/maximumSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get maximumSize =&gt; _maximumSize;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maximumSizeBytes",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>Maximum size of entries to store in the cache in bytes.<\/p>\n<p>Once more than this amount of bytes have been cached, the\nleast-recently-used entry is evicted until there are fewer than the\nmaximum bytes.<\/p>\n        ",
                    "memberOf": "painting.ImageCache",
                    "isConstant": false,
                    "href": "painting\/ImageCache\/maximumSizeBytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get maximumSizeBytes =&gt; _maximumSizeBytes;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ImageCache-class.html",
            "desc": "<p>Class for the <a href=\"painting\/imageCache.html\">imageCache<\/a> object.<\/p>\n<p>Implements a least-recently-used cache of up to 1000 images, and up to 100\nMB. The maximum size can be adjusted using <a href=\"painting\/ImageCache\/maximumSize.html\">maximumSize<\/a> and\n<a href=\"painting\/ImageCache\/maximumSizeBytes.html\">maximumSizeBytes<\/a>. Images that are actively in use (i.e. to which the\napplication is holding references, either via <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> objects,\n<a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> objects, <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> objects, or raw <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a>\nobjects) may get evicted from the cache (and thus need to be refetched from\nthe network if they are referenced in the <a href=\"painting\/ImageCache\/putIfAbsent.html\">putIfAbsent<\/a> method), but the raw\nbits are kept in memory for as long as the application is using them.<\/p>\n<p>The <a href=\"painting\/ImageCache\/putIfAbsent.html\">putIfAbsent<\/a> method is the main entry-point to the cache API. It\nreturns the previously cached <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> for the given key, if\navailable; if not, it calls the given callback to obtain it first. In either\ncase, the key is moved to the \"most recently used\" position.<\/p>\n<p>Generally this class is not used directly. The <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> class and its\nsubclasses automatically handle the caching of images.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageCache"
        },
        {
            "name": "painting.ImageConfiguration",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ImageConfiguration\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageConfiguration",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageConfiguration\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ImageConfiguration typedOther = other;\n  return typedOther.bundle == bundle\n      &amp;&amp; typedOther.devicePixelRatio == devicePixelRatio\n      &amp;&amp; typedOther.locale == locale\n      &amp;&amp; typedOther.textDirection == textDirection\n      &amp;&amp; typedOther.size == size\n      &amp;&amp; typedOther.platform == platform;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ImageConfiguration",
                    "type": "",
                    "desc": "<p>Creates an object holding the configuration information for an <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>.<\/p>\n<p>All the arguments are optional. Configuration information is merely\nadvisory and best-effort.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageConfiguration",
                    "sig": "",
                    "params": [
                        {
                            "name": "bundle",
                            "type": "services.AssetBundle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "devicePixelRatio",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "platform",
                            "type": "foundation.TargetPlatform",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ImageConfiguration\/ImageConfiguration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ImageConfiguration({\n  this.bundle,\n  this.devicePixelRatio,\n  this.locale,\n  this.textDirection,\n  this.size,\n  this.platform,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "painting.ImageConfiguration",
                    "desc": "<p>Creates an object holding the configuration information for an <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>.<\/p>\n<p>All the arguments are optional. Configuration information is merely\nadvisory and best-effort.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageConfiguration",
                    "sig": "",
                    "params": [
                        {
                            "name": "bundle",
                            "type": "services.AssetBundle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "devicePixelRatio",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "platform",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageConfiguration\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImageConfiguration copyWith({\n  AssetBundle bundle,\n  double devicePixelRatio,\n  Locale locale,\n  TextDirection textDirection,\n  Size size,\n  String platform,\n}) {\n  return ImageConfiguration(\n    bundle: bundle ?? this.bundle,\n    devicePixelRatio: devicePixelRatio ?? this.devicePixelRatio,\n    locale: locale ?? this.locale,\n    textDirection: textDirection ?? this.textDirection,\n    size: size ?? this.size,\n    platform: platform ?? this.platform,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageConfiguration",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ImageConfiguration\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final StringBuffer result = StringBuffer();\n  result.write('ImageConfiguration(');\n  bool hasArguments = false;\n  if (bundle != null) {\n    if (hasArguments)\n      result.write(', ');\n    result.write('bundle: $bundle');\n    hasArguments = true;\n  }\n  if (devicePixelRatio != null) {\n    if (hasArguments)\n      result.write(', ');\n    result.write('devicePixelRatio: ${devicePixelRatio.toStringAsFixed(1)}');\n    hasArguments = true;\n  }\n  if (locale != null) {\n    if (hasArguments)\n      result.write(', ');\n    result.write('locale: $locale');\n    hasArguments = true;\n  }\n  if (textDirection != null) {\n    if (hasArguments)\n      result.write(', ');\n    result.write('textDirection: $textDirection');\n    hasArguments = true;\n  }\n  if (size != null) {\n    if (hasArguments)\n      result.write(', ');\n    result.write('size: $size');\n    hasArguments = true;\n  }\n  if (platform != null) {\n    if (hasArguments)\n      result.write(', ');\n    result.write('platform: ${describeEnum(platform)}');\n    hasArguments = true;\n  }\n  result.write(')');\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bundle",
                    "type": "services.AssetBundle",
                    "types": [],
                    "desc": "<p>The preferred <a href=\"services\/AssetBundle-class.html\">AssetBundle<\/a> to use if the <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> needs one and\ndoes not have one already selected.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/bundle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AssetBundle bundle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "devicePixelRatio",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The device pixel ratio where the image will be shown.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/devicePixelRatio.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double devicePixelRatio\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/ImageConfiguration\/empty-constant.html",
                    "desc": "<p>An image configuration that provides no additional information.<\/p>\n<p>Useful when resolving an <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> without any context.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const ImageConfiguration empty = ImageConfiguration()\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "empty",
                    "memberOf": "painting.ImageConfiguration"
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ImageConfiguration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ImageConfiguration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ImageConfiguration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ImageConfiguration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ImageConfiguration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ImageConfiguration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(bundle, devicePixelRatio, locale, size, platform);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "types": [],
                    "desc": "<p>The language and region for which to select the image.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "platform",
                    "type": "foundation.TargetPlatform",
                    "types": [],
                    "desc": "<p>The <a href=\"foundation\/TargetPlatform-class.html\">TargetPlatform<\/a> for which assets should be used. This allows images\nto be specified in a platform-neutral fashion yet use different assets on\ndifferent platforms, to match local conventions e.g. for color matching or\nshadows.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/platform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TargetPlatform platform\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The size at which the image will be rendered.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Size size\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "types": [],
                    "desc": "<p>The reading direction of the language for which to select the image.<\/p>\n        ",
                    "memberOf": "painting.ImageConfiguration",
                    "isConstant": false,
                    "href": "painting\/ImageConfiguration\/textDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ImageConfiguration-class.html",
            "desc": "<p>Configuration information passed to the <a href=\"painting\/ImageProvider\/resolve.html\">ImageProvider.resolve<\/a> method to\nselect a specific image.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/createLocalImageConfiguration.html\">createLocalImageConfiguration<\/a>, which creates an <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a>\nbased on ambient configuration in a <a href=\"widgets\/Widget-class.html\">Widget<\/a> environment.<\/li>\n<li>\n<a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>, which uses <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects to determine\nwhich image to obtain.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageConfiguration"
        },
        {
            "name": "painting.ImageErrorListener",
            "type": "",
            "desc": "<p>Signature for reporting errors when resolving images.<\/p>\n<p>Used by <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> and <a href=\"widgets\/precacheImage.html\">precacheImage<\/a> to report errors.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "exception",
                    "type": "",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "stackTrace",
                    "type": "dart:core.StackTrace",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ImageErrorListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ImageErrorListener = void Function(dynamic exception, StackTrace stackTrace);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "painting.ImageInfo",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ImageInfo\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageInfo",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageInfo\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(Object other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final ImageInfo typedOther = other;\n  return typedOther.image == image\n      &amp;&amp; typedOther.scale == scale;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ImageInfo",
                    "type": "",
                    "desc": "<p>Creates an <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object for the given image and scale.<\/p>\n<p>Both the image and the scale must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageInfo",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "dart:ui.Image",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ImageInfo\/ImageInfo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ImageInfo({ @required this.image, this.scale = 1.0 })\n  : assert(image != null),\n    assert(scale != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageInfo",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ImageInfo\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$image @ ${scale}x';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ImageInfo\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ImageInfo\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ImageInfo\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ImageInfo\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ImageInfo\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ImageInfo\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.ImageInfo",
                    "isConstant": false,
                    "href": "painting\/ImageInfo\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(image, scale);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "dart:ui.Image",
                    "types": [],
                    "desc": "<p>The raw image pixels.<\/p>\n<p>This is the object to pass to the <a href=\"dart-ui\/Canvas\/drawImage.html\">Canvas.drawImage<\/a>,\n<a href=\"dart-ui\/Canvas\/drawImageRect.html\">Canvas.drawImageRect<\/a>, or <a href=\"dart-ui\/Canvas\/drawImageNine.html\">Canvas.drawImageNine<\/a> methods when painting\nthe image.<\/p>\n        ",
                    "memberOf": "painting.ImageInfo",
                    "isConstant": false,
                    "href": "painting\/ImageInfo\/image.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ui.Image image\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The linear scale factor for drawing this image at its intended size.<\/p>\n<p>The scale factor applies to the width and the height.<\/p>\n<p>For example, if this is 2.0 it means that there are four image pixels for\nevery one logical pixel, and the image's actual width and height (as given\nby the <a href=\"dart-ui\/Image\/width.html\">dart:ui.Image.width<\/a> and <a href=\"dart-ui\/Image\/height.html\">dart:ui.Image.height<\/a> properties) are double the\nheight and width that should be used when painting the image (e.g. in the\narguments given to <a href=\"dart-ui\/Canvas\/drawImage.html\">Canvas.drawImage<\/a>).<\/p>\n        ",
                    "memberOf": "painting.ImageInfo",
                    "isConstant": false,
                    "href": "painting\/ImageInfo\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ImageInfo-class.html",
            "desc": "<p>A <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a> object with its corresponding scale.<\/p>\n<p>ImageInfo objects are used by <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> objects to represent the\nactual data of the image once it has been obtained.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageInfo"
        },
        {
            "name": "painting.ImageListener",
            "type": "",
            "desc": "<p>Signature for callbacks reporting that an image is available.<\/p>\n<p>Used by <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>.<\/p>\n<p>The <code>synchronousCall<\/code> argument is true if the listener is being invoked\nduring the call to <code>addListener<\/code>. This can be useful if, for example,\n<a href=\"painting\/ImageStream\/addListener.html\">ImageStream.addListener<\/a> is invoked during a frame, so that a new rendering\nframe is requested if the call was asynchronous (after the current frame)\nand no rendering frame is requested if the call was synchronous (within the\nsame stack frame as the call to <a href=\"painting\/ImageStream\/addListener.html\">ImageStream.addListener<\/a>).<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "image",
                    "type": "painting.ImageInfo",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "synchronousCall",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/ImageListener.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">typedef ImageListener = void Function(ImageInfo image, bool synchronousCall);<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "isMixin": false,
            "isEnum": false,
            "isTypedef": true,
            "isConstant": false,
            "dtype": "typedef",
            "types": []
        },
        {
            "name": "painting.ImageProvider",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "ImageProvider",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageProvider",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ImageProvider\/ImageProvider.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ImageProvider();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "evict",
                    "type": "dart:async.Future<dart:core.bool>",
                    "desc": "<p>Evicts an entry from the image cache.<\/p>\n<p>Returns a <a href=\"dart-async\/Future-class.html\">Future<\/a> which indicates whether the value was successfully\nremoved.<\/p>\n<p>The <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> used does not need to be the same instance that was\npassed to an <a href=\"widgets\/Image-class.html\">Image<\/a> widget, but it does need to create a key which is\nequal to one.<\/p>\n<p>The <code>cache<\/code> is optional and defaults to the global image cache.<\/p>\n<p>The <code>configuration<\/code> is optional and defaults to\n<a href=\"painting\/ImageConfiguration\/empty-constant.html\">ImageConfiguration.empty<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following sample code shows how an image loaded using the <a href=\"widgets\/Image-class.html\">Image<\/a>\nwidget can be evicted using a <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a> with a matching URL.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyWidget extends StatelessWidget {\n  final String url = '...';\n\n  @override\n  Widget build(BuildContext context) {\n    return Image.network(url);\n  }\n\n  void evictImage() {\n    final NetworkImage provider = NetworkImage(url);\n    provider.evict().then&lt;void&gt;((bool success) {\n      if (success)\n        debugPrint('removed image!');\n    });\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
                    "static": false,
                    "memberOf": "painting.ImageProvider",
                    "sig": "",
                    "params": [
                        {
                            "name": "cache",
                            "type": "painting.ImageCache",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageProvider\/evict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;bool&gt; evict({ ImageCache cache, ImageConfiguration configuration = ImageConfiguration.empty }) async {\n  cache ??= imageCache;\n  final T key = await obtainKey(configuration);\n  return cache.evict(key);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:core.bool"
                    ]
                },
                {
                    "name": "load",
                    "type": "painting.ImageStreamCompleter",
                    "desc": "<p>Converts a key into an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a>, and begins fetching the\nimage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageProvider",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageProvider\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nImageStreamCompleter load(T key);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "obtainKey",
                    "type": "dart:async.Future",
                    "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/ImageProvider\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageProvider",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageProvider\/obtainKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFuture&lt;T&gt; obtainKey(ImageConfiguration configuration);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "resolve",
                    "type": "painting.ImageStream",
                    "desc": "<p>Resolves this image provider using the given <code>configuration<\/code>, returning\nan <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>.<\/p>\n<p>This is the public entry-point of the <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> class hierarchy.<\/p>\n<p>Subclasses should implement <a href=\"painting\/ImageProvider\/obtainKey.html\">obtainKey<\/a> and <a href=\"painting\/ImageProvider\/load.html\">load<\/a>, which are used by this\nmethod.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageProvider",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageProvider\/resolve.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImageStream resolve(ImageConfiguration configuration) {\n  assert(configuration != null);\n  final ImageStream stream = ImageStream();\n  T obtainedKey;\n  Future&lt;void&gt; handleError(dynamic exception, StackTrace stack) async {\n    await null; \/\/ wait an event turn in case a listener has been added to the image stream.\n    final _ErrorImageCompleter imageCompleter = _ErrorImageCompleter();\n    stream.setCompleter(imageCompleter);\n    imageCompleter.setError(\n      exception: exception,\n      stack: stack,\n      context: 'while resolving an image',\n      silent: true, \/\/ could be a network error or whatnot\n      informationCollector: (StringBuffer information) {\n        information.writeln('Image provider: $this');\n        information.writeln('Image configuration: $configuration');\n        if (obtainedKey != null) {\n          information.writeln('Image key: $obtainedKey');\n        }\n      },\n    );\n  }\n\n  \/\/ `obtainKey` can throw both sync and async errors.\n  \/\/ `catchError` handles cases where async errors are thrown and the try block is for sync errors.\n  \/\/\n  \/\/ `onError` callback on [ImageCache] handles the cases where `obtainKey` is a sync future and `load` throws.\n  Future&lt;T&gt; key;\n  try {\n    key = obtainKey(configuration);\n  } catch (error, stackTrace) {\n    handleError(error, stackTrace);\n    return stream;\n  }\n\n  key.then&lt;void&gt;((T key) {\n    obtainedKey = key;\n    final ImageStreamCompleter completer = PaintingBinding.instance\n        .imageCache.putIfAbsent(key, () =&gt; load(key), onError: handleError);\n    if (completer != null) {\n      stream.setCompleter(completer);\n    }\n  }).catchError(handleError);\n\n  return stream;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageProvider",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ImageProvider\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType()';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.AssetBundleImageProvider",
                "painting.AssetImage",
                "painting.ExactAssetImage",
                "painting.FileImage",
                "painting.MemoryImage",
                "painting.NetworkImage"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ImageProvider-class.html",
            "desc": "<p>Identifies an image without committing to the precise final asset. This\nallows a set of images to be identified and for the precise image to later\nbe resolved based on the environment, e.g. the device pixel ratio.<\/p>\n<p>To obtain an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> from an <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>, call <a href=\"painting\/ImageProvider\/resolve.html\">resolve<\/a>,\npassing it an <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> object.<\/p>\n<p><a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> uses the global <a href=\"painting\/imageCache.html\">imageCache<\/a> to cache images.<\/p>\n<p>The type argument <code>T<\/code> is the type of the object used to represent a resolved\nconfiguration. This is also the type used for the key in the image cache. It\nshould be immutable and implement the <code>==<\/code> operator and the <a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>\ngetter. Subclasses should subclass a variant of <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> with an\nexplicit <code>T<\/code> type argument.<\/p>\n<p>The type argument does not have to be specified when using the type as an\nargument (where any image provider is acceptable).<\/p>\n<p>The following image formats are supported: JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following shows the code required to write a widget that fully conforms\nto the <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> and <a href=\"widgets\/Widget-class.html\">Widget<\/a> protocols. (It is essentially a\nbare-bones version of the <a href=\"widgets\/Image-class.html\">widgets.Image<\/a> widget.)\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class MyImage extends StatefulWidget {\n  const MyImage({\n    Key key,\n    @required this.imageProvider,\n  }) : assert(imageProvider != null),\n       super(key: key);\n\n  final ImageProvider imageProvider;\n\n  @override\n  _MyImageState createState() =&gt; _MyImageState();\n}\n\nclass _MyImageState extends State&lt;MyImage&gt; {\n  ImageStream _imageStream;\n  ImageInfo _imageInfo;\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    \/\/ We call _getImage here because createLocalImageConfiguration() needs to\n    \/\/ be called again if the dependencies changed, in case the changes relate\n    \/\/ to the DefaultAssetBundle, MediaQuery, etc, which that method uses.\n    _getImage();\n  }\n\n  @override\n  void didUpdateWidget(MyImage oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    if (widget.imageProvider != oldWidget.imageProvider)\n      _getImage();\n  }\n\n  void _getImage() {\n    final ImageStream oldImageStream = _imageStream;\n    _imageStream = widget.imageProvider.resolve(createLocalImageConfiguration(context));\n    if (_imageStream.key != oldImageStream?.key) {\n      \/\/ If the keys are the same, then we got the same image back, and so we don't\n      \/\/ need to update the listeners. If the key changed, though, we must make sure\n      \/\/ to switch our listeners to the new image stream.\n      oldImageStream?.removeListener(_updateImage);\n      _imageStream.addListener(_updateImage);\n    }\n  }\n\n  void _updateImage(ImageInfo imageInfo, bool synchronousCall) {\n    setState(() {\n      \/\/ Trigger a build whenever the image changes.\n      _imageInfo = imageInfo;\n    });\n  }\n\n  @override\n  void dispose() {\n    _imageStream.removeListener(_updateImage);\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return RawImage(\n      image: _imageInfo?.image, \/\/ this is a dart:ui Image object\n      scale: _imageInfo?.scale ?? 1.0,\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageProvider"
        },
        {
            "type": "",
            "name": "painting.ImageRepeat",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageRepeat",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ImageRepeat\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ImageRepeat-class.html",
            "desc": "<p>How to paint any portions of a box not covered by an image.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "ImageRepeat"
        },
        {
            "name": "painting.ImageStream",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "ImageStream",
                    "type": "",
                    "desc": "<p>Create an initially unbound image stream.<\/p>\n<p>Once an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> is available, call <a href=\"painting\/ImageStream\/setCompleter.html\">setCompleter<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStream",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ImageStream\/ImageStream.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ImageStream();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addListener",
                    "type": "",
                    "desc": "<p>Adds a listener callback that is called whenever a new concrete <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a>\nobject is available. If a concrete image is already available, this object\nwill call the listener synchronously.<\/p>\n<p>If the assigned <a href=\"painting\/ImageStream\/completer.html\">completer<\/a> completes multiple images over its lifetime,\nthis listener will fire multiple times.<\/p>\n<p>The listener will be passed a flag indicating whether a synchronous call\noccurred. If the listener is added within a render object paint function,\nthen use this flag to avoid calling <a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a> during\na paint.<\/p>\n<p>An <a href=\"painting\/ImageErrorListener.html\">ImageErrorListener<\/a> can also optionally be added along with the\n<code>listener<\/code>. If an error occurred, <code>onError<\/code> will be called instead of\n<code>listener<\/code>.<\/p>\n<p>If a <code>listener<\/code> or <code>onError<\/code> handler is registered multiple times, then it\nwill be called multiple times when the image stream completes (whether\nbecause a new image is available or because an error occurs,\nrespectively). In general, registering a listener multiple times is\ndiscouraged because <a href=\"painting\/ImageStream\/removeListener.html\">removeListener<\/a> will remove the first instance that\nwas added, even if it was added with a different <code>onError<\/code> than the\nintended paired <code>addListener<\/code> call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStream",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "painting.ImageListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "painting.ImageErrorListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStream\/addListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addListener(ImageListener listener, { ImageErrorListener onError }) {\n  if (_completer != null)\n    return _completer.addListener(listener, onError: onError);\n  _listeners ??= &lt;_ImageListenerPair&gt;[];\n  _listeners.add(_ImageListenerPair(listener, onError));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/ImageStream\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStream",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStream\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(ObjectFlagProperty&lt;ImageStreamCompleter&gt;(\n    'completer',\n    _completer,\n    ifPresent: _completer?.toStringShort(),\n    ifNull: 'unresolved',\n  ));\n  properties.add(ObjectFlagProperty&lt;List&lt;_ImageListenerPair&gt;&gt;(\n    'listeners',\n    _listeners,\n    ifPresent: '${_listeners?.length} listener${_listeners?.length == 1 ? \"\" : \"s\" }',\n    ifNull: 'no listeners',\n    level: _completer != null ? DiagnosticLevel.hidden : DiagnosticLevel.info,\n  ));\n  _completer?.debugFillProperties(properties);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeListener",
                    "type": "",
                    "desc": "<p>Stop listening for new concrete <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> objects and errors from\nthe <code>listener<\/code>'s associated <a href=\"painting\/ImageErrorListener.html\">ImageErrorListener<\/a>.<\/p>\n<p>If <code>listener<\/code> has been added multiple times, this removes the first\ninstance of the listener, along with the <code>onError<\/code> listener that was\nregistered with that first instance. This might not be the instance that\nthe <code>addListener<\/code> corresponding to this <code>removeListener<\/code> had added.<\/p>\n<p>For example, if one widget calls <a href=\"painting\/ImageStream\/addListener.html\">addListener<\/a> with a global static\nfunction and a private error handler, and another widget calls\n<a href=\"painting\/ImageStream\/addListener.html\">addListener<\/a> with the same global static function but a different private\nerror handler, then the second widget is disposed and removes the image\nlistener (the aforementioned global static function), it will remove the\nerror handler from the first widget, not the second. If an error later\noccurs, the first widget, which is still supposedly listening, will not\nreceive any messages, while the second, which is supposedly disposed, will\nhave its callback invoked.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStream",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "painting.ImageListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStream\/removeListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeListener(ImageListener listener) {\n  if (_completer != null)\n    return _completer.removeListener(listener);\n  assert(_listeners != null);\n  for (int i = 0; i &lt; _listeners.length; i += 1) {\n    if (_listeners[i].listener == listener) {\n      _listeners.removeAt(i);\n      break;\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setCompleter",
                    "type": "",
                    "desc": "<p>Assigns a particular <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> to this <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>.<\/p>\n<p>This is usually done automatically by the <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> that created the\n<a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>.<\/p>\n<p>This method can only be called once per stream. To have an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>\nrepresent multiple images over time, assign it a completer that\ncompletes several images in succession.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStream",
                    "sig": "",
                    "params": [
                        {
                            "name": "value",
                            "type": "painting.ImageStreamCompleter",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStream\/setCompleter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setCompleter(ImageStreamCompleter value) {\n  assert(_completer == null);\n  _completer = value;\n  if (_listeners != null) {\n    final List&lt;_ImageListenerPair&gt; initialListeners = _listeners;\n    _listeners = null;\n    for (_ImageListenerPair listenerPair in initialListeners) {\n      _completer.addListener(\n        listenerPair.listener,\n        onError: listenerPair.errorListener,\n      );\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "completer",
                    "type": "painting.ImageStreamCompleter",
                    "types": [],
                    "desc": "<p>The completer that has been assigned to this image stream.<\/p>\n<p>Generally there is no need to deal with the completer directly.<\/p>\n        ",
                    "memberOf": "painting.ImageStream",
                    "isConstant": false,
                    "href": "painting\/ImageStream\/completer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ImageStreamCompleter get completer =&gt; _completer;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "key",
                    "type": "dart:core.Object",
                    "types": [],
                    "desc": "<p>Returns an object which can be used with <code>==<\/code> to determine if this\n<a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> shares the same listeners list as another <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>.<\/p>\n<p>This can be used to avoid un-registering and re-registering listeners\nafter calling <a href=\"painting\/ImageProvider\/resolve.html\">ImageProvider.resolve<\/a> on a new, but possibly equivalent,\n<a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>.<\/p>\n<p>The key may change once in the lifetime of the object. When it changes, it\nwill go from being different than other <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>'s keys to\npotentially being the same as others'. No notification is sent when this\nhappens.<\/p>\n        ",
                    "memberOf": "painting.ImageStream",
                    "isConstant": false,
                    "href": "painting\/ImageStream\/key.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Object get key =&gt; _completer != null ? _completer : this;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ImageStream-class.html",
            "desc": "<p>A handle to an image resource.<\/p>\n<p>ImageStream represents a handle to a <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a> object and its scale\n(together represented by an <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object). The underlying image object\nmight change over time, either because the image is animating or because the\nunderlying image resource was mutated.<\/p>\n<p>ImageStream objects can also represent an image that hasn't finished\nloading.<\/p>\n<p>ImageStream objects are backed by <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> objects.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>, which has an example that includes the use of an\n<a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> in a <a href=\"widgets\/Widget-class.html\">Widget<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageStream"
        },
        {
            "name": "painting.ImageStreamCompleter",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "ImageStreamCompleter",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "painting.ImageStreamCompleter",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ImageStreamCompleter\/ImageStreamCompleter.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "addListener",
                    "type": "",
                    "desc": "<p>Adds a listener callback that is called whenever a new concrete <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a>\nobject is available or an error is reported. If a concrete image is\nalready available, or if an error has been already reported, this object\nwill call the listener or error listener synchronously.<\/p>\n<p>If the <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> completes multiple images over its lifetime,\nthis listener will fire multiple times.<\/p>\n<p>The listener will be passed a flag indicating whether a synchronous call\noccurred. If the listener is added within a render object paint function,\nthen use this flag to avoid calling <a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a> during\na paint.<\/p>\n<p>An <a href=\"painting\/ImageErrorListener.html\">ImageErrorListener<\/a> can also optionally be added along with the\n<code>listener<\/code>. If an error occurred, <code>onError<\/code> will be called instead of\n<code>listener<\/code>.<\/p>\n<p>If a <code>listener<\/code> or <code>onError<\/code> handler is registered multiple times, then it\nwill be called multiple times when the image stream completes (whether\nbecause a new image is available or because an error occurs,\nrespectively). In general, registering a listener multiple times is\ndiscouraged because <a href=\"painting\/ImageStreamCompleter\/removeListener.html\">removeListener<\/a> will remove the first instance that\nwas added, even if it was added with a different <code>onError<\/code> than the\nintended paired <code>addListener<\/code> call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "painting.ImageListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "painting.ImageErrorListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStreamCompleter\/addListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addListener(ImageListener listener, { ImageErrorListener onError }) {\n  _listeners.add(_ImageListenerPair(listener, onError));\n  if (_currentImage != null) {\n    try {\n      listener(_currentImage, true);\n    } catch (exception, stack) {\n      reportError(\n        context: 'by a synchronously-called image listener',\n        exception: exception,\n        stack: stack,\n      );\n    }\n  }\n  if (_currentError != null &amp;&amp; onError != null) {\n    try {\n      onError(_currentError.exception, _currentError.stack);\n    } catch (exception, stack) {\n      FlutterError.reportError(\n        FlutterErrorDetails(\n          exception: exception,\n          library: 'image resource service',\n          context: 'by a synchronously-called image error listener',\n          stack: stack,\n        ),\n      );\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Accumulates a list of strings describing the object's state. Subclasses\nshould override this to have their information included in <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "description",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStreamCompleter\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder description) {\n  super.debugFillProperties(description);\n  description.add(DiagnosticsProperty&lt;ImageInfo&gt;('current', _currentImage, ifNull: 'unresolved', showName: false));\n  description.add(ObjectFlagProperty&lt;List&lt;_ImageListenerPair&gt;&gt;(\n    'listeners',\n    _listeners,\n    ifPresent: '${_listeners?.length} listener${_listeners?.length == 1 ? \"\" : \"s\" }',\n  ));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeListener",
                    "type": "",
                    "desc": "<p>Stop listening for new concrete <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> objects and errors from\nits associated <a href=\"painting\/ImageErrorListener.html\">ImageErrorListener<\/a>.<\/p>\n<p>If <code>listener<\/code> has been added multiple times, this removes the first\ninstance of the listener, along with the <code>onError<\/code> listener that was\nregistered with that first instance. This might not be the instance that\nthe <code>addListener<\/code> corresponding to this <code>removeListener<\/code> had added.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "painting.ImageListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStreamCompleter\/removeListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeListener(ImageListener listener) {\n  for (int i = 0; i &lt; _listeners.length; i += 1) {\n    if (_listeners[i].listener == listener) {\n      _listeners.removeAt(i);\n      break;\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "reportError",
                    "type": "",
                    "desc": "<p>Calls all the registered error listeners to notify them of an error that\noccurred while resolving the image.<\/p>\n<p>If no error listeners are attached, a <a href=\"foundation\/FlutterError-class.html\">FlutterError<\/a> will be reported\ninstead.<\/p>\n<p>The <code>context<\/code> should be a string describing where the error was caught, in\na form that will make sense in English when following the word \"thrown\",\nas in \"thrown while obtaining the image from the network\" (for the context\n\"while obtaining the image from the network\").<\/p>\n<p>The <code>exception<\/code> is the error being reported; the <code>stack<\/code> is the\n<a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a> associated with the exception.<\/p>\n<p>The <code>informationCollector<\/code> is a callback (of type <a href=\"foundation\/InformationCollector.html\">InformationCollector<\/a>)\nthat is called when the exception is used by <a href=\"painting\/ImageStreamCompleter\/reportError.html\">FlutterError.reportError<\/a>.\nIt is used to obtain further details to include in the logs, which may be\nexpensive to collect, and thus should only be collected if the error is to\nbe logged in the first place.<\/p>\n<p>The <code>silent<\/code> argument causes the exception to not be reported to the logs\nin release builds, if passed to <a href=\"painting\/ImageStreamCompleter\/reportError.html\">FlutterError.reportError<\/a>. (It is still\nsent to error handlers.) It should be set to true if the error is one that\nis expected to be encountered in release builds, for example network\nerrors. That way, logs on end-user devices will not have spurious\nmessages, but errors during development will still be reported.<\/p>\n<p>See <a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> for further details on these values.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "context",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "exception",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        },
                        {
                            "name": "stack",
                            "type": "dart:core.StackTrace",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "informationCollector",
                            "type": "foundation.InformationCollector",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "silent",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStreamCompleter\/reportError.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid reportError({\n  String context,\n  dynamic exception,\n  StackTrace stack,\n  InformationCollector informationCollector,\n  bool silent = false,\n}) {\n  _currentError = FlutterErrorDetails(\n    exception: exception,\n    stack: stack,\n    library: 'image resource service',\n    context: context,\n    informationCollector: informationCollector,\n    silent: silent,\n  );\n\n  final List&lt;ImageErrorListener&gt; localErrorListeners =\n    _listeners.map&lt;ImageErrorListener&gt;(\n      (_ImageListenerPair listenerPair) =&gt; listenerPair.errorListener\n    ).where(\n      (ImageErrorListener errorListener) =&gt; errorListener != null\n    ).toList();\n\n  if (localErrorListeners.isEmpty) {\n    FlutterError.reportError(_currentError);\n  } else {\n    for (ImageErrorListener errorListener in localErrorListeners) {\n      try {\n        errorListener(exception, stack);\n      } catch (exception, stack) {\n        FlutterError.reportError(\n          FlutterErrorDetails(\n            context: 'when reporting an error to an image listener',\n            library: 'image resource service',\n            exception: exception,\n            stack: stack,\n          ),\n        );\n      }\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "setImage",
                    "type": "",
                    "desc": "<p>Calls all the registered listeners to notify them of a new image.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "painting.ImageInfo",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ImageStreamCompleter\/setImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nvoid setImage(ImageInfo image) {\n  _currentImage = image;\n  if (_listeners.isEmpty)\n    return;\n  final List&lt;ImageListener&gt; localListeners = _listeners.map&lt;ImageListener&gt;(\n    (_ImageListenerPair listenerPair) =&gt; listenerPair.listener\n  ).toList();\n  for (ImageListener listener in localListeners) {\n    try {\n      listener(image, false);\n    } catch (exception, stack) {\n      reportError(\n        context: 'by an image listener',\n        exception: exception,\n        stack: stack,\n      );\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "hasListeners",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether any listeners are currently registered.<\/p>\n<p>Clients should not depend on this value for their behavior, because having\none listener's logic change when another listener happens to start or stop\nlistening will lead to extremely hard-to-track bugs. Subclasses might use\nthis information to determine whether to do any work when there are no\nlisteners, however; for example, <a href=\"painting\/MultiFrameImageStreamCompleter-class.html\">MultiFrameImageStreamCompleter<\/a> uses it\nto determine when to iterate through frames of an animated image.<\/p>\n<p>Typically this is used by overriding <a href=\"painting\/ImageStreamCompleter\/addListener.html\">addListener<\/a>, checking if\n<a href=\"painting\/ImageStreamCompleter\/hasListeners.html\">hasListeners<\/a> is false before calling <code>super.addListener()<\/code>, and if so,\nstarting whatever work is needed to determine when to call\n<code>notifyListeners<\/code>; and similarly, by overriding <a href=\"painting\/ImageStreamCompleter\/removeListener.html\">removeListener<\/a>, checking\nif <a href=\"painting\/ImageStreamCompleter\/hasListeners.html\">hasListeners<\/a> is false after calling <code>super.removeListener()<\/code>, and if\nso, stopping that same work.<\/p>\n        ",
                    "memberOf": "painting.ImageStreamCompleter",
                    "isConstant": false,
                    "href": "painting\/ImageStreamCompleter\/hasListeners.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nbool get hasListeners =&gt; _listeners.isNotEmpty;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.MultiFrameImageStreamCompleter",
                "painting.OneFrameImageStreamCompleter"
            ],
            "realImplementors": [
                "painting.MultiFrameImageStreamCompleter",
                "painting.OneFrameImageStreamCompleter"
            ],
            "cn": [],
            "href": "painting\/ImageStreamCompleter-class.html",
            "desc": "<p>Base class for those that manage the loading of <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a> objects for\n<a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>s.<\/p>\n<p><code>ImageStreamListener<\/code> objects are rarely constructed directly. Generally, an\n<a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> subclass will return an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> and automatically\nconfigure it with the right <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> when possible.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ImageStreamCompleter"
        },
        {
            "name": "painting.LinearGradient",
            "extends": [
                "painting.Gradient",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/LinearGradient\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final LinearGradient typedOther = other;\n  if (begin != typedOther.begin ||\n      end != typedOther.end ||\n      tileMode != typedOther.tileMode ||\n      colors?.length != typedOther.colors?.length ||\n      stops?.length != typedOther.stops?.length)\n    return false;\n  if (colors != null) {\n    assert(typedOther.colors != null);\n    assert(colors.length == typedOther.colors.length);\n    for (int i = 0; i &lt; colors.length; i += 1) {\n      if (colors[i] != typedOther.colors[i])\n        return false;\n    }\n  }\n  if (stops != null) {\n    assert(typedOther.stops != null);\n    assert(stops.length == typedOther.stops.length);\n    for (int i = 0; i &lt; stops.length; i += 1) {\n      if (stops[i] != typedOther.stops[i])\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "LinearGradient",
                    "type": "",
                    "desc": "<p>Creates a linear gradient.<\/p>\n<p>The <code>colors<\/code> argument must not be null. If <code>stops<\/code> is non-null, it must\nhave the same length as <code>colors<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "begin",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "end",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "stops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "tileMode",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/LinearGradient\/LinearGradient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LinearGradient({\n  this.begin = Alignment.centerLeft,\n  this.end = Alignment.centerRight,\n  @required List&lt;Color&gt; colors,\n  List&lt;double&gt; stops,\n  this.tileMode = TileMode.clamp,\n}) : assert(begin != null),\n     assert(end != null),\n     assert(tileMode != null),\n     super(colors: colors, stops: stops);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createShader",
                    "type": "dart:ui.Shader",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/createShader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShader createShader(Rect rect, { TextDirection textDirection }) {\n  return ui.Gradient.linear(\n    begin.resolve(textDirection).withinRect(rect),\n    end.resolve(textDirection).withinRect(rect),\n    colors, _impliedStops(), tileMode,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.LinearGradient",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>s.<\/p>\n<p>If either gradient is null, this function linearly interpolates from a\na gradient that matches the other gradient in <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a>, <a href=\"painting\/LinearGradient\/end.html\">end<\/a>, <a href=\"painting\/Gradient\/stops.html\">stops<\/a> and\n<a href=\"painting\/LinearGradient\/tileMode.html\">tileMode<\/a> and with the same <a href=\"painting\/Gradient\/colors.html\">colors<\/a> but transparent (using <a href=\"painting\/LinearGradient\/scale.html\">scale<\/a>).<\/p>\n<p>If neither gradient is null, they must have the same number of <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents a position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.LinearGradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.LinearGradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static LinearGradient lerp(LinearGradient a, LinearGradient b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  final _ColorsAndStops interpolated = _interpolateColorsAndStops(\n      a.colors,\n      a._impliedStops(),\n      b.colors,\n      b._impliedStops(),\n      t,\n  );\n  return LinearGradient(\n    begin: AlignmentGeometry.lerp(a.begin, b.begin, t),\n    end: AlignmentGeometry.lerp(a.end, b.end, t),\n    colors: interpolated.colors,\n    stops: interpolated.stops,\n    tileMode: t &lt; 0.5 ? a.tileMode : b.tileMode, \/\/ TODO(ianh): interpolate tile mode\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/LinearGradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/LinearGradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/LinearGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/LinearGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null || (a is LinearGradient))\n    return LinearGradient.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/LinearGradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/LinearGradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/LinearGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/LinearGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpTo(Gradient b, double t) {\n  if (b == null || (b is LinearGradient))\n    return LinearGradient.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "painting.LinearGradient",
                    "desc": "<p>Returns a new <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> with its colors scaled by the given factor.<\/p>\n<p>Since the alpha component of the Color is what is scaled, a factor\nof 0.0 or less results in a gradient that is fully transparent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nLinearGradient scale(double factor) {\n  return LinearGradient(\n    begin: begin,\n    end: end,\n    colors: colors.map&lt;Color&gt;((Color color) =&gt; Color.lerp(null, color, factor)).toList(),\n    stops: stops,\n    tileMode: tileMode,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.LinearGradient",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/LinearGradient\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($begin, $end, $colors, $stops, $tileMode)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "begin",
                    "type": "painting.AlignmentGeometry",
                    "types": [],
                    "desc": "<p>The offset at which stop 0.0 of the gradient is placed.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>For example, a begin offset of (-1.0, 0.0) is half way down the\nleft side of the box.<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the\nleft in left-to-right contexts and the right in right-to-left contexts. If\na text-direction-dependent value is provided here, then the <a href=\"painting\/LinearGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
                    "memberOf": "painting.LinearGradient",
                    "isConstant": false,
                    "href": "painting\/LinearGradient\/begin.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry begin\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "painting.AlignmentGeometry",
                    "types": [],
                    "desc": "<p>The offset at which stop 1.0 of the gradient is placed.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>For example, a begin offset of (1.0, 0.0) is half way down the\nright side of the box.<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the left in\nleft-to-right contexts and the right in right-to-left contexts. If a\ntext-direction-dependent value is provided here, then the <a href=\"painting\/LinearGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
                    "memberOf": "painting.LinearGradient",
                    "isConstant": false,
                    "href": "painting\/LinearGradient\/end.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry end\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/LinearGradient\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/LinearGradient\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.LinearGradient",
                    "isConstant": false,
                    "href": "painting\/LinearGradient\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(begin, end, tileMode, hashList(colors), hashList(stops));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "types": [],
                    "desc": "<p>How this gradient should tile the plane beyond in the region before\n<a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> and after <a href=\"painting\/LinearGradient\/end.html\">end<\/a>.<\/p>\n<p>For details, see <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_linear.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_linear.png\"><\/p>\n        ",
                    "memberOf": "painting.LinearGradient",
                    "isConstant": false,
                    "href": "painting\/LinearGradient\/tileMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TileMode tileMode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/LinearGradient-class.html",
            "desc": "<p>A 2D linear gradient.<\/p>\n<p>This class is used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> to represent linear gradients. This\nabstracts out the arguments to the <a href=\"dart-ui\/Gradient\/Gradient.linear.html\">new ui.Gradient.linear<\/a> constructor from\nthe <code>dart:ui<\/code> library.<\/p>\n<p>A gradient has two anchor points, <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> and <a href=\"painting\/LinearGradient\/end.html\">end<\/a>. The <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> point\ncorresponds to 0.0, and the <a href=\"painting\/LinearGradient\/end.html\">end<\/a> point corresponds to 1.0. These points are\nexpressed in fractions, so that the same gradient can be reused with varying\nsized boxes without changing the parameters. (This contrasts with <a href=\"dart-ui\/Gradient\/Gradient.linear.html\">new\nui.Gradient.linear<\/a>, whose arguments are expressed in logical pixels.)<\/p>\n<p>The <a href=\"painting\/Gradient\/colors.html\">colors<\/a> are described by a list of <a href=\"dart-ui\/Color-class.html\">Color<\/a> objects. There must be at\nleast two colors. The <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list, if specified, must have the same length\nas <a href=\"painting\/Gradient\/colors.html\">colors<\/a>. It specifies fractions of the vector from start to end, between\n0.0 and 1.0, for each color. If it is null, a uniform distribution is\nassumed.<\/p>\n<p>The region of the canvas before <a href=\"painting\/LinearGradient\/begin.html\">begin<\/a> and after <a href=\"painting\/LinearGradient\/end.html\">end<\/a> is colored according\nto <a href=\"painting\/LinearGradient\/tileMode.html\">tileMode<\/a>.<\/p>\n<p>Typically this class is used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which does the painting.\nTo use a <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> to paint on a canvas directly, see <a href=\"painting\/LinearGradient\/createShader.html\">createShader<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample draws a picture that looks like vertical window shades by having\na <a href=\"widgets\/Container-class.html\">Container<\/a> display a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with a <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: BoxDecoration(\n    gradient: LinearGradient(\n      begin: Alignment.topLeft,\n      end: Alignment(0.8, 0.0), \/\/ 10% of the width, so there are ten blinds.\n      colors: [const Color(0xFFFFFFEE), const Color(0xFF999999)], \/\/ whitish to gray\n      tileMode: TileMode.repeated, \/\/ repeats the gradient over the canvas\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, which displays a gradient in concentric circles, and\nhas an example which shows a different way to use <a href=\"painting\/Gradient-class.html\">Gradient<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>, which displays a gradient in a sweeping arc around a\ncenter point.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which can take a <a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a> in its\n<a href=\"painting\/BoxDecoration\/gradient.html\">BoxDecoration.gradient<\/a> property.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "LinearGradient"
        },
        {
            "name": "painting.MatrixUtils",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "createCylindricalProjectionTransform",
                    "type": "vector_math_64.Matrix4",
                    "desc": "<p>Create a transformation matrix which mimics the effects of tangentially\nwrapping the plane on which this transform is applied around a cylinder\nand then looking at the cylinder from a point outside the cylinder.<\/p>\n<p>The <code>radius<\/code> simulates the radius of the cylinder the plane is being\nwrapped onto. If the transformation is applied to a 0-dimensional dot\ninstead of a plane, the dot would simply translate by +\/- <code>radius<\/code> pixels\nalong the <code>orientation<\/code> <a href=\"painting\/Axis-class.html\">Axis<\/a> when rotating from 0 to +\/- 90 degrees.<\/p>\n<p>A positive radius means the object is closest at 0 <code>angle<\/code> and a negative\nradius means the object is closest at \u03c0 <code>angle<\/code> or 180 degrees.<\/p>\n<p>The <code>angle<\/code> argument is the difference in angle in radians between the\nobject and the viewing point. A positive <code>angle<\/code> on a positive <code>radius<\/code>\nmoves the object up when <code>orientation<\/code> is vertical and right when\nhorizontal.<\/p>\n<p>The transformation is always done such that a 0 <code>angle<\/code> keeps the\ntransformed object at exactly the same size as before regardless of\n<code>radius<\/code> and <code>perspective<\/code> when <code>radius<\/code> is positive.<\/p>\n<p>The <code>perspective<\/code> argument is a number between 0 and 1 where 0 means\nlooking at the object from infinitely far with an infinitely narrow field\nof view and 1 means looking at the object from infinitely close with an\ninfinitely wide field of view. Defaults to a sane but arbitrary 0.001.<\/p>\n<p>The <code>orientation<\/code> is the direction of the rotation axis.<\/p>\n<p>Because the viewing position is a point, it's never possible to see the\nouter side of the cylinder at or past +\/- \u03c0 \/ 2 or 90 degrees and it's\nalmost always possible to end up seeing the inner side of the cylinder\nor the back side of the transformed plane before \u03c0 \/ 2 when perspective &gt; 0.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "angle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "perspective",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "orientation",
                            "type": "painting.Axis",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/createCylindricalProjectionTransform.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Matrix4 createCylindricalProjectionTransform({\n  @required double radius,\n  @required double angle,\n  double perspective = 0.001,\n  Axis orientation = Axis.vertical,\n}) {\n  assert(radius != null);\n  assert(angle != null);\n  assert(perspective &gt;= 0 &amp;&amp; perspective &lt;= 1.0);\n  assert(orientation != null);\n\n  \/\/ Pre-multiplied matrix of a projection matrix and a view matrix.\n  \/\/\n  \/\/ Projection matrix is a simplified perspective matrix\n  \/\/ http:\/\/web.iitd.ac.in\/~hegde\/cad\/lecture\/L9_persproj.pdf\n  \/\/ in the form of\n  \/\/ [[1.0, 0.0, 0.0, 0.0],\n  \/\/  [0.0, 1.0, 0.0, 0.0],\n  \/\/  [0.0, 0.0, 1.0, 0.0],\n  \/\/  [0.0, 0.0, -perspective, 1.0]]\n  \/\/\n  \/\/ View matrix is a simplified camera view matrix.\n  \/\/ Basically re-scales to keep object at original size at angle = 0 at\n  \/\/ any radius in the form of\n  \/\/ [[1.0, 0.0, 0.0, 0.0],\n  \/\/  [0.0, 1.0, 0.0, 0.0],\n  \/\/  [0.0, 0.0, 1.0, -radius],\n  \/\/  [0.0, 0.0, 0.0, 1.0]]\n  Matrix4 result = Matrix4.identity()\n      ..setEntry(3, 2, -perspective)\n      ..setEntry(2, 3, -radius)\n      ..setEntry(3, 3, perspective * radius + 1.0);\n\n  \/\/ Model matrix by first translating the object from the origin of the world\n  \/\/ by radius in the z axis and then rotating against the world.\n  result *= (\n      orientation == Axis.horizontal\n          ? Matrix4.rotationY(angle)\n          : Matrix4.rotationX(angle)\n  ) * Matrix4.translationValues(0.0, 0.0, radius);\n\n  \/\/ Essentially perspective * view * model.\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getAsScale",
                    "type": "dart:core.double",
                    "desc": "<p>Returns the given <code>transform<\/code> matrix as a <a href=\"dart-core\/double-class.html\">double<\/a> describing a uniform\nscale, if the matrix is nothing but a symmetric 2D scale transform.<\/p>\n<p>Otherwise, returns null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "transform",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/getAsScale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static double getAsScale(Matrix4 transform) {\n  assert(transform != null);\n  final Float64List values = transform.storage;\n  \/\/ Values are stored in column-major order.\n  if (values[1] == 0.0 &amp;&amp; \/\/ col 1 (value 0 is the scale)\n      values[2] == 0.0 &amp;&amp;\n      values[3] == 0.0 &amp;&amp;\n      values[4] == 0.0 &amp;&amp; \/\/ col 2 (value 5 is the scale)\n      values[6] == 0.0 &amp;&amp;\n      values[7] == 0.0 &amp;&amp;\n      values[8] == 0.0 &amp;&amp; \/\/ col 3\n      values[9] == 0.0 &amp;&amp;\n      values[10] == 1.0 &amp;&amp;\n      values[11] == 0.0 &amp;&amp;\n      values[12] == 0.0 &amp;&amp; \/\/ col 4\n      values[13] == 0.0 &amp;&amp;\n      values[14] == 0.0 &amp;&amp;\n      values[15] == 1.0 &amp;&amp;\n      values[0] == values[5]) { \/\/ uniform scale\n    return values[0];\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getAsTranslation",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the given <code>transform<\/code> matrix as an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a>, if the matrix is\nnothing but a 2D translation.<\/p>\n<p>Otherwise, returns null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "transform",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/getAsTranslation.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Offset getAsTranslation(Matrix4 transform) {\n  assert(transform != null);\n  final Float64List values = transform.storage;\n  \/\/ Values are stored in column-major order.\n  if (values[0] == 1.0 &amp;&amp; \/\/ col 1\n      values[1] == 0.0 &amp;&amp;\n      values[2] == 0.0 &amp;&amp;\n      values[3] == 0.0 &amp;&amp;\n      values[4] == 0.0 &amp;&amp; \/\/ col 2\n      values[5] == 1.0 &amp;&amp;\n      values[6] == 0.0 &amp;&amp;\n      values[7] == 0.0 &amp;&amp;\n      values[8] == 0.0 &amp;&amp; \/\/ col 3\n      values[9] == 0.0 &amp;&amp;\n      values[10] == 1.0 &amp;&amp;\n      values[11] == 0.0 &amp;&amp;\n      values[14] == 0.0 &amp;&amp; \/\/ bottom of col 4 (values 12 and 13 are the x and y offsets)\n      values[15] == 1.0) {\n    return Offset(values[12], values[13]);\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inverseTransformRect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a rect that bounds the result of applying the inverse of the given\nmatrix as a perspective transform to the given rect.<\/p>\n<p>This function assumes the given rect is in the plane with z equals 0.0.\nThe transformed rect is then projected back into the plane with z equals\n0.0 before computing its bounding rect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "transform",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/inverseTransformRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Rect inverseTransformRect(Matrix4 transform, Rect rect) {\n  assert(rect != null);\n  assert(transform.determinant != 0.0);\n  if (isIdentity(transform))\n    return rect;\n  transform = Matrix4.copy(transform)..invert();\n  return transformRect(transform, rect);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "isIdentity",
                    "type": "dart:core.bool",
                    "desc": "<p>Whether the given matrix is the identity matrix.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/isIdentity.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool isIdentity(Matrix4 a) {\n  assert(a != null);\n  return a.storage[0] == 1.0 \/\/ col 1\n      &amp;&amp; a.storage[1] == 0.0\n      &amp;&amp; a.storage[2] == 0.0\n      &amp;&amp; a.storage[3] == 0.0\n      &amp;&amp; a.storage[4] == 0.0 \/\/ col 2\n      &amp;&amp; a.storage[5] == 1.0\n      &amp;&amp; a.storage[6] == 0.0\n      &amp;&amp; a.storage[7] == 0.0\n      &amp;&amp; a.storage[8] == 0.0 \/\/ col 3\n      &amp;&amp; a.storage[9] == 0.0\n      &amp;&amp; a.storage[10] == 1.0\n      &amp;&amp; a.storage[11] == 0.0\n      &amp;&amp; a.storage[12] == 0.0 \/\/ col 4\n      &amp;&amp; a.storage[13] == 0.0\n      &amp;&amp; a.storage[14] == 0.0\n      &amp;&amp; a.storage[15] == 1.0;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "matrixEquals",
                    "type": "dart:core.bool",
                    "desc": "<p>Returns true if the given matrices are exactly equal, and false\notherwise. Null values are assumed to be the identity matrix.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/matrixEquals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static bool matrixEquals(Matrix4 a, Matrix4 b) {\n  if (identical(a, b))\n    return true;\n  assert(a != null || b != null);\n  if (a == null)\n    return isIdentity(b);\n  if (b == null)\n    return isIdentity(a);\n  assert(a != null &amp;&amp; b != null);\n  return a.storage[0] == b.storage[0]\n      &amp;&amp; a.storage[1] == b.storage[1]\n      &amp;&amp; a.storage[2] == b.storage[2]\n      &amp;&amp; a.storage[3] == b.storage[3]\n      &amp;&amp; a.storage[4] == b.storage[4]\n      &amp;&amp; a.storage[5] == b.storage[5]\n      &amp;&amp; a.storage[6] == b.storage[6]\n      &amp;&amp; a.storage[7] == b.storage[7]\n      &amp;&amp; a.storage[8] == b.storage[8]\n      &amp;&amp; a.storage[9] == b.storage[9]\n      &amp;&amp; a.storage[10] == b.storage[10]\n      &amp;&amp; a.storage[11] == b.storage[11]\n      &amp;&amp; a.storage[12] == b.storage[12]\n      &amp;&amp; a.storage[13] == b.storage[13]\n      &amp;&amp; a.storage[14] == b.storage[14]\n      &amp;&amp; a.storage[15] == b.storage[15];\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "transformPoint",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Applies the given matrix as a perspective transform to the given point.<\/p>\n<p>This function assumes the given point has a z-coordinate of 0.0. The\nz-coordinate of the result is ignored.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "transform",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "point",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/transformPoint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Offset transformPoint(Matrix4 transform, Offset point) {\n  final Vector3 position3 = Vector3(point.dx, point.dy, 0.0);\n  final Vector3 transformed3 = transform.perspectiveTransform(position3);\n  return Offset(transformed3.x, transformed3.y);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "transformRect",
                    "type": "dart:ui.Rect",
                    "desc": "<p>Returns a rect that bounds the result of applying the given matrix as a\nperspective transform to the given rect.<\/p>\n<p>This function assumes the given rect is in the plane with z equals 0.0.\nThe transformed rect is then projected back into the plane with z equals\n0.0 before computing its bounding rect.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MatrixUtils",
                    "sig": "",
                    "params": [
                        {
                            "name": "transform",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MatrixUtils\/transformRect.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Rect transformRect(Matrix4 transform, Rect rect) {\n  final Offset point1 = transformPoint(transform, rect.topLeft);\n  final Offset point2 = transformPoint(transform, rect.topRight);\n  final Offset point3 = transformPoint(transform, rect.bottomLeft);\n  final Offset point4 = transformPoint(transform, rect.bottomRight);\n  return Rect.fromLTRB(\n      _min4(point1.dx, point2.dx, point3.dx, point4.dx),\n      _min4(point1.dy, point2.dy, point3.dy, point4.dy),\n      _max4(point1.dx, point2.dx, point3.dx, point4.dx),\n      _max4(point1.dy, point2.dy, point3.dy, point4.dy),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/MatrixUtils-class.html",
            "desc": "<p>Utility functions for working with matrices.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MatrixUtils"
        },
        {
            "name": "painting.MemoryImage",
            "extends": [
                "painting.MemoryImage",
                "painting.ImageProvider",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/MemoryImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MemoryImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MemoryImage\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final MemoryImage typedOther = other;\n  return bytes == typedOther.bytes\n      &amp;&amp; scale == typedOther.scale;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "MemoryImage",
                    "type": "",
                    "desc": "<p>Creates an object that decodes a <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> buffer as an image.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MemoryImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "bytes",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/MemoryImage\/MemoryImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const MemoryImage(this.bytes, { this.scale = 1.0 })\n  : assert(bytes != null),\n    assert(scale != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "load",
                    "type": "painting.ImageStreamCompleter",
                    "desc": "<p>Converts a key into an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a>, and begins fetching the\nimage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MemoryImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "painting.MemoryImage",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MemoryImage\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nImageStreamCompleter load(MemoryImage key) {\n  return MultiFrameImageStreamCompleter(\n    codec: _loadAsync(key),\n    scale: key.scale,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "obtainKey",
                    "type": "dart:async.Future<painting.MemoryImage>",
                    "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/MemoryImage\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MemoryImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MemoryImage\/obtainKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;MemoryImage&gt; obtainKey(ImageConfiguration configuration) {\n  return SynchronousFuture&lt;MemoryImage&gt;(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "painting.MemoryImage"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MemoryImage",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/MemoryImage\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(${describeIdentity(bytes)}, scale: $scale)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "bytes",
                    "type": "dart:typed_data.Uint8List",
                    "types": [],
                    "desc": "<p>The bytes to decode into an image.<\/p>\n        ",
                    "memberOf": "painting.MemoryImage",
                    "isConstant": false,
                    "href": "painting\/MemoryImage\/bytes.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Uint8List bytes\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/MemoryImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/MemoryImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.MemoryImage",
                    "isConstant": false,
                    "href": "painting\/MemoryImage\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(bytes.hashCode, scale);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
                    "memberOf": "painting.MemoryImage",
                    "isConstant": false,
                    "href": "painting\/MemoryImage\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "painting.MemoryImage"
            ],
            "realImplementors": [
                "painting.MemoryImage"
            ],
            "cn": [],
            "href": "painting\/MemoryImage-class.html",
            "desc": "<p>Decodes the given <a href=\"dart-typed_data\/Uint8List-class.html\">Uint8List<\/a> buffer as an image, associating it with the\ngiven scale.<\/p>\n<p>The provided <a href=\"painting\/MemoryImage\/bytes.html\">bytes<\/a> buffer should not be changed after it is provided\nto a <a href=\"painting\/MemoryImage-class.html\">MemoryImage<\/a>. To provide an <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a> that represents an image\nthat changes over time, consider creating a new subclass of <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>\nwhose <a href=\"painting\/MemoryImage\/load.html\">load<\/a> method returns a subclass of <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> that can\nhandle providing multiple images.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Image\/Image.memory.html\">Image.memory<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by <a href=\"painting\/MemoryImage-class.html\">MemoryImage<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MemoryImage"
        },
        {
            "name": "painting.MultiFrameImageStreamCompleter",
            "extends": [
                "painting.ImageStreamCompleter",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "MultiFrameImageStreamCompleter",
                    "type": "",
                    "desc": "<p>Creates a image stream completer.<\/p>\n<p>Immediately starts decoding the first image frame when the codec is ready.<\/p>\n<p><code>codec<\/code> is a future for an initialized <a href=\"dart-ui\/Codec-class.html\">ui.Codec<\/a> that will be used to\ndecode the image.\n<code>scale<\/code> is the linear scale factor for drawing this frames of this image\nat their intended size.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MultiFrameImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "codec",
                            "type": "dart:async.Future<dart:ui.Codec>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "dart:ui.Codec"
                            ]
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "informationCollector",
                            "type": "foundation.InformationCollector",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/MultiFrameImageStreamCompleter\/MultiFrameImageStreamCompleter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">MultiFrameImageStreamCompleter({\n  @required Future&lt;ui.Codec&gt; codec,\n  @required double scale,\n  InformationCollector informationCollector,\n}) : assert(codec != null),\n     _informationCollector = informationCollector,\n     _scale = scale,\n     _framesEmitted = 0,\n     _timer = null {\n  codec.then&lt;void&gt;(_handleCodecReady, onError: (dynamic error, StackTrace stack) {\n    reportError(\n      context: 'resolving an image codec',\n      exception: error,\n      stack: stack,\n      informationCollector: informationCollector,\n      silent: true,\n    );\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "addListener",
                    "type": "",
                    "desc": "<p>Adds a listener callback that is called whenever a new concrete <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a>\nobject is available or an error is reported. If a concrete image is\nalready available, or if an error has been already reported, this object\nwill call the listener or error listener synchronously.<\/p>\n<p>If the <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a> completes multiple images over its lifetime,\nthis listener will fire multiple times.<\/p>\n<p>The listener will be passed a flag indicating whether a synchronous call\noccurred. If the listener is added within a render object paint function,\nthen use this flag to avoid calling <a href=\"rendering\/RenderObject\/markNeedsPaint.html\">RenderObject.markNeedsPaint<\/a> during\na paint.<\/p>\n<p>An <a href=\"painting\/ImageErrorListener.html\">ImageErrorListener<\/a> can also optionally be added along with the\n<code>listener<\/code>. If an error occurred, <code>onError<\/code> will be called instead of\n<code>listener<\/code>.<\/p>\n<p>If a <code>listener<\/code> or <code>onError<\/code> handler is registered multiple times, then it\nwill be called multiple times when the image stream completes (whether\nbecause a new image is available or because an error occurs,\nrespectively). In general, registering a listener multiple times is\ndiscouraged because <a href=\"painting\/MultiFrameImageStreamCompleter\/removeListener.html\">removeListener<\/a> will remove the first instance that\nwas added, even if it was added with a different <code>onError<\/code> than the\nintended paired <code>addListener<\/code> call.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MultiFrameImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "painting.ImageListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "onError",
                            "type": "painting.ImageErrorListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MultiFrameImageStreamCompleter\/addListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addListener(ImageListener listener, { ImageErrorListener onError }) {\n  if (!hasListeners &amp;&amp; _codec != null)\n    _decodeNextFrameAndSchedule();\n  super.addListener(listener, onError: onError);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "removeListener",
                    "type": "",
                    "desc": "<p>Stop listening for new concrete <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> objects and errors from\nits associated <a href=\"painting\/ImageErrorListener.html\">ImageErrorListener<\/a>.<\/p>\n<p>If <code>listener<\/code> has been added multiple times, this removes the first\ninstance of the listener, along with the <code>onError<\/code> listener that was\nregistered with that first instance. This might not be the instance that\nthe <code>addListener<\/code> corresponding to this <code>removeListener<\/code> had added.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.MultiFrameImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "listener",
                            "type": "painting.ImageListener",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/MultiFrameImageStreamCompleter\/removeListener.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeListener(ImageListener listener) {\n  super.removeListener(listener);\n  if (!hasListeners) {\n    _timer?.cancel();\n    _timer = null;\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/MultiFrameImageStreamCompleter-class.html",
            "desc": "<p>Manages the decoding and scheduling of image frames.<\/p>\n<p>New frames will only be emitted while there are registered listeners to the\nstream (registered with <a href=\"painting\/MultiFrameImageStreamCompleter\/addListener.html\">addListener<\/a>).<\/p>\n<p>This class deals with 2 types of frames:<\/p>\n<ul>\n<li>image frames - image frames of an animated image.<\/li>\n<li>app frames - frames that the flutter engine is drawing to the screen to\nshow the app GUI.<\/li>\n<\/ul>\n<p>For single frame images the stream will only complete once.<\/p>\n<p>For animated images, this class eagerly decodes the next image frame,\nand notifies the listeners that a new frame is ready on the first app frame\nthat is scheduled after the image frame duration has passed.<\/p>\n<p>Scheduling new timers only from scheduled app frames, makes sure we pause\nthe animation when the app is not visible (as new app frames will not be\nscheduled).<\/p>\n<p>See the following timeline example:<\/p>\n<pre class=\"language-dart\"><code>| Time | Event                                      | Comment                   |\n|------|--------------------------------------------|---------------------------|\n| t1   | App frame scheduled (image frame A posted) |                           |\n| t2   | App frame scheduled                        |                           |\n| t3   | App frame scheduled                        |                           |\n| t4   | Image frame B decoded                      |                           |\n| t5   | App frame scheduled                        | t5 - t1 &lt; frameB_duration |\n| t6   | App frame scheduled (image frame B posted) | t6 - t1 &gt; frameB_duration |\n<\/code><\/pre>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "MultiFrameImageStreamCompleter"
        },
        {
            "name": "painting.NetworkImage",
            "extends": [
                "painting.NetworkImage",
                "painting.ImageProvider",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/NetworkImage\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NetworkImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/NetworkImage\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (other.runtimeType != runtimeType)\n    return false;\n  final NetworkImage typedOther = other;\n  return url == typedOther.url\n      &amp;&amp; scale == typedOther.scale;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "NetworkImage",
                    "type": "",
                    "desc": "<p>Creates an object that fetches the image at the given URL.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NetworkImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "url",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "scale",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "headers",
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.Map",
                                "dart:core.String",
                                "dart:core.String"
                            ]
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/NetworkImage\/NetworkImage.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const NetworkImage(this.url, { this.scale = 1.0, this.headers })\n  : assert(url != null),\n    assert(scale != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "load",
                    "type": "painting.ImageStreamCompleter",
                    "desc": "<p>Converts a key into an <a href=\"painting\/ImageStreamCompleter-class.html\">ImageStreamCompleter<\/a>, and begins fetching the\nimage.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NetworkImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "key",
                            "type": "painting.NetworkImage",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/NetworkImage\/load.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nImageStreamCompleter load(NetworkImage key) {\n  return MultiFrameImageStreamCompleter(\n    codec: _loadAsync(key),\n    scale: key.scale,\n    informationCollector: (StringBuffer information) {\n      information.writeln('Image provider: $this');\n      information.write('Image key: $key');\n    },\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "obtainKey",
                    "type": "dart:async.Future<painting.NetworkImage>",
                    "desc": "<p>Converts an ImageProvider's settings plus an ImageConfiguration to a key\nthat describes the precise image to load.<\/p>\n<p>The type of the key is determined by the subclass. It is a value that\nunambiguously identifies the image (<em>including its scale<\/em>) that the <a href=\"painting\/NetworkImage\/load.html\">load<\/a>\nmethod will fetch. Different <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a>s given the same constructor\narguments and <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> objects should return keys that are\n'==' to each other (possibly by using a class for the key that itself\nimplements <code>==<\/code>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NetworkImage",
                    "sig": "",
                    "params": [
                        {
                            "name": "configuration",
                            "type": "painting.ImageConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/NetworkImage\/obtainKey.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nFuture&lt;NetworkImage&gt; obtainKey(ImageConfiguration configuration) {\n  return SynchronousFuture&lt;NetworkImage&gt;(this);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "painting.NetworkImage"
                    ]
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NetworkImage",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/NetworkImage\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType(\"$url\", scale: $scale)';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/NetworkImage\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/NetworkImage\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/NetworkImage\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/NetworkImage\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/NetworkImage\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/NetworkImage\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.NetworkImage",
                    "isConstant": false,
                    "href": "painting\/NetworkImage\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(url, scale);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "headers",
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "types": [
                        "dart:core.Map",
                        "dart:core.String",
                        "dart:core.String"
                    ],
                    "desc": "<p>The HTTP headers that will be used with <a href=\"dart-io\/HttpClient\/get.html\">HttpClient.get<\/a> to fetch image from network.<\/p>\n        ",
                    "memberOf": "painting.NetworkImage",
                    "isConstant": false,
                    "href": "painting\/NetworkImage\/headers.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;String, String&gt; headers\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The scale to place in the <a href=\"painting\/ImageInfo-class.html\">ImageInfo<\/a> object of the image.<\/p>\n        ",
                    "memberOf": "painting.NetworkImage",
                    "isConstant": false,
                    "href": "painting\/NetworkImage\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "url",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The URL from which the image will be fetched.<\/p>\n        ",
                    "memberOf": "painting.NetworkImage",
                    "isConstant": false,
                    "href": "painting\/NetworkImage\/url.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String url\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "painting.NetworkImage"
            ],
            "realImplementors": [
                "painting.NetworkImage"
            ],
            "cn": [],
            "href": "painting\/NetworkImage-class.html",
            "desc": "<p>Fetches the given URL from the network, associating it with the given scale.<\/p>\n<p>The image will be cached regardless of cache headers from the server.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/Image\/Image.network.html\">Image.network<\/a> for a shorthand of an <a href=\"widgets\/Image-class.html\">Image<\/a> widget backed by <a href=\"painting\/NetworkImage-class.html\">NetworkImage<\/a>.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "NetworkImage"
        },
        {
            "name": "painting.NotchedShape",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "NotchedShape",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NotchedShape",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/NotchedShape\/NotchedShape.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const NotchedShape();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outline of the shape.<\/p>\n<p>The <code>host<\/code> is the bounding rectangle of the shape.<\/p>\n<p>The <code>guest<\/code> is the bounding rectangle of the shape for which a notch will\nbe made. It is null when there is no guest.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.NotchedShape",
                    "sig": "",
                    "params": [
                        {
                            "name": "host",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "guest",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/NotchedShape\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path getOuterPath(Rect host, Rect guest);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.AutomaticNotchedShape",
                "painting.CircularNotchedRectangle"
            ],
            "realImplementors": [
                "painting.AutomaticNotchedShape",
                "painting.CircularNotchedRectangle"
            ],
            "cn": [],
            "href": "painting\/NotchedShape-class.html",
            "desc": "<p>A shape with a notch in its outline.<\/p>\n<p>Typically used as the outline of a 'host' widget to make a notch that\naccommodates a 'guest' widget. e.g the <a href=\"material\/BottomAppBar-class.html\">BottomAppBar<\/a> may have a notch to\naccommodate the <a href=\"material\/FloatingActionButton-class.html\">FloatingActionButton<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>, which defines a shaped border without a dynamic notch.<\/li>\n<li>\n<a href=\"painting\/AutomaticNotchedShape-class.html\">AutomaticNotchedShape<\/a>, an adapter from <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> to <a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a>.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "NotchedShape"
        },
        {
            "name": "painting.OneFrameImageStreamCompleter",
            "extends": [
                "painting.ImageStreamCompleter",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "OneFrameImageStreamCompleter",
                    "type": "",
                    "desc": "<p>Creates a manager for one-frame <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>s.<\/p>\n<p>The image resource awaits the given <a href=\"dart-async\/Future-class.html\">Future<\/a>. When the future resolves,\nit notifies the <a href=\"painting\/ImageListener.html\">ImageListener<\/a>s that have been registered with\n<a href=\"painting\/ImageStreamCompleter\/addListener.html\">addListener<\/a>.<\/p>\n<p>The <a href=\"foundation\/InformationCollector.html\">InformationCollector<\/a>, if provided, is invoked if the given <a href=\"dart-async\/Future-class.html\">Future<\/a>\nresolves with an error, and can be used to supplement the reported error\nmessage (for example, giving the image's URL).<\/p>\n<p>Errors are reported using <a href=\"painting\/ImageStreamCompleter\/reportError.html\">FlutterError.reportError<\/a> with the <code>silent<\/code>\nargument on <a href=\"foundation\/FlutterErrorDetails-class.html\">FlutterErrorDetails<\/a> set to true, meaning that by default the\nmessage is only dumped to the console in debug mode (see <a href=\"foundation\/FlutterErrorDetails\/FlutterErrorDetails.html\">new\nFlutterErrorDetails<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.OneFrameImageStreamCompleter",
                    "sig": "",
                    "params": [
                        {
                            "name": "image",
                            "type": "dart:async.Future<painting.ImageInfo>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:async.Future",
                                "painting.ImageInfo"
                            ]
                        },
                        {
                            "name": "informationCollector",
                            "type": "foundation.InformationCollector",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/OneFrameImageStreamCompleter\/OneFrameImageStreamCompleter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">OneFrameImageStreamCompleter(Future&lt;ImageInfo&gt; image, { InformationCollector informationCollector })\n    : assert(image != null) {\n  image.then&lt;void&gt;(setImage, onError: (dynamic error, StackTrace stack) {\n    reportError(\n      context: 'resolving a single-frame image stream',\n      exception: error,\n      stack: stack,\n      informationCollector: informationCollector,\n      silent: true,\n    );\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/OneFrameImageStreamCompleter-class.html",
            "desc": "<p>Manages the loading of <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a> objects for static <a href=\"painting\/ImageStream-class.html\">ImageStream<\/a>s (those\nwith only one frame).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "OneFrameImageStreamCompleter"
        },
        {
            "name": "painting.PaintingBinding",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "PaintingBinding",
                    "type": "",
                    "desc": "",
                    "static": false,
                    "memberOf": "painting.PaintingBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/PaintingBinding\/PaintingBinding.html",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "createImageCache",
                    "type": "painting.ImageCache",
                    "desc": "<p>Creates the <a href=\"painting\/ImageCache-class.html\">ImageCache<\/a> singleton (accessible via <a href=\"painting\/PaintingBinding\/imageCache.html\">imageCache<\/a>).<\/p>\n<p>This method can be overridden to provide a custom image cache.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.PaintingBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/PaintingBinding\/createImageCache.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nImageCache createImageCache() =&gt; ImageCache();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "evict",
                    "type": "",
                    "desc": "<p>Called in response to the <code>ext.flutter.evict<\/code> service extension.<\/p>\n<p>This is used by the <code>flutter<\/code> tool during hot reload so that any images\nthat have changed on disk get cleared from caches.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.PaintingBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "asset",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/PaintingBinding\/evict.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid evict(String asset) {\n  super.evict(asset);\n  imageCache.clear();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "initInstances",
                    "type": "",
                    "desc": "<p>The initialization method. Subclasses override this method to hook into\nthe platform and otherwise configure their services. Subclasses must call\n\"super.initInstances()\".<\/p>\n<p>By convention, if the service is to be provided as a singleton, it should\nbe exposed as <code>MixinClassName.instance<\/code>, a static getter that returns\n<code>MixinClassName._instance<\/code>, a static field that is set by\n<code>initInstances()<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.PaintingBinding",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/PaintingBinding\/initInstances.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid initInstances() {\n  super.initInstances();\n  _instance = this;\n  _imageCache = createImageCache();\n  if (shaderWarmUp != null) {\n    shaderWarmUp.execute();\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "instantiateImageCodec",
                    "type": "dart:async.Future<dart:ui.Codec>",
                    "desc": "<p>Calls through to <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> with <a class=\"deprecated\" href=\"painting\/PaintingBinding\/decodedCacheRatioCap.html\">decodedCacheRatioCap<\/a> from <a href=\"painting\/ImageCache-class.html\">ImageCache<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.PaintingBinding",
                    "sig": "",
                    "params": [
                        {
                            "name": "list",
                            "type": "dart:typed_data.Uint8List",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/PaintingBinding\/instantiateImageCodec.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ui.Codec&gt; instantiateImageCodec(Uint8List list) {\n  return ui.instantiateImageCodec(list, decodedCacheRatioCap: decodedCacheRatioCap); \/\/ ignore: deprecated_member_use_from_same_package\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:async.Future",
                        "dart:ui.Codec"
                    ]
                }
            ],
            "props": [
                {
                    "name": "decodedCacheRatioCap",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The maximum multiple of the compressed image size used when caching an\nanimated image.<\/p>\n<p>Individual frames of animated images can be cached into memory to avoid\nusing CPU to re-decode them for every loop in the animation. This behavior\nwill result in out-of-memory crashes when decoding large (or large numbers\nof) animated images so is disabled by default. Set this value to control\nhow much memory each animated image is allowed to use for caching decoded\nframes compared to its compressed size. For example, setting this to <code>2.0<\/code>\nmeans that a 400KB GIF would be allowed at most to use 800KB of memory\ncaching unessential decoded frames. A setting of <code>1.0<\/code> or less disables\nall caching of unessential decoded frames. See\n<code>_kDefaultDecodedCacheRatioCap<\/code> for the default value.<\/p>\n<p>@deprecated The in-memory cache of decoded frames causes issues with\nmemory consumption. Soon this API and the in-memory cache will be removed.\nSee\n<a href=\"https:\/\/github.com\/flutter\/flutter\/issues\/26081\">flutter\/flutter#26081<\/a>\nfor more context.<\/p>\n        ",
                    "memberOf": "painting.PaintingBinding",
                    "isConstant": false,
                    "href": "painting\/PaintingBinding\/decodedCacheRatioCap.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@deprecated\ndouble get decodedCacheRatioCap =&gt; _kDecodedCacheRatioCap;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "imageCache",
                    "type": "painting.ImageCache",
                    "types": [],
                    "desc": "<p>The singleton that implements the Flutter framework's image cache.<\/p>\n<p>The cache is used internally by <a href=\"painting\/ImageProvider-class.html\">ImageProvider<\/a> and should generally not\nbe accessed directly.<\/p>\n<p>The image cache is created during startup by the <a href=\"painting\/PaintingBinding\/createImageCache.html\">createImageCache<\/a>\nmethod.<\/p>\n        ",
                    "memberOf": "painting.PaintingBinding",
                    "isConstant": false,
                    "href": "painting\/PaintingBinding\/imageCache.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ImageCache get imageCache =&gt; _imageCache;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "instance",
                    "type": "painting.PaintingBinding",
                    "types": [],
                    "desc": "<p>The current <a href=\"painting\/PaintingBinding-mixin.html\">PaintingBinding<\/a>, if one has been created.<\/p>\n        ",
                    "memberOf": "painting.PaintingBinding",
                    "isConstant": false,
                    "href": "painting\/PaintingBinding\/instance.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static PaintingBinding get instance =&gt; _instance;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shaderWarmUp",
                    "type": "painting.ShaderWarmUp",
                    "types": [],
                    "desc": "<p><a href=\"painting\/ShaderWarmUp-class.html\">ShaderWarmUp<\/a> to be executed during <a href=\"painting\/PaintingBinding\/initInstances.html\">initInstances<\/a>.<\/p>\n<p>If the application has scenes that require the compilation of complex\nshaders that are not covered by <a href=\"painting\/DefaultShaderWarmUp-class.html\">DefaultShaderWarmUp<\/a>, it may cause jank\nin the middle of an animation or interaction. In that case, set\n<a href=\"painting\/PaintingBinding\/shaderWarmUp.html\">shaderWarmUp<\/a> to a custom <a href=\"painting\/ShaderWarmUp-class.html\">ShaderWarmUp<\/a> before calling <a href=\"painting\/PaintingBinding\/initInstances.html\">initInstances<\/a>\n(usually before <a href=\"widgets\/runApp.html\">runApp<\/a> for normal Flutter apps, and before\n<a href=\"flutter_driver_extension\/enableFlutterDriverExtension.html\">enableFlutterDriverExtension<\/a> for Flutter driver tests). Paint the scene\nin the custom <a href=\"painting\/ShaderWarmUp-class.html\">ShaderWarmUp<\/a> so Flutter can pre-compile and cache the\nshaders during startup. The warm up is only costly (100ms-200ms,\ndepending on the shaders to compile) during the first run after the\ninstallation or a data wipe. The warm up does not block the main thread\nso there should be no \"Application Not Responding\" warning.<\/p>\n<p>Currently the warm-up happens synchronously on the GPU thread which means\nthe rendering of the first frame on the GPU thread will be postponed until\nthe warm-up is finished.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/ShaderWarmUp-class.html\">ShaderWarmUp<\/a>, the interface of how this warm up works.<\/li><\/ul>",
                    "memberOf": "painting.PaintingBinding",
                    "isConstant": false,
                    "href": "painting\/PaintingBinding\/shaderWarmUp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">static ShaderWarmUp shaderWarmUp = const DefaultShaderWarmUp()\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": true,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/PaintingBinding-mixin.html",
            "desc": "<p>Binding for the painting library.<\/p>\n<p>Hooks into the cache eviction logic to clear the image cache.<\/p>\n<p>Requires the <a href=\"services\/ServicesBinding-mixin.html\">ServicesBinding<\/a> to be mixed in earlier.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "mixin",
            "shortname": "PaintingBinding"
        },
        {
            "name": "painting.RadialGradient",
            "extends": [
                "painting.Gradient",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/RadialGradient\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final RadialGradient typedOther = other;\n  if (center != typedOther.center ||\n      radius != typedOther.radius ||\n      tileMode != typedOther.tileMode ||\n      colors?.length != typedOther.colors?.length ||\n      stops?.length != typedOther.stops?.length ||\n      focal != typedOther.focal ||\n      focalRadius != typedOther.focalRadius)\n    return false;\n  if (colors != null) {\n    assert(typedOther.colors != null);\n    assert(colors.length == typedOther.colors.length);\n    for (int i = 0; i &lt; colors.length; i += 1) {\n      if (colors[i] != typedOther.colors[i])\n        return false;\n    }\n  }\n  if (stops != null) {\n    assert(typedOther.stops != null);\n    assert(stops.length == typedOther.stops.length);\n    for (int i = 0; i &lt; stops.length; i += 1) {\n      if (stops[i] != typedOther.stops[i])\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RadialGradient",
                    "type": "",
                    "desc": "<p>Creates a radial gradient.<\/p>\n<p>The <code>colors<\/code> argument must not be null. If <code>stops<\/code> is non-null, it must\nhave the same length as <code>colors<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "center",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "radius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "stops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "tileMode",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "focal",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "focalRadius",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/RadialGradient\/RadialGradient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RadialGradient({\n  this.center = Alignment.center,\n  this.radius = 0.5,\n  @required List&lt;Color&gt; colors,\n  List&lt;double&gt; stops,\n  this.tileMode = TileMode.clamp,\n  this.focal,\n  this.focalRadius = 0.0,\n}) : assert(center != null),\n     assert(radius != null),\n     assert(tileMode != null),\n     assert(focalRadius != null),\n     super(colors: colors, stops: stops);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createShader",
                    "type": "dart:ui.Shader",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/createShader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShader createShader(Rect rect, { TextDirection textDirection }) {\n  return ui.Gradient.radial(\n    center.resolve(textDirection).withinRect(rect),\n    radius * rect.shortestSide,\n    colors, _impliedStops(), tileMode,\n    null, \/\/ transform\n    focal == null  ? null : focal.resolve(textDirection).withinRect(rect),\n    focalRadius * rect.shortestSide,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.RadialGradient",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>s.<\/p>\n<p>If either gradient is null, this function linearly interpolates from a\na gradient that matches the other gradient in <a href=\"painting\/RadialGradient\/center.html\">center<\/a>, <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>, <a href=\"painting\/Gradient\/stops.html\">stops<\/a> and\n<a href=\"painting\/RadialGradient\/tileMode.html\">tileMode<\/a> and with the same <a href=\"painting\/Gradient\/colors.html\">colors<\/a> but transparent (using <a href=\"painting\/RadialGradient\/scale.html\">scale<\/a>).<\/p>\n<p>If neither gradient is null, they must have the same number of <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents a position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.RadialGradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.RadialGradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static RadialGradient lerp(RadialGradient a, RadialGradient b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  final _ColorsAndStops interpolated = _interpolateColorsAndStops(\n      a.colors,\n      a._impliedStops(),\n      b.colors,\n      b._impliedStops(),\n      t,\n  );\n  return RadialGradient(\n    center: AlignmentGeometry.lerp(a.center, b.center, t),\n    radius: math.max(0.0, ui.lerpDouble(a.radius, b.radius, t)),\n    colors: interpolated.colors,\n    stops: interpolated.stops,\n    tileMode: t &lt; 0.5 ? a.tileMode : b.tileMode, \/\/ TODO(ianh): interpolate tile mode\n    focal: AlignmentGeometry.lerp(a.focal, b.focal, t),\n    focalRadius: math.max(0.0, ui.lerpDouble(a.focalRadius, b.focalRadius, t)),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/RadialGradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/RadialGradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/RadialGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/RadialGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null || (a is RadialGradient))\n    return RadialGradient.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/RadialGradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/RadialGradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/RadialGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/RadialGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpTo(Gradient b, double t) {\n  if (b == null || (b is RadialGradient))\n    return RadialGradient.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "painting.RadialGradient",
                    "desc": "<p>Returns a new <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> with its colors scaled by the given factor.<\/p>\n<p>Since the alpha component of the Color is what is scaled, a factor\nof 0.0 or less results in a gradient that is fully transparent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nRadialGradient scale(double factor) {\n  return RadialGradient(\n    center: center,\n    radius: radius,\n    colors: colors.map&lt;Color&gt;((Color color) =&gt; Color.lerp(null, color, factor)).toList(),\n    stops: stops,\n    tileMode: tileMode,\n    focal: focal,\n    focalRadius: focalRadius,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RadialGradient",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/RadialGradient\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($center, $radius, $colors, $stops, $tileMode, $focal, $focalRadius)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "center",
                    "type": "painting.AlignmentGeometry",
                    "types": [],
                    "desc": "<p>The center of the gradient, as an offset into the (-1.0, -1.0) x (1.0, 1.0)\nsquare describing the gradient which will be mapped onto the paint box.<\/p>\n<p>For example, an alignment of (0.0, 0.0) will place the radial\ngradient in the center of the box.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the left in\nleft-to-right contexts and the right in right-to-left contexts. If a\ntext-direction-dependent value is provided here, then the <a href=\"painting\/RadialGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
                    "memberOf": "painting.RadialGradient",
                    "isConstant": false,
                    "href": "painting\/RadialGradient\/center.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry center\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "focal",
                    "type": "painting.AlignmentGeometry",
                    "types": [],
                    "desc": "<p>The focal point of the gradient.  If specified, the gradient will appear\nto be focused along the vector from <a href=\"painting\/RadialGradient\/center.html\">center<\/a> to focal.<\/p>\n<p>See <a href=\"painting\/RadialGradient\/center.html\">center<\/a> for a description of how the coordinates are mapped.<\/p>\n<p>If this value is specified and <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> &gt; 0.0, care should be taken\nto ensure that either this value or <a href=\"painting\/RadialGradient\/center.html\">center<\/a> will not both resolve to\n<a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>, which would fail to create a valid gradient.<\/p>\n        ",
                    "memberOf": "painting.RadialGradient",
                    "isConstant": false,
                    "href": "painting\/RadialGradient\/focal.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry focal\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "focalRadius",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The radius of the focal point of gradient, as a fraction of the shortest\nside of the paint box.<\/p>\n<p>For example, if a radial gradient is painted on a box that is\n100.0 pixels wide and 200.0 pixels tall, then a radius of 1.0\nwill place the 1.0 stop at 100.0 pixels from the <code>focus<\/code>.<\/p>\n<p>If this value is specified and is greater than 0.0, either <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> or\n<a href=\"painting\/RadialGradient\/center.html\">center<\/a> must not resolve to <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a>, which would fail to create\na valid gradient.<\/p>\n        ",
                    "memberOf": "painting.RadialGradient",
                    "isConstant": false,
                    "href": "painting\/RadialGradient\/focalRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double focalRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/RadialGradient\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/RadialGradient\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.RadialGradient",
                    "isConstant": false,
                    "href": "painting\/RadialGradient\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(center, radius, tileMode, hashList(colors), hashList(stops), focal, focalRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "radius",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The radius of the gradient, as a fraction of the shortest side\nof the paint box.<\/p>\n<p>For example, if a radial gradient is painted on a box that is\n100.0 pixels wide and 200.0 pixels tall, then a radius of 1.0\nwill place the 1.0 stop at 100.0 pixels from the <a href=\"painting\/RadialGradient\/center.html\">center<\/a>.<\/p>\n        ",
                    "memberOf": "painting.RadialGradient",
                    "isConstant": false,
                    "href": "painting\/RadialGradient\/radius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double radius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "types": [],
                    "desc": "<p>How this gradient should tile the plane beyond the outer ring at <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>\npixels from the <a href=\"painting\/RadialGradient\/center.html\">center<\/a>.<\/p>\n<p>For details, see <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_radial.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_radial.png\"><\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_radialWithFocal.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_radialWithFocal.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_radialWithFocal.png\"><\/p>\n        ",
                    "memberOf": "painting.RadialGradient",
                    "isConstant": false,
                    "href": "painting\/RadialGradient\/tileMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TileMode tileMode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/RadialGradient-class.html",
            "desc": "<p>A 2D radial gradient.<\/p>\n<p>This class is used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> to represent radial gradients. This\nabstracts out the arguments to the <a href=\"dart-ui\/Gradient\/Gradient.radial.html\">new ui.Gradient.radial<\/a> constructor from\nthe <code>dart:ui<\/code> library.<\/p>\n<p>A normal radial gradient has a <a href=\"painting\/RadialGradient\/center.html\">center<\/a> and a <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>. The <a href=\"painting\/RadialGradient\/center.html\">center<\/a> point\ncorresponds to 0.0, and the ring at <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a> from the center corresponds\nto 1.0. These lengths are expressed in fractions, so that the same gradient\ncan be reused with varying sized boxes without changing the parameters.\n(This contrasts with <a href=\"dart-ui\/Gradient\/Gradient.radial.html\">new ui.Gradient.radial<\/a>, whose arguments are expressed\nin logical pixels.)<\/p>\n<p>It is also possible to create a two-point (or focal pointed) radial gradient\n(which is sometimes referred to as a two point conic gradient, but is not the\nsame as a CSS conic gradient which corresponds to a <a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>). A <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a>\npoint and <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> can be specified similarly to <a href=\"painting\/RadialGradient\/center.html\">center<\/a> and <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a>,\nwhich will make the rendered gradient appear to be pointed or directed in the\ndirection of the <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> point. This is only important if <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> and <a href=\"painting\/RadialGradient\/center.html\">center<\/a>\nare not equal or <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> &gt; 0.0 (as this case is visually identical to a\nnormal radial gradient).  One important case to avoid is having <a href=\"painting\/RadialGradient\/focal.html\">focal<\/a> and\n<a href=\"painting\/RadialGradient\/center.html\">center<\/a> both resolve to <a href=\"dart-ui\/Offset\/zero-constant.html\">Offset.zero<\/a> when <a href=\"painting\/RadialGradient\/focalRadius.html\">focalRadius<\/a> &gt; 0.0. In such a case,\na valid shader cannot be created by the framework.<\/p>\n<p>The <a href=\"painting\/Gradient\/colors.html\">colors<\/a> are described by a list of <a href=\"dart-ui\/Color-class.html\">Color<\/a> objects. There must be at\nleast two colors. The <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list, if specified, must have the same length\nas <a href=\"painting\/Gradient\/colors.html\">colors<\/a>. It specifies fractions of the radius between 0.0 and 1.0,\ngiving concentric rings for each color stop. If it is null, a uniform\ndistribution is assumed.<\/p>\n<p>The region of the canvas beyond <a href=\"painting\/RadialGradient\/radius.html\">radius<\/a> from the <a href=\"painting\/RadialGradient\/center.html\">center<\/a> is colored\naccording to <a href=\"painting\/RadialGradient\/tileMode.html\">tileMode<\/a>.<\/p>\n<p>Typically this class is used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which does the painting.\nTo use a <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> to paint on a canvas directly, see <a href=\"painting\/RadialGradient\/createShader.html\">createShader<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis function draws a gradient that looks like a sun in a blue sky.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void paintSky(Canvas canvas, Rect rect) {\n  var gradient = RadialGradient(\n    center: const Alignment(0.7, -0.6), \/\/ near the top right\n    radius: 0.2,\n    colors: [\n      const Color(0xFFFFFF00), \/\/ yellow sun\n      const Color(0xFF0099FF), \/\/ blue sky\n    ],\n    stops: [0.4, 1.0],\n  );\n  \/\/ rect is the area we are painting over\n  var paint = Paint()\n    ..shader = gradient.createShader(rect);\n  canvas.drawRect(rect, paint);\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>, which displays a gradient in parallel lines, and has an\nexample which shows a different way to use <a href=\"painting\/Gradient-class.html\">Gradient<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>, which displays a gradient in a sweeping arc around a\ncenter point.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which can take a <a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a> in its\n<a href=\"painting\/BoxDecoration\/gradient.html\">BoxDecoration.gradient<\/a> property.<\/li>\n<li>\n<a href=\"rendering\/CustomPainter-class.html\">CustomPainter<\/a>, which shows how to use the above sample code in a custom\npainter.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RadialGradient"
        },
        {
            "type": "",
            "name": "painting.RenderComparison",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RenderComparison",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/RenderComparison\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/RenderComparison-class.html",
            "desc": "<p>The description of the difference between two objects, in the context of how\nit will affect the rendering.<\/p>\n<p>Used by <a href=\"painting\/TextSpan\/compareTo.html\">TextSpan.compareTo<\/a> and <a href=\"painting\/TextStyle\/compareTo.html\">TextStyle.compareTo<\/a>.<\/p>\n<p>The values in this enum are ordered such that they are in increasing order\nof cost. A value with index N implies all the values with index less than N.\nFor example, <a href=\"painting\/RenderComparison-class.html\">layout<\/a> (index 3) implies <a href=\"painting\/RenderComparison-class.html\">paint<\/a> (2).<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "RenderComparison"
        },
        {
            "name": "painting.RoundedRectangleBorder",
            "extends": [
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/RoundedRectangleBorder\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (runtimeType != other.runtimeType)\n    return false;\n  final RoundedRectangleBorder typedOther = other;\n  return side == typedOther.side\n      &amp;&amp; borderRadius == typedOther.borderRadius;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "RoundedRectangleBorder",
                    "type": "",
                    "desc": "<p>Creates a rounded rectangle border.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "side",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "borderRadius",
                            "type": "painting.BorderRadiusGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/RoundedRectangleBorder\/RoundedRectangleBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const RoundedRectangleBorder({\n  this.side = BorderSide.none,\n  this.borderRadius = BorderRadius.zero,\n}) : assert(side != null),\n     assert(borderRadius != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/RoundedRectangleBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/RoundedRectangleBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/RoundedRectangleBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addRRect(borderRadius.resolve(textDirection).toRRect(rect).deflate(side.width));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/RoundedRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/RoundedRectangleBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/RoundedRectangleBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  return Path()\n    ..addRRect(borderRadius.resolve(textDirection).toRRect(rect));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/RoundedRectangleBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/RoundedRectangleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  assert(t != null);\n  if (a is RoundedRectangleBorder) {\n    return RoundedRectangleBorder(\n      side: BorderSide.lerp(a.side, side, t),\n      borderRadius: BorderRadiusGeometry.lerp(a.borderRadius, borderRadius, t),\n    );\n  }\n  if (a is CircleBorder) {\n    return _RoundedRectangleToCircleBorder(\n      side: BorderSide.lerp(a.side, side, t),\n      borderRadius: borderRadius,\n      circleness: 1.0 - t,\n    );\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/RoundedRectangleBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/RoundedRectangleBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  assert(t != null);\n  if (b is RoundedRectangleBorder) {\n    return RoundedRectangleBorder(\n      side: BorderSide.lerp(side, b.side, t),\n      borderRadius: BorderRadiusGeometry.lerp(borderRadius, b.borderRadius, t),\n    );\n  }\n  if (b is CircleBorder) {\n    return _RoundedRectangleToCircleBorder(\n      side: BorderSide.lerp(side, b.side, t),\n      borderRadius: borderRadius,\n      circleness: t,\n    );\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Rect rect, { TextDirection textDirection }) {\n  switch (side.style) {\n    case BorderStyle.none:\n      break;\n    case BorderStyle.solid:\n      final double width = side.width;\n      if (width == 0.0) {\n        canvas.drawRRect(borderRadius.resolve(textDirection).toRRect(rect), side.toPaint());\n      } else {\n        final RRect outer = borderRadius.resolve(textDirection).toRRect(rect);\n        final RRect inner = outer.deflate(width);\n        final Paint paint = Paint()\n          ..color = side.color;\n        canvas.drawDRRect(outer, inner, paint);\n      }\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/RoundedRectangleBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder scale(double t) {\n  return RoundedRectangleBorder(\n    side: side.scale(t),\n    borderRadius: borderRadius * t,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.RoundedRectangleBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/RoundedRectangleBorder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($side, $borderRadius)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "borderRadius",
                    "type": "painting.BorderRadiusGeometry",
                    "types": [],
                    "desc": "<p>The radii for each corner.<\/p>\n        ",
                    "memberOf": "painting.RoundedRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/RoundedRectangleBorder\/borderRadius.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderRadiusGeometry borderRadius\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/RoundedRectangleBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/RoundedRectangleBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.RoundedRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/RoundedRectangleBorder\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.all(side.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/RoundedRectangleBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/RoundedRectangleBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/RoundedRectangleBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/RoundedRectangleBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/RoundedRectangleBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/RoundedRectangleBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.RoundedRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/RoundedRectangleBorder\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(side, borderRadius);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "side",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The style of this border.<\/p>\n        ",
                    "memberOf": "painting.RoundedRectangleBorder",
                    "isConstant": false,
                    "href": "painting\/RoundedRectangleBorder\/side.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide side\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/RoundedRectangleBorder-class.html",
            "desc": "<p>A rectangular border with rounded corners.<\/p>\n<p>Typically used with <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> to draw a box with a rounded\nrectangle.<\/p>\n<p>This shape can interpolate to and from <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe each side of the box.<\/li>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which, when used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, can also\ndescribe a rounded rectangle.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "RoundedRectangleBorder"
        },
        {
            "name": "painting.ShaderWarmUp",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "ShaderWarmUp",
                    "type": "",
                    "desc": "<p>Allow const constructors for subclasses.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShaderWarmUp",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ShaderWarmUp\/ShaderWarmUp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ShaderWarmUp();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "execute",
                    "type": "dart:async.Future",
                    "desc": "<p>Construct an offscreen image of <a href=\"painting\/ShaderWarmUp\/size.html\">size<\/a>, and execute <a href=\"painting\/ShaderWarmUp\/warmUpOnCanvas.html\">warmUpOnCanvas<\/a> on a\ncanvas associated with that image.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShaderWarmUp",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ShaderWarmUp\/execute.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;void&gt; execute() async {\n  final ui.PictureRecorder recorder = ui.PictureRecorder();\n  final ui.Canvas canvas = ui.Canvas(recorder);\n\n  await warmUpOnCanvas(canvas);\n\n  final ui.Picture picture = recorder.endRecording();\n  final TimelineTask shaderWarmUpTask = TimelineTask();\n  shaderWarmUpTask.start('Warm-up shader');\n  picture.toImage(size.width.ceil(), size.height.ceil()).then((ui.Image image) {\n    shaderWarmUpTask.finish();\n  });\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "warmUpOnCanvas",
                    "type": "dart:async.Future",
                    "desc": "<p>Trigger draw operations on a given canvas to warm up GPU shader\ncompilation cache.<\/p>\n<p>To decide which draw operations to be added to your custom warm up\nprocess, try capture an skp using <code>flutter screenshot --observatory-\nport=&lt;port&gt; --type=skia<\/code> and analyze it with <a href=\"https:\/\/debugger.skia.org\">https:\/\/debugger.skia.org<\/a>.\nAlternatively, one may run the app with <code>flutter run --trace-skia<\/code> and\nthen examine the GPU thread in the observatory timeline to see which\nSkia draw operations are commonly used, and which shader compilations\nare causing janks.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShaderWarmUp",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShaderWarmUp\/warmUpOnCanvas.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nFuture&lt;void&gt; warmUpOnCanvas(ui.Canvas canvas);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The size of the warm up image.<\/p>\n<p>The exact size shouldn't matter much as long as it's not too far away from\nthe target device's screen. 1024x1024 is a good choice as it is within an\norder of magnitude of most devices.<\/p>\n<p>A custom shader warm up can override this based on targeted devices.<\/p>\n        ",
                    "memberOf": "painting.ShaderWarmUp",
                    "isConstant": false,
                    "href": "painting\/ShaderWarmUp\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">ui.Size get size =&gt; const ui.Size(1024.0, 1024.0);<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "painting.DefaultShaderWarmUp"
            ],
            "realImplementors": [
                "painting.DefaultShaderWarmUp"
            ],
            "cn": [],
            "href": "painting\/ShaderWarmUp-class.html",
            "desc": "<p>Interface for drawing an image to warm up Skia shader compilations.<\/p>\n<p>When Skia first sees a certain type of draw operation on the GPU, it needs\nto compile the corresponding shader. The compilation can be slow (20ms-\n200ms). Having that time as startup latency is often better than having\njank in the middle of an animation.<\/p>\n<p>Therefore, we use this during the <a href=\"painting\/PaintingBinding\/initInstances.html\">PaintingBinding.initInstances<\/a> call to\nmove common shader compilations from animation time to startup time. By\ndefault, a <a href=\"painting\/DefaultShaderWarmUp-class.html\">DefaultShaderWarmUp<\/a> is used. If needed, app developers can\ncreate a custom <a href=\"painting\/ShaderWarmUp-class.html\">ShaderWarmUp<\/a> subclass and hand it to\n<a href=\"painting\/PaintingBinding\/shaderWarmUp.html\">PaintingBinding.shaderWarmUp<\/a> (so it replaces <a href=\"painting\/DefaultShaderWarmUp-class.html\">DefaultShaderWarmUp<\/a>)\nbefore <a href=\"painting\/PaintingBinding\/initInstances.html\">PaintingBinding.initInstances<\/a> is called. Usually, that can be\ndone before calling <a href=\"widgets\/runApp.html\">runApp<\/a>.<\/p>\n<p>To determine whether a draw operation is useful for warming up shaders,\ncheck whether it improves the slowest GPU frame. Also, tracing with\n<code>flutter run --profile --trace-skia<\/code> may reveal whether there is shader-\ncompilation-related jank. If there is such jank, some long\n<code>GrGLProgramBuilder::finalize<\/code> calls would appear in the middle of an\nanimation. Their parent calls, which look like <code>XyzOp<\/code> (e.g., <code>FillRecOp<\/code>,\n<code>CircularRRectOp<\/code>) would suggest Xyz draw operations are causing the\nshaders to be compiled. A useful shader warm-up draw operation would\neliminate such long compilation calls in the animation. To double-check\nthe warm-up, trace with <code>flutter run --profile --trace-skia --start-\npaused<\/code>. The <code>GrGLProgramBuilder<\/code> with the associated <code>XyzOp<\/code> should\nappear during startup rather than in the middle of a later animation.<\/p>\n<p>This warm-up needs to be run on each individual device because the shader\ncompilation depends on the specific GPU hardware and driver a device has. It\ncan't be pre-computed during the Flutter engine compilation as the engine is\ndevice-agnostic.<\/p>\n<p>If no warm-up is desired (e.g., when the startup latency is crucial), set\n<a href=\"painting\/PaintingBinding\/shaderWarmUp.html\">PaintingBinding.shaderWarmUp<\/a> either to a custom ShaderWarmUp with an empty\n<a href=\"painting\/ShaderWarmUp\/warmUpOnCanvas.html\">warmUpOnCanvas<\/a> or null.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/PaintingBinding\/shaderWarmUp.html\">PaintingBinding.shaderWarmUp<\/a>, the actual instance of <a href=\"painting\/ShaderWarmUp-class.html\">ShaderWarmUp<\/a>\nthat's used to warm up the shaders.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ShaderWarmUp"
        },
        {
            "name": "painting.ShapeBorder",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator +",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a new border consisting of the two borders on either side of the\noperator.<\/p>\n<p>If the borders belong to classes that know how to add themselves, then\nthis results in a new border that represents the intelligent addition of\nthose two borders (see <a href=\"painting\/ShapeBorder\/add.html\">add<\/a>). Otherwise, an object is returned that\nmerely paints the two borders sequentially, with the left hand operand on\nthe inside and the right hand operand on the outside.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/operator_plus.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ShapeBorder operator +(ShapeBorder other) {\n  return add(other) ?? other.add(this, reversed: true) ?? _CompoundBorder(&lt;ShapeBorder&gt;[other, this]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ShapeBorder",
                    "type": "",
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": true,
                    "href": "painting\/ShapeBorder\/ShapeBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ShapeBorder();<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "add",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Attempts to create a new object that represents the amalgamation of <code>this<\/code>\nborder and the <code>other<\/code> border.<\/p>\n<p>If the type of the other border isn't known, or the given instance cannot\nbe reasonably added to this instance, then this should return null.<\/p>\n<p>This method is used by the <a href=\"painting\/ShapeBorder\/operator_plus.html\">operator +<\/a> implementation.<\/p>\n<p>The <code>reversed<\/code> argument is true if this object was the right operand of\nthe <code>+<\/code> operator, and false if it was the left operand.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "reversed",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/add.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nShapeBorder add(ShapeBorder other, { bool reversed = false }) =&gt; null;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/ShapeBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/ShapeBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path getInnerPath(Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/ShapeBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/ShapeBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Path getOuterPath(Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates between two <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>s.<\/p>\n<p>This defers to <code>b<\/code>'s <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a> function if <code>b<\/code> is not null. If <code>b<\/code> is\nnull or if its <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a> returns null, it uses <code>a<\/code>'s <a href=\"painting\/ShapeBorder\/lerpFrom.html\">lerpFrom<\/a>\nfunction instead. If both return null, it returns <code>a<\/code> before <code>t=0.5<\/code>\nand <code>b<\/code> after <code>t=0.5<\/code>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ShapeBorder lerp(ShapeBorder a, ShapeBorder b, double t) {\n  assert(t != null);\n  ShapeBorder result;\n  if (b != null)\n    result = b.lerpFrom(a, t);\n  if (result == null &amp;&amp; a != null)\n    result = a.lerpTo(b, t);\n  return result ?? (t &lt; 0.5 ? a : b);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/ShapeBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  if (a == null)\n    return scale(t);\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/ShapeBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/ShapeBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  if (b == null)\n    return scale(1.0 - t);\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Rect rect, { TextDirection textDirection });<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/ShapeBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ShapeBorder scale(double t);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/ShapeBorder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType()';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/ShapeBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/ShapeBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ShapeBorder",
                    "isConstant": false,
                    "href": "painting\/ShapeBorder\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">EdgeInsetsGeometry get dimensions;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": true,
            "implementors": [
                "material.InputBorder",
                "material.OutlineInputBorder",
                "material.ShapeBorderTween",
                "material.UnderlineInputBorder",
                "painting.BeveledRectangleBorder",
                "painting.Border",
                "painting.BorderDirectional",
                "painting.BoxBorder",
                "painting.CircleBorder",
                "painting.ContinuousRectangleBorder",
                "painting.RoundedRectangleBorder",
                "painting.StadiumBorder"
            ],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ShapeBorder-class.html",
            "desc": "<p>Base class for shape outlines.<\/p>\n<p>This class handles how to add multiple borders together. Subclasses define\nvarious shapes, like circles (<a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), rounded rectangles\n(<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>), continuous rectangles\n(<a href=\"painting\/ContinuousRectangleBorder-class.html\">ContinuousRectangleBorder<\/a>), or beveled rectangles\n(<a href=\"painting\/BeveledRectangleBorder-class.html\">BeveledRectangleBorder<\/a>).<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>, which can be used with <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> to show a shape.<\/li>\n<li>\n<a href=\"material\/Material-class.html\">Material<\/a> (and many other widgets in the Material library), which takes\na <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> to define its shape.<\/li>\n<li>\n<a href=\"painting\/NotchedShape-class.html\">NotchedShape<\/a>, which describes a shape with a hole in it.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ShapeBorder"
        },
        {
            "name": "painting.ShapeDecoration",
            "extends": [
                "painting.Decoration",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/ShapeDecoration\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final ShapeDecoration typedOther = other;\n  return color == typedOther.color\n      &amp;&amp; gradient == typedOther.gradient\n      &amp;&amp; image == typedOther.image\n      &amp;&amp; shadows == typedOther.shadows\n      &amp;&amp; shape == typedOther.shape;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "ShapeDecoration",
                    "type": "",
                    "desc": "<p>Creates a shape decoration.<\/p>\n<ul>\n<li>If <code>color<\/code> is null, this decoration does not paint a background color.<\/li>\n<li>If <code>gradient<\/code> is null, this decoration does not paint gradients.<\/li>\n<li>If <code>image<\/code> is null, this decoration does not paint a background image.<\/li>\n<li>If <code>shadows<\/code> is null, this decoration does not paint a shadow.<\/li>\n<\/ul>\n<p>The <code>color<\/code> and <code>gradient<\/code> properties are mutually exclusive, one (or\nboth) of them must be null.<\/p>\n<p>The <code>shape<\/code> must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "image",
                            "type": "painting.DecorationImage",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "gradient",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shadows",
                            "type": "dart:core.List<painting.BoxShadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "painting.BoxShadow"
                            ]
                        },
                        {
                            "name": "shape",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ShapeDecoration\/ShapeDecoration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const ShapeDecoration({\n  this.color,\n  this.image,\n  this.gradient,\n  this.shadows,\n  @required this.shape,\n}) : assert(!(color != null &amp;&amp; gradient != null)),\n     assert(shape != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createBoxPainter",
                    "type": "",
                    "desc": "<p>Returns a <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> that will paint this decoration.<\/p>\n<p>The <code>onChanged<\/code> argument configures <a href=\"painting\/BoxPainter\/onChanged.html\">BoxPainter.onChanged<\/a>. It can be\nomitted if there is no chance that the painter will change (for example,\nif it is a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> with definitely no <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "onChanged",
                            "type": "dart:ui.VoidCallback",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/createBoxPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n_ShapeDecorationPainter createBoxPainter([ VoidCallback onChanged ]) {\n  assert(onChanged != null || image == null);\n  return _ShapeDecorationPainter(this, onChanged);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/ShapeDecoration\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.whitespace;\n  properties.add(DiagnosticsProperty&lt;Color&gt;('color', color, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;Gradient&gt;('gradient', gradient, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;DecorationImage&gt;('image', image, defaultValue: null));\n  properties.add(IterableProperty&lt;BoxShadow&gt;('shadows', shadows, defaultValue: null, style: DiagnosticsTreeStyle.whitespace));\n  properties.add(DiagnosticsProperty&lt;ShapeBorder&gt;('shape', shape));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "ShapeDecoration.fromBoxDecoration",
                    "type": "",
                    "desc": "<p>Creates a shape decoration configured to match a <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>.<\/p>\n<p>The <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> class is more efficient for shapes that it can\ndescribe than the <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> class is for those same shapes,\nbecause <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> has to be more general as it can support any\nshape. However, having a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> is sometimes necessary, for\nexample when calling <a href=\"painting\/ShapeDecoration\/lerp.html\">ShapeDecoration.lerp<\/a> to transition between\ndifferent shapes (e.g. from a <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a> to a\n<a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>; the <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> class cannot animate the\ntransition from a <a href=\"painting\/BoxShape-class.html\">BoxShape.circle<\/a> to <a href=\"painting\/BoxShape-class.html\">BoxShape.rectangle<\/a>).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "source",
                            "type": "painting.BoxDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/ShapeDecoration\/ShapeDecoration.fromBoxDecoration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory ShapeDecoration.fromBoxDecoration(BoxDecoration source) {\n  ShapeBorder shape;\n  assert(source.shape != null);\n  switch (source.shape) {\n    case BoxShape.circle:\n      if (source.border != null) {\n        assert(source.border.isUniform);\n        shape = CircleBorder(side: source.border.top);\n      } else {\n        shape = const CircleBorder();\n      }\n      break;\n    case BoxShape.rectangle:\n      if (source.borderRadius != null) {\n        assert(source.border == null || source.border.isUniform);\n        shape = RoundedRectangleBorder(\n          side: source.border?.top ?? BorderSide.none,\n          borderRadius: source.borderRadius,\n        );\n      } else {\n        shape = source.border ?? const Border();\n      }\n      break;\n  }\n  return ShapeDecoration(\n    color: source.color,\n    image: source.image,\n    gradient: source.gradient,\n    shadows: source.boxShadow,\n    shape: shape,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "hitTest",
                    "type": "dart:core.bool",
                    "desc": "<p>Tests whether the given point, on a rectangle of a given size,\nwould be considered to hit the decoration or not. For example,\nif the decoration only draws a circle, this function might\nreturn true if the point was inside the circle and false\notherwise.<\/p>\n<p>The decoration may be sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\n<code>textDirection<\/code> argument should therefore be provided. If it is known that\nthe decoration is not affected by the text direction, then the argument\nmay be omitted or set to null.<\/p>\n<p>When a <a href=\"painting\/Decoration-class.html\">Decoration<\/a> is painted in a <a href=\"widgets\/Container-class.html\">Container<\/a> or <a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> (which\nis what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the <code>textDirection<\/code> parameter will be populated\nbased on the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> (by way of the <a href=\"rendering\/RenderDecoratedBox-class.html\">RenderDecoratedBox<\/a>\nrenderer).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "size",
                            "type": "dart:ui.Size",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "position",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/hitTest.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool hitTest(Size size, Offset position, { TextDirection textDirection }) {\n  return shape.getOuterPath(Offset.zero &amp; size, textDirection: textDirection).contains(position);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.ShapeDecoration",
                    "desc": "<p>Linearly interpolate between two shapes.<\/p>\n<p>Interpolates each parameter of the decoration separately.<\/p>\n<p>If both values are null, this returns null. Otherwise, it returns a\nnon-null value, with null arguments treated like a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> whose\nfields are all null (including the <a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a>, which cannot normally be\nnull).<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>, which can interpolate between any two types of\n<a href=\"painting\/Decoration-class.html\">Decoration<\/a>s, not just <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>s.<\/li>\n<li>\n<a href=\"painting\/ShapeDecoration\/lerpFrom.html\">lerpFrom<\/a> and <a href=\"painting\/ShapeDecoration\/lerpTo.html\">lerpTo<\/a>, which are used to implement <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>\nand which use <a href=\"painting\/ShapeDecoration\/lerp.html\">ShapeDecoration.lerp<\/a> when interpolating two\n<a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a>s or a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> to or from null.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.ShapeDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static ShapeDecoration lerp(ShapeDecoration a, ShapeDecoration b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a != null &amp;&amp; b != null) {\n    if (t == 0.0)\n      return a;\n    if (t == 1.0)\n      return b;\n  }\n  return ShapeDecoration(\n    color: Color.lerp(a?.color, b?.color, t),\n    gradient: Gradient.lerp(a?.gradient, b?.gradient, t),\n    image: t &lt; 0.5 ? a.image : b.image, \/\/ TODO(ianh): cross-fade the image\n    shadows: BoxShadow.lerpList(a?.shadows, b?.shadows, t),\n    shape: ShapeBorder.lerp(a?.shape, b?.shape, t),\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeDecoration",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of a\ndifferent class) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeDecoration\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/ShapeDecoration\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>Supporting interpolating from null is recommended as the <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeDecoration lerpFrom(Decoration a, double t) {\n  if (a is BoxDecoration) {\n    return ShapeDecoration.lerp(ShapeDecoration.fromBoxDecoration(a), this, t);\n  } else if (a == null || a is ShapeDecoration) {\n    return ShapeDecoration.lerp(a, this, t);\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeDecoration",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Decoration-class.html\">Decoration<\/a> (which may be of\na different class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/ShapeDecoration\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeDecoration\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>Supporting interpolating to null is recommended as the <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>\nmethod uses this as a fallback when two classes can't interpolate between\neach other.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeDecoration\/lerp.html\">Decoration.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.ShapeDecoration",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Decoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/ShapeDecoration\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeDecoration lerpTo(Decoration b, double t) {\n  if (b is BoxDecoration) {\n    return ShapeDecoration.lerp(this, ShapeDecoration.fromBoxDecoration(b), t);\n  } else if (b == null || b is ShapeDecoration) {\n    return ShapeDecoration.lerp(this, b, t);\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color to fill in the background of the shape.<\/p>\n<p>The color is under the <a href=\"painting\/ShapeDecoration\/image.html\">image<\/a>.<\/p>\n<p>If a <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a> is specified, <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a> must be null.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "gradient",
                    "type": "painting.Gradient",
                    "types": [],
                    "desc": "<p>A gradient to use when filling the shape.<\/p>\n<p>The gradient is under the <a href=\"painting\/ShapeDecoration\/image.html\">image<\/a>.<\/p>\n<p>If a <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a> is specified, <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a> must be null.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/gradient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Gradient gradient\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/ShapeDecoration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/ShapeDecoration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    color,\n    gradient,\n    image,\n    shape,\n    shadows,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "painting.DecorationImage",
                    "types": [],
                    "desc": "<p>An image to paint inside the shape (clipped to its outline).<\/p>\n<p>The image is drawn over the <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a> or <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/image.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final DecorationImage image\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "isComplex",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether this decoration is complex enough to benefit from caching its painting.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/isComplex.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isComplex =&gt; shadows != null;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "padding",
                    "type": "painting.EdgeInsets",
                    "types": [],
                    "desc": "<p>The inset space occupied by the <a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a>'s border.<\/p>\n<p>This value may be misleading. See the discussion at <a href=\"painting\/ShapeBorder\/dimensions.html\">ShapeBorder.dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/padding.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsets get padding =&gt; shape.dimensions;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shadows",
                    "type": "dart:core.List<painting.BoxShadow>",
                    "types": [
                        "dart:core.List",
                        "painting.BoxShadow"
                    ],
                    "desc": "<p>A list of shadows cast by this shape behind the shape.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/shadows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;BoxShadow&gt; shadows\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shape",
                    "type": "painting.ShapeBorder",
                    "types": [],
                    "desc": "<p>The shape to fill the <a href=\"painting\/ShapeDecoration\/color.html\">color<\/a>, <a href=\"painting\/ShapeDecoration\/gradient.html\">gradient<\/a>, and <a href=\"painting\/ShapeDecoration\/image.html\">image<\/a> into and to cast as\nthe <a href=\"painting\/ShapeDecoration\/shadows.html\">shadows<\/a>.<\/p>\n<p>Shapes can be stacked (using the <code>+<\/code> operator). The color, gradient, and\nimage are drawn into the inner-most shape specified.<\/p>\n<p>The <a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a> property specifies the outline (border) of the decoration. The\nshape must not be null.<\/p>\n<h2 id=\"directionality-dependent-shapes\">Directionality-dependent shapes<\/h2>\n<p>Some <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses are sensitive to the <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>. The\ndirection that is provided to the border (e.g. for its <a href=\"painting\/ShapeBorder\/paint.html\">ShapeBorder.paint<\/a>\nmethod) is the one specified in the <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a>\n(<a href=\"painting\/ImageConfiguration\/textDirection.html\">ImageConfiguration.textDirection<\/a>) provided to the <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> (via its\n[BoxPainter.paint method). The <a href=\"painting\/BoxPainter-class.html\">BoxPainter<\/a> is obtained when\n<a href=\"painting\/ShapeDecoration\/createBoxPainter.html\">createBoxPainter<\/a> is called.<\/p>\n<p>When a <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> is used with a <a href=\"widgets\/Container-class.html\">Container<\/a> widget or a\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> widget (which is what <a href=\"widgets\/Container-class.html\">Container<\/a> uses), the\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a> specified in the <a href=\"painting\/ImageConfiguration-class.html\">ImageConfiguration<\/a> is obtained from the\nambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>, using <a href=\"widgets\/createLocalImageConfiguration.html\">createLocalImageConfiguration<\/a>.<\/p>\n        ",
                    "memberOf": "painting.ShapeDecoration",
                    "isConstant": false,
                    "href": "painting\/ShapeDecoration\/shape.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final ShapeBorder shape\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/ShapeDecoration-class.html",
            "desc": "<p>An immutable description of how to paint an arbitrary shape.<\/p>\n<p>The <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> class provides a way to draw a <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>,\noptionally filling it with a color or a gradient, optionally painting an\nimage into it, and optionally casting a shadow.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following example uses the <a href=\"widgets\/Container-class.html\">Container<\/a> widget from the widgets layer to\ndraw a white rectangle with a 24-pixel multicolor outline, with the text\n\"RGB\" inside it:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: ShapeDecoration(\n    color: Colors.white,\n    shape: Border.all(\n      color: Colors.red,\n      width: 8.0,\n    ) + Border.all(\n      color: Colors.green,\n      width: 8.0,\n    ) + Border.all(\n      color: Colors.blue,\n      width: 8.0,\n    ),\n  ),\n  child: const Text('RGB', textAlign: TextAlign.center),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a> and <a href=\"widgets\/Container-class.html\">Container<\/a>, widgets that can be configured with\n<a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, a similar <a href=\"painting\/Decoration-class.html\">Decoration<\/a> that is optimized for rectangles\nspecifically.<\/li>\n<li>\n<a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a>, the base class for the objects that are used in the\n<a href=\"painting\/ShapeDecoration\/shape.html\">shape<\/a> property.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "ShapeDecoration"
        },
        {
            "name": "painting.StadiumBorder",
            "extends": [
                "painting.ShapeBorder",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/StadiumBorder\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (runtimeType != other.runtimeType)\n    return false;\n  final StadiumBorder typedOther = other;\n  return side == typedOther.side;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "StadiumBorder",
                    "type": "",
                    "desc": "<p>Create a stadium border.<\/p>\n<p>The <code>side<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "side",
                            "type": "painting.BorderSide",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/StadiumBorder\/StadiumBorder.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StadiumBorder({this.side = BorderSide.none}) : assert(side != null);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getInnerPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the inner edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/StadiumBorder\/getOuterPath.html\">getOuterPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/StadiumBorder\/getOuterPath.html\">getOuterPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/StadiumBorder\/getOuterPath.html\">getOuterPath<\/a>, which creates the path for the outer edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/getInnerPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getInnerPath(Rect rect, { TextDirection textDirection }) {\n  final Radius radius = Radius.circular(rect.shortestSide \/ 2.0);\n  return Path()\n    ..addRRect(RRect.fromRectAndRadius(rect, radius).deflate(side.width));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOuterPath",
                    "type": "dart:ui.Path",
                    "desc": "<p>Create a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the outer edge of the border.<\/p>\n<p>This path must not cross the path given by <a href=\"painting\/StadiumBorder\/getInnerPath.html\">getInnerPath<\/a> for the same\n<a href=\"dart-ui\/Rect-class.html\">Rect<\/a>.<\/p>\n<p>To obtain a <a href=\"dart-ui\/Path-class.html\">Path<\/a> that describes the area of the border itself, set the\n<a href=\"dart-ui\/Path\/fillType.html\">Path.fillType<\/a> of the returned object to <a href=\"dart-ui\/PathFillType-class.html\">PathFillType.evenOdd<\/a>, and add\nto this object the path returned from <a href=\"painting\/StadiumBorder\/getInnerPath.html\">getInnerPath<\/a> (using\n<a href=\"dart-ui\/Path\/addPath.html\">Path.addPath<\/a>).<\/p>\n<p>The <code>textDirection<\/code> argument must be provided non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/StadiumBorder\/getInnerPath.html\">getInnerPath<\/a>, which creates the path for the inner edge.<\/li>\n<li>\n<a href=\"dart-ui\/Path\/contains.html\">Path.contains<\/a>, which can tell if an <a href=\"dart-ui\/Offset-class.html\">Offset<\/a> is within a <a href=\"dart-ui\/Path-class.html\">Path<\/a>.<\/li>\n<\/ul>",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/getOuterPath.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nPath getOuterPath(Rect rect, { TextDirection textDirection }) {\n  final Radius radius = Radius.circular(rect.shortestSide \/ 2.0);\n  return Path()\n    ..addRRect(RRect.fromRectAndRadius(rect, radius));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of another\nclass) to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/StadiumBorder\/lerpTo.html\">lerpTo<\/a>\nmethod instead. If <code>a<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>a<\/code> being null by\ndeferring to <a href=\"painting\/StadiumBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpFrom(ShapeBorder a, double t) {\n  assert(t != null);\n  if (a is StadiumBorder)\n    return StadiumBorder(side: BorderSide.lerp(a.side, side, t));\n  if (a is CircleBorder) {\n    return _StadiumToCircleBorder(\n      side: BorderSide.lerp(a.side, side, t),\n      circleness: 1.0 - t,\n    );\n  }\n  if (a is RoundedRectangleBorder) {\n    return _StadiumToRoundedRectangleBorder(\n      side: BorderSide.lerp(a.side, side, t),\n      borderRadius: a.borderRadius,\n      rectness: 1.0 - t,\n    );\n  }\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> (possibly of\nanother class).<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/StadiumBorder\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/ShapeBorder\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead. If <code>b<\/code> is null, this must not return null.<\/p>\n<p>The base class implementation handles the case of <code>b<\/code> being null by\ndeferring to <a href=\"painting\/StadiumBorder\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/ShapeBorder\/lerp.html\">ShapeBorder.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.ShapeBorder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder lerpTo(ShapeBorder b, double t) {\n  assert(t != null);\n  if (b is StadiumBorder)\n    return StadiumBorder(side: BorderSide.lerp(side, b.side, t));\n  if (b is CircleBorder) {\n    return _StadiumToCircleBorder(\n      side: BorderSide.lerp(side, b.side, t),\n      circleness: t,\n    );\n  }\n  if (b is RoundedRectangleBorder) {\n    return _StadiumToRoundedRectangleBorder(\n      side: BorderSide.lerp(side, b.side, t),\n      borderRadius: b.borderRadius,\n      rectness: t,\n    );\n  }\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the border within the given <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> on the given <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>The <code>textDirection<\/code> argument must be provided and non-null if the border\nhas a text direction dependency (for example if it is expressed in terms\nof \"start\" and \"end\" instead of \"left\" and \"right\"). It may be null if\nthe border will not need the text direction to paint itself.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid paint(Canvas canvas, Rect rect, { TextDirection textDirection }) {\n  switch (side.style) {\n    case BorderStyle.none:\n      break;\n    case BorderStyle.solid:\n      final Radius radius = Radius.circular(rect.shortestSide \/ 2.0);\n      canvas.drawRRect(\n        RRect.fromRectAndRadius(rect, radius).deflate(side.width \/ 2.0),\n        side.toPaint(),\n      );\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "scale",
                    "type": "painting.ShapeBorder",
                    "desc": "<p>Creates a copy of this border, scaled by the factor <code>t<\/code>.<\/p>\n<p>Typically this means scaling the width of the border's side, but it can\nalso include scaling other artifacts of the border, e.g. the border radius\nof a <a href=\"painting\/RoundedRectangleBorder-class.html\">RoundedRectangleBorder<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents the multiplicand, or the position on the\ntimeline for an interpolation from nothing to <code>this<\/code>, with 0.0 meaning\nthat the object returned should be the nil variant of this object, 1.0\nmeaning that no change should be applied, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), and other values meaning that the object should be\nmultiplied by <code>t<\/code>. Negative values are allowed but may be meaningless\n(they correspond to extrapolating the interpolation from this object to\nnothing, and going beyond nothing)<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/StadiumBorder\/scale.html\">BorderSide.scale<\/a>, which most <a href=\"painting\/ShapeBorder-class.html\">ShapeBorder<\/a> subclasses defer to for\nthe actual computation.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShapeBorder scale(double t) =&gt; StadiumBorder(side: side.scale(t));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StadiumBorder",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/StadiumBorder\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($side)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "dimensions",
                    "type": "painting.EdgeInsetsGeometry",
                    "types": [],
                    "desc": "<p>The widths of the sides of this border represented as an <a href=\"painting\/EdgeInsets-class.html\">EdgeInsets<\/a>.<\/p>\n<p>Specifically, this is the amount by which a rectangle should be inset so\nas to avoid painting over any important part of the border. It is the\namount by which additional borders will be inset before they are drawn.<\/p>\n<p>This can be used, for example, with a <a href=\"widgets\/Padding-class.html\">Padding<\/a> widget to inset a box by\nthe size of these borders.<\/p>\n<p>Shapes that have a fixed ratio regardless of the area on which they are\npainted, or that change their rendering based on the size they are given\nwhen painting (for instance <a href=\"painting\/CircleBorder-class.html\">CircleBorder<\/a>), will not return valid\n<a href=\"painting\/StadiumBorder\/dimensions.html\">dimensions<\/a> information because they cannot know their eventual size when\ncomputing their <a href=\"painting\/StadiumBorder\/dimensions.html\">dimensions<\/a>.<\/p>\n        ",
                    "memberOf": "painting.StadiumBorder",
                    "isConstant": false,
                    "href": "painting\/StadiumBorder\/dimensions.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nEdgeInsetsGeometry get dimensions {\n  return EdgeInsets.all(side.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/StadiumBorder\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/StadiumBorder\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/StadiumBorder\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/StadiumBorder\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/StadiumBorder\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/StadiumBorder\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.StadiumBorder",
                    "isConstant": false,
                    "href": "painting\/StadiumBorder\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; side.hashCode;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "side",
                    "type": "painting.BorderSide",
                    "types": [],
                    "desc": "<p>The style of this border.<\/p>\n        ",
                    "memberOf": "painting.StadiumBorder",
                    "isConstant": false,
                    "href": "painting\/StadiumBorder\/side.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final BorderSide side\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/StadiumBorder-class.html",
            "desc": "<p>A border that fits a stadium-shaped border (a box with semicircles on the ends)\nwithin the rectangle of the widget it is applied to.<\/p>\n<p>Typically used with <a href=\"painting\/ShapeDecoration-class.html\">ShapeDecoration<\/a> to draw a stadium border.<\/p>\n<p>If the rectangle is taller than it is wide, then the semicircles will be on the\ntop and bottom, and on the left and right otherwise.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/BorderSide-class.html\">BorderSide<\/a>, which is used to describe the border of the stadium.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StadiumBorder"
        },
        {
            "name": "painting.StrutStyle",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StrutStyle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final StrutStyle typedOther = other;\n  return fontFamily == typedOther.fontFamily &amp;&amp;\n         fontSize == typedOther.fontSize &amp;&amp;\n         fontWeight == typedOther.fontWeight &amp;&amp;\n         fontStyle == typedOther.fontStyle &amp;&amp;\n         height == typedOther.height &amp;&amp;\n         leading == typedOther.leading &amp;&amp;\n         forceStrutHeight == typedOther.forceStrutHeight;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "StrutStyle",
                    "type": "",
                    "desc": "<p>Creates a strut style.<\/p>\n<p>The <code>package<\/code> argument must be non-null if the font family is defined in a\npackage. It is combined with the <code>fontFamily<\/code> argument to set the\n<code>fontFamily<\/code> property.<\/p>\n<p>If provided, fontSize must be positive and non-zero, leading must be zero or positive.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "leading",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "forceStrutHeight",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "debugLabel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "package",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/StrutStyle\/StrutStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const StrutStyle({\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  this.fontSize,\n  this.height,\n  this.leading,\n  this.fontWeight,\n  this.fontStyle,\n  this.forceStrutHeight,\n  this.debugLabel,\n  String package,\n}) : fontFamily = package == null ? fontFamily : 'packages\/$package\/$fontFamily',\n     _fontFamilyFallback = fontFamilyFallback,\n     _package = package,\n     assert(fontSize == null || fontSize &gt; 0),\n     assert(leading == null || leading &gt;= 0),\n     assert(package == null || (package != null &amp;&amp; (fontFamily != null || fontFamilyFallback != null)));<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "compareTo",
                    "type": "painting.RenderComparison",
                    "desc": "<p>Describe the difference between this style and another, in terms of how\nmuch damage it will make to the rendering.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/StrutStyle\/compareTo.html\">TextSpan.compareTo<\/a>, which does the same thing for entire <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.StrutStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StrutStyle\/compareTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderComparison compareTo(StrutStyle other) {\n  if (identical(this, other))\n    return RenderComparison.identical;\n  if (fontFamily != other.fontFamily ||\n      fontSize != other.fontSize ||\n      fontWeight != other.fontWeight ||\n      fontStyle != other.fontStyle ||\n      height != other.height ||\n      leading != other.leading ||\n      forceStrutHeight != other.forceStrutHeight ||\n      !listEquals(fontFamilyFallback, other.fontFamilyFallback))\n    return RenderComparison.layout;\n  return RenderComparison.identical;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Adds all properties prefixing property names with the optional <code>prefix<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StrutStyle\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties, { String prefix = '' }) {\n  super.debugFillProperties(properties);\n  if (debugLabel != null)\n    properties.add(MessageProperty('${prefix}debugLabel', debugLabel));\n  final List&lt;DiagnosticsNode&gt; styles = &lt;DiagnosticsNode&gt;[];\n  styles.add(StringProperty('${prefix}family', fontFamily, defaultValue: null, quoted: false));\n  styles.add(IterableProperty&lt;String&gt;('${prefix}familyFallback', fontFamilyFallback, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}size', fontSize, defaultValue: null));\n  String weightDescription;\n  if (fontWeight != null) {\n    weightDescription = 'w${fontWeight.index + 1}00';\n  }\n  \/\/ TODO(jacobr): switch this to use enumProperty which will either cause the\n  \/\/ weight description to change to w600 from 600 or require existing\n  \/\/ enumProperty to handle this special case.\n  styles.add(DiagnosticsProperty&lt;FontWeight&gt;(\n    '${prefix}weight',\n    fontWeight,\n    description: weightDescription,\n    defaultValue: null,\n  ));\n  styles.add(EnumProperty&lt;FontStyle&gt;('${prefix}style', fontStyle, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}height', height, unit: 'x', defaultValue: null));\n  styles.add(FlagProperty('${prefix}forceStrutHeight', value: forceStrutHeight, defaultValue: null));\n\n  final bool styleSpecified = styles.any((DiagnosticsNode n) =&gt; !n.isFiltered(DiagnosticLevel.info));\n  styles.forEach(properties.add);\n\n  if (!styleSpecified)\n    properties.add(FlagProperty('forceStrutHeight', value: forceStrutHeight, ifTrue: '$prefix&lt;strut height forced&gt;', ifFalse: '$prefix&lt;strut height normal&gt;'));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "StrutStyle.fromTextStyle",
                    "type": "",
                    "desc": "<p>Builds a StrutStyle that contains values of the equivalent properties in\nthe provided <code>textStyle<\/code>.<\/p>\n<p>The <code>textStyle<\/code> parameter must not be null.<\/p>\n<p>The named parameters override the <code>textStyle<\/code>'s argument's properties.\nSince TextStyle does not contain <code>leading<\/code> or <code>forceStrutHeight<\/code>, these values\nwill take on default values (null and false) unless otherwise specified.<\/p>\n<p>If provided, fontSize must be positive and non-zero, leading must be zero or positive.<\/p>\n<p>When <code>textStyle<\/code> has a package and a new <code>package<\/code> is also specified, the entire\nfont family fallback list should be redefined since the <code>textStyle<\/code>'s package data\nis inherited by being prepended onto the font family names. If\n<code>fontFamilyFallback<\/code> is meant to be empty, pass an empty list instead of null.\nThis prevents the previous package name from being prepended twice.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "textStyle",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "leading",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "forceStrutHeight",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "debugLabel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "package",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/StrutStyle\/StrutStyle.fromTextStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle.fromTextStyle(\n  TextStyle textStyle, {\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  double height,\n  this.leading, \/\/ TextStyle does not have an equivalent (yet).\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  this.forceStrutHeight,\n  String debugLabel,\n  String package,\n}) : assert(textStyle != null),\n     assert(fontSize == null || fontSize &gt; 0),\n     assert(leading == null || leading &gt;= 0),\n     assert(package == null || (package != null &amp;&amp; (fontFamily != null || fontFamilyFallback != null))),\n     fontFamily = fontFamily != null ? (package == null ? fontFamily : 'packages\/$package\/$fontFamily') : textStyle.fontFamily,\n     _fontFamilyFallback = fontFamilyFallback ?? textStyle.fontFamilyFallback,\n     height = height ?? textStyle.height,\n     fontSize = fontSize ?? textStyle.fontSize,\n     fontWeight = fontWeight ?? textStyle.fontWeight,\n     fontStyle = fontStyle ?? textStyle.fontStyle,\n     debugLabel = debugLabel ?? textStyle.debugLabel,\n     _package = package;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "inheritFromTextStyle",
                    "type": "painting.StrutStyle",
                    "desc": "<p>Returns a new strut style that inherits its null values from corresponding\nproperties in the <code>other<\/code> <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<p>The \"missing\" properties of the this strut style are <em>filled<\/em> by the properties\nof the provided <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>. This is possible because <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> shares many of\nthe same basic properties as <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n<p>If the given text style is null, returns this strut style.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/StrutStyle\/inheritFromTextStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle inheritFromTextStyle(TextStyle other) {\n  if (other == null)\n    return this;\n\n  return StrutStyle(\n    fontFamily: fontFamily ?? other.fontFamily,\n    fontFamilyFallback: fontFamilyFallback ?? other.fontFamilyFallback,\n    fontSize: fontSize ?? other.fontSize,\n    height: height ?? other.height,\n    leading: leading, \/\/ No equivalent property in TextStyle yet.\n    fontWeight: fontWeight ?? other.fontWeight,\n    fontStyle: fontStyle ?? other.fontStyle,\n    forceStrutHeight: forceStrutHeight, \/\/ StrutStyle-unique property.\n    debugLabel: debugLabel ?? other.debugLabel,\n    \/\/ Package is embedded within the getters for fontFamilyFallback.\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.StrutStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/StrutStyle\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A human-readable description of this strut style.<\/p>\n<p>This property is maintained only in debug builds.<\/p>\n<p>This property is not considered when comparing strut styles using <code>==<\/code> or\n<a href=\"painting\/StrutStyle\/compareTo.html\">compareTo<\/a>, and it does not affect <a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/debugLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugLabel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "type": "",
                    "href": "painting\/StrutStyle\/disabled-constant.html",
                    "desc": "<p>A <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> that will have no impact on the text layout.<\/p>\n<p>Equivalent to having no strut at all. All lines will be laid out according to\nthe properties defined in <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const StrutStyle disabled = StrutStyle(\n  height: 0.0,\n  leading: 0.0,\n)\n\n<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "name": "disabled",
                    "memberOf": "painting.StrutStyle"
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the font to use when calculating the strut (e.g., Roboto). If\nthe font is defined in a package, this will be prefixed with\n'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto'). The\nprefixing is done by the constructor when the <code>package<\/code> argument is\nprovided.<\/p>\n<p>The value provided in <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that will be searched for, followed in order by the font families\nin <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. If all font families are exhausted and no match\nwas found, the default platform font family will be used instead. Unlike\n<a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">TextStyle.fontFamilyFallback<\/a>, the font does not need to contain the\ndesired glyphs to match.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/fontFamily.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String fontFamily\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "<p>The ordered list of font families to fall back on when a higher priority\nfont family cannot be found.<\/p>\n<p>The value provided in <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that will be searched for, followed in order by the font families\nin <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. If all font families are exhausted and no match\nwas found, the default platform font family will be used instead. Unlike\n<a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">TextStyle.fontFamilyFallback<\/a>, the font does not need to contain the\ndesired glyphs to match.<\/p>\n<p>When <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> is null or not provided, the first value in <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>\nacts as the preferred\/first font family. When neither is provided, then\nthe default platform font will be used. Providing and empty list or null\nfor this property is the same as omitting it.<\/p>\n<p>If the font is defined in a package, each font family in the list will be\nprefixed with 'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto').\nThe package name should be provided by the <code>package<\/code> argument in the\nconstructor.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/fontFamilyFallback.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; get fontFamilyFallback {\n  if (_package != null &amp;&amp; _fontFamilyFallback != null)\n    return _fontFamilyFallback.map((String family) =&gt; 'packages\/$_package\/$family').toList();\n  return _fontFamilyFallback;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The size of text (in logical pixels) to use when obtaining metrics from the font.<\/p>\n<p>The <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a> is used to get the base set of metrics that are then used to calculated\nthe metrics of strut. The height and leading are expressed as a multiple of\n<a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>.<\/p>\n<p>The default fontSize is 14 logical pixels.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/fontSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double fontSize\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "types": [],
                    "desc": "<p>The typeface variant to use when calculating the strut (e.g., italics).<\/p>\n<p>The default fontStyle is <a href=\"dart-ui\/FontStyle-class.html\">FontStyle.normal<\/a>.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/fontStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontStyle fontStyle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "types": [],
                    "desc": "<p>The typeface thickness to use when calculating the strut (e.g., bold).<\/p>\n<p>The default fontWeight is <a href=\"dart-ui\/FontWeight\/w400-constant.html\">FontWeight.w400<\/a>.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/fontWeight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontWeight fontWeight\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "forceStrutHeight",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether the strut height should be forced.<\/p>\n<p>When true, all lines will be laid out with the height of the\nstrut. All line and run-specific metrics will be ignored\/overridden and only strut\nmetrics will be used instead. This property guarantees uniform line spacing, however\ntext in adjacent lines may overlap.<\/p>\n<p>This property should be enabled with caution as\nit bypasses a large portion of the vertical layout system.<\/p>\n<p>This is equivalent to setting <a href=\"painting\/StrutStyle\/height.html\">TextStyle.height<\/a> to zero for all <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s\nin the paragraph. Since the height of each line is calculated as a max of the\nmetrics of each run of text, zero height <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s cause the minimums\ndefined by strut to always manifest, resulting in all lines having the height\nof the strut.<\/p>\n<p>The default is false.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/forceStrutHeight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool forceStrutHeight\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/StrutStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/StrutStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    fontFamily,\n    fontSize,\n    fontWeight,\n    fontStyle,\n    height,\n    leading,\n    forceStrutHeight,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a> to multiply the ascent and descent by where <code>ascent + descent = fontSize<\/code>.<\/p>\n<p>Ascent is the spacing above the baseline and descent is the spacing below the baseline.<\/p>\n<p>The <a href=\"painting\/StrutStyle\/height.html\">height<\/a> will impact the spacing above and below the baseline differently\ndepending on the ratios between the font's ascent and descent. This property is\nseparate from the leading multiplier, which is controlled through <a href=\"painting\/StrutStyle\/leading.html\">leading<\/a>.<\/p>\n<p>The default height is 1.0.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "leading",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The custom leading to apply to the strut as a multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>.<\/p>\n<p>Leading is additional spacing between lines. Half of the leading is added\nto the top and the other half to the bottom of the line. This differs\nfrom <a href=\"painting\/StrutStyle\/height.html\">height<\/a> since the spacing is equally distributed above and below the\nbaseline.<\/p>\n<p>The default leading is null, which will use the font-specified leading.<\/p>\n        ",
                    "memberOf": "painting.StrutStyle",
                    "isConstant": false,
                    "href": "painting\/StrutStyle\/leading.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double leading\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/StrutStyle-class.html",
            "desc": "<p>Defines the strut, which sets the minimum height a line can be\nrelative to the baseline. Strut applies to all lines in the paragraph.<\/p>\n<p>Strut is a feature that allows minimum line heights to be set. The effect is as\nif a zero width space was included at the beginning of each line in the\nparagraph. This imaginary space is 'shaped' according the properties defined\nin this class. Flutter's strut is based on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Strut_(typesetting)\">typesetting strut<\/a>\nand CSS's <a href=\"https:\/\/www.w3.org\/TR\/CSS2\/visudet.html#line-height\">line-height<\/a>.<\/p>\n<p>No lines may be shorter than the strut. The ascent and descent of the strut\nare calculated, and any laid out text that has a shorter ascent or descent than\nthe strut's ascent or descent will take the ascent and descent of the strut.\nText with ascents or descents larger than the strut's ascent or descent will lay\nout as normal and extend past the strut.<\/p>\n<p>Strut is defined independently from any text content or <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s.<\/p>\n<p>The vertical components of strut are as follows:<\/p>\n<ul>\n<li>\n<code>leading * fontSize \/ 2<\/code> or half the font leading if <code>leading<\/code> is undefined (half leading)<\/li>\n<li><code>ascent * height<\/code><\/li>\n<li><code>descent * height<\/code><\/li>\n<li>\n<code>leading * fontSize \/ 2<\/code> or half the font leading if <code>leading<\/code> is undefined (half leading)<\/li>\n<\/ul>\n<p>The sum of these four values is the total height of the line.<\/p>\n<p>The <code>ascent + descent<\/code> is equivalent to the <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>. Ascent is the font's\nspacing above the baseline without leading and descent is the spacing below the\nbaseline without leading. Leading is split evenly between the top and bottom.\nThe values for <code>ascent<\/code> and <code>descent<\/code> are provided by the font named by\n<a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a>. If no <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> or <a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> is provided, then the\nplatform's default family will be used.<\/p>\n<p>Each line's spacing above the baseline will be at least as tall as the half\nleading plus ascent. Each line's spacing below the baseline will be at least as\ntall as the half leading plus descent.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/dart-ui\/StrutStyle-class.html\">StrutStyle<\/a>, the class in the <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> library.<\/li><\/ul>\n<h3 id=\"fields-and-their-default-values\">Fields and their default values.<\/h3>\n<p>Omitted or null properties will take the default values specified below:<\/p>\n<ul>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a>: the name of the font to use when calculating the strut\n(e.g., Roboto). No glyphs from the font will be drawn and the font will\nbe used purely for metrics.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>: an ordered list of font family names that will be searched for when\nthe font in <a href=\"painting\/StrutStyle\/fontFamily.html\">fontFamily<\/a> cannot be found. When all specified font families have been\nexhausted an no match was found, the default platform font will be used.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>: the size of the ascent plus descent in logical pixels. This\nis also used as the basis of the custom leading calculation. This value\ncannot be negative.\nDefault is 14 logical pixels.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/height.html\">height<\/a>: the multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a> to multiply the ascent and descent by.\nThe <a href=\"painting\/StrutStyle\/height.html\">height<\/a> will impact the spacing above and below the baseline differently\ndepending on the ratios between the font's ascent and descent. This property is\nseparate from the leading multiplier, which is controlled through <a href=\"painting\/StrutStyle\/leading.html\">leading<\/a>.\nDefault is 1.0.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/leading.html\">leading<\/a>: the custom leading to apply to the strut as a multiple of <a href=\"painting\/StrutStyle\/fontSize.html\">fontSize<\/a>.\nLeading is additional spacing between lines. Half of the leading is added\nto the top and the other half to the bottom of the line height. This differs\nfrom <a href=\"painting\/StrutStyle\/height.html\">height<\/a> since the spacing is equally distributed above and below the\nbaseline.\nDefault is <code>null<\/code>, which will use the font-specified leading.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontWeight.html\">fontWeight<\/a>: the typeface thickness to use when calculating the strut (e.g., bold).\nDefault is <a href=\"dart-ui\/FontWeight\/w400-constant.html\">FontWeight.w400<\/a>.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/fontStyle.html\">fontStyle<\/a>: the typeface variant to use when calculating the strut (e.g., italic).\nDefault is <a href=\"dart-ui\/FontStyle-class.html\">FontStyle.normal<\/a>.<\/p>\n<\/li>\n<li>\n<p><a href=\"painting\/StrutStyle\/forceStrutHeight.html\">forceStrutHeight<\/a>: when true, all lines will be laid out with the height of the\nstrut. All line and run-specific metrics will be ignored\/overridden and only strut\nmetrics will be used instead. This property guarantees uniform line spacing, however\ntext in adjacent lines may overlap. This property should be enabled with caution as\nit bypasses a large portion of the vertical layout system.\nThe default value is false.<\/p>\n<\/li>\n<\/ul>\n<h3 id=\"examples\">Examples<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn this simple case, the text will be rendered at font size 10, however, the vertical\nheight of each line will be the strut height (Roboto in font size 30 * 1.5) as the text\nitself is shorter than the strut.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text(\n  'Hello, world!\\nSecond line!',\n  style: TextStyle(\n    fontSize: 10,\n    fontFamily: 'Raleway',\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Roboto',\n    fontSize: 30,\n    height: 1.5,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, strut is used to absorb the additional line height in the second line.\nThe strut <a href=\"painting\/StrutStyle\/height.html\">height<\/a> was defined as 1.5 (the default font size is 14), which\ncaused all lines to be laid out taller than without strut. This extra space\nwas able to accommodate the larger font size of <code>Second line!<\/code> without\ncausing the line height to change for the second line only. All lines in\nthis example are thus the same height (<code>14 * 1.5<\/code>).\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text.rich(\n  TextSpan(\n    text: 'First line!\\n',\n    style: TextStyle(\n      fontSize: 14,\n      fontFamily: 'Roboto'\n    ),\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'Second line!\\n',\n        style: TextStyle(\n          fontSize: 16,\n          fontFamily: 'Roboto',\n        ),\n      ),\n      TextSpan(\n        text: 'Third line!\\n',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Roboto',\n        ),\n      ),\n    ],\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Roboto',\n    height: 1.5,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, strut is used to enable strange and overlapping text to achieve unique\neffects. The <code>M<\/code>s in lines 2 and 3 are able to extend above their lines and\nfill empty space in lines above. The <a href=\"painting\/StrutStyle\/forceStrutHeight.html\">forceStrutHeight<\/a> is enabled and functions\nas a 'grid' for the glyphs to draw on.\n<p><img alt=\"The result of the example below.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/painting\/strut_force_example.png\"><\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const Text.rich(\n  TextSpan(\n    text: '---------         ---------\\n',\n    style: TextStyle(\n      fontSize: 14,\n      fontFamily: 'Roboto',\n    ),\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: '^^^M^^^\\n',\n        style: TextStyle(\n          fontSize: 30,\n          fontFamily: 'Roboto',\n        ),\n      ),\n      TextSpan(\n        text: 'M------M\\n',\n        style: TextStyle(\n          fontSize: 30,\n          fontFamily: 'Roboto',\n        ),\n      ),\n    ],\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Roboto',\n    fontSize: 14,\n    height: 1,\n    forceStrutHeight: true,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example uses forceStrutHeight to create a 'drop cap' for the 'T' in 'The'.\nBy locking the line heights to the metrics of the 14pt serif font, we are able\nto lay out a large 37pt 'T' on the second line to take up space on both the first\nand second lines.\n<p><img alt=\"The result of the example below.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/painting\/strut_force_example_2.png\"><\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text.rich(\n  TextSpan(\n    text: '      \u2009he candle flickered\\n',\n    style: TextStyle(\n      fontSize: 14,\n      fontFamily: 'Serif'\n    ),\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'T',\n        style: TextStyle(\n          fontSize: 37,\n          fontFamily: 'Serif'\n        ),\n      ),\n      TextSpan(\n        text: 'in the moonlight as\\n',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Serif'\n        ),\n      ),\n      TextSpan(\n        text: 'Dash the bird fluttered\\n',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Serif'\n        ),\n      ),\n      TextSpan(\n        text: 'off into the distance.',\n        style: TextStyle(\n          fontSize: 14,\n          fontFamily: 'Serif'\n        ),\n      ),\n    ],\n  ),\n  strutStyle: StrutStyle(\n    fontFamily: 'Serif',\n    fontSize: 14,\n    forceStrutHeight: true,\n  ),\n),<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "StrutStyle"
        },
        {
            "name": "painting.SweepGradient",
            "extends": [
                "painting.Gradient",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/SweepGradient\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (runtimeType != other.runtimeType)\n    return false;\n  final SweepGradient typedOther = other;\n  if (center != typedOther.center ||\n      startAngle != typedOther.startAngle ||\n      endAngle != typedOther.endAngle ||\n      tileMode != typedOther.tileMode ||\n      colors?.length != typedOther.colors?.length ||\n      stops?.length != typedOther.stops?.length)\n    return false;\n  if (colors != null) {\n    assert(typedOther.colors != null);\n    assert(colors.length == typedOther.colors.length);\n    for (int i = 0; i &lt; colors.length; i += 1) {\n      if (colors[i] != typedOther.colors[i])\n        return false;\n    }\n  }\n  if (stops != null) {\n    assert(typedOther.stops != null);\n    assert(stops.length == typedOther.stops.length);\n    for (int i = 0; i &lt; stops.length; i += 1) {\n      if (stops[i] != typedOther.stops[i])\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "SweepGradient",
                    "type": "",
                    "desc": "<p>Creates a sweep gradient.<\/p>\n<p>The <code>colors<\/code> argument must not be null. If <code>stops<\/code> is non-null, it must\nhave the same length as <code>colors<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "center",
                            "type": "painting.AlignmentGeometry",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "startAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "endAngle",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "colors",
                            "type": "dart:core.List<dart:ui.Color>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Color"
                            ]
                        },
                        {
                            "name": "stops",
                            "type": "dart:core.List<dart:core.double>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.double"
                            ]
                        },
                        {
                            "name": "tileMode",
                            "type": "dart:ui.TileMode",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/SweepGradient\/SweepGradient.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SweepGradient({\n  this.center = Alignment.center,\n  this.startAngle = 0.0,\n  this.endAngle = math.pi * 2,\n  @required List&lt;Color&gt; colors,\n  List&lt;double&gt; stops,\n  this.tileMode = TileMode.clamp,\n}) : assert(center != null),\n     assert(startAngle != null),\n     assert(endAngle != null),\n     assert(tileMode != null),\n     super(colors: colors, stops: stops);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "createShader",
                    "type": "dart:ui.Shader",
                    "desc": "<p>Creates a <a href=\"dart-ui\/Shader-class.html\">Shader<\/a> for this gradient to fill the given rect.<\/p>\n<p>If the gradient's configuration is text-direction-dependent, for example\nit uses <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a> objects instead of <a href=\"painting\/Alignment-class.html\">Alignment<\/a>\nobjects, then the <code>textDirection<\/code> argument must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "rect",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/createShader.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nShader createShader(Rect rect, { TextDirection textDirection }) {\n  return ui.Gradient.sweep(\n    center.resolve(textDirection).withinRect(rect),\n    colors, _impliedStops(), tileMode,\n    startAngle,\n    endAngle,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.SweepGradient",
                    "desc": "<p>Linearly interpolate between two <a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a>s.<\/p>\n<p>If either gradient is null, then the non-null gradient is returned with\nits color scaled in the same way as the <a href=\"painting\/SweepGradient\/scale.html\">scale<\/a> function.<\/p>\n<p>If neither gradient is null, they must have the same number of <a href=\"painting\/Gradient\/colors.html\">colors<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents a position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.SweepGradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.SweepGradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static SweepGradient lerp(SweepGradient a, SweepGradient b, double t) {\n  assert(t != null);\n  if (a == null &amp;&amp; b == null)\n    return null;\n  if (a == null)\n    return b.scale(t);\n  if (b == null)\n    return a.scale(1.0 - t);\n  final _ColorsAndStops interpolated = _interpolateColorsAndStops(\n      a.colors,\n      a._impliedStops(),\n      b.colors,\n      b._impliedStops(),\n      t,\n  );\n  return SweepGradient(\n    center: AlignmentGeometry.lerp(a.center, b.center, t),\n    startAngle: math.max(0.0, ui.lerpDouble(a.startAngle, b.startAngle, t)),\n    endAngle: math.max(0.0, ui.lerpDouble(a.endAngle, b.endAngle, t)),\n    colors: interpolated.colors,\n    stops: interpolated.stops,\n    tileMode: t &lt; 0.5 ? a.tileMode : b.tileMode, \/\/ TODO(ianh): interpolate tile mode\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpFrom",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from another <a href=\"painting\/Gradient-class.html\">Gradient<\/a> to <code>this<\/code>.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>a<\/code>. In that case, <a href=\"painting\/SweepGradient\/lerp.html\">lerp<\/a> will try <code>a<\/code>'s <a href=\"painting\/SweepGradient\/lerpTo.html\">lerpTo<\/a>\nmethod instead.<\/p>\n<p>If <code>a<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/SweepGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>this<\/code> (or something equivalent to <code>this<\/code>), and values in\nbetween meaning that the interpolation is at the relevant point on the\ntimeline between <code>a<\/code> and <code>this<\/code>. The interpolation can be extrapolated\nbeyond 0.0 and 1.0, so negative values and values greater than 1.0 are\nvalid (and can easily be generated by curves such as\n<a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/SweepGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/lerpFrom.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpFrom(Gradient a, double t) {\n  if (a == null || (a is SweepGradient))\n    return SweepGradient.lerp(a, this, t);\n  return super.lerpFrom(a, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerpTo",
                    "type": "painting.Gradient",
                    "desc": "<p>Linearly interpolates from <code>this<\/code> to another <a href=\"painting\/Gradient-class.html\">Gradient<\/a>.<\/p>\n<p>This is called if <code>b<\/code>'s <a href=\"painting\/SweepGradient\/lerpTo.html\">lerpTo<\/a> did not know how to handle this class.<\/p>\n<p>When implementing this method in subclasses, return null if this class\ncannot interpolate from <code>b<\/code>. In that case, <a href=\"painting\/SweepGradient\/lerp.html\">lerp<\/a> will apply a default\nbehavior instead.<\/p>\n<p>If <code>b<\/code> is null, this must not return null. The base class implements this\nby deferring to <a href=\"painting\/SweepGradient\/scale.html\">scale<\/a>.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>this<\/code> (or something\nequivalent to <code>this<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>this<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0\nand 1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>Instead of calling this directly, use <a href=\"painting\/SweepGradient\/lerp.html\">Gradient.lerp<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "b",
                            "type": "painting.Gradient",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/lerpTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nGradient lerpTo(Gradient b, double t) {\n  if (b == null || (b is SweepGradient))\n    return SweepGradient.lerp(this, b, t);\n  return super.lerpTo(b, t);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "painting.SweepGradient",
                    "desc": "<p>Returns a new <a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a> with its colors scaled by the given factor.<\/p>\n<p>Since the alpha component of the Color is what is scaled, a factor\nof 0.0 or less results in a gradient that is fully transparent.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [
                        {
                            "name": "factor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/scale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSweepGradient scale(double factor) {\n  return SweepGradient(\n    center: center,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    colors: colors.map&lt;Color&gt;((Color color) =&gt; Color.lerp(null, color, factor)).toList(),\n    stops: stops,\n    tileMode: tileMode,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.SweepGradient",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/SweepGradient\/toString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return '$runtimeType($center, $startAngle, $endAngle, $colors, $stops, $tileMode)';\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "center",
                    "type": "painting.AlignmentGeometry",
                    "types": [],
                    "desc": "<p>The center of the gradient, as an offset into the (-1.0, -1.0) x (1.0, 1.0)\nsquare describing the gradient which will be mapped onto the paint box.<\/p>\n<p>For example, an alignment of (0.0, 0.0) will place the sweep\ngradient in the center of the box.<\/p>\n<p>If this is an <a href=\"painting\/Alignment-class.html\">Alignment<\/a>, then it is expressed as a vector from\ncoordinate (0.0, 0.0), in a coordinate space that maps the center of the\npaint box at (0.0, 0.0) and the bottom right at (1.0, 1.0).<\/p>\n<p>It can also be an <a href=\"painting\/AlignmentDirectional-class.html\">AlignmentDirectional<\/a>, where the start is the left in\nleft-to-right contexts and the right in right-to-left contexts. If a\ntext-direction-dependent value is provided here, then the <a href=\"painting\/SweepGradient\/createShader.html\">createShader<\/a>\nmethod will need to be given a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n        ",
                    "memberOf": "painting.SweepGradient",
                    "isConstant": false,
                    "href": "painting\/SweepGradient\/center.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final AlignmentGeometry center\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "endAngle",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The angle in radians at which stop 1.0 of the gradient is placed.<\/p>\n<p>Defaults to math.pi * 2.<\/p>\n        ",
                    "memberOf": "painting.SweepGradient",
                    "isConstant": false,
                    "href": "painting\/SweepGradient\/endAngle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double endAngle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/SweepGradient\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/SweepGradient\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/SweepGradient\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/SweepGradient\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/SweepGradient\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/SweepGradient\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.SweepGradient",
                    "isConstant": false,
                    "href": "painting\/SweepGradient\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(center, startAngle, endAngle, tileMode, hashList(colors), hashList(stops));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "startAngle",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The angle in radians at which stop 0.0 of the gradient is placed.<\/p>\n<p>Defaults to 0.0.<\/p>\n        ",
                    "memberOf": "painting.SweepGradient",
                    "isConstant": false,
                    "href": "painting\/SweepGradient\/startAngle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double startAngle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "tileMode",
                    "type": "dart:ui.TileMode",
                    "types": [],
                    "desc": "<p>How this gradient should tile the plane beyond in the region before\n<a href=\"painting\/SweepGradient\/startAngle.html\">startAngle<\/a> and after <a href=\"painting\/SweepGradient\/endAngle.html\">endAngle<\/a>.<\/p>\n<p>For details, see <a href=\"dart-ui\/TileMode-class.html\">TileMode<\/a>.<\/p>\n<p><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_clamp_sweep.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_mirror_sweep.png\"><img alt=\"\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/dart-ui\/tile_mode_repeated_sweep.png\"><\/p>\n        ",
                    "memberOf": "painting.SweepGradient",
                    "isConstant": false,
                    "href": "painting\/SweepGradient\/tileMode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TileMode tileMode\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/SweepGradient-class.html",
            "desc": "<p>A 2D sweep gradient.<\/p>\n<p>This class is used by <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> to represent sweep gradients. This\nabstracts out the arguments to the <a href=\"dart-ui\/Gradient\/Gradient.sweep.html\">new ui.Gradient.sweep<\/a> constructor from\nthe <code>dart:ui<\/code> library.<\/p>\n<p>A gradient has a <a href=\"painting\/SweepGradient\/center.html\">center<\/a>, a <a href=\"painting\/SweepGradient\/startAngle.html\">startAngle<\/a>, and an <a href=\"painting\/SweepGradient\/endAngle.html\">endAngle<\/a>. The <a href=\"painting\/SweepGradient\/startAngle.html\">startAngle<\/a>\ncorresponds to 0.0, and the <a href=\"painting\/SweepGradient\/endAngle.html\">endAngle<\/a> corresponds to 1.0. These angles are\nexpressed in radians.<\/p>\n<p>The <a href=\"painting\/Gradient\/colors.html\">colors<\/a> are described by a list of <a href=\"dart-ui\/Color-class.html\">Color<\/a> objects. There must be at\nleast two colors. The <a href=\"painting\/Gradient\/stops.html\">stops<\/a> list, if specified, must have the same length\nas <a href=\"painting\/Gradient\/colors.html\">colors<\/a>. It specifies fractions of the vector from start to end, between\n0.0 and 1.0, for each color. If it is null, a uniform distribution is\nassumed.<\/p>\n<p>The region of the canvas before <a href=\"painting\/SweepGradient\/startAngle.html\">startAngle<\/a> and after <a href=\"painting\/SweepGradient\/endAngle.html\">endAngle<\/a> is colored\naccording to <a href=\"painting\/SweepGradient\/tileMode.html\">tileMode<\/a>.<\/p>\n<p>Typically this class is used with <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which does the painting.\nTo use a <a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a> to paint on a canvas directly, see <a href=\"painting\/SweepGradient\/createShader.html\">createShader<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis sample draws a different color in each quadrant.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Container(\n  decoration: BoxDecoration(\n    gradient: SweepGradient(\n      center: FractionalOffset.center,\n      startAngle: 0.0,\n      endAngle: math.pi * 2,\n      colors: const &lt;Color&gt;[\n        Color(0xFF4285F4), \/\/ blue\n        Color(0xFF34A853), \/\/ green\n        Color(0xFFFBBC05), \/\/ yellow\n        Color(0xFFEA4335), \/\/ red\n        Color(0xFF4285F4), \/\/ blue again to seamlessly transition to the start\n      ],\n      stops: const &lt;double&gt;[0.0, 0.25, 0.5, 0.75, 1.0],\n     ),\n  ),\n )<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/LinearGradient-class.html\">LinearGradient<\/a>, which displays a gradient in parallel lines, and has an\nexample which shows a different way to use <a href=\"painting\/Gradient-class.html\">Gradient<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/RadialGradient-class.html\">RadialGradient<\/a>, which displays a gradient in concentric circles, and\nhas an example which shows a different way to use <a href=\"painting\/Gradient-class.html\">Gradient<\/a> objects.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which can take a <a href=\"painting\/SweepGradient-class.html\">SweepGradient<\/a> in its\n<a href=\"painting\/BoxDecoration\/gradient.html\">BoxDecoration.gradient<\/a> property.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "SweepGradient"
        },
        {
            "name": "painting.TextPainter",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "TextPainter",
                    "type": "",
                    "desc": "<p>Creates a text painter that paints the given text.<\/p>\n<p>The <code>text<\/code> and <code>textDirection<\/code> arguments are optional but <code>text<\/code> and\n<code>textDirection<\/code> must be non-null before calling <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n<p>The <code>textAlign<\/code> property must not be null.<\/p>\n<p>The <code>maxLines<\/code> property, if non-null, must be greater than zero.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "text",
                            "type": "painting.TextSpan",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textAlign",
                            "type": "dart:ui.TextAlign",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textScaleFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "maxLines",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ellipsis",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strutStyle",
                            "type": "painting.StrutStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/TextPainter\/TextPainter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPainter({\n  TextSpan text,\n  TextAlign textAlign = TextAlign.start,\n  TextDirection textDirection,\n  double textScaleFactor = 1.0,\n  int maxLines,\n  String ellipsis,\n  Locale locale,\n  StrutStyle strutStyle,\n}) : assert(text == null || text.debugAssertIsValid()),\n     assert(textAlign != null),\n     assert(textScaleFactor != null),\n     assert(maxLines == null || maxLines &gt; 0),\n     _text = text,\n     _textAlign = textAlign,\n     _textDirection = textDirection,\n     _textScaleFactor = textScaleFactor,\n     _maxLines = maxLines,\n     _ellipsis = ellipsis,\n     _locale = locale,\n     _strutStyle = strutStyle;<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "computeDistanceToActualBaseline",
                    "type": "dart:core.double",
                    "desc": "<p>Returns the distance from the top of the text to the first baseline of the\ngiven type.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "baseline",
                            "type": "dart:ui.TextBaseline",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/computeDistanceToActualBaseline.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double computeDistanceToActualBaseline(TextBaseline baseline) {\n  assert(!_needsLayout);\n  assert(baseline != null);\n  switch (baseline) {\n    case TextBaseline.alphabetic:\n      return _paragraph.alphabeticBaseline;\n    case TextBaseline.ideographic:\n      return _paragraph.ideographicBaseline;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getBoxesForSelection",
                    "type": "dart:core.List<dart:ui.TextBox>",
                    "desc": "<p>Returns a list of rects that bound the given selection.<\/p>\n<p>A given selection might have more than one rect if this text painter\ncontains bidirectional text because logically contiguous text might not be\nvisually contiguous.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "selection",
                            "type": "services.TextSelection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/getBoxesForSelection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;TextBox&gt; getBoxesForSelection(TextSelection selection) {\n  assert(!_needsLayout);\n  return _paragraph.getBoxesForRange(selection.start, selection.end);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "dart:ui.TextBox"
                    ]
                },
                {
                    "name": "getOffsetAfter",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the closest offset after <code>offset<\/code> at which the input cursor can be\npositioned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/getOffsetAfter.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getOffsetAfter(int offset) {\n  final int nextCodeUnit = _text.codeUnitAt(offset);\n  if (nextCodeUnit == null)\n    return null;\n  \/\/ TODO(goderbauer): doesn't handle extended grapheme clusters with more than one Unicode scalar value (https:\/\/github.com\/flutter\/flutter\/issues\/13404).\n  return _isUtf16Surrogate(nextCodeUnit) ? offset + 2 : offset + 1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOffsetBefore",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the closest offset before <code>offset<\/code> at which the input cursor can\nbe positioned.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/getOffsetBefore.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int getOffsetBefore(int offset) {\n  final int prevCodeUnit = _text.codeUnitAt(offset - 1);\n  if (prevCodeUnit == null)\n    return null;\n  \/\/ TODO(goderbauer): doesn't handle extended grapheme clusters with more than one Unicode scalar value (https:\/\/github.com\/flutter\/flutter\/issues\/13404).\n  return _isUtf16Surrogate(prevCodeUnit) ? offset - 2 : offset - 1;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getOffsetForCaret",
                    "type": "dart:ui.Offset",
                    "desc": "<p>Returns the offset at which to paint the caret.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.TextPosition",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "caretPrototype",
                            "type": "dart:ui.Rect",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/getOffsetForCaret.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset getOffsetForCaret(TextPosition position, Rect caretPrototype) {\n  assert(!_needsLayout);\n  final int offset = position.offset;\n  assert(position.affinity != null);\n  switch (position.affinity) {\n    case TextAffinity.upstream:\n      return _getOffsetFromUpstream(offset, caretPrototype)\n          ?? _getOffsetFromDownstream(offset, caretPrototype)\n          ?? _emptyOffset;\n    case TextAffinity.downstream:\n      return _getOffsetFromDownstream(offset, caretPrototype)\n          ?? _getOffsetFromUpstream(offset, caretPrototype)\n          ?? _emptyOffset;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getPositionForOffset",
                    "type": "dart:ui.TextPosition",
                    "desc": "<p>Returns the position within the text for the given pixel offset.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/getPositionForOffset.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextPosition getPositionForOffset(Offset offset) {\n  assert(!_needsLayout);\n  return _paragraph.getPositionForOffset(offset);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getWordBoundary",
                    "type": "services.TextRange",
                    "desc": "<p>Returns the text range of the word at the given offset. Characters not\npart of a word, such as spaces, symbols, and punctuation, have word breaks\non both sides. In such cases, this method will return a text range that\ncontains the given text position.<\/p>\n<p>Word boundaries are defined more precisely in Unicode Standard Annex #29\n<a href=\"http:\/\/www.unicode.org\/reports\/tr29\/#Word_Boundaries\">www.unicode.org\/reports\/tr29\/#Word_Boundaries<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.TextPosition",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/getWordBoundary.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextRange getWordBoundary(TextPosition position) {\n  assert(!_needsLayout);\n  final List&lt;int&gt; indices = _paragraph.getWordBoundary(position.offset);\n  return TextRange(start: indices[0], end: indices[1]);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "layout",
                    "type": "",
                    "desc": "<p>Computes the visual position of the glyphs for painting the text.<\/p>\n<p>The text will layout with a width that's as close to its max intrinsic\nwidth as possible while still being greater than or equal to <code>minWidth<\/code> and\nless than or equal to <code>maxWidth<\/code>.<\/p>\n<p>The <a href=\"painting\/TextPainter\/text.html\">text<\/a> and <a href=\"painting\/TextPainter\/textDirection.html\">textDirection<\/a> properties must be non-null before this is\ncalled.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "minWidth",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "maxWidth",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/layout.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void layout({ double minWidth = 0.0, double maxWidth = double.infinity }) {\n  assert(text != null, 'TextPainter.text must be set to a non-null value before using the TextPainter.');\n  assert(textDirection != null, 'TextPainter.textDirection must be set to a non-null value before using the TextPainter.');\n  if (!_needsLayout &amp;&amp; minWidth == _lastMinWidth &amp;&amp; maxWidth == _lastMaxWidth)\n    return;\n  _needsLayout = false;\n  if (_paragraph == null) {\n    final ui.ParagraphBuilder builder = ui.ParagraphBuilder(_createParagraphStyle());\n    _text.build(builder, textScaleFactor: textScaleFactor);\n    _paragraph = builder.build();\n  }\n  _lastMinWidth = minWidth;\n  _lastMaxWidth = maxWidth;\n  _paragraph.layout(ui.ParagraphConstraints(width: maxWidth));\n  if (minWidth != maxWidth) {\n    final double newWidth = maxIntrinsicWidth.clamp(minWidth, maxWidth);\n    if (newWidth != width)\n      _paragraph.layout(ui.ParagraphConstraints(width: newWidth));\n  }\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "paint",
                    "type": "",
                    "desc": "<p>Paints the text onto the given canvas at the given offset.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n<p>If you cannot see the text being painted, check that your text color does\nnot conflict with the background on which you are drawing. The default\ntext color is white (to contrast with the default black background color),\nso if you are writing an application with a white background, the text\nwill not be visible by default.<\/p>\n<p>To set the text style, specify a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> when creating the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>\nthat you pass to the <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> constructor or to the <a href=\"painting\/TextPainter\/text.html\">text<\/a> property.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextPainter",
                    "sig": "",
                    "params": [
                        {
                            "name": "canvas",
                            "type": "dart:ui.Canvas",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "offset",
                            "type": "dart:ui.Offset",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextPainter\/paint.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paint(Canvas canvas, Offset offset) {\n  assert(() {\n    if (_needsLayout) {\n      throw FlutterError(\n        'TextPainter.paint called when text geometry was not yet calculated.\\n'\n        'Please call layout() before paint() to position the text before painting it.'\n      );\n    }\n    return true;\n  }());\n  canvas.drawParagraph(_paragraph, offset);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                }
            ],
            "props": [
                {
                    "name": "didExceedMaxLines",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether any text was truncated or ellipsized.<\/p>\n<p>If <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is not null, this is true if there were more lines to be\ndrawn than the given <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a>, and thus at least one line was omitted in\nthe output; otherwise it is false.<\/p>\n<p>If <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is null, this is true if <a href=\"painting\/TextPainter\/ellipsis.html\">ellipsis<\/a> is not the empty string\nand there was a line that overflowed the <code>maxWidth<\/code> argument passed to\n<a href=\"painting\/TextPainter\/layout.html\">layout<\/a>; otherwise it is false.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/didExceedMaxLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get didExceedMaxLines {\n  assert(!_needsLayout);\n  return _paragraph.didExceedMaxLines;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "ellipsis",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The string used to ellipsize overflowing text. Setting this to a non-empty\nstring will cause this string to be substituted for the remaining text\nif the text can not fit within the specified maximum width.<\/p>\n<p>Specifically, the ellipsis is applied to the last line before the line\ntruncated by <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a>, if <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is non-null and that line overflows\nthe width constraint, or to the first line that is wider than the width\nconstraint, if <a href=\"painting\/TextPainter\/maxLines.html\">maxLines<\/a> is null. The width constraint is the <code>maxWidth<\/code>\npassed to <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>The higher layers of the system, such as the <a href=\"widgets\/Text-class.html\">Text<\/a> widget, represent\noverflow effects using the <a href=\"rendering\/TextOverflow-class.html\">TextOverflow<\/a> enum. The\n<a href=\"painting\/TextPainter\/ellipsis.html\">TextOverflow.ellipsis<\/a> value corresponds to setting this property to\nU+2026 HORIZONTAL ELLIPSIS (\u2026).<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/ellipsis.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get ellipsis =&gt; _ellipsis;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The vertical space required to paint this text.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get height {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.height);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "types": [],
                    "desc": "<p>The locale used to select region-specific glyphs.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Locale get locale =&gt; _locale;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxIntrinsicWidth",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The width at which increasing the width of the text no longer decreases the height.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/maxIntrinsicWidth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get maxIntrinsicWidth {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.maxIntrinsicWidth);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "maxLines",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>An optional maximum number of lines for the text to span, wrapping if\nnecessary.<\/p>\n<p>If the text exceeds the given number of lines, it is truncated such that\nsubsequent lines are dropped.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/maxLines.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get maxLines =&gt; _maxLines;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "minIntrinsicWidth",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The width at which decreasing the width of the text would prevent it from\npainting itself completely within its bounds.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/minIntrinsicWidth.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get minIntrinsicWidth {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.minIntrinsicWidth);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "preferredLineHeight",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The height of a space in <a href=\"painting\/TextPainter\/text.html\">text<\/a> in logical pixels.<\/p>\n<p>Not every line of text in <a href=\"painting\/TextPainter\/text.html\">text<\/a> will have this height, but this height\nis \"typical\" for text in <a href=\"painting\/TextPainter\/text.html\">text<\/a> and useful for sizing other objects\nrelative a typical line of text.<\/p>\n<p>Obtaining this value does not require calling <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n<p>The style of the <a href=\"painting\/TextPainter\/text.html\">text<\/a> property is used to determine the font settings\nthat contribute to the <a href=\"painting\/TextPainter\/preferredLineHeight.html\">preferredLineHeight<\/a>. If <a href=\"painting\/TextPainter\/text.html\">text<\/a> is null or if it\nspecifies no styles, the default <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> values are used (a 10 pixel\nsans-serif font).<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/preferredLineHeight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get preferredLineHeight {\n  if (_layoutTemplate == null) {\n    final ui.ParagraphBuilder builder = ui.ParagraphBuilder(\n      _createParagraphStyle(TextDirection.rtl),\n    ); \/\/ direction doesn't matter, text is just a space\n    if (text?.style != null)\n      builder.pushStyle(text.style.getTextStyle(textScaleFactor: textScaleFactor));\n    builder.addText(' ');\n    _layoutTemplate = builder.build()\n      ..layout(const ui.ParagraphConstraints(width: double.infinity));\n  }\n  return _layoutTemplate.height;\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "types": [],
                    "desc": "<p>The amount of space required to paint this text.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/size.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Size get size {\n  assert(!_needsLayout);\n  return Size(width, height);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "strutStyle",
                    "type": "painting.StrutStyle",
                    "types": [],
                    "desc": "<p>The strut style to use. Strut style defines the strut, which sets minimum\nvertical layout metrics.<\/p>\n<p>Omitting or providing null will disable strut.<\/p>\n<p>Omitting or providing null for any properties of <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> will result in\ndefault values being used. It is highly recommended to at least specify a\n<code>fontSize<\/code>.<\/p>\n<p>See <a href=\"painting\/StrutStyle-class.html\">StrutStyle<\/a> for details.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/strutStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StrutStyle get strutStyle =&gt; _strutStyle;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "painting.TextSpan",
                    "types": [],
                    "desc": "<p>The (potentially styled) text to paint.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>This and <a href=\"painting\/TextPainter\/textDirection.html\">textDirection<\/a> must be non-null before you call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSpan get text =&gt; _text;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textAlign",
                    "type": "dart:ui.TextAlign",
                    "types": [],
                    "desc": "<p>How the text should be aligned horizontally.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>The <a href=\"painting\/TextPainter\/textAlign.html\">textAlign<\/a> property must not be null. It defaults to <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/textAlign.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextAlign get textAlign =&gt; _textAlign;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "types": [],
                    "desc": "<p>The default directionality of the text.<\/p>\n<p>This controls how the <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.start<\/a>, <a href=\"dart-ui\/TextAlign-class.html\">TextAlign.end<\/a>, and\n<a href=\"dart-ui\/TextAlign-class.html\">TextAlign.justify<\/a> values of <a href=\"painting\/TextPainter\/textAlign.html\">textAlign<\/a> are resolved.<\/p>\n<p>This is also used to disambiguate how to render bidirectional text. For\nexample, if the <a href=\"painting\/TextPainter\/text.html\">text<\/a> is an English phrase followed by a Hebrew phrase,\nin a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a> context the English phrase will be on the left\nand the Hebrew phrase to its right, while in a <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a>\ncontext, the English phrase will be on the right and the Hebrew phrase on\nits left.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n<p>This and <a href=\"painting\/TextPainter\/text.html\">text<\/a> must be non-null before you call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/textDirection.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textScaleFactor",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The number of font pixels for each logical pixel.<\/p>\n<p>For example, if the text scale factor is 1.5, text will be 50% larger than\nthe specified font size.<\/p>\n<p>After this is set, you must call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> before the next call to <a href=\"painting\/TextPainter\/paint.html\">paint<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/textScaleFactor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get textScaleFactor =&gt; _textScaleFactor;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The horizontal space required to paint this text.<\/p>\n<p>Valid only after <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> has been called.<\/p>\n        ",
                    "memberOf": "painting.TextPainter",
                    "isConstant": false,
                    "href": "painting\/TextPainter\/width.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get width {\n  assert(!_needsLayout);\n  return _applyFloatingPointHack(_paragraph.width);\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/TextPainter-class.html",
            "desc": "<p>An object that paints a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree into a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/p>\n<p>To use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>, follow these steps:<\/p>\n<ol>\n<li>\n<p>Create a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree and pass it to the <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>\nconstructor.<\/p>\n<\/li>\n<li>\n<p>Call <a href=\"painting\/TextPainter\/layout.html\">layout<\/a> to prepare the paragraph.<\/p>\n<\/li>\n<li>\n<p>Call <a href=\"painting\/TextPainter\/paint.html\">paint<\/a> as often as desired to paint the paragraph.<\/p>\n<\/li>\n<\/ol>\n<p>If the width of the area into which the text is being painted\nchanges, return to step 2. If the text to be painted changes,\nreturn to step 1.<\/p>\n<p>The default text style is white. To change the color of the text,\npass a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> object to the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> in <code>text<\/code>.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextPainter"
        },
        {
            "name": "painting.TextSpan",
            "extends": [
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/TextSpan\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TextSpan typedOther = other;\n  return typedOther.text == text\n      &amp;&amp; typedOther.style == style\n      &amp;&amp; typedOther.recognizer == recognizer\n      &amp;&amp; listEquals&lt;TextSpan&gt;(typedOther.children, children);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextSpan",
                    "type": "",
                    "desc": "<p>Creates a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> with the given values.<\/p>\n<p>For the object to be useful, at least one of <code>text<\/code> or\n<code>children<\/code> should be set.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "style",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "text",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "children",
                            "type": "dart:core.List<painting.TextSpan>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "painting.TextSpan"
                            ]
                        },
                        {
                            "name": "recognizer",
                            "type": "gestures.GestureRecognizer",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/TextSpan\/TextSpan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextSpan({\n  this.style,\n  this.text,\n  this.children,\n  this.recognizer,\n});<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "build",
                    "type": "",
                    "desc": "<p>Apply the <a href=\"painting\/TextSpan\/style.html\">style<\/a>, <a href=\"painting\/TextSpan\/text.html\">text<\/a>, and <a href=\"painting\/TextSpan\/children.html\">children<\/a> of this object to the\ngiven <a href=\"dart-ui\/ParagraphBuilder-class.html\">ParagraphBuilder<\/a>, from which a <a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> can be obtained.\n<a href=\"dart-ui\/Paragraph-class.html\">Paragraph<\/a> objects can be drawn on <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> objects.<\/p>\n<p>Rather than using this directly, it's simpler to use the\n<a href=\"painting\/TextPainter-class.html\">TextPainter<\/a> class to paint <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects onto <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>\nobjects.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "builder",
                            "type": "dart:ui.ParagraphBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textScaleFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/build.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void build(ui.ParagraphBuilder builder, { double textScaleFactor = 1.0 }) {\n  assert(debugAssertIsValid());\n  final bool hasStyle = style != null;\n  if (hasStyle)\n    builder.pushStyle(style.getTextStyle(textScaleFactor: textScaleFactor));\n  if (text != null)\n    builder.addText(text);\n  if (children != null) {\n    for (TextSpan child in children) {\n      assert(child != null);\n      child.build(builder, textScaleFactor: textScaleFactor);\n    }\n  }\n  if (hasStyle)\n    builder.pop();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "codeUnitAt",
                    "type": "dart:core.int",
                    "desc": "<p>Returns the UTF-16 code unit at the given index in the flattened string.<\/p>\n<p>Returns null if the index is out of bounds.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "index",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/codeUnitAt.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int codeUnitAt(int index) {\n  if (index &lt; 0)\n    return null;\n  int offset = 0;\n  int result;\n  visitTextSpan((TextSpan span) {\n    if (index - offset &lt; span.text.length) {\n      result = span.text.codeUnitAt(index - offset);\n      return false;\n    }\n    offset += span.text.length;\n    return true;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "compareTo",
                    "type": "painting.RenderComparison",
                    "desc": "<p>Describe the difference between this text span and another, in terms of\nhow much damage it will make to the rendering. The comparison is deep.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/TextSpan\/compareTo.html\">TextStyle.compareTo<\/a>, which does the same thing for <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>s.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.TextSpan",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/compareTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderComparison compareTo(TextSpan other) {\n  if (identical(this, other))\n    return RenderComparison.identical;\n  if (other.text != text ||\n      children?.length != other.children?.length ||\n      (style == null) != (other.style == null))\n    return RenderComparison.layout;\n  RenderComparison result = recognizer == other.recognizer ? RenderComparison.identical : RenderComparison.metadata;\n  if (style != null) {\n    final RenderComparison candidate = style.compareTo(other.style);\n    if (candidate.index &gt; result.index)\n      result = candidate;\n    if (result == RenderComparison.layout)\n      return result;\n  }\n  if (children != null) {\n    for (int index = 0; index &lt; children.length; index += 1) {\n      final RenderComparison candidate = children[index].compareTo(other.children[index]);\n      if (candidate.index &gt; result.index)\n        result = candidate;\n      if (result == RenderComparison.layout)\n        return result;\n    }\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugAssertIsValid",
                    "type": "dart:core.bool",
                    "desc": "<p>In checked mode, throws an exception if the object is not in a\nvalid configuration. Otherwise, returns true.<\/p>\n<p>This is intended to be used as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(myTextSpan.debugAssertIsValid());\n<\/code><\/pre>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/debugAssertIsValid.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertIsValid() {\n  assert(() {\n    if (!visitTextSpan((TextSpan span) {\n      if (span.children != null) {\n        for (TextSpan child in span.children) {\n          if (child == null)\n            return false;\n        }\n      }\n      return true;\n    })) {\n      throw FlutterError(\n        'TextSpan contains a null child.\\n'\n        'A TextSpan object with a non-null child list should not have any nulls in its child list.\\n'\n        'The full text in question was:\\n'\n        '${toStringDeep(prefixLineOne: '  ')}'\n      );\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugDescribeChildren",
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTree\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/TextSpan\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/debugDescribeChildren.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren() {\n  if (children == null)\n    return const &lt;DiagnosticsNode&gt;[];\n  return children.map&lt;DiagnosticsNode&gt;((TextSpan child) {\n    if (child != null) {\n      return child.toDiagnosticsNode();\n    } else {\n      return DiagnosticsNode.message('&lt;null child&gt;');\n    }\n  }).toList();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": [
                        "dart:core.List",
                        "foundation.DiagnosticsNode"
                    ]
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"painting\/TextSpan\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.defaultDiagnosticsTreeStyle = DiagnosticsTreeStyle.whitespace;\n  \/\/ Properties on style are added as if they were properties directly on\n  \/\/ this TextSpan.\n  if (style != null)\n    style.debugFillProperties(properties);\n\n  properties.add(DiagnosticsProperty&lt;GestureRecognizer&gt;(\n    'recognizer', recognizer,\n    description: recognizer?.runtimeType?.toString(),\n    defaultValue: null,\n  ));\n\n  properties.add(StringProperty('text', text, showName: false, defaultValue: null));\n  if (style == null &amp;&amp; text == null &amp;&amp; children == null)\n    properties.add(DiagnosticsNode.message('(empty)'));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getSpanForPosition",
                    "type": "painting.TextSpan",
                    "desc": "<p>Returns the text span that contains the given position in the text.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "position",
                            "type": "dart:ui.TextPosition",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/getSpanForPosition.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextSpan getSpanForPosition(TextPosition position) {\n  assert(debugAssertIsValid());\n  final TextAffinity affinity = position.affinity;\n  final int targetOffset = position.offset;\n  int offset = 0;\n  TextSpan result;\n  visitTextSpan((TextSpan span) {\n    assert(result == null);\n    final int endOffset = offset + span.text.length;\n    if (targetOffset == offset &amp;&amp; affinity == TextAffinity.downstream ||\n        targetOffset &gt; offset &amp;&amp; targetOffset &lt; endOffset ||\n        targetOffset == endOffset &amp;&amp; affinity == TextAffinity.upstream) {\n      result = span;\n      return false;\n    }\n    offset = endOffset;\n    return true;\n  });\n  return result;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toPlainText",
                    "type": "dart:core.String",
                    "desc": "<p>Flattens the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree into a single string.<\/p>\n<p>Styles are not honored in this process.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/toPlainText.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toPlainText() {\n  assert(debugAssertIsValid());\n  final StringBuffer buffer = StringBuffer();\n  visitTextSpan((TextSpan span) {\n    buffer.write(span.text);\n    return true;\n  });\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"painting\/TextSpan\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "visitTextSpan",
                    "type": "dart:core.bool",
                    "desc": "<p>Walks this text span and its descendants in pre-order and calls <code>visitor<\/code>\nfor each span that has text.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextSpan",
                    "sig": "",
                    "params": [
                        {
                            "name": "span",
                            "type": "painting.TextSpan",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "span",
                            "type": "painting.TextSpan",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextSpan\/visitTextSpan.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool visitTextSpan(bool visitor(TextSpan span)) {\n  if (text != null) {\n    if (!visitor(this))\n      return false;\n  }\n  if (children != null) {\n    for (TextSpan child in children) {\n      if (!child.visitTextSpan(visitor))\n        return false;\n    }\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "children",
                    "type": "dart:core.List<painting.TextSpan>",
                    "types": [
                        "dart:core.List",
                        "painting.TextSpan"
                    ],
                    "desc": "<p>Additional spans to include as children.<\/p>\n<p>If both <a href=\"painting\/TextSpan\/text.html\">text<\/a> and <a href=\"painting\/TextSpan\/children.html\">children<\/a> are non-null, the text will precede the\nchildren.<\/p>\n<p>Modifying the list after the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> has been created is not\nsupported and may have unexpected results.<\/p>\n<p>The list must not contain any nulls.<\/p>\n        ",
                    "memberOf": "painting.TextSpan",
                    "isConstant": false,
                    "href": "painting\/TextSpan\/children.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;TextSpan&gt; children\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/TextSpan\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/TextSpan\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.TextSpan",
                    "isConstant": false,
                    "href": "painting\/TextSpan\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; hashValues(style, text, recognizer, hashList(children));<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "recognizer",
                    "type": "gestures.GestureRecognizer",
                    "types": [],
                    "desc": "<p>A gesture recognizer that will receive events that hit this text span.<\/p>\n<p><a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> itself does not implement hit testing or event dispatch. The\nobject that manages the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> painting is also responsible for\ndispatching events. In the rendering library, that is the\n<a href=\"rendering\/RenderParagraph-class.html\">RenderParagraph<\/a> object, which corresponds to the <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget in\nthe widgets layer; these objects do not bubble events in <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s, so a\n<a href=\"painting\/TextSpan\/recognizer.html\">recognizer<\/a> is only effective for events that directly hit the <a href=\"painting\/TextSpan\/text.html\">text<\/a> of\nthat <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, not any of its <a href=\"painting\/TextSpan\/children.html\">children<\/a>.<\/p>\n<p><a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> also does not manage the lifetime of the gesture recognizer.\nThe code that owns the <a href=\"gestures\/GestureRecognizer-class.html\">GestureRecognizer<\/a> object must call\n<a href=\"gestures\/GestureRecognizer\/dispose.html\">GestureRecognizer.dispose<\/a> when the <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object is no longer used.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows how to manage the lifetime of a gesture recognizer\nprovided to a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object. It defines a <code>BuzzingText<\/code> widget which\nuses the <a href=\"services\/HapticFeedback-class.html\">HapticFeedback<\/a> class to vibrate the device when the user\nlong-presses the \"find the\" span, which is underlined in wavy green. The\nhit-testing is handled by the <a href=\"widgets\/RichText-class.html\">RichText<\/a> widget.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class BuzzingText extends StatefulWidget {\n  @override\n  _BuzzingTextState createState() =&gt; _BuzzingTextState();\n}\n\nclass _BuzzingTextState extends State&lt;BuzzingText&gt; {\n  LongPressGestureRecognizer _longPressRecognizer;\n\n  @override\n  void initState() {\n    super.initState();\n    _longPressRecognizer = LongPressGestureRecognizer()\n      ..onLongPress = _handlePress;\n  }\n\n  @override\n  void dispose() {\n    _longPressRecognizer.dispose();\n    super.dispose();\n  }\n\n  void _handlePress() {\n    HapticFeedback.vibrate();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return RichText(\n      text: TextSpan(\n        text: 'Can you ',\n        style: TextStyle(color: Colors.black),\n        children: &lt;TextSpan&gt;[\n          TextSpan(\n            text: 'find the',\n            style: TextStyle(\n              color: Colors.green,\n              decoration: TextDecoration.underline,\n              decorationStyle: TextDecorationStyle.wavy,\n            ),\n            recognizer: _longPressRecognizer,\n          ),\n          TextSpan(\n            text: ' secret?',\n          ),\n        ],\n      ),\n    );\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n        ",
                    "memberOf": "painting.TextSpan",
                    "isConstant": false,
                    "href": "painting\/TextSpan\/recognizer.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final GestureRecognizer recognizer\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "style",
                    "type": "painting.TextStyle",
                    "types": [],
                    "desc": "<p>The style to apply to the <a href=\"painting\/TextSpan\/text.html\">text<\/a> and the <a href=\"painting\/TextSpan\/children.html\">children<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextSpan",
                    "isConstant": false,
                    "href": "painting\/TextSpan\/style.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextStyle style\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "text",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The text contained in the span.<\/p>\n<p>If both <a href=\"painting\/TextSpan\/text.html\">text<\/a> and <a href=\"painting\/TextSpan\/children.html\">children<\/a> are non-null, the text will precede the\nchildren.<\/p>\n        ",
                    "memberOf": "painting.TextSpan",
                    "isConstant": false,
                    "href": "painting\/TextSpan\/text.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String text\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/TextSpan-class.html",
            "desc": "<p>An immutable span of text.<\/p>\n<p>A <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object can be styled using its <a href=\"painting\/TextSpan\/style.html\">style<\/a> property.\nThe style will be applied to the <a href=\"painting\/TextSpan\/text.html\">text<\/a> and the <a href=\"painting\/TextSpan\/children.html\">children<\/a>.<\/p>\n<p>A <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> object can just have plain text, or it can have\nchildren <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects with their own styles that (possibly\nonly partially) override the <a href=\"painting\/TextSpan\/style.html\">style<\/a> of this object. If a\n<a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> has both <a href=\"painting\/TextSpan\/text.html\">text<\/a> and <a href=\"painting\/TextSpan\/children.html\">children<\/a>, then the <a href=\"painting\/TextSpan\/text.html\">text<\/a> is\ntreated as if it was an unstyled <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> at the start of the\n<a href=\"painting\/TextSpan\/children.html\">children<\/a> list.<\/p>\n<p>To paint a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>, use a <a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>. To display a text\nspan in a widget, use a <a href=\"widgets\/RichText-class.html\">RichText<\/a>. For text with a single style, consider\nusing the <a href=\"widgets\/Text-class.html\">Text<\/a> widget.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe text \"Hello world!\", in black:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">TextSpan(\n  text: 'Hello world!',\n  style: TextStyle(color: Colors.black),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p><em>There is some more detailed sample code in the documentation for the\n<a href=\"painting\/TextSpan\/recognizer.html\">recognizer<\/a> property.<\/em><\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Text-class.html\">Text<\/a>, a widget for showing uniformly-styled text.<\/li>\n<li>\n<a href=\"widgets\/RichText-class.html\">RichText<\/a>, a widget for finer control of text rendering.<\/li>\n<li>\n<a href=\"painting\/TextPainter-class.html\">TextPainter<\/a>, a class for painting <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> objects on a <a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a>.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextSpan"
        },
        {
            "name": "painting.TextStyle",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "operator ==",
                    "type": "dart:core.bool",
                    "desc": "<p>The equality operator.<\/p>\n<p>The default behavior for all <a href=\"dart-core\/Object-class.html\">Object<\/a>s is to return true if and\nonly if <code>this<\/code> and <code>other<\/code> are the same object.<\/p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:<\/p>\n<ul>\n<li>\n<p>Total: It must return a boolean for all arguments. It should never throw\nor return <code>null<\/code>.<\/p>\n<\/li>\n<li>\n<p>Reflexive: For all objects <code>o<\/code>, <code>o == o<\/code> must be true.<\/p>\n<\/li>\n<li>\n<p>Symmetric: For all objects <code>o1<\/code> and <code>o2<\/code>, <code>o1 == o2<\/code> and <code>o2 == o1<\/code> must\neither both be true, or both be false.<\/p>\n<\/li>\n<li>\n<p>Transitive: For all objects <code>o1<\/code>, <code>o2<\/code>, and <code>o3<\/code>, if <code>o1 == o2<\/code> and\n<code>o2 == o3<\/code> are true, then <code>o1 == o3<\/code> must be true.<\/p>\n<\/li>\n<\/ul>\n<p>The method should also be consistent over time,\nso whether two objects are equal should only change\nif at least one of the objects was modified.<\/p>\n<p>If a subclass overrides the equality operator it should override\nthe <a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a> method as well to maintain consistency.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": []
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/operator_equals.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool operator ==(dynamic other) {\n  if (identical(this, other))\n    return true;\n  if (other.runtimeType != runtimeType)\n    return false;\n  final TextStyle typedOther = other;\n  return inherit == typedOther.inherit &amp;&amp;\n         color == typedOther.color &amp;&amp;\n         backgroundColor == typedOther.backgroundColor &amp;&amp;\n         fontFamily == typedOther.fontFamily &amp;&amp;\n         fontSize == typedOther.fontSize &amp;&amp;\n         fontWeight == typedOther.fontWeight &amp;&amp;\n         fontStyle == typedOther.fontStyle &amp;&amp;\n         letterSpacing == typedOther.letterSpacing &amp;&amp;\n         wordSpacing == typedOther.wordSpacing &amp;&amp;\n         textBaseline == typedOther.textBaseline &amp;&amp;\n         height == typedOther.height &amp;&amp;\n         locale == typedOther.locale &amp;&amp;\n         foreground == typedOther.foreground &amp;&amp;\n         background == typedOther.background &amp;&amp;\n         decoration == typedOther.decoration &amp;&amp;\n         decorationColor == typedOther.decorationColor &amp;&amp;\n         decorationStyle == typedOther.decorationStyle &amp;&amp;\n         decorationThickness == typedOther.decorationThickness &amp;&amp;\n         listEquals(shadows, typedOther.shadows) &amp;&amp;\n         listEquals(fontFamilyFallback, typedOther.fontFamilyFallback);\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "TextStyle",
                    "type": "",
                    "desc": "<p>Creates a text style.<\/p>\n<p>The <code>package<\/code> argument must be non-null if the font family is defined in a\npackage. It is combined with the <code>fontFamily<\/code> argument to set the\n<code>fontFamily<\/code> property.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "inherit",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backgroundColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "letterSpacing",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "wordSpacing",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textBaseline",
                            "type": "dart:ui.TextBaseline",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "foreground",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "background",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shadows",
                            "type": "dart:core.List<dart:ui.Shadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Shadow"
                            ]
                        },
                        {
                            "name": "decoration",
                            "type": "dart:ui.TextDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationStyle",
                            "type": "dart:ui.TextDecorationStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationThickness",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "debugLabel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "package",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/TextStyle\/TextStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TextStyle({\n  this.inherit = true,\n  this.color,\n  this.backgroundColor,\n  this.fontSize,\n  this.fontWeight,\n  this.fontStyle,\n  this.letterSpacing,\n  this.wordSpacing,\n  this.textBaseline,\n  this.height,\n  this.locale,\n  this.foreground,\n  this.background,\n  this.shadows,\n  this.decoration,\n  this.decorationColor,\n  this.decorationStyle,\n  this.decorationThickness,\n  this.debugLabel,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  String package,\n}) : fontFamily = package == null ? fontFamily : 'packages\/$package\/$fontFamily',\n     _fontFamilyFallback = fontFamilyFallback,\n     _package = package,\n     assert(inherit != null),\n     assert(color == null || foreground == null, _kColorForegroundWarning),\n     assert(backgroundColor == null || background == null, _kColorBackgroundWarning);<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "apply",
                    "type": "painting.TextStyle",
                    "desc": "<p>Creates a copy of this text style replacing or altering the specified\nproperties.<\/p>\n<p>The non-numeric properties <code>color<\/code>, <code>fontFamily<\/code>, <code>decoration<\/code>,\n<code>decorationColor<\/code> and <code>decorationStyle<\/code> are replaced with the new values.<\/p>\n<p><a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> will be given preference over <code>color<\/code> if it is not null and\n<a href=\"painting\/TextStyle\/background.html\">background<\/a> will be given preference over <code>backgroundColor<\/code> if it is not\nnull.<\/p>\n<p>The numeric properties are multiplied by the given factors and then\nincremented by the given deltas.<\/p>\n<p>For example, <code>style.apply(fontSizeFactor: 2.0, fontSizeDelta: 1.0)<\/code> would\nreturn a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> whose <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a> is <code>style.fontSize * 2.0 + 1.0<\/code>.<\/p>\n<p>For the <a href=\"painting\/TextStyle\/fontWeight.html\">fontWeight<\/a>, the delta is applied to the <a href=\"dart-ui\/FontWeight-class.html\">FontWeight<\/a> enum index\nvalues, so that for instance <code>style.apply(fontWeightDelta: -2)<\/code> when\napplied to a <code>style<\/code> whose <a href=\"painting\/TextStyle\/fontWeight.html\">fontWeight<\/a> is <a href=\"dart-ui\/FontWeight\/w500-constant.html\">FontWeight.w500<\/a> will return a\n<a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> with a <a href=\"dart-ui\/FontWeight\/w300-constant.html\">FontWeight.w300<\/a>.<\/p>\n<p>The numeric arguments must not be null.<\/p>\n<p>If the underlying values are null, then the corresponding factors and\/or\ndeltas must not be specified.<\/p>\n<p>If <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is specified on this object, then applying <code>color<\/code> here\nwill have no effect and if <a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified on this object, then\napplying <code>backgroundColor<\/code> here will have no effect either.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backgroundColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decoration",
                            "type": "dart:ui.TextDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationStyle",
                            "type": "dart:ui.TextDecorationStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationThicknessFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationThicknessDelta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "fontSizeFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontSizeDelta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeightDelta",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "letterSpacingFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "letterSpacingDelta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "wordSpacingFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "wordSpacingDelta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "heightFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "heightDelta",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/apply.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle apply({\n  Color color,\n  Color backgroundColor,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n  double decorationThicknessFactor = 1.0,\n  double decorationThicknessDelta = 0.0,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSizeFactor = 1.0,\n  double fontSizeDelta = 0.0,\n  int fontWeightDelta = 0,\n  double letterSpacingFactor = 1.0,\n  double letterSpacingDelta = 0.0,\n  double wordSpacingFactor = 1.0,\n  double wordSpacingDelta = 0.0,\n  double heightFactor = 1.0,\n  double heightDelta = 0.0,\n}) {\n  assert(fontSizeFactor != null);\n  assert(fontSizeDelta != null);\n  assert(fontSize != null || (fontSizeFactor == 1.0 &amp;&amp; fontSizeDelta == 0.0));\n  assert(fontWeightDelta != null);\n  assert(fontWeight != null || fontWeightDelta == 0.0);\n  assert(letterSpacingFactor != null);\n  assert(letterSpacingDelta != null);\n  assert(letterSpacing != null || (letterSpacingFactor == 1.0 &amp;&amp; letterSpacingDelta == 0.0));\n  assert(wordSpacingFactor != null);\n  assert(wordSpacingDelta != null);\n  assert(wordSpacing != null || (wordSpacingFactor == 1.0 &amp;&amp; wordSpacingDelta == 0.0));\n  assert(heightFactor != null);\n  assert(heightDelta != null);\n  assert(heightFactor != null || (heightFactor == 1.0 &amp;&amp; heightDelta == 0.0));\n  assert(decorationThicknessFactor != null);\n  assert(decorationThicknessDelta != null);\n  assert(decorationThickness != null || (decorationThicknessFactor == 1.0 &amp;&amp; decorationThicknessDelta == 0.0));\n\n  String modifiedDebugLabel;\n  assert(() {\n    if (debugLabel != null)\n      modifiedDebugLabel = '($debugLabel).apply';\n    return true;\n  }());\n\n  return TextStyle(\n    inherit: inherit,\n    color: foreground == null ? color ?? this.color : null,\n    backgroundColor: background == null ? backgroundColor ?? this.backgroundColor : null,\n    fontFamily: fontFamily ?? this.fontFamily,\n    fontFamilyFallback: fontFamilyFallback ?? this.fontFamilyFallback,\n    fontSize: fontSize == null ? null : fontSize * fontSizeFactor + fontSizeDelta,\n    fontWeight: fontWeight == null ? null : FontWeight.values[(fontWeight.index + fontWeightDelta).clamp(0, FontWeight.values.length - 1)],\n    fontStyle: fontStyle,\n    letterSpacing: letterSpacing == null ? null : letterSpacing * letterSpacingFactor + letterSpacingDelta,\n    wordSpacing: wordSpacing == null ? null : wordSpacing * wordSpacingFactor + wordSpacingDelta,\n    textBaseline: textBaseline,\n    height: height == null ? null : height * heightFactor + heightDelta,\n    locale: locale,\n    foreground: foreground,\n    background: background,\n    shadows: shadows,\n    decoration: decoration ?? this.decoration,\n    decorationColor: decorationColor ?? this.decorationColor,\n    decorationStyle: decorationStyle ?? this.decorationStyle,\n    decorationThickness: decorationThickness == null ? null : decorationThickness * decorationThicknessFactor + decorationThicknessDelta,\n    debugLabel: modifiedDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "compareTo",
                    "type": "painting.RenderComparison",
                    "desc": "<p>Describe the difference between this style and another, in terms of how\nmuch damage it will make to the rendering.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/TextStyle\/compareTo.html\">TextSpan.compareTo<\/a>, which does the same thing for entire <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/compareTo.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RenderComparison compareTo(TextStyle other) {\n  if (identical(this, other))\n    return RenderComparison.identical;\n  if (inherit != other.inherit ||\n      fontFamily != other.fontFamily ||\n      fontSize != other.fontSize ||\n      fontWeight != other.fontWeight ||\n      fontStyle != other.fontStyle ||\n      letterSpacing != other.letterSpacing ||\n      wordSpacing != other.wordSpacing ||\n      textBaseline != other.textBaseline ||\n      height != other.height ||\n      locale != other.locale ||\n      foreground != other.foreground ||\n      background != other.background ||\n      !listEquals(shadows, other.shadows) ||\n      !listEquals(fontFamilyFallback, other.fontFamilyFallback))\n    return RenderComparison.layout;\n  if (color != other.color ||\n      backgroundColor != other.backgroundColor ||\n      decoration != other.decoration ||\n      decorationColor != other.decorationColor ||\n      decorationStyle != other.decorationStyle ||\n      decorationThickness != other.decorationThickness)\n    return RenderComparison.paint;\n  return RenderComparison.identical;\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "copyWith",
                    "type": "painting.TextStyle",
                    "desc": "<p>Creates a copy of this text style but with the given fields replaced with\nthe new values.<\/p>\n<p>One of <code>color<\/code> or <code>foreground<\/code> must be null, and if this has <code>foreground<\/code>\nspecified it will be given preference over any color parameter.<\/p>\n<p>One of <code>backgroundColor<\/code> or <code>background<\/code> must be null, and if this has\n<code>background<\/code> specified it will be given preference over any\nbackgroundColor parameter.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "inherit",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "color",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "backgroundColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamilyFallback",
                            "type": "dart:core.List<dart:core.String>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:core.String"
                            ]
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "letterSpacing",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "wordSpacing",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textBaseline",
                            "type": "dart:ui.TextBaseline",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "foreground",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "background",
                            "type": "dart:ui.Paint",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "shadows",
                            "type": "dart:core.List<dart:ui.Shadow>",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false,
                            "types": [
                                "dart:core.List",
                                "dart:ui.Shadow"
                            ]
                        },
                        {
                            "name": "decoration",
                            "type": "dart:ui.TextDecoration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationColor",
                            "type": "dart:ui.Color",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationStyle",
                            "type": "dart:ui.TextDecorationStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "decorationThickness",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "debugLabel",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/copyWith.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle copyWith({\n  bool inherit,\n  Color color,\n  Color backgroundColor,\n  String fontFamily,\n  List&lt;String&gt; fontFamilyFallback,\n  double fontSize,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  double letterSpacing,\n  double wordSpacing,\n  TextBaseline textBaseline,\n  double height,\n  Locale locale,\n  Paint foreground,\n  Paint background,\n  List&lt;ui.Shadow&gt; shadows,\n  TextDecoration decoration,\n  Color decorationColor,\n  TextDecorationStyle decorationStyle,\n  double decorationThickness,\n  String debugLabel,\n}) {\n  assert(color == null || foreground == null, _kColorForegroundWarning);\n  assert(backgroundColor == null || background == null, _kColorBackgroundWarning);\n  String newDebugLabel;\n  assert(() {\n    if (this.debugLabel != null)\n      newDebugLabel = debugLabel ?? '(${this.debugLabel}).copyWith';\n    return true;\n  }());\n  return TextStyle(\n    inherit: inherit ?? this.inherit,\n    color: this.foreground == null &amp;&amp; foreground == null ? color ?? this.color : null,\n    backgroundColor: this.background == null &amp;&amp; background == null ? backgroundColor ?? this.backgroundColor : null,\n    fontFamily: fontFamily ?? this.fontFamily,\n    fontFamilyFallback: fontFamilyFallback ?? this.fontFamilyFallback,\n    fontSize: fontSize ?? this.fontSize,\n    fontWeight: fontWeight ?? this.fontWeight,\n    fontStyle: fontStyle ?? this.fontStyle,\n    letterSpacing: letterSpacing ?? this.letterSpacing,\n    wordSpacing: wordSpacing ?? this.wordSpacing,\n    textBaseline: textBaseline ?? this.textBaseline,\n    height: height ?? this.height,\n    locale: locale ?? this.locale,\n    foreground: foreground ?? this.foreground,\n    background: background ?? this.background,\n    shadows: shadows ?? this.shadows,\n    decoration: decoration ?? this.decoration,\n    decorationColor: decorationColor ?? this.decorationColor,\n    decorationStyle: decorationStyle ?? this.decorationStyle,\n    decorationThickness: decorationThickness ?? this.decorationThickness,\n    debugLabel: newDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "debugFillProperties",
                    "type": "",
                    "desc": "<p>Adds all properties prefixing property names with the optional <code>prefix<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "properties",
                            "type": "foundation.DiagnosticPropertiesBuilder",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "prefix",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/debugFillProperties.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties, { String prefix = '' }) {\n  super.debugFillProperties(properties);\n  if (debugLabel != null)\n    properties.add(MessageProperty('${prefix}debugLabel', debugLabel));\n  final List&lt;DiagnosticsNode&gt; styles = &lt;DiagnosticsNode&gt;[];\n  styles.add(DiagnosticsProperty&lt;Color&gt;('${prefix}color', color, defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Color&gt;('${prefix}backgroundColor', backgroundColor, defaultValue: null));\n  styles.add(StringProperty('${prefix}family', fontFamily, defaultValue: null, quoted: false));\n  styles.add(IterableProperty&lt;String&gt;('${prefix}familyFallback', fontFamilyFallback, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}size', fontSize, defaultValue: null));\n  String weightDescription;\n  if (fontWeight != null) {\n    weightDescription = '${fontWeight.index + 1}00';\n  }\n  \/\/ TODO(jacobr): switch this to use enumProperty which will either cause the\n  \/\/ weight description to change to w600 from 600 or require existing\n  \/\/ enumProperty to handle this special case.\n  styles.add(DiagnosticsProperty&lt;FontWeight&gt;(\n    '${prefix}weight',\n    fontWeight,\n    description: weightDescription,\n    defaultValue: null,\n  ));\n  styles.add(EnumProperty&lt;FontStyle&gt;('${prefix}style', fontStyle, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}letterSpacing', letterSpacing, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}wordSpacing', wordSpacing, defaultValue: null));\n  styles.add(EnumProperty&lt;TextBaseline&gt;('${prefix}baseline', textBaseline, defaultValue: null));\n  styles.add(DoubleProperty('${prefix}height', height, unit: 'x', defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Locale&gt;('${prefix}locale', locale, defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Paint&gt;('${prefix}foreground', foreground, defaultValue: null));\n  styles.add(DiagnosticsProperty&lt;Paint&gt;('${prefix}background', background, defaultValue: null));\n  if (decoration != null || decorationColor != null || decorationStyle != null || decorationThickness != null) {\n    final List&lt;String&gt; decorationDescription = &lt;String&gt;[];\n    if (decorationStyle != null)\n      decorationDescription.add(describeEnum(decorationStyle));\n\n    \/\/ Hide decorationColor from the default text view as it is shown in the\n    \/\/ terse decoration summary as well.\n    styles.add(DiagnosticsProperty&lt;Color&gt;('${prefix}decorationColor', decorationColor, defaultValue: null, level: DiagnosticLevel.fine));\n\n    if (decorationColor != null)\n      decorationDescription.add('$decorationColor');\n\n    \/\/ Intentionally collide with the property 'decoration' added below.\n    \/\/ Tools that show hidden properties could choose the first property\n    \/\/ matching the name to disambiguate.\n    styles.add(DiagnosticsProperty&lt;TextDecoration&gt;('${prefix}decoration', decoration, defaultValue: null, level: DiagnosticLevel.hidden));\n    if (decoration != null)\n      decorationDescription.add('$decoration');\n    assert(decorationDescription.isNotEmpty);\n    styles.add(MessageProperty('${prefix}decoration', decorationDescription.join(' ')));\n    styles.add(DoubleProperty('${prefix}decorationThickness', decorationThickness, unit: 'x', defaultValue: null));\n  }\n\n  final bool styleSpecified = styles.any((DiagnosticsNode n) =&gt; !n.isFiltered(DiagnosticLevel.info));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('${prefix}inherit', inherit, level: (!styleSpecified &amp;&amp; inherit) ? DiagnosticLevel.fine : DiagnosticLevel.info));\n  styles.forEach(properties.add);\n\n  if (!styleSpecified)\n    properties.add(FlagProperty('inherit', value: inherit, ifTrue: '$prefix&lt;all styles inherited&gt;', ifFalse: '$prefix&lt;no style specified&gt;'));\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false,
                    "types": []
                },
                {
                    "name": "getParagraphStyle",
                    "type": "dart:ui.ParagraphStyle",
                    "desc": "<p>The style information for paragraphs, encoded for use by <code>dart:ui<\/code>.<\/p>\n<p>The <code>textScaleFactor<\/code> argument must not be null. If omitted, it defaults\nto 1.0. The other arguments may be null. The <code>maxLines<\/code> argument, if\nspecified and non-null, must be greater than zero.<\/p>\n<p>If the font size on this style isn't set, it will default to 14 logical\npixels.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "textAlign",
                            "type": "dart:ui.TextAlign",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textDirection",
                            "type": "dart:ui.TextDirection",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "textScaleFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "ellipsis",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "maxLines",
                            "type": "dart:core.int",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "locale",
                            "type": "dart:ui.Locale",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontFamily",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontSize",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontWeight",
                            "type": "dart:ui.FontWeight",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "fontStyle",
                            "type": "dart:ui.FontStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "height",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "strutStyle",
                            "type": "painting.StrutStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/getParagraphStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ui.ParagraphStyle getParagraphStyle({\n  TextAlign textAlign,\n  TextDirection textDirection,\n  double textScaleFactor = 1.0,\n  String ellipsis,\n  int maxLines,\n  Locale locale,\n  String fontFamily,\n  double fontSize,\n  FontWeight fontWeight,\n  FontStyle fontStyle,\n  double height,\n  StrutStyle strutStyle,\n}) {\n  assert(textScaleFactor != null);\n  assert(maxLines == null || maxLines &gt; 0);\n  return ui.ParagraphStyle(\n    textAlign: textAlign,\n    textDirection: textDirection,\n    \/\/ Here, we stablish the contents of this TextStyle as the paragraph's default font\n    \/\/ unless an override is passed in.\n    fontWeight: fontWeight ?? this.fontWeight,\n    fontStyle: fontStyle ?? this.fontStyle,\n    fontFamily: fontFamily ?? this.fontFamily,\n    fontSize: (fontSize ?? this.fontSize ?? _defaultFontSize) * textScaleFactor,\n    height: height ?? this.height,\n    strutStyle: strutStyle == null ? null : ui.StrutStyle(\n      fontFamily: strutStyle.fontFamily,\n      fontFamilyFallback: strutStyle.fontFamilyFallback,\n      fontSize: strutStyle.fontSize,\n      height: strutStyle.height,\n      leading: strutStyle.leading,\n      fontWeight: strutStyle.fontWeight,\n      fontStyle: strutStyle.fontStyle,\n      forceStrutHeight: strutStyle.forceStrutHeight,\n    ),\n    maxLines: maxLines,\n    ellipsis: ellipsis,\n    locale: locale,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "getTextStyle",
                    "type": "dart:ui.TextStyle",
                    "desc": "<p>The style information for text runs, encoded for use by <code>dart:ui<\/code>.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "textScaleFactor",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/getTextStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ui.TextStyle getTextStyle({ double textScaleFactor = 1.0 }) {\n  return ui.TextStyle(\n    color: color,\n    decoration: decoration,\n    decorationColor: decorationColor,\n    decorationStyle: decorationStyle,\n    decorationThickness: decorationThickness,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle,\n    textBaseline: textBaseline,\n    fontFamily: fontFamily,\n    fontFamilyFallback: fontFamilyFallback,\n    fontSize: fontSize == null ? null : fontSize * textScaleFactor,\n    letterSpacing: letterSpacing,\n    wordSpacing: wordSpacing,\n    height: height,\n    locale: locale,\n    foreground: foreground,\n    background: background ?? (backgroundColor != null\n      ? (Paint()..color = backgroundColor)\n      : null\n    ),\n    shadows: shadows,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "lerp",
                    "type": "painting.TextStyle",
                    "desc": "<p>Interpolate between two text styles.<\/p>\n<p>This will not work well if the styles don't set the same fields.<\/p>\n<p>The <code>t<\/code> argument represents position on the timeline, with 0.0 meaning\nthat the interpolation has not started, returning <code>a<\/code> (or something\nequivalent to <code>a<\/code>), 1.0 meaning that the interpolation has finished,\nreturning <code>b<\/code> (or something equivalent to <code>b<\/code>), and values in between\nmeaning that the interpolation is at the relevant point on the timeline\nbetween <code>a<\/code> and <code>b<\/code>. The interpolation can be extrapolated beyond 0.0 and\n1.0, so negative values and values greater than 1.0 are valid (and can\neasily be generated by curves such as <a href=\"animation\/Curves\/elasticInOut-constant.html\">Curves.elasticInOut<\/a>).<\/p>\n<p>Values for <code>t<\/code> are usually obtained from an <a href=\"animation\/Animation-class.html\">Animation&lt;double&gt;<\/a>, such as\nan <a href=\"animation\/AnimationController-class.html\">AnimationController<\/a>.<\/p>\n<p>If <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is specified on either of <code>a<\/code> or <code>b<\/code>, both will be treated\nas if they have a <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> paint (creating a new <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> if necessary\nbased on the <a href=\"painting\/TextStyle\/color.html\">color<\/a> property).<\/p>\n<p>If <a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified on either of <code>a<\/code> or <code>b<\/code>, both will be treated\nas if they have a <a href=\"painting\/TextStyle\/background.html\">background<\/a> paint (creating a new <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> if necessary\nbased on the <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> property).<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "a",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "b",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "t",
                            "type": "dart:core.double",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/lerp.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static TextStyle lerp(TextStyle a, TextStyle b, double t) {\n  assert(t != null);\n  assert(a == null || b == null || a.inherit == b.inherit);\n  if (a == null &amp;&amp; b == null) {\n    return null;\n  }\n\n  String lerpDebugLabel;\n  assert(() {\n    lerpDebugLabel = 'lerp(${a?.debugLabel ?? _kDefaultDebugLabel} \u23af${t.toStringAsFixed(1)}\u2192 ${b?.debugLabel ?? _kDefaultDebugLabel})';\n    return true;\n  }());\n\n  if (a == null) {\n    return TextStyle(\n      inherit: b.inherit,\n      color: Color.lerp(null, b.color, t),\n      backgroundColor: Color.lerp(null, b.backgroundColor, t),\n      fontFamily: t &lt; 0.5 ? null : b.fontFamily,\n      fontFamilyFallback: t &lt; 0.5 ? null : b.fontFamilyFallback,\n      fontSize: t &lt; 0.5 ? null : b.fontSize,\n      fontWeight: FontWeight.lerp(null, b.fontWeight, t),\n      fontStyle: t &lt; 0.5 ? null : b.fontStyle,\n      letterSpacing: t &lt; 0.5 ? null : b.letterSpacing,\n      wordSpacing: t &lt; 0.5 ? null : b.wordSpacing,\n      textBaseline: t &lt; 0.5 ? null : b.textBaseline,\n      height: t &lt; 0.5 ? null : b.height,\n      locale: t &lt; 0.5 ? null : b.locale,\n      foreground: t &lt; 0.5 ? null : b.foreground,\n      background: t &lt; 0.5 ? null : b.background,\n      decoration: t &lt; 0.5 ? null : b.decoration,\n      shadows: t &lt; 0.5 ? null : b.shadows,\n      decorationColor: Color.lerp(null, b.decorationColor, t),\n      decorationStyle: t &lt; 0.5 ? null : b.decorationStyle,\n      decorationThickness: t &lt; 0.5 ? null : b.decorationThickness,\n      debugLabel: lerpDebugLabel,\n    );\n  }\n\n  if (b == null) {\n    return TextStyle(\n      inherit: a.inherit,\n      color: Color.lerp(a.color, null, t),\n      backgroundColor: Color.lerp(null, a.backgroundColor, t),\n      fontFamily: t &lt; 0.5 ? a.fontFamily : null,\n      fontFamilyFallback: t &lt; 0.5 ? a.fontFamilyFallback : null,\n      fontSize: t &lt; 0.5 ? a.fontSize : null,\n      fontWeight: FontWeight.lerp(a.fontWeight, null, t),\n      fontStyle: t &lt; 0.5 ? a.fontStyle : null,\n      letterSpacing: t &lt; 0.5 ? a.letterSpacing : null,\n      wordSpacing: t &lt; 0.5 ? a.wordSpacing : null,\n      textBaseline: t &lt; 0.5 ? a.textBaseline : null,\n      height: t &lt; 0.5 ? a.height : null,\n      locale: t &lt; 0.5 ? a.locale : null,\n      foreground: t &lt; 0.5 ? a.foreground : null,\n      background: t &lt; 0.5 ? a.background : null,\n      shadows: t &lt; 0.5 ? a.shadows : null,\n      decoration: t &lt; 0.5 ? a.decoration : null,\n      decorationColor: Color.lerp(a.decorationColor, null, t),\n      decorationStyle: t &lt; 0.5 ? a.decorationStyle : null,\n      decorationThickness: t &lt; 0.5 ? a.decorationThickness : null,\n      debugLabel: lerpDebugLabel,\n    );\n  }\n\n  return TextStyle(\n    inherit: b.inherit,\n    color: a.foreground == null &amp;&amp; b.foreground == null ? Color.lerp(a.color, b.color, t) : null,\n    backgroundColor: a.background == null &amp;&amp; b.background == null ? Color.lerp(a.backgroundColor, b.backgroundColor, t) : null,\n    fontFamily: t &lt; 0.5 ? a.fontFamily : b.fontFamily,\n    fontFamilyFallback: t &lt; 0.5 ? a.fontFamilyFallback : b.fontFamilyFallback,\n    fontSize: ui.lerpDouble(a.fontSize ?? b.fontSize, b.fontSize ?? a.fontSize, t),\n    fontWeight: FontWeight.lerp(a.fontWeight, b.fontWeight, t),\n    fontStyle: t &lt; 0.5 ? a.fontStyle : b.fontStyle,\n    letterSpacing: ui.lerpDouble(a.letterSpacing ?? b.letterSpacing, b.letterSpacing ?? a.letterSpacing, t),\n    wordSpacing: ui.lerpDouble(a.wordSpacing ?? b.wordSpacing, b.wordSpacing ?? a.wordSpacing, t),\n    textBaseline: t &lt; 0.5 ? a.textBaseline : b.textBaseline,\n    height: ui.lerpDouble(a.height ?? b.height, b.height ?? a.height, t),\n    locale: t &lt; 0.5 ? a.locale : b.locale,\n    foreground: (a.foreground != null || b.foreground != null)\n      ? t &lt; 0.5\n        ? a.foreground ?? (Paint()..color = a.color)\n        : b.foreground ?? (Paint()..color = b.color)\n      : null,\n    background: (a.background != null || b.background != null)\n      ? t &lt; 0.5\n        ? a.background ?? (Paint()..color = a.backgroundColor)\n        : b.background ?? (Paint()..color = b.backgroundColor)\n      : null,\n    shadows: t &lt; 0.5 ? a.shadows : b.shadows,\n    decoration: t &lt; 0.5 ? a.decoration : b.decoration,\n    decorationColor: Color.lerp(a.decorationColor, b.decorationColor, t),\n    decorationStyle: t &lt; 0.5 ? a.decorationStyle : b.decorationStyle,\n    decorationThickness: ui.lerpDouble(a.decorationThickness ?? b.decorationThickness, b.decorationThickness ?? a.decorationThickness, t),\n    debugLabel: lerpDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "merge",
                    "type": "painting.TextStyle",
                    "desc": "<p>Returns a new text style that is a combination of this style and the given\n<code>other<\/code> style.<\/p>\n<p>If the given <code>other<\/code> text style has its <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> set to true,\nits null properties are replaced with the non-null properties of this text\nstyle. The <code>other<\/code> style <em>inherits<\/em> the properties of this style. Another\nway to think of it is that the \"missing\" properties of the <code>other<\/code> style\nare <em>filled<\/em> by the properties of this style.<\/p>\n<p>If the given <code>other<\/code> text style has its <a href=\"painting\/TextStyle\/inherit.html\">TextStyle.inherit<\/a> set to false,\nreturns the given <code>other<\/code> style unchanged. The <code>other<\/code> style does not\ninherit properties of this style.<\/p>\n<p>If the given text style is null, returns this text style.<\/p>\n<p>One of <a href=\"painting\/TextStyle\/color.html\">color<\/a> or <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> must be null, and if this or <code>other<\/code> has\n<a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> specified it will be given preference over any color parameter.<\/p>\n<p>Similarly, One of <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> or <a href=\"painting\/TextStyle\/background.html\">background<\/a> must be null, and if\nthis or <code>other<\/code> has <a href=\"painting\/TextStyle\/background.html\">background<\/a> specified it will be given preference\nover any backgroundColor parameter.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [
                        {
                            "name": "other",
                            "type": "painting.TextStyle",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/merge.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TextStyle merge(TextStyle other) {\n  if (other == null)\n    return this;\n  if (!other.inherit)\n    return other;\n\n  String mergedDebugLabel;\n  assert(() {\n    if (other.debugLabel != null || debugLabel != null)\n      mergedDebugLabel = '(${debugLabel ?? _kDefaultDebugLabel}).merge(${other.debugLabel ?? _kDefaultDebugLabel})';\n    return true;\n  }());\n\n  return copyWith(\n    color: other.color,\n    backgroundColor: other.backgroundColor,\n    fontFamily: other.fontFamily,\n    fontFamilyFallback: other.fontFamilyFallback,\n    fontSize: other.fontSize,\n    fontWeight: other.fontWeight,\n    fontStyle: other.fontStyle,\n    letterSpacing: other.letterSpacing,\n    wordSpacing: other.wordSpacing,\n    textBaseline: other.textBaseline,\n    height: other.height,\n    locale: other.locale,\n    foreground: other.foreground,\n    background: other.background,\n    shadows: other.shadows,\n    decoration: other.decoration,\n    decorationColor: other.decorationColor,\n    decorationStyle: other.decorationStyle,\n    decorationThickness: other.decorationThickness,\n    debugLabel: mergedDebugLabel,\n  );\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "toStringShort",
                    "type": "dart:core.String",
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "static": false,
                    "memberOf": "painting.TextStyle",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/TextStyle\/toStringShort.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [
                {
                    "name": "background",
                    "type": "dart:ui.Paint",
                    "types": [],
                    "desc": "<p>The paint drawn as a background for the text.<\/p>\n<p>The value should ideally be cached and reused each time if multiple text\nstyles are created with the same paint settings. Otherwise, each time it\nwill appear like the style changed, which will result in unnecessary\nupdates all the way through the framework.<\/p>\n<p>If <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> is specified, this value must be null. The\n<a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> property is shorthand for\n<code>background: Paint()..color = backgroundColor<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> and\n<a href=\"painting\/TextStyle\/background.html\">background<\/a> specification are resolved in <a href=\"painting\/TextStyle\/background.html\">background<\/a>'s favor - i.e. if\n<a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified in one place, it will dominate <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a>\nin another.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/background.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Paint background\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "backgroundColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color to use as the background for the text.<\/p>\n<p>If <a href=\"painting\/TextStyle\/background.html\">background<\/a> is specified, this value must be null. The\n<a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> property is shorthand for\n<code>background: Paint()..color = backgroundColor<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> and <a href=\"painting\/TextStyle\/background.html\">background<\/a>\nspecification are resolved in <a href=\"painting\/TextStyle\/background.html\">background<\/a>'s favor - i.e. if <a href=\"painting\/TextStyle\/background.html\">background<\/a> is\nspecified in one place, it will dominate <a href=\"painting\/TextStyle\/color.html\">color<\/a> in another.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/backgroundColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color backgroundColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "color",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color to use when painting the text.<\/p>\n<p>If <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is specified, this value must be null. The <a href=\"painting\/TextStyle\/color.html\">color<\/a> property\nis shorthand for <code>Paint()..color = color<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/color.html\">color<\/a> and <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>\nspecification are resolved in <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>'s favor - i.e. if <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is\nspecified in one place, it will dominate <a href=\"painting\/TextStyle\/color.html\">color<\/a> in another.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/color.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color color\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "debugLabel",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>A human-readable description of this text style.<\/p>\n<p>This property is maintained only in debug builds.<\/p>\n<p>When merging (<a href=\"painting\/TextStyle\/merge.html\">merge<\/a>), copying (<a href=\"painting\/TextStyle\/copyWith.html\">copyWith<\/a>), modifying using <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, or\ninterpolating (<a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>), the label of the resulting style is marked with\nthe debug labels of the original styles. This helps figuring out where a\nparticular text style came from.<\/p>\n<p>This property is not considered when comparing text styles using <code>==<\/code> or\n<a href=\"painting\/TextStyle\/compareTo.html\">compareTo<\/a>, and it does not affect <a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/debugLabel.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String debugLabel\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "decoration",
                    "type": "dart:ui.TextDecoration",
                    "types": [],
                    "desc": "<p>The decorations to paint near the text (e.g., an underline).<\/p>\n<p>Multiple decorations can be applied using <a href=\"dart-ui\/TextDecoration\/TextDecoration.combine.html\">TextDecoration.combine<\/a>.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/decoration.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDecoration decoration\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "decorationColor",
                    "type": "dart:ui.Color",
                    "types": [],
                    "desc": "<p>The color in which to paint the text decorations.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/decorationColor.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Color decorationColor\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "decorationStyle",
                    "type": "dart:ui.TextDecorationStyle",
                    "types": [],
                    "desc": "<p>The style in which to paint the text decorations (e.g., dashed).<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/decorationStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDecorationStyle decorationStyle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "decorationThickness",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The thickness of the decoration stroke as a muliplier of the thickness\ndefined by the font.<\/p>\n<p>The font provides a base stroke width for <a href=\"painting\/TextStyle\/decoration.html\">decoration<\/a>s which scales off\nof the <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a>. This property may be used to achieve a thinner or\nthicker decoration stroke, without changing the <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a>. For example,\na <a href=\"painting\/TextStyle\/decorationThickness.html\">decorationThickness<\/a> of 2.0 will draw a decoration twice as thick as\nthe font defined decoration thickness.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nTo achieve a bolded strike-through, we can apply a thicker stroke for the\ndecoration.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'This has a very BOLD strike through!',\n  style: TextStyle(\n    decoration: TextDecoration.lineThrough,\n    decorationThickness: 2.85,\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nWe can apply a very thin and subtle wavy underline (perhaps, when words\nare misspelled) by using a <a href=\"painting\/TextStyle\/decorationThickness.html\">decorationThickness<\/a> &lt; 1.0.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'oopsIforgottousespaces!',\n  style: TextStyle(\n    decoration: TextDecoration.underline,\n    decorationStyle: TextDecorationStyle.wavy,\n    decorationColor: Colors.red,\n    decorationThickness: 0.5,\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>The default <a href=\"painting\/TextStyle\/decorationThickness.html\">decorationThickness<\/a> is 1.0, which will use the font's base\nstroke thickness\/width.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/decorationThickness.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double decorationThickness\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamily",
                    "type": "dart:core.String",
                    "types": [],
                    "desc": "<p>The name of the font to use when painting the text (e.g., Roboto). If the\nfont is defined in a package, this will be prefixed with\n'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto'). The\nprefixing is done by the constructor when the <code>package<\/code> argument is\nprovided.<\/p>\n<p>The value provided in <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that glyphs are looked for in, followed in order by the font families\nin <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. When <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> is null or not provided, the\nfirst value in <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> acts as the preferred\/first font\nfamily. When neither is provided, then the default platform font will\nbe used.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/fontFamily.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String fontFamily\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontFamilyFallback",
                    "type": "dart:core.List<dart:core.String>",
                    "types": [
                        "dart:core.List",
                        "dart:core.String"
                    ],
                    "desc": "<p>The ordered list of font families to fall back on when a glyph cannot be\nfound in a higher priority font family.<\/p>\n<p>The value provided in <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> will act as the preferred\/first font\nfamily that glyphs are looked for in, followed in order by the font families\nin <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>. If all font families are exhausted and no match\nwas found, the default platform font family will be used instead.<\/p>\n<p>When <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> is null or not provided, the first value in <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a>\nacts as the preferred\/first font family. When neither is provided, then\nthe default platform font will be used. Providing and empty list or null\nfor this property is the same as omitting it.<\/p>\n<p>For example, if a glyph is not found in <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a>, then each font family\nin <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> will be searched in order until it is found. If it\nis not found, then a box will be drawn in its place.<\/p>\n<p>If the font is defined in a package, each font family in the list will be\nprefixed with 'packages\/package_name\/' (e.g. 'packages\/cool_fonts\/Roboto').\nThe package name should be provided by the <code>package<\/code> argument in the\nconstructor.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/fontFamilyFallback.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; get fontFamilyFallback =&gt; _package != null &amp;&amp; _fontFamilyFallback != null ? _fontFamilyFallback.map((String str) =&gt; 'packages\/$_package\/$str').toList() : _fontFamilyFallback;<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontSize",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The size of glyphs (in logical pixels) to use when painting the text.<\/p>\n<p>During painting, the <a href=\"painting\/TextStyle\/fontSize.html\">fontSize<\/a> is multiplied by the current\n<code>textScaleFactor<\/code> to let users make it easier to read text by increasing\nits size.<\/p>\n<p><a href=\"painting\/TextStyle\/getParagraphStyle.html\">getParagraphStyle<\/a> will default to 14 logical pixels if the font size\nisn't specified here.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/fontSize.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double fontSize\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontStyle",
                    "type": "dart:ui.FontStyle",
                    "types": [],
                    "desc": "<p>The typeface variant to use when drawing the letters (e.g., italics).<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/fontStyle.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontStyle fontStyle\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "fontWeight",
                    "type": "dart:ui.FontWeight",
                    "types": [],
                    "desc": "<p>The typeface thickness to use when painting the text (e.g., bold).<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/fontWeight.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final FontWeight fontWeight\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "foreground",
                    "type": "dart:ui.Paint",
                    "types": [],
                    "desc": "<p>The paint drawn as a foreground for the text.<\/p>\n<p>The value should ideally be cached and reused each time if multiple text\nstyles are created with the same paint settings. Otherwise, each time it\nwill appear like the style changed, which will result in unnecessary\nupdates all the way through the framework.<\/p>\n<p>If <a href=\"painting\/TextStyle\/color.html\">color<\/a> is specified, this value must be null. The <a href=\"painting\/TextStyle\/color.html\">color<\/a> property\nis shorthand for <code>Paint()..color = color<\/code>.<\/p>\n<p>In <a href=\"painting\/TextStyle\/merge.html\">merge<\/a>, <a href=\"painting\/TextStyle\/apply.html\">apply<\/a>, and <a href=\"painting\/TextStyle\/lerp.html\">lerp<\/a>, conflicts between <a href=\"painting\/TextStyle\/color.html\">color<\/a> and <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>\nspecification are resolved in <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a>'s favor - i.e. if <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> is\nspecified in one place, it will dominate <a href=\"painting\/TextStyle\/color.html\">color<\/a> in another.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/foreground.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Paint foreground\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "hashCode",
                    "type": "dart:core.int",
                    "types": [],
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"painting\/TextStyle\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"painting\/TextStyle\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/hashCode.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return hashValues(\n    inherit,\n    color,\n    backgroundColor,\n    fontFamily,\n    fontFamilyFallback,\n    fontSize,\n    fontWeight,\n    fontStyle,\n    letterSpacing,\n    wordSpacing,\n    textBaseline,\n    height,\n    locale,\n    foreground,\n    background,\n    decoration,\n    decorationColor,\n    decorationStyle,\n    shadows,\n  );\n}<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "height",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The height of this text span, as a multiple of the font size.<\/p>\n<p>If applied to the root <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, this value sets the line height, which\nis the minimum distance between subsequent text baselines, as multiple of\nthe font size.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/height.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double height\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "inherit",
                    "type": "dart:core.bool",
                    "types": [],
                    "desc": "<p>Whether null values are replaced with their value in an ancestor text\nstyle (e.g., in a <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> tree).<\/p>\n<p>If this is false, properties that don't have explicit values will revert\nto the defaults: white in color, a font size of 10 pixels, in a sans-serif\nfont face.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/inherit.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool inherit\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "letterSpacing",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The amount of space (in logical pixels) to add between each letter.\nA negative value can be used to bring the letters closer.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/letterSpacing.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double letterSpacing\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "locale",
                    "type": "dart:ui.Locale",
                    "types": [],
                    "desc": "<p>The locale used to select region-specific glyphs.<\/p>\n<p>This property is rarely set. Typically the locale used to select\nregion-specific glyphs is defined by the text widget's <a href=\"widgets\/BuildContext-class.html\">BuildContext<\/a>\nusing <code>Localizations.localeOf(context)<\/code>. For example <a href=\"widgets\/RichText-class.html\">RichText<\/a> defines\nits locale this way. However, a rich text widget's <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>s could\nspecify text styles with different explicit locales in order to select\ndifferent region-specific glyphs for each text span.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/locale.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Locale locale\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "shadows",
                    "type": "dart:core.List<dart:ui.Shadow>",
                    "types": [
                        "dart:core.List",
                        "dart:ui.Shadow"
                    ],
                    "desc": "<p>A list of <a href=\"dart-ui\/Shadow-class.html\">Shadow<\/a>s that will be painted underneath the text.<\/p>\n<p>Multiple shadows are supported to replicate lighting from multiple light\nsources.<\/p>\n<p>Shadows must be in the same order for <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> to be considered as\nequivalent as order produces differing transparency.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/shadows.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;ui.Shadow&gt; shadows\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "textBaseline",
                    "type": "dart:ui.TextBaseline",
                    "types": [],
                    "desc": "<p>The common baseline that should be aligned between this text span and its\nparent text span, or, for the root text spans, with the line box.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/textBaseline.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextBaseline textBaseline\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                },
                {
                    "name": "wordSpacing",
                    "type": "dart:core.double",
                    "types": [],
                    "desc": "<p>The amount of space (in logical pixels) to add at each sequence of\nwhite-space (i.e. between each word). A negative value can be used to\nbring the words closer.<\/p>\n        ",
                    "memberOf": "painting.TextStyle",
                    "isConstant": false,
                    "href": "painting\/TextStyle\/wordSpacing.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double wordSpacing\n\n<\/code><\/pre>\n        ",
                    "isDeprecated": false
                }
            ],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [
                "widgets.TextStyleTween"
            ],
            "realImplementors": [
                "widgets.TextStyleTween"
            ],
            "cn": [],
            "href": "painting\/TextStyle-class.html",
            "desc": "<p>An immutable style in which paint text.<\/p>\n<h3 id=\"bold\">Bold<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nHere, a single line of text in a <a href=\"widgets\/Text-class.html\">Text<\/a> widget is given a specific style\noverride. The style is mixed with the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> by the\n<a href=\"widgets\/Text-class.html\">Text<\/a> widget.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'No, we need bold strokes. We need this plan.',\n  style: TextStyle(fontWeight: FontWeight.bold),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"italics\">Italics<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nAs in the previous example, the <a href=\"widgets\/Text-class.html\">Text<\/a> widget is given a specific style\noverride which is implicitly mixed with the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'Welcome to the present, we\\'re running a real nation.',\n  style: TextStyle(fontStyle: FontStyle.italic),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"opacity-and-color\">Opacity and Color<\/h3>\n<p>Each line here is progressively more opaque. The base color is\n<a href=\"material\/Colors\/black-constant.html\">material.Colors.black<\/a>, and <a href=\"dart-ui\/Color\/withOpacity.html\">Color.withOpacity<\/a> is used to create a\nderivative color with the desired opacity. The root <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a> for this\n<a href=\"widgets\/RichText-class.html\">RichText<\/a> widget is explicitly given the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, since\n<a href=\"widgets\/RichText-class.html\">RichText<\/a> does not do that automatically. The inner <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> objects are\nimplicitly mixed with the parent <a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>'s <a href=\"painting\/TextSpan\/style.html\">TextSpan.style<\/a>.<\/p>\n<p>If <a href=\"painting\/TextStyle\/color.html\">color<\/a> is specified, <a href=\"painting\/TextStyle\/foreground.html\">foreground<\/a> must be null and vice versa. <a href=\"painting\/TextStyle\/color.html\">color<\/a> is\ntreated as a shorthand for <code>Paint()..color = color<\/code>.<\/p>\n<p>If <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> is specified, <a href=\"painting\/TextStyle\/background.html\">background<\/a> must be null and vice versa.\nThe <a href=\"painting\/TextStyle\/backgroundColor.html\">backgroundColor<\/a> is treated as a shorthand for\n<code>background: Paint()..color = backgroundColor<\/code>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">RichText(\n  text: TextSpan(\n    style: DefaultTextStyle.of(context).style,\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'You don\\'t have the votes.\\n',\n        style: TextStyle(color: Colors.black.withOpacity(0.6)),\n      ),\n      TextSpan(\n        text: 'You don\\'t have the votes!\\n',\n        style: TextStyle(color: Colors.black.withOpacity(0.8)),\n      ),\n      TextSpan(\n        text: 'You\\'re gonna need congressional approval and you don\\'t have the votes!\\n',\n        style: TextStyle(color: Colors.black.withOpacity(1.0)),\n      ),\n    ],\n  ),\n)\n<\/code><\/pre>\n<h3 id=\"size\">Size<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn this example, the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a> is explicitly manipulated to\nobtain a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> that doubles the default font size.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'These are wise words, enterprising men quote \\'em.',\n  style: DefaultTextStyle.of(context).style.apply(fontSizeFactor: 2.0),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"line-height\">Line height<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe <a href=\"painting\/TextStyle\/height.html\">height<\/a> property can be used to change the line height. Here, the line\nheight is set to 5 times the font size, so that the text is very spaced out.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">Text(\n  'Don\\'t act surprised, you guys, cuz I wrote \\'em!',\n  style: TextStyle(height: 5.0),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"wavy-red-underline-with-black-text\">Wavy red underline with black text<\/h3>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nStyles can be combined. In this example, the misspelt word is drawn in black\ntext and underlined with a wavy red line to indicate a spelling error. (The\nremainder is styled according to the Flutter default text styles, not the\nambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, since no explicit style is given and <a href=\"widgets\/RichText-class.html\">RichText<\/a>\ndoes not automatically use the ambient <a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>.)\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">RichText(\n  text: TextSpan(\n    text: 'Don\\'t tax the South ',\n    children: &lt;TextSpan&gt;[\n      TextSpan(\n        text: 'cuz',\n        style: TextStyle(\n          color: Colors.black,\n          decoration: TextDecoration.underline,\n          decorationColor: Colors.red,\n          decorationStyle: TextDecorationStyle.wavy,\n        ),\n      ),\n      TextSpan(\n        text: ' we got it made in the shade',\n      ),\n    ],\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"custom-fonts\">Custom Fonts<\/h3>\n<p>Custom fonts can be declared in the <code>pubspec.yaml<\/code> file as shown below:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: fonts\/Raleway-Regular.ttf\n        - asset: fonts\/Raleway-Medium.ttf\n          weight: 500\n        - asset: assets\/fonts\/Raleway-SemiBold.ttf\n          weight: 600\n     - family: Schyler\n       fonts:\n         - asset: fonts\/Schyler-Regular.ttf\n         - asset: fonts\/Schyler-Italic.ttf\n           style: italic\n<\/code><\/pre>\n<p>The <code>family<\/code> property determines the name of the font, which you can use in\nthe <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a> argument. The <code>asset<\/code> property is a path to the font file,\nrelative to the <code>pubspec.yaml<\/code> file. The <code>weight<\/code> property specifies the\nweight of the glyph outlines in the file as an integer multiple of 100\nbetween 100 and 900. This corresponds to the <a href=\"dart-ui\/FontWeight-class.html\">FontWeight<\/a> class and can be\nused in the <a href=\"painting\/TextStyle\/fontWeight.html\">fontWeight<\/a> argument. The <code>style<\/code> property specifies whether the\noutlines in the file are <code>italic<\/code> or <code>normal<\/code>. These values correspond to\nthe <a href=\"dart-ui\/FontStyle-class.html\">FontStyle<\/a> class and can be used in the <a href=\"painting\/TextStyle\/fontStyle.html\">fontStyle<\/a> argument.<\/p>\n<p>To select a custom font, create <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> using the <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a>\nargument as shown in the example below:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const TextStyle(fontFamily: 'Raleway')<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>To use a font family defined in a package, the <code>package<\/code> argument must be\nprovided. For instance, suppose the font declaration above is in the\n<code>pubspec.yaml<\/code> of a package named <code>my_package<\/code> which the app depends on.\nThen creating the TextStyle is done as follows:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const TextStyle(fontFamily: 'Raleway', package: 'my_package')\n<\/code><\/pre>\n<p>If the package internally uses the font it defines, it should still specify\nthe <code>package<\/code> argument when creating the text style as in the example above.<\/p>\n<p>A package can also provide font files without declaring a font in its\n<code>pubspec.yaml<\/code>. These files should then be in the <code>lib\/<\/code> folder of the\npackage. The font files will not automatically be bundled in the app, instead\nthe app can use these selectively when declaring a font. Suppose a package\nnamed <code>my_package<\/code> has:<\/p>\n<pre class=\"language-dart\"><code>lib\/fonts\/Raleway-Medium.ttf\n<\/code><\/pre>\n<p>Then the app can declare a font like in the example below:<\/p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">flutter:\n  fonts:\n    - family: Raleway\n      fonts:\n        - asset: assets\/fonts\/Raleway-Regular.ttf\n        - asset: packages\/my_package\/fonts\/Raleway-Medium.ttf\n          weight: 500\n<\/code><\/pre>\n<p>The <code>lib\/<\/code> is implied, so it should not be included in the asset path.<\/p>\n<p>In this case, since the app locally defines the font, the TextStyle is\ncreated without the <code>package<\/code> argument:<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const TextStyle(fontFamily: 'Raleway')<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<h3 id=\"custom-font-fallback\">Custom Font Fallback<\/h3>\n<p>A custom <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> list can be provided. The list should be an\nordered list of strings of font family names in the order they will be attempted.<\/p>\n<p>The fonts in <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> will be used only if the requested glyph is\nnot present in the <a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a>.<\/p>\n<p>The fallback order is:<\/p>\n<ul>\n<li><a href=\"painting\/TextStyle\/fontFamily.html\">fontFamily<\/a><\/li>\n<li>\n<a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> in order of first to last.<\/li>\n<\/ul>\n<p>The glyph used will always be the first matching version in fallback order.<\/p>\n<p>The <a href=\"painting\/TextStyle\/fontFamilyFallback.html\">fontFamilyFallback<\/a> property is commonly used to specify different font\nfamilies for multilingual text spans as well as separate fonts for glyphs such\nas emojis.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nIn the following example, any glyphs not present in the font <code>Raleway<\/code> will be attempted\nto be resolved with <code>Noto Sans CJK SC<\/code>, and then with <code>Noto Color Emoji<\/code>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">const TextStyle(\n  fontFamily: 'Raleway',\n  fontFamilyFallback: &lt;String&gt;[\n    'Noto Sans CJK SC',\n    'Noto Color Emoji',\n  ],\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>If all custom fallback font families are exhausted and no match was found\nor no custom fallback was provided, the platform font fallback will be used.<\/p>\n<h3 id=\"inconsistent-platform-fonts\">Inconsistent platform fonts<\/h3>\n<p>Since Flutter's font discovery for default fonts depends on the fonts present\non the device, it is not safe to assume all default fonts will be available or\nconsistent across devices.<\/p>\n<p>A known example of this is that Samsung devices ship with a CJK font that has\nsmaller line spacing than the Android default. This results in Samsung devices\ndisplaying more tightly spaced text than on other Android devices when no\ncustom font is specified.<\/p>\n<p>To avoid this, a custom font should be specified if absolute font consistency\nis required for your application.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/Text-class.html\">Text<\/a>, the widget for showing text in a single style.<\/li>\n<li>\n<a href=\"widgets\/DefaultTextStyle-class.html\">DefaultTextStyle<\/a>, the widget that specifies the default text styles for\n<a href=\"widgets\/Text-class.html\">Text<\/a> widgets, configured using a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a>.<\/li>\n<li>\n<a href=\"widgets\/RichText-class.html\">RichText<\/a>, the widget for showing a paragraph of mix-style text.<\/li>\n<li>\n<a href=\"painting\/TextSpan-class.html\">TextSpan<\/a>, the class that wraps a <a href=\"painting\/TextStyle-class.html\">TextStyle<\/a> for the purposes of\npassing it to a <a href=\"widgets\/RichText-class.html\">RichText<\/a>.<\/li>\n<li>\n<a href=\"https:\/\/api.flutter.dev\/flutter\/dart-ui\/TextStyle-class.html\">TextStyle<\/a>, the class in the <a href=\"dart-ui\/dart-ui-library.html\">dart:ui<\/a> library.<\/li>\n<\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TextStyle"
        },
        {
            "name": "painting.TransformProperty",
            "extends": [
                "vector_math_64.Matrix4",
                "foundation.DiagnosticsProperty",
                "foundation.DiagnosticsNode",
                "dart:core.Object"
            ],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "TransformProperty",
                    "type": "",
                    "desc": "<p>Create a diagnostics property for <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a> objects.<\/p>\n<p>The <code>showName<\/code> and <code>level<\/code> arguments must not be null.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TransformProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "name",
                            "type": "dart:core.String",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "value",
                            "type": "vector_math_64.Matrix4",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "showName",
                            "type": "dart:core.bool",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "defaultValue",
                            "type": "dart:core.Object",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        },
                        {
                            "name": "level",
                            "type": "foundation.DiagnosticLevel",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": true,
                    "href": "painting\/TransformProperty\/TransformProperty.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">TransformProperty(\n  String name,\n  Matrix4 value, {\n  bool showName = true,\n  Object defaultValue = kNoDefaultValue,\n  DiagnosticLevel level = DiagnosticLevel.info,\n}) : assert(showName != null),\n     assert(level != null),\n     super(\n       name,\n       value,\n       showName: showName,\n       defaultValue: defaultValue,\n       level: level,\n     );<\/code><\/pre>\n    ",
                    "isDeprecated": false
                },
                {
                    "name": "valueToString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of the property value.<\/p>\n<p>Subclasses should override this method instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> to\ncustomize how property values are converted to strings.<\/p>\n<p>Overriding this method ensures that behavior controlling how property\nvalues are decorated to generate a nice <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a> are consistent\nacross all implementations. Debugging tools may also choose to use\n<a href=\"painting\/TransformProperty\/valueToString.html\">valueToString<\/a> directly instead of <a href=\"foundation\/DiagnosticsProperty\/toDescription.html\">toDescription<\/a>.<\/p>\n<p><code>parentConfiguration<\/code> specifies how the parent is rendered as text art.\nFor example, if the parent places all properties on one line, the value\nof the property should be displayed without line breaks if possible.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.TransformProperty",
                    "sig": "",
                    "params": [
                        {
                            "name": "parentConfiguration",
                            "type": "foundation.TextTreeConfiguration",
                            "desc": "",
                            "isOptional": true,
                            "href": "",
                            "example": "",
                            "isDeprecated": false
                        }
                    ],
                    "isConstructor": false,
                    "href": "painting\/TransformProperty\/valueToString.html",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString valueToString({ TextTreeConfiguration parentConfiguration }) {\n  if (parentConfiguration != null &amp;&amp; !parentConfiguration.lineBreakProperties) {\n    \/\/ Format the value on a single line to be compatible with the parent's\n    \/\/ style.\n    final List&lt;Vector4&gt; rows = &lt;Vector4&gt;[\n      value.getRow(0),\n      value.getRow(1),\n      value.getRow(2),\n      value.getRow(3),\n    ];\n    return '[${rows.join(\"; \")}]';\n  }\n  return debugDescribeTransform(value).join('\\n');\n}<\/code><\/pre>\n    ",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": false,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/TransformProperty-class.html",
            "desc": "<p>Property which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a> that represent transforms.<\/p>\n    ",
            "example": "",
            "isDeprecated": false,
            "dtype": "class",
            "shortname": "TransformProperty"
        },
        {
            "type": "",
            "name": "painting.VerticalDirection",
            "extends": [],
            "memberOf": "painting",
            "events": [],
            "methods": [
                {
                    "name": "toString",
                    "type": "dart:core.String",
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "static": false,
                    "memberOf": "painting.VerticalDirection",
                    "sig": "",
                    "params": [],
                    "isConstructor": false,
                    "href": "painting\/VerticalDirection\/toString.html",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "props": [],
            "isMixin": false,
            "isEnum": true,
            "isTypedef": false,
            "isConstant": false,
            "isAbstract": false,
            "implementors": [],
            "realImplementors": [],
            "cn": [],
            "href": "painting\/VerticalDirection-class.html",
            "desc": "<p>A direction in which boxes flow vertically.<\/p>\n<p>This is used by the flex algorithm (e.g. <a href=\"widgets\/Column-class.html\">Column<\/a>) to decide in which\ndirection to draw boxes.<\/p>\n<p>This is also used to disambiguate <code>start<\/code> and <code>end<\/code> values (e.g.\n<a href=\"rendering\/MainAxisAlignment-class.html\">MainAxisAlignment.start<\/a> or <a href=\"rendering\/CrossAxisAlignment-class.html\">CrossAxisAlignment.end<\/a>).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>, which controls the same thing but horizontally.<\/li><\/ul>",
            "example": "",
            "isDeprecated": false,
            "dtype": "enum",
            "shortname": "VerticalDirection"
        },
        {
            "name": "applyBoxFit",
            "type": "painting.FittedSizes",
            "desc": "<p>Apply a <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> value.<\/p>\n<p>The arguments to this method, in addition to the <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> value to apply,\nare two sizes, ostensibly the sizes of an input box and an output box.\nSpecifically, the <code>inputSize<\/code> argument gives the size of the complete source\nthat is being fitted, and the <code>outputSize<\/code> gives the size of the rectangle\ninto which the source is to be drawn.<\/p>\n<p>This function then returns two sizes, combined into a single <a href=\"painting\/FittedSizes-class.html\">FittedSizes<\/a>\nobject.<\/p>\n<p>The <a href=\"painting\/FittedSizes\/source.html\">FittedSizes.source<\/a> size is the subpart of the <code>inputSize<\/code> that is to\nbe shown. If the entire input source is shown, then this will equal the\n<code>inputSize<\/code>, but if the input source is to be cropped down, this may be\nsmaller.<\/p>\n<p>The <a href=\"painting\/FittedSizes\/destination.html\">FittedSizes.destination<\/a> size is the subpart of the <code>outputSize<\/code> in\nwhich to paint the (possibly cropped) source. If the\n<a href=\"painting\/FittedSizes\/destination.html\">FittedSizes.destination<\/a> size is smaller than the <code>outputSize<\/code> then the\nsource is being letterboxed (or pillarboxed).<\/p>\n<p>This method does not express an opinion regarding the alignment of the\nsource and destination sizes within the input and output rectangles.\nTypically they are centered (this is what <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a> does, for\ninstance, and is how <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> is defined). The <a href=\"painting\/Alignment-class.html\">Alignment<\/a> class provides a\nconvenience function, <a href=\"painting\/Alignment\/inscribe.html\">Alignment.inscribe<\/a>, for resolving the sizes to\nrects, as shown in the example below.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis function paints a <a href=\"dart-ui\/Image-class.html\">dart:ui.Image<\/a> <code>image<\/code> onto the <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> <code>outputRect<\/code> on a\n<a href=\"dart-ui\/Canvas-class.html\">Canvas<\/a> <code>canvas<\/code>, using a <a href=\"dart-ui\/Paint-class.html\">Paint<\/a> <code>paint<\/code>, applying the <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> algorithm\n<code>fit<\/code>:\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">void paintImage(ui.Image image, Rect outputRect, Canvas canvas, Paint paint, BoxFit fit) {\n  final Size imageSize = Size(image.width.toDouble(), image.height.toDouble());\n  final FittedSizes sizes = applyBoxFit(fit, imageSize, outputRect.size);\n  final Rect inputSubrect = Alignment.center.inscribe(sizes.source, Offset.zero &amp; imageSize);\n  final Rect outputSubrect = Alignment.center.inscribe(sizes.destination, outputRect);\n  canvas.drawImageRect(image, inputSubrect, outputSubrect, paint);\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/FittedBox-class.html\">FittedBox<\/a>, a widget that applies this algorithm to another widget.<\/li>\n<li>\n<a href=\"painting\/paintImage.html\">paintImage<\/a>, a function that applies this algorithm to images for painting.<\/li>\n<li>\n<a href=\"widgets\/DecoratedBox-class.html\">DecoratedBox<\/a>, <a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, and <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>, which together\nprovide access to <a href=\"painting\/paintImage.html\">paintImage<\/a> at the widgets layer.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "fit",
                    "type": "painting.BoxFit",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "inputSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "outputSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fit",
                    "type": "painting.BoxFit",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "inputSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "outputSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/applyBoxFit.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FittedSizes applyBoxFit(BoxFit fit, Size inputSize, Size outputSize) {\n  if (inputSize.height &lt;= 0.0 || inputSize.width &lt;= 0.0 || outputSize.height &lt;= 0.0 || outputSize.width &lt;= 0.0)\n    return const FittedSizes(Size.zero, Size.zero);\n\n  Size sourceSize, destinationSize;\n  switch (fit) {\n    case BoxFit.fill:\n      sourceSize = inputSize;\n      destinationSize = outputSize;\n      break;\n    case BoxFit.contain:\n      sourceSize = inputSize;\n      if (outputSize.width \/ outputSize.height &gt; sourceSize.width \/ sourceSize.height)\n        destinationSize = Size(sourceSize.width * outputSize.height \/ sourceSize.height, outputSize.height);\n      else\n        destinationSize = Size(outputSize.width, sourceSize.height * outputSize.width \/ sourceSize.width);\n      break;\n    case BoxFit.cover:\n      if (outputSize.width \/ outputSize.height &gt; inputSize.width \/ inputSize.height) {\n        sourceSize = Size(inputSize.width, inputSize.width * outputSize.height \/ outputSize.width);\n      } else {\n        sourceSize = Size(inputSize.height * outputSize.width \/ outputSize.height, inputSize.height);\n      }\n      destinationSize = outputSize;\n      break;\n    case BoxFit.fitWidth:\n      sourceSize = Size(inputSize.width, inputSize.width * outputSize.height \/ outputSize.width);\n      destinationSize = Size(outputSize.width, sourceSize.height * outputSize.width \/ sourceSize.width);\n      break;\n    case BoxFit.fitHeight:\n      sourceSize = Size(inputSize.height * outputSize.width \/ outputSize.height, inputSize.height);\n      destinationSize = Size(sourceSize.width * outputSize.height \/ sourceSize.height, outputSize.height);\n      break;\n    case BoxFit.none:\n      sourceSize = Size(math.min(inputSize.width, outputSize.width),\n                            math.min(inputSize.height, outputSize.height));\n      destinationSize = sourceSize;\n      break;\n    case BoxFit.scaleDown:\n      sourceSize = inputSize;\n      destinationSize = inputSize;\n      final double aspectRatio = inputSize.width \/ inputSize.height;\n      if (destinationSize.height &gt; outputSize.height)\n        destinationSize = Size(outputSize.height * aspectRatio, outputSize.height);\n      if (destinationSize.width &gt; outputSize.width)\n        destinationSize = Size(outputSize.width, outputSize.width \/ aspectRatio);\n      break;\n  }\n  return FittedSizes(sourceSize, destinationSize);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "axisDirectionIsReversed",
            "type": "dart:core.bool",
            "desc": "<p>Returns whether travelling along the given axis direction visits coordinates\nalong that axis in numerically decreasing order.<\/p>\n<p>Specifically, returns true for <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a> and <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a>\nand false for <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a> and <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "axisDirection",
                    "type": "painting.AxisDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "axisDirection",
                    "type": "painting.AxisDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/axisDirectionIsReversed.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool axisDirectionIsReversed(AxisDirection axisDirection) {\n  assert(axisDirection != null);\n  switch (axisDirection) {\n    case AxisDirection.up:\n    case AxisDirection.left:\n      return true;\n    case AxisDirection.down:\n    case AxisDirection.right:\n      return false;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "axisDirectionToAxis",
            "type": "painting.Axis",
            "desc": "<p>Returns the <a href=\"painting\/Axis-class.html\">Axis<\/a> that contains the given <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a>.<\/p>\n<p>Specifically, returns <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a> for <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a> and\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a> and returns <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a> for <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a>\nand <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "axisDirection",
                    "type": "painting.AxisDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "axisDirection",
                    "type": "painting.AxisDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/axisDirectionToAxis.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Axis axisDirectionToAxis(AxisDirection axisDirection) {\n  assert(axisDirection != null);\n  switch (axisDirection) {\n    case AxisDirection.up:\n    case AxisDirection.down:\n      return Axis.vertical;\n    case AxisDirection.left:\n    case AxisDirection.right:\n      return Axis.horizontal;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugAssertAllPaintingVarsUnset",
            "type": "dart:core.bool",
            "desc": "<p>Returns true if none of the painting library debug variables have been changed.<\/p>\n<p>This function is used by the test framework to ensure that debug variables\nhaven't been inadvertently changed.<\/p>\n<p>See <a href=\"https:\/\/docs.flutter.io\/flutter\/rendering\/painting-library.html\">docs.flutter.io\/flutter\/rendering\/painting-library.html<\/a> for\na complete list.<\/p>\n<p>The <code>debugDisableShadowsOverride<\/code> argument can be provided to override\nthe expected value for <a href=\"painting\/debugDisableShadows.html\">debugDisableShadows<\/a>. (This exists because the\ntest framework itself overrides this value in some cases.)<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugDisableShadowsOverride",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "reason",
                    "type": "dart:core.String",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "debugDisableShadowsOverride",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/debugAssertAllPaintingVarsUnset.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool debugAssertAllPaintingVarsUnset(String reason, { bool debugDisableShadowsOverride = false }) {\n  assert(() {\n    if (debugDisableShadows != debugDisableShadowsOverride) {\n      throw FlutterError(reason);\n    }\n    return true;\n  }());\n  return true;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "debugDescribeTransform",
            "type": "dart:core.List<dart:core.String>",
            "desc": "<p>Returns a list of strings representing the given transform in a format\nuseful for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a>.<\/p>\n<p>If the argument is null, returns a list with the single string \"null\".<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "transform",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "transform",
                    "type": "vector_math_64.Matrix4",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/debugDescribeTransform.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; debugDescribeTransform(Matrix4 transform) {\n  if (transform == null)\n    return const &lt;String&gt;['null'];\n  final List&lt;String&gt; matrix = transform.toString().split('\\n').toList();\n  matrix.removeLast();\n  return matrix;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:core.List",
                "dart:core.String"
            ]
        },
        {
            "name": "decodeImageFromList",
            "type": "dart:async.Future<dart:ui.Image>",
            "desc": "<p>Creates an image from a list of bytes.<\/p>\n<p>This function attempts to interpret the given bytes an image. If successful,\nthe returned <a href=\"dart-async\/Future-class.html\">Future<\/a> resolves to the decoded image. Otherwise, the <a href=\"dart-async\/Future-class.html\">Future<\/a>\nresolves to null.<\/p>\n<p>If the image is animated, this returns the first frame. Consider\n<a href=\"dart-ui\/instantiateImageCodec.html\">instantiateImageCodec<\/a> if support for animated images is necessary.<\/p>\n<p>This function differs from <a href=\"dart-ui\/decodeImageFromList.html\">ui.decodeImageFromList<\/a> in that it defers to\n<a href=\"painting\/PaintingBinding\/instantiateImageCodec.html\">PaintingBinding.instantiateImageCodec<\/a>, and therefore can be mocked in\ntests.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "bytes",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bytes",
                    "type": "dart:typed_data.Uint8List",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/decodeImageFromList.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Future&lt;ui.Image&gt; decodeImageFromList(Uint8List bytes) async {\n  final ui.Codec codec = await PaintingBinding.instance.instantiateImageCodec(bytes);\n  final ui.FrameInfo frameInfo = await codec.getNextFrame();\n  return frameInfo.image;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": [
                "dart:async.Future",
                "dart:ui.Image"
            ]
        },
        {
            "name": "flipAxis",
            "type": "painting.Axis",
            "desc": "<p>Returns the opposite of the given <a href=\"painting\/Axis-class.html\">Axis<\/a>.<\/p>\n<p>Specifically, returns <a href=\"painting\/Axis-class.html\">Axis.horizontal<\/a> for <a href=\"painting\/Axis-class.html\">Axis.vertical<\/a>, and\nvice versa.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/flipAxisDirection.html\">flipAxisDirection<\/a>, which does the same thing for <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a> values.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "direction",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "direction",
                    "type": "painting.Axis",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/flipAxis.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Axis flipAxis(Axis direction) {\n  assert(direction != null);\n  switch (direction) {\n    case Axis.horizontal:\n      return Axis.vertical;\n    case Axis.vertical:\n      return Axis.horizontal;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "flipAxisDirection",
            "type": "painting.AxisDirection",
            "desc": "<p>Returns the opposite of the given <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a>.<\/p>\n<p>Specifically, returns <a href=\"painting\/AxisDirection-class.html\">AxisDirection.up<\/a> for <a href=\"painting\/AxisDirection-class.html\">AxisDirection.down<\/a> (and\nvice versa), as well as <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a> for <a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a> (and\nvice versa).<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"painting\/flipAxis.html\">flipAxis<\/a>, which does the same thing for <a href=\"painting\/Axis-class.html\">Axis<\/a> values.<\/li><\/ul>",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "axisDirection",
                    "type": "painting.AxisDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "axisDirection",
                    "type": "painting.AxisDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/flipAxisDirection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AxisDirection flipAxisDirection(AxisDirection axisDirection) {\n  assert(axisDirection != null);\n  switch (axisDirection) {\n    case AxisDirection.up:\n      return AxisDirection.down;\n    case AxisDirection.right:\n      return AxisDirection.left;\n    case AxisDirection.down:\n      return AxisDirection.up;\n    case AxisDirection.left:\n      return AxisDirection.right;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "paintBorder",
            "type": "",
            "desc": "<p>Paints a border around the given rectangle on the canvas.<\/p>\n<p>The four sides can be independently specified. They are painted in the order\ntop, right, bottom, left. This is only notable if the widths of the borders\nand the size of the given rectangle are such that the border sides will\noverlap each other. No effort is made to optimize the rendering of uniform\nborders (where all the borders have the same configuration); to render a\nuniform border, consider using <a href=\"dart-ui\/Canvas\/drawRect.html\">Canvas.drawRect<\/a> directly.<\/p>\n<p>The arguments must not be null.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/paintImage.html\">paintImage<\/a>, which paints an image in a rectangle on a canvas.<\/li>\n<li>\n<a href=\"painting\/Border-class.html\">Border<\/a>, which uses this function to paint its border when the border is\nnot uniform.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which describes its border using the <a href=\"painting\/Border-class.html\">Border<\/a> class.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "top",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "right",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "bottom",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "left",
                    "type": "painting.BorderSide",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/paintBorder.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paintBorder(\n  Canvas canvas,\n  Rect rect, {\n  BorderSide top = BorderSide.none,\n  BorderSide right = BorderSide.none,\n  BorderSide bottom = BorderSide.none,\n  BorderSide left = BorderSide.none,\n}) {\n  assert(canvas != null);\n  assert(rect != null);\n  assert(top != null);\n  assert(right != null);\n  assert(bottom != null);\n  assert(left != null);\n\n  \/\/ We draw the borders as filled shapes, unless the borders are hairline\n  \/\/ borders, in which case we use PaintingStyle.stroke, with the stroke width\n  \/\/ specified here.\n  final Paint paint = Paint()\n    ..strokeWidth = 0.0;\n\n  final Path path = Path();\n\n  switch (top.style) {\n    case BorderStyle.solid:\n      paint.color = top.color;\n      path.reset();\n      path.moveTo(rect.left, rect.top);\n      path.lineTo(rect.right, rect.top);\n      if (top.width == 0.0) {\n        paint.style = PaintingStyle.stroke;\n      } else {\n        paint.style = PaintingStyle.fill;\n        path.lineTo(rect.right - right.width, rect.top + top.width);\n        path.lineTo(rect.left + left.width, rect.top + top.width);\n      }\n      canvas.drawPath(path, paint);\n      break;\n    case BorderStyle.none:\n      break;\n  }\n\n  switch (right.style) {\n    case BorderStyle.solid:\n      paint.color = right.color;\n      path.reset();\n      path.moveTo(rect.right, rect.top);\n      path.lineTo(rect.right, rect.bottom);\n      if (right.width == 0.0) {\n        paint.style = PaintingStyle.stroke;\n      } else {\n        paint.style = PaintingStyle.fill;\n        path.lineTo(rect.right - right.width, rect.bottom - bottom.width);\n        path.lineTo(rect.right - right.width, rect.top + top.width);\n      }\n      canvas.drawPath(path, paint);\n      break;\n    case BorderStyle.none:\n      break;\n  }\n\n  switch (bottom.style) {\n    case BorderStyle.solid:\n      paint.color = bottom.color;\n      path.reset();\n      path.moveTo(rect.right, rect.bottom);\n      path.lineTo(rect.left, rect.bottom);\n      if (bottom.width == 0.0) {\n        paint.style = PaintingStyle.stroke;\n      } else {\n        paint.style = PaintingStyle.fill;\n        path.lineTo(rect.left + left.width, rect.bottom - bottom.width);\n        path.lineTo(rect.right - right.width, rect.bottom - bottom.width);\n      }\n      canvas.drawPath(path, paint);\n      break;\n    case BorderStyle.none:\n      break;\n  }\n\n  switch (left.style) {\n    case BorderStyle.solid:\n      paint.color = left.color;\n      path.reset();\n      path.moveTo(rect.left, rect.bottom);\n      path.lineTo(rect.left, rect.top);\n      if (left.width == 0.0) {\n        paint.style = PaintingStyle.stroke;\n      } else {\n        paint.style = PaintingStyle.fill;\n        path.lineTo(rect.left + left.width, rect.top + top.width);\n        path.lineTo(rect.left + left.width, rect.bottom - bottom.width);\n      }\n      canvas.drawPath(path, paint);\n      break;\n    case BorderStyle.none:\n      break;\n  }\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "paintImage",
            "type": "",
            "desc": "<p>Paints an image into the given rectangle on the canvas.<\/p>\n<p>The arguments have the following meanings:<\/p>\n<ul>\n<li>\n<p><code>canvas<\/code>: The canvas onto which the image will be painted.<\/p>\n<\/li>\n<li>\n<p><code>rect<\/code>: The region of the canvas into which the image will be painted.\nThe image might not fill the entire rectangle (e.g., depending on the\n<code>fit<\/code>). If <code>rect<\/code> is empty, nothing is painted.<\/p>\n<\/li>\n<li>\n<p><code>image<\/code>: The image to paint onto the canvas.<\/p>\n<\/li>\n<li>\n<p><code>scale<\/code>: The number of image pixels for each logical pixel.<\/p>\n<\/li>\n<li>\n<p><code>colorFilter<\/code>: If non-null, the color filter to apply when painting the\nimage.<\/p>\n<\/li>\n<li>\n<p><code>fit<\/code>: How the image should be inscribed into <code>rect<\/code>. If null, the\ndefault behavior depends on <code>centerSlice<\/code>. If <code>centerSlice<\/code> is also null,\nthe default behavior is <a href=\"painting\/BoxFit-class.html\">BoxFit.scaleDown<\/a>. If <code>centerSlice<\/code> is\nnon-null, the default behavior is <a href=\"painting\/BoxFit-class.html\">BoxFit.fill<\/a>. See <a href=\"painting\/BoxFit-class.html\">BoxFit<\/a> for\ndetails.<\/p>\n<\/li>\n<li>\n<p><code>alignment<\/code>: How the destination rectangle defined by applying <code>fit<\/code> is\naligned within <code>rect<\/code>. For example, if <code>fit<\/code> is <a href=\"painting\/BoxFit-class.html\">BoxFit.contain<\/a> and\n<code>alignment<\/code> is <a href=\"painting\/Alignment\/bottomRight-constant.html\">Alignment.bottomRight<\/a>, the image will be as large\nas possible within <code>rect<\/code> and placed with its bottom right corner at the\nbottom right corner of <code>rect<\/code>. Defaults to <a href=\"painting\/Alignment\/center-constant.html\">Alignment.center<\/a>.<\/p>\n<\/li>\n<li>\n<p><code>centerSlice<\/code>: The image is drawn in nine portions described by splitting\nthe image by drawing two horizontal lines and two vertical lines, where\n<code>centerSlice<\/code> describes the rectangle formed by the four points where\nthese four lines intersect each other. (This forms a 3-by-3 grid\nof regions, the center region being described by <code>centerSlice<\/code>.)\nThe four regions in the corners are drawn, without scaling, in the four\ncorners of the destination rectangle defined by applying <code>fit<\/code>. The\nremaining five regions are drawn by stretching them to fit such that they\nexactly cover the destination rectangle while maintaining their relative\npositions.<\/p>\n<\/li>\n<li>\n<p><code>repeat<\/code>: If the image does not fill <code>rect<\/code>, whether and how the image\nshould be repeated to fill <code>rect<\/code>. By default, the image is not repeated.\nSee <a href=\"painting\/ImageRepeat-class.html\">ImageRepeat<\/a> for details.<\/p>\n<\/li>\n<li>\n<p><code>flipHorizontally<\/code>: Whether to flip the image horizontally. This is\noccasionally used with images in right-to-left environments, for images\nthat were designed for left-to-right locales (or vice versa). Be careful,\nwhen using this, to not flip images with integral shadows, text, or other\neffects that will look incorrect when flipped.<\/p>\n<\/li>\n<li>\n<p><code>invertColors<\/code>: Inverting the colors of an image applies a new color\nfilter to the paint. If there is another specified color filter, the\ninvert will be applied after it. This is primarily used for implementing\nsmart invert on iOS.<\/p>\n<\/li>\n<li>\n<p><code>filterQuality<\/code>: Use this to change the quality when scaling an image.\n Use the <a href=\"dart-ui\/FilterQuality-class.html\">FilterQuality.low<\/a> quality setting to scale the image, which corresponds to\n bilinear interpolation, rather than the default <a href=\"dart-ui\/FilterQuality-class.html\">FilterQuality.none<\/a> which corresponds\n to nearest-neighbor.<\/p>\n<\/li>\n<\/ul>\n<p>The <code>canvas<\/code>, <code>rect<\/code>, <code>image<\/code>, <code>scale<\/code>, <code>alignment<\/code>, <code>repeat<\/code>, <code>flipHorizontally<\/code> and <code>filterQuality<\/code>\narguments must not be null.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"painting\/paintBorder.html\">paintBorder<\/a>, which paints a border around a rectangle on a canvas.<\/li>\n<li>\n<a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>, which holds a configuration for calling this function.<\/li>\n<li>\n<a href=\"painting\/BoxDecoration-class.html\">BoxDecoration<\/a>, which uses this function to paint a <a href=\"painting\/DecorationImage-class.html\">DecorationImage<\/a>.<\/li>\n<\/ul>",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "dart:ui.Image",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colorFilter",
                    "type": "dart:ui.ColorFilter",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fit",
                    "type": "painting.BoxFit",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "painting.Alignment",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "centerSlice",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "repeat",
                    "type": "painting.ImageRepeat",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "flipHorizontally",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "invertColors",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "filterQuality",
                    "type": "dart:ui.FilterQuality",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "rect",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "image",
                    "type": "dart:ui.Image",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "scale",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "colorFilter",
                    "type": "dart:ui.ColorFilter",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "fit",
                    "type": "painting.BoxFit",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "alignment",
                    "type": "painting.Alignment",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "centerSlice",
                    "type": "dart:ui.Rect",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "repeat",
                    "type": "painting.ImageRepeat",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "flipHorizontally",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "invertColors",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "filterQuality",
                    "type": "dart:ui.FilterQuality",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/paintImage.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paintImage({\n  @required Canvas canvas,\n  @required Rect rect,\n  @required ui.Image image,\n  double scale = 1.0,\n  ColorFilter colorFilter,\n  BoxFit fit,\n  Alignment alignment = Alignment.center,\n  Rect centerSlice,\n  ImageRepeat repeat = ImageRepeat.noRepeat,\n  bool flipHorizontally = false,\n  bool invertColors = false,\n  FilterQuality filterQuality = FilterQuality.low,\n}) {\n  assert(canvas != null);\n  assert(image != null);\n  assert(alignment != null);\n  assert(repeat != null);\n  assert(flipHorizontally != null);\n  if (rect.isEmpty)\n    return;\n  Size outputSize = rect.size;\n  Size inputSize = Size(image.width.toDouble(), image.height.toDouble());\n  Offset sliceBorder;\n  if (centerSlice != null) {\n    sliceBorder = Offset(\n      centerSlice.left + inputSize.width - centerSlice.right,\n      centerSlice.top + inputSize.height - centerSlice.bottom,\n    );\n    outputSize -= sliceBorder;\n    inputSize -= sliceBorder;\n  }\n  fit ??= centerSlice == null ? BoxFit.scaleDown : BoxFit.fill;\n  assert(centerSlice == null || (fit != BoxFit.none &amp;&amp; fit != BoxFit.cover));\n  final FittedSizes fittedSizes = applyBoxFit(fit, inputSize \/ scale, outputSize);\n  final Size sourceSize = fittedSizes.source * scale;\n  Size destinationSize = fittedSizes.destination;\n  if (centerSlice != null) {\n    outputSize += sliceBorder;\n    destinationSize += sliceBorder;\n    \/\/ We don't have the ability to draw a subset of the image at the same time\n    \/\/ as we apply a nine-patch stretch.\n    assert(sourceSize == inputSize, 'centerSlice was used with a BoxFit that does not guarantee that the image is fully visible.');\n  }\n  if (repeat != ImageRepeat.noRepeat &amp;&amp; destinationSize == outputSize) {\n    \/\/ There's no need to repeat the image because we're exactly filling the\n    \/\/ output rect with the image.\n    repeat = ImageRepeat.noRepeat;\n  }\n  final Paint paint = Paint()..isAntiAlias = false;\n  if (colorFilter != null)\n    paint.colorFilter = colorFilter;\n  if (sourceSize != destinationSize) {\n    paint.filterQuality = filterQuality;\n  }\n  paint.invertColors = invertColors;\n  final double halfWidthDelta = (outputSize.width - destinationSize.width) \/ 2.0;\n  final double halfHeightDelta = (outputSize.height - destinationSize.height) \/ 2.0;\n  final double dx = halfWidthDelta + (flipHorizontally ? -alignment.x : alignment.x) * halfWidthDelta;\n  final double dy = halfHeightDelta + alignment.y * halfHeightDelta;\n  final Offset destinationPosition = rect.topLeft.translate(dx, dy);\n  final Rect destinationRect = destinationPosition &amp; destinationSize;\n  final bool needSave = repeat != ImageRepeat.noRepeat || flipHorizontally;\n  if (needSave)\n    canvas.save();\n  if (repeat != ImageRepeat.noRepeat)\n    canvas.clipRect(rect);\n  if (flipHorizontally) {\n    final double dx = -(rect.left + rect.width \/ 2.0);\n    canvas.translate(-dx, 0.0);\n    canvas.scale(-1.0, 1.0);\n    canvas.translate(dx, 0.0);\n  }\n  if (centerSlice == null) {\n    final Rect sourceRect = alignment.inscribe(\n      sourceSize, Offset.zero &amp; inputSize,\n    );\n    if (repeat == ImageRepeat.noRepeat) {\n      canvas.drawImageRect(image, sourceRect, destinationRect, paint);\n    } else {\n      for (Rect tileRect in _generateImageTileRects(rect, destinationRect, repeat))\n        canvas.drawImageRect(image, sourceRect, tileRect, paint);\n    }\n  } else {\n    if (repeat == ImageRepeat.noRepeat) {\n      canvas.drawImageNine(image, centerSlice, destinationRect, paint);\n    } else {\n      for (Rect tileRect in _generateImageTileRects(rect, destinationRect, repeat))\n        canvas.drawImageNine(image, centerSlice, tileRect, paint);\n    }\n  }\n  if (needSave)\n    canvas.restore();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "paintZigZag",
            "type": "",
            "desc": "<p>Draw a line between two points, which cuts diagonally back and forth across\nthe line that connects the two points.<\/p>\n<p>The line will cross the line <code>zigs - 1<\/code> times.<\/p>\n<p>If <code>zigs<\/code> is 1, then this will draw two sides of a triangle from <code>start<\/code> to\n<code>end<\/code>, with the third point being <code>width<\/code> away from the line, as measured\nperpendicular to that line.<\/p>\n<p>If <code>width<\/code> is positive, the first <code>zig<\/code> will be to the left of the <code>start<\/code>\npoint when facing the <code>end<\/code> point. To reverse the zigging polarity, provide\na negative <code>width<\/code>.<\/p>\n<p>The line is drawn using the provided <code>paint<\/code> on the provided <code>canvas<\/code>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "zigs",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "canvas",
                    "type": "dart:ui.Canvas",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "paint",
                    "type": "dart:ui.Paint",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "start",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "end",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "zigs",
                    "type": "dart:core.int",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "width",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/paintZigZag.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void paintZigZag(Canvas canvas, Paint paint, Offset start, Offset end, int zigs, double width) {\n  assert(zigs.isFinite);\n  assert(zigs &gt; 0);\n  canvas.save();\n  canvas.translate(start.dx, start.dy);\n  end = end - start;\n  canvas.rotate(math.atan2(end.dy, end.dx));\n  final double length = end.distance;\n  final double spacing = length \/ (zigs * 2.0);\n  final Path path = Path()\n    ..moveTo(0.0, 0.0);\n  for (int index = 0; index &lt; zigs; index += 1) {\n    final double x = (index * 2.0 + 1.0) * spacing;\n    final double y = width * ((index % 2.0) * 2.0 - 1.0);\n    path.lineTo(x, y);\n  }\n  path.lineTo(length, 0.0);\n  canvas.drawPath(path, paint);\n  canvas.restore();\n}<\/code><\/pre>\n    ",
            "isDeprecated": false,
            "types": []
        },
        {
            "name": "positionDependentBox",
            "type": "dart:ui.Offset",
            "desc": "<p>Position a child box within a container box, either above or below a target\npoint.<\/p>\n<p>The container's size is described by <code>size<\/code>.<\/p>\n<p>The target point is specified by <code>target<\/code>, as an offset from the top left of\nthe container.<\/p>\n<p>The child box's size is given by <code>childSize<\/code>.<\/p>\n<p>The return value is the suggested distance from the top left of the\ncontainer box to the top left of the child box.<\/p>\n<p>The suggested position will be above the target point if <code>preferBelow<\/code> is\nfalse, and below the target point if it is true, unless it wouldn't fit on\nthe preferred side but would fit on the other side.<\/p>\n<p>The suggested position will place the nearest side of the child to the\ntarget point <code>verticalOffset<\/code> from the target point (even if it cannot fit\ngiven that constraint).<\/p>\n<p>The suggested position will be at least <code>margin<\/code> away from the edge of the\ncontainer. If possible, the child will be positioned so that its center is\naligned with the target point. If the child cannot fit horizontally within\nthe container given the margin, then the child will be centered in the\ncontainer.<\/p>\n<p>Used by <a href=\"material\/Tooltip-class.html\">Tooltip<\/a> to position a tooltip relative to its parent.<\/p>\n<p>The arguments must not be null.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "target",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "preferBelow",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "verticalOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "margin",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "size",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "childSize",
                    "type": "dart:ui.Size",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "target",
                    "type": "dart:ui.Offset",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "preferBelow",
                    "type": "dart:core.bool",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "verticalOffset",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "margin",
                    "type": "dart:core.double",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/positionDependentBox.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Offset positionDependentBox({\n  @required Size size,\n  @required Size childSize,\n  @required Offset target,\n  @required bool preferBelow,\n  double verticalOffset = 0.0,\n  double margin = 10.0,\n}) {\n  assert(size != null);\n  assert(childSize != null);\n  assert(target != null);\n  assert(verticalOffset != null);\n  assert(preferBelow != null);\n  assert(margin != null);\n  \/\/ VERTICAL DIRECTION\n  final bool fitsBelow = target.dy + verticalOffset + childSize.height &lt;= size.height - margin;\n  final bool fitsAbove = target.dy - verticalOffset - childSize.height &gt;= margin;\n  final bool tooltipBelow = preferBelow ? fitsBelow || !fitsAbove : !(fitsAbove || !fitsBelow);\n  double y;\n  if (tooltipBelow)\n    y = math.min(target.dy + verticalOffset, size.height - margin);\n  else\n    y = math.max(target.dy - verticalOffset - childSize.height, margin);\n  \/\/ HORIZONTAL DIRECTION\n  double x;\n  if (size.width - margin * 2.0 &lt; childSize.width) {\n    x = (size.width - childSize.width) \/ 2.0;\n  } else {\n    final double normalizedTargetX = target.dx.clamp(margin, size.width - margin);\n    final double edge = margin + childSize.width \/ 2.0;\n    if (normalizedTargetX &lt; edge) {\n      x = margin;\n    } else if (normalizedTargetX &gt; size.width - edge) {\n      x = size.width - margin - childSize.width;\n    } else {\n      x = normalizedTargetX - childSize.width \/ 2.0;\n    }\n  }\n  return Offset(x, y);\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        },
        {
            "name": "textDirectionToAxisDirection",
            "type": "painting.AxisDirection",
            "desc": "<p>Returns the <a href=\"painting\/AxisDirection-class.html\">AxisDirection<\/a> in which reading occurs in the given <a href=\"dart-ui\/TextDirection-class.html\">TextDirection<\/a>.<\/p>\n<p>Specifically, returns <a href=\"painting\/AxisDirection-class.html\">AxisDirection.left<\/a> for <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.rtl<\/a> and\n<a href=\"painting\/AxisDirection-class.html\">AxisDirection.right<\/a> for <a href=\"dart-ui\/TextDirection-class.html\">TextDirection.ltr<\/a>.<\/p>\n    ",
            "static": false,
            "memberOf": "painting",
            "sig": "",
            "params": [
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                },
                {
                    "name": "textDirection",
                    "type": "dart:ui.TextDirection",
                    "desc": "",
                    "isOptional": true,
                    "href": "",
                    "example": "",
                    "isDeprecated": false
                }
            ],
            "isConstructor": false,
            "href": "painting\/textDirectionToAxisDirection.html",
            "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AxisDirection textDirectionToAxisDirection(TextDirection textDirection) {\n  assert(textDirection != null);\n  switch (textDirection) {\n    case TextDirection.rtl:\n      return AxisDirection.left;\n    case TextDirection.ltr:\n      return AxisDirection.right;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
            "isDeprecated": false
        }
    ],
    "isFakeNamespace": false,
    "desc": "",
    "example": "",
    "isDeprecated": false
}