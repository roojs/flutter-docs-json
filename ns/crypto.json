{
    "class": [
        {
            "desc": "<p>A message digest as computed by a <code>Hash<\/code> or <code>HMAC<\/code> function.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-crypto_crypto\/Digest-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "crypto",
            "name": "crypto.Digest",
            "shortname": "Digest",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "crypto.Hmac",
                "crypto.MD5",
                "crypto.Sha1",
                "crypto.Sha256"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Digest(this.bytes);<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Digest\/Digest.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Digest",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "crypto.Digest",
                    "params": [
                        {
                            "name": "bytes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>The message digest as a string of hexadecimal digits.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; hex.encode(bytes);<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Digest\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Digest",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The message digest as an array of bytes.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; bytes\n\n<\/code><\/pre>\n        ",
                    "href": "package-crypto_crypto\/Digest\/bytes.html",
                    "name": "bytes",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "crypto.Digest",
                    "params": []
                },
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"package-crypto_crypto\/Digest\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"package-crypto_crypto\/Digest\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"package-crypto_crypto\/Digest\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"package-crypto_crypto\/Digest\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"package-crypto_crypto\/Digest\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"package-crypto_crypto\/Digest\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; const ListEquality().hash(bytes);<\/code><\/pre>\n        ",
                    "href": "package-crypto_crypto\/Digest\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "crypto.Digest",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interface for cryptographic hash functions.<\/p>\n<p>Every hash is a converter that takes a list of ints and returns a single\ndigest. When used in chunked mode, it will only ever add one digest to the\ninner <a href=\"dart-core\/Sink-class.html\">Sink<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-crypto_crypto\/Hash-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "crypto",
            "name": "crypto.Hash",
            "shortname": "Hash",
            "extends": [
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "crypto.MD5",
                "crypto.Sha1",
                "crypto.Sha256"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Hash();<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Hash\/Hash.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Hash",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "crypto.Hash",
                    "params": []
                },
                {
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDigest convert(List&lt;int&gt; data) {\n  var innerSink = new DigestSink();\n  var outerSink = startChunkedConversion(innerSink);\n  outerSink.add(data);\n  outerSink.close();\n  return innerSink.value;\n}<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Hash\/convert.html",
                    "isDeprecated": false,
                    "type": "crypto.Digest",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Hash",
                    "params": [
                        {
                            "name": "data",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink);<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Hash\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Hash",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<crypto.Digest>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The internal block size of the hash in bytes.<\/p>\n<p>This is exposed for use by the <code>Hmac<\/code> class, which needs to know the block\nsize for the <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> it uses.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get blockSize;<\/code><\/pre>\n        ",
                    "href": "package-crypto_crypto\/Hash\/blockSize.html",
                    "name": "blockSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "crypto.Hash",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"https:\/\/tools.ietf.org\/html\/rfc2104\">keyed-hash method authentication codes<\/a>.<\/p>\n<p>HMAC allows messages to be cryptographically authenticated using any\niterated cryptographic hash function.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-crypto_crypto\/Hmac-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "crypto",
            "name": "crypto.Hmac",
            "shortname": "Hmac",
            "extends": [
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create an <a href=\"package-crypto_crypto\/Hmac-class.html\">Hmac<\/a> object from a <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> and a binary key.<\/p>\n<p>The key should be a secret shared between the sender and receiver of the\nmessage.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Hmac(Hash hash, List&lt;int&gt; key)\n    : _hash = hash,\n      _key = new Uint8List(hash.blockSize) {\n  \/\/ Hash the key if it's longer than the block size of the hash.\n  if (key.length &gt; _hash.blockSize) key = _hash.convert(key).bytes;\n\n  \/\/ If [key] is shorter than the block size, the rest of [_key] will be\n  \/\/ 0-padded.\n  _key.setRange(0, key.length, key);\n}<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Hmac\/Hmac.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Hmac",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "crypto.Hmac",
                    "params": [
                        {
                            "name": "hash",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "crypto.Hash"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>input<\/code> and returns the result of the conversion.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDigest convert(List&lt;int&gt; data) {\n  var innerSink = new DigestSink();\n  var outerSink = startChunkedConversion(innerSink);\n  outerSink.add(data);\n  outerSink.close();\n  return innerSink.value;\n}<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Hmac\/convert.html",
                    "isDeprecated": false,
                    "type": "crypto.Digest",
                    "name": "convert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Hmac",
                    "params": [
                        {
                            "name": "data",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink) =&gt;\n    new _HmacSink(sink, _hash, _key);<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Hmac\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Hmac",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<crypto.Digest>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An implementation of the <a href=\"https:\/\/tools.ietf.org\/html\/rfc1321\">MD5<\/a> hash function.<\/p>\n<p><strong>Warning<\/strong>: MD5 has known collisions and should only be used when required\nfor backwards compatibility.<\/p>\n<p>Note that it's almost always easier to use <a href=\"package-crypto_crypto\/md5.html\">md5<\/a> rather than creating a new\ninstance.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-crypto_crypto\/MD5-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "crypto",
            "name": "crypto.MD5",
            "shortname": "MD5",
            "extends": [
                "crypto.Hash",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink) =&gt;\n    new ByteConversionSink.from(new _MD5Sink(sink));<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/MD5\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.MD5",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<crypto.Digest>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The internal block size of the hash in bytes.<\/p>\n<p>This is exposed for use by the <code>Hmac<\/code> class, which needs to know the block\nsize for the <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> it uses.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int blockSize = 16 * bytesPerWord\n\n<\/code><\/pre>\n        ",
                    "href": "package-crypto_crypto\/MD5\/blockSize.html",
                    "name": "blockSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "crypto.MD5",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of the <a href=\"http:\/\/tools.ietf.org\/html\/rfc3174\">SHA-1<\/a> hash function.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-crypto_crypto\/Sha1-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "crypto",
            "name": "crypto.Sha1",
            "shortname": "Sha1",
            "extends": [
                "crypto.Hash",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink) =&gt;\n    new ByteConversionSink.from(new _Sha1Sink(sink));<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Sha1\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Sha1",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<crypto.Digest>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The internal block size of the hash in bytes.<\/p>\n<p>This is exposed for use by the <code>Hmac<\/code> class, which needs to know the block\nsize for the <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> it uses.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int blockSize = 16 * bytesPerWord\n\n<\/code><\/pre>\n        ",
                    "href": "package-crypto_crypto\/Sha1\/blockSize.html",
                    "name": "blockSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "crypto.Sha1",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of the <a href=\"http:\/\/tools.ietf.org\/html\/rfc6234\">SHA-256<\/a> hash function.<\/p>\n<p>Note that it's almost always easier to use <a href=\"package-crypto_crypto\/sha256.html\">sha256<\/a> rather than creating a\nnew instance.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "package-crypto_crypto\/Sha256-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "crypto",
            "name": "crypto.Sha256",
            "shortname": "Sha256",
            "extends": [
                "crypto.Hash",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:convert.Converter",
                "crypto.Digest",
                "dart:core.int",
                "dart:core.List",
                "dart:async.StreamTransformerBase",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Sha256 newInstance() =&gt; new Sha256._();<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Sha256\/newInstance.html",
                    "isDeprecated": false,
                    "type": "crypto.Sha256",
                    "name": "newInstance",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Sha256",
                    "params": []
                },
                {
                    "desc": "<p>Starts a chunked conversion.<\/p>\n<p>The returned sink serves as input for the long-running conversion. The\ngiven <code>sink<\/code> serves as output.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nByteConversionSink startChunkedConversion(Sink&lt;Digest&gt; sink) =&gt;\n    new ByteConversionSink.from(new _Sha256Sink(sink));<\/code><\/pre>\n    ",
                    "href": "package-crypto_crypto\/Sha256\/startChunkedConversion.html",
                    "isDeprecated": false,
                    "type": "dart:convert.ByteConversionSink",
                    "name": "startChunkedConversion",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "crypto.Sha256",
                    "params": [
                        {
                            "name": "sink",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Sink<crypto.Digest>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The internal block size of the hash in bytes.<\/p>\n<p>This is exposed for use by the <code>Hmac<\/code> class, which needs to know the block\nsize for the <a href=\"package-crypto_crypto\/Hash-class.html\">Hash<\/a> it uses.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int blockSize = 16 * bytesPerWord\n\n<\/code><\/pre>\n        ",
                    "href": "package-crypto_crypto\/Sha256\/blockSize.html",
                    "name": "blockSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "crypto.Sha256",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}