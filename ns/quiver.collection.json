{
    "class": [
        {
            "desc": "<p>Private class used to track element insertions in the <a href=\"quiver.collection\/TreeSet-class.html\">TreeSet<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/AvlNode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.AvlNode",
            "shortname": "AvlNode",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AvlNode({V object}) : super(object: object);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlNode\/AvlNode.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AvlNode",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.AvlNode",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt;\n    \"(b:$balance o: $object l:${left != null} r:${right != null})\";<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlNode\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlNode",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get balance =&gt; _balanceFactor;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlNode\/balance.html",
                    "name": "balance",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlNode",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AvlNode&lt;V&gt; get left =&gt; _left;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlNode\/left.html",
                    "name": "left",
                    "isDeprecated": false,
                    "type": "quiver.collection.AvlNode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlNode",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AvlNode&lt;V&gt; get parent =&gt; _parent;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlNode\/parent.html",
                    "name": "parent",
                    "isDeprecated": false,
                    "type": "quiver.collection.AvlNode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlNode",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">AvlNode&lt;V&gt; get right =&gt; _right;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlNode\/right.html",
                    "name": "right",
                    "isDeprecated": false,
                    "type": "quiver.collection.AvlNode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlNode",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>AVL implementation of a self-balancing binary tree. Optimized for lookup\noperations.<\/p>\n<p>Notes: Adapted from \"Introduction to Algorithms\", second edition,\n       by Thomas H. Cormen, Charles E. Leiserson,\n          Ronald L. Rivest, Clifford Stein.\n       chapter 13.2<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/AvlTreeSet-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.AvlTreeSet",
            "shortname": "AvlTreeSet",
            "extends": [
                "quiver.collection.TreeSet",
                "dart:collection.IterableBase",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AvlTreeSet({Comparator&lt;V&gt; comparator}) : super._(comparator);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/AvlTreeSet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AvlTreeSet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "comparator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Comparator"
                        }
                    ]
                },
                {
                    "desc": "<p>Add the element to the tree.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(V element) {\n  if (_root == null) {\n    AvlNode&lt;V&gt; node = new AvlNode&lt;V&gt;(object: element);\n    _root = node;\n    ++_length;\n    ++_modCount;\n    return true;\n  }\n\n  AvlNode&lt;V&gt; x = _root;\n  while (true) {\n    int compare = comparator(element, x.object);\n    if (compare == 0) {\n      return false;\n    } else if (compare &lt; 0) {\n      if (x._left == null) {\n        AvlNode&lt;V&gt; node = new AvlNode&lt;V&gt;(object: element).._parent = x;\n        x\n          .._left = node\n          .._balanceFactor -= 1;\n        break;\n      }\n      x = x.left;\n    } else {\n      if (x._right == null) {\n        AvlNode&lt;V&gt; node = new AvlNode&lt;V&gt;(object: element).._parent = x;\n        x\n          .._right = node\n          .._balanceFactor += 1;\n        break;\n      }\n      x = x.right;\n    }\n  }\n\n  ++_modCount;\n\n  \/\/ AVL balancing act (for height balanced trees)\n  \/\/ Now that we've inserted, we've unbalanced some trees, we need\n  \/\/  to follow the tree back up to the _root double checking that the tree\n  \/\/  is still balanced and _maybe_ perform a single or double rotation.\n  \/\/  Note: Left additions == -1, Right additions == +1\n  \/\/  Balanced Node = { -1, 0, 1 }, out of balance = { -2, 2 }\n  \/\/  Single rotation when Parent &amp; Child share signed balance,\n  \/\/  Double rotation when sign differs!\n  AvlNode&lt;V&gt; node = x;\n  while (node._balanceFactor != 0 &amp;&amp; node.parent != null) {\n    \/\/ Find out which side of the parent we're on\n    if (node.parent._left == node) {\n      node.parent._balanceFactor -= 1;\n    } else {\n      node.parent._balanceFactor += 1;\n    }\n\n    node = node.parent;\n    if (node._balanceFactor == 2) {\n      \/\/ Heavy on the right side - Test for which rotation to perform\n      if (node.right._balanceFactor == 1) {\n        \/\/ Single (left) rotation; this will balance everything to zero\n        _rotateLeft(node);\n        node._balanceFactor = node.parent._balanceFactor = 0;\n        node = node.parent;\n      } else {\n        \/\/ Double (Right\/Left) rotation\n        \/\/ node will now be old node.right.left\n        _rotateRightLeft(node);\n        node = node.parent; \/\/ Update to new parent (old grandchild)\n        if (node._balanceFactor == 1) {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = -1;\n        } else if (node._balanceFactor == 0) {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = 0;\n        } else {\n          node.right._balanceFactor = 1;\n          node.left._balanceFactor = 0;\n        }\n        node._balanceFactor = 0;\n      }\n      break; \/\/ out of loop, we're balanced\n    } else if (node._balanceFactor == -2) {\n      \/\/ Heavy on the left side - Test for which rotation to perform\n      if (node.left._balanceFactor == -1) {\n        _rotateRight(node);\n        node._balanceFactor = node.parent._balanceFactor = 0;\n        node = node.parent;\n      } else {\n        \/\/ Double (Left\/Right) rotation\n        \/\/ node will now be old node.left.right\n        _rotateLeftRight(node);\n        node = node.parent;\n        if (node._balanceFactor == -1) {\n          node.right._balanceFactor = 1;\n          node.left._balanceFactor = 0;\n        } else if (node._balanceFactor == 0) {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = 0;\n        } else {\n          node.right._balanceFactor = 0;\n          node.left._balanceFactor = -1;\n        }\n        node._balanceFactor = 0;\n      }\n      break; \/\/ out of loop, we're balanced\n    }\n  } \/\/ end of while (balancing)\n  _length++;\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"quiver.collection\/AvlTreeSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool addAll(Iterable&lt;V&gt; items) {\n  bool modified = false;\n  for (V ele in items) {\n    modified = add(ele) ? true : modified;\n  }\n  return modified;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/addAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "items",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"quiver.collection\/AvlTreeSet\/add.html\">add<\/a> or <a href=\"quiver.collection\/AvlTreeSet\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nAvlTreeSet&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/cast.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.AvlTreeSet",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _length = 0;\n  _root = null;\n  ++_modCount;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": []
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/contains.html\">IterableBase.contains<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object object) {\n  AvlNode&lt;V&gt; x = _getNode(object as V);\n  return x != null;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; items) {\n  for (var ele in items) {\n    if (!contains(ele)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/containsAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "items",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/difference.html\">Set.difference<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; difference(Set&lt;Object&gt; other) {\n  TreeSet&lt;V&gt; set = new TreeSet(comparator: comparator);\n\n  if (other is TreeSet) {\n    var i1 = iterator;\n    var i2 = other.iterator;\n    var hasMore1 = i1.moveNext();\n    var hasMore2 = i2.moveNext();\n    while (hasMore1 &amp;&amp; hasMore2) {\n      var c = comparator(i1.current, i2.current);\n      if (c == 0) {\n        hasMore1 = i1.moveNext();\n        hasMore2 = i2.moveNext();\n      } else if (c &lt; 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n      } else {\n        hasMore2 = i2.moveNext();\n      }\n    }\n    if (hasMore1) {\n      do {\n        set.add(i1.current);\n      } while (i1.moveNext());\n    }\n    return set;\n  }\n\n  \/\/ Non-optimized version.\n  for (var target in this) {\n    if (!other.contains(target)) {\n      set.add(target);\n    }\n  }\n  return set;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/fromIterator.html\">TreeSet.fromIterator<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; fromIterator(V anchor,\n        {bool reversed: false, bool inclusive: true}) =&gt;\n    new _AvlTreeIterator&lt;V&gt;._(this,\n        anchorObject: anchor, reversed: reversed, inclusive: inclusive);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/fromIterator.html",
                    "isDeprecated": false,
                    "type": "dart:core.BidirectionalIterator",
                    "name": "fromIterator",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "anchor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "inclusive",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "reversed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@visibleForTesting\nAvlNode&lt;V&gt; getNode(V object) =&gt; _getNode(object);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/getNode.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.AvlNode",
                    "name": "getNode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/intersection.html\">Set.intersection<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; intersection(Set&lt;Object&gt; other) {\n  TreeSet&lt;V&gt; set = new TreeSet(comparator: comparator);\n\n  \/\/ Optimized for sorted sets\n  if (other is TreeSet&lt;V&gt;) {\n    var i1 = iterator;\n    var i2 = other.iterator;\n    var hasMore1 = i1.moveNext();\n    var hasMore2 = i2.moveNext();\n    while (hasMore1 &amp;&amp; hasMore2) {\n      var c = comparator(i1.current, i2.current);\n      if (c == 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n        hasMore2 = i2.moveNext();\n      } else if (c &lt; 0) {\n        hasMore1 = i1.moveNext();\n      } else {\n        hasMore2 = i2.moveNext();\n      }\n    }\n    return set;\n  }\n\n  \/\/ Non-optimized version.\n  for (var target in this) {\n    if (other.contains(target)) {\n      set.add(target);\n    }\n  }\n  return set;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/intersection.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "intersection",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/lookup.html\">Set.lookup<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V lookup(Object element) {\n  if (element is! V || _root == null) return null;\n  AvlNode&lt;V&gt; x = _root;\n  int compare = 0;\n  while (x != null) {\n    compare = comparator(element as V, x.object);\n    if (compare == 0) {\n      return x.object;\n    } else if (compare &lt; 0) {\n      x = x.left;\n    } else {\n      x = x.right;\n    }\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/lookup.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Search the tree for the matching <code>object<\/code> or the <code>nearestOption<\/code>\nif missing.  See <a href=\"quiver.collection\/TreeSearch-class.html\">TreeSearch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V nearest(V object, {TreeSearch nearestOption: TreeSearch.NEAREST}) {\n  AvlNode&lt;V&gt; found = _searchNearest(object, option: nearestOption);\n  return (found != null) ? found.object : null;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/nearest.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "nearest",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "nearestOption",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "quiver.collection.TreeSearch"
                        },
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object item) {\n  if (item is! V) return false;\n\n  AvlNode&lt;V&gt; x = _getNode(item as V);\n  if (x != null) {\n    _removeNode(x);\n    return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "item",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/removeAll.html\">Set.removeAll<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable items) {\n  for (var ele in items) {\n    remove(ele);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/removeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "items",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/removeWhere.html\">Set.removeWhere<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(V element)) {\n  List&lt;V&gt; damned = [];\n  for (var target in this) {\n    if (test(target)) {\n      damned.add(target);\n    }\n  }\n  removeAll(damned);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/retainAll.html\">Set.retainAll<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) {\n  List&lt;V&gt; chosen = &lt;V&gt;[];\n  for (var target in elements) {\n    if (target is V &amp;&amp; contains(target)) {\n      chosen.add(target);\n    }\n  }\n  clear();\n  addAll(chosen);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/retainAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/retainWhere.html\">Set.retainWhere<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(V element)) {\n  List&lt;V&gt; chosen = [];\n  for (var target in this) {\n    if (test(target)) {\n      chosen.add(target);\n    }\n  }\n  clear();\n  addAll(chosen);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nSet&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": []
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/union.html\">Set.union<\/a><\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; union(Set&lt;V&gt; other) {\n  TreeSet&lt;V&gt; set = new TreeSet(comparator: comparator);\n\n  if (other is TreeSet) {\n    var i1 = iterator;\n    var i2 = other.iterator;\n    var hasMore1 = i1.moveNext();\n    var hasMore2 = i2.moveNext();\n    while (hasMore1 &amp;&amp; hasMore2) {\n      var c = comparator(i1.current, i2.current);\n      if (c == 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n        hasMore2 = i2.moveNext();\n      } else if (c &lt; 0) {\n        set.add(i1.current);\n        hasMore1 = i1.moveNext();\n      } else {\n        set.add(i2.current);\n        hasMore2 = i2.moveNext();\n      }\n    }\n    if (hasMore1 || hasMore2) {\n      i1 = hasMore1 ? i1 : i2;\n      do {\n        set.add(i1.current);\n      } while (i1.moveNext());\n    }\n    return set;\n  }\n\n  \/\/ Non-optimized version.\n  return set..addAll(this)..addAll(other);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/AvlTreeSet\/union.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/iterator.html\">IterableBase.iterator<\/a><\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get iterator =&gt; new _AvlTreeIterator._(this);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlTreeSet\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.BidirectionalIterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"quiver.collection\/AvlTreeSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlTreeSet\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": []
                },
                {
                    "desc": "<p>See <a href=\"quiver.collection\/AvlTreeSet\/reverseIterator.html\">TreeSet.reverseIterator<\/a><\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get reverseIterator =&gt;\n    new _AvlTreeIterator._(this, reversed: true);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/AvlTreeSet\/reverseIterator.html",
                    "name": "reverseIterator",
                    "isDeprecated": false,
                    "type": "dart:core.BidirectionalIterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.AvlTreeSet",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A bi-directional map whose key-value pairs form a one-to-one\ncorrespondence.  BiMaps support an <code>inverse<\/code> property which gives access to\nan inverted view of the map, such that there is a mapping (v, k) for each\npair (k, v) in the original map. Since a one-to-one key-value invariant\napplies, it is an error to insert duplicate values into this map. It is\nalso an error to insert null keys or values into this map.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/BiMap-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.BiMap",
            "shortname": "BiMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a BiMap instance with the default implementation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory BiMap() =&gt; new HashBiMap();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/BiMap\/BiMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "BiMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.BiMap",
                    "params": []
                },
                {
                    "desc": "<p>Replaces any existing associations(s) involving key and value.<\/p>\n<p>If an association involving <code>key<\/code> or <code>value<\/code> exists in the map, it is\nremoved.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replace(K key, V value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/BiMap\/replace.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "replace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.BiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the inverse of this map, with key-value pairs (v, k) for each pair\n(k, v) in this map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BiMap&lt;V, K&gt; get inverse;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/BiMap\/inverse.html",
                    "name": "inverse",
                    "isDeprecated": false,
                    "type": "quiver.collection.BiMap",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.BiMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that delegates all methods to another\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.  For instance you can create a FruitIterable like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitIterable extends DelegatingIterable&lt;Fruit&gt; {\n  final Iterable&lt;Fruit&gt; _fruits = [];\n\n  Iterable&lt;Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/DelegatingIterable-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.DelegatingIterable",
            "shortname": "DelegatingIterable",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "quiver.collection\/DelegatingIterable\/DelegatingIterable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingIterable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) =&gt; delegate.any(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/any.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "any",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"quiver.collection\/DelegatingIterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nIterable&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) =&gt; delegate.contains(element);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"quiver.collection\/DelegatingIterable\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) =&gt; delegate.elementAt(index);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/elementAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "elementAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) =&gt; delegate.every(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/every.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "every",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt; delegate.expand(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/expand.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) =&gt;\n    delegate.firstWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/firstWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "firstWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) =&gt;\n    delegate.fold(initialValue, combine);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/fold.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "fold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "initialValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "previousValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) =&gt; delegate.followedBy(other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/followedBy.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "followedBy",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) =&gt; delegate.forEach(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) =&gt; delegate.join(separator);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/join.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "join",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) =&gt;\n    delegate.lastWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/lastWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lastWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"quiver.collection\/DelegatingIterable\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E e)) =&gt; delegate.map(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) =&gt; delegate.reduce(combine);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/reduce.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "reduce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nIterable&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) =&gt;\n    delegate.singleWhere(test, orElse: orElse);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/singleWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "singleWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <a href=\"quiver.iterables\/count.html\">count<\/a> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <a href=\"quiver.iterables\/count.html\">count<\/a> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <a href=\"quiver.iterables\/count.html\">count<\/a> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int n) =&gt; delegate.skip(n);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/skip.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skip",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) =&gt; delegate.skipWhile(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/skipWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skipWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the <a href=\"quiver.iterables\/count.html\">count<\/a> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"quiver.collection\/DelegatingIterable\/iterator.html\">iterator<\/a> until <a href=\"quiver.iterables\/count.html\">count<\/a>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int n) =&gt; delegate.take(n);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/take.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "take",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "n",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"quiver.collection\/DelegatingIterable\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) =&gt; delegate.takeWhile(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/takeWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "takeWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable: true}) =&gt; delegate.toList(growable: growable);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "growable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; delegate.toSet();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"quiver.collection\/DelegatingIterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; delegate.where(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/where.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "where",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"quiver.collection\/DelegatingIterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nIterable&lt;T&gt; whereType&lt;T&gt;() {\n  throw new UnimplementedError(\"whereType\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingIterable\/whereType.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "whereType",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get delegate;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingIterable\/delegate.html",
                    "name": "delegate",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; delegate.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingIterable\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; delegate.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingIterable\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator =&gt; delegate.iterator;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingIterable\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"quiver.collection\/DelegatingIterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; delegate.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingIterable\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingIterable",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"dart-core\/List-class.html\">List<\/a> that delegates all methods to another <a href=\"dart-core\/List-class.html\">List<\/a>.\nFor instance you can create a FruitList like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitList extends DelegatingList&lt;Fruit&gt; {\n  final List&lt;Fruit&gt; _fruits = [];\n\n  List&lt;Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/DelegatingList-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.DelegatingList",
            "shortname": "DelegatingList",
            "extends": [
                "quiver.collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "quiver.collection\/DelegatingList\/DelegatingList.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingList",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) =&gt; delegate.add(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) =&gt; delegate.addAll(iterable);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap() =&gt; delegate.asMap();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/asMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.int>",
                    "name": "asMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"quiver.collection\/DelegatingIterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingList&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/cast.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.DelegatingList",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; delegate.clear();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fillValue]) =&gt;\n    delegate.fillRange(start, end, fillValue);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/fillRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "fillRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "fillValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end) =&gt; delegate.getRange(start, end);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/getRange.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "getRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(E element, [int start = 0]) =&gt; delegate.indexOf(element, start);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/indexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint indexWhere(bool test(E element), [int start = 0]) =&gt;\n    delegate.indexWhere(test, start);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/indexWhere.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element) =&gt; delegate.insert(index, element);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; iterable) =&gt;\n    delegate.insertAll(index, iterable);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(E element, [int start]) =&gt;\n    delegate.lastIndexOf(element, start);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/lastIndexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint lastIndexWhere(bool test(E element), [int start]) =&gt;\n    delegate.lastIndexWhere(test, start);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/lastIndexWhere.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; delegate.remove(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index) =&gt; delegate.removeAt(index);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/removeAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() =&gt; delegate.removeLast();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end) =&gt; delegate.removeRange(start, end);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/removeRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) =&gt; delegate.removeWhere(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"quiver.collection\/DelegatingList\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; iterable) =&gt;\n    delegate.replaceRange(start, end, iterable);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/replaceRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "replaceRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) =&gt; delegate.retainWhere(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingList&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/retype.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.DelegatingList",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"quiver.collection\/DelegatingList\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"quiver.collection\/DelegatingList\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable) =&gt;\n    delegate.setAll(index, iterable);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/setAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable,\n        [int skipCount = 0]) =&gt;\n    delegate.setRange(start, end, iterable, skipCount);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([Random random]) =&gt; delegate.shuffle(random);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/shuffle.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "shuffle",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "random",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:math.Random"
                        }
                    ]
                },
                {
                    "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]) =&gt; delegate.sort(compare);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/sort.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "sort",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "a",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "b",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"quiver.collection\/DelegatingList\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]) =&gt; delegate.sublist(start, end);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingList\/sublist.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "sublist",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; get delegate;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingList\/delegate.html",
                    "name": "delegate",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"quiver.collection\/DelegatingList-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; delegate.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingList\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed =&gt; delegate.reversed;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingList\/reversed.html",
                    "name": "reversed",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingList",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"dart-core\/Map-class.html\">Map<\/a> that delegates all methods to another <a href=\"dart-core\/Map-class.html\">Map<\/a>.\nFor instance you can create a FruitMap like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitMap extends DelegatingMap&lt;String, Fruit&gt; {\n  final Map&lt;String, Fruit&gt; _fruits = {};\n\n  Map&lt;String, Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/DelegatingMap-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.DelegatingMap",
            "shortname": "DelegatingMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "quiver.collection\/DelegatingMap\/DelegatingMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) =&gt; delegate.addAll(other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nvoid addEntries(Iterable&lt;Object&gt; entries) {\n  \/\/ Change Iterable&lt;Object&gt; to Iterable&lt;MapEntry&lt;K, V&gt;&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"addEntries\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/addEntries.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addEntries",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "entries",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; cast&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; delegate.clear();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; delegate.containsKey(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; delegate.containsValue(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) =&gt; delegate.forEach(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; map&lt;K2, V2&gt;(Object transform(K key, V value)) {\n  \/\/ Change Object to MapEntry&lt;K2, V2&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"map\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) =&gt; delegate.putIfAbsent(key, ifAbsent);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) =&gt; delegate.remove(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nvoid removeWhere(bool test(K key, V value)) {\n  throw new UnimplementedError(\"removeWhere\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; retype&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nV update(K key, V update(V value), {V ifAbsent()}) {\n  throw new UnimplementedError(\"update\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/update.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nvoid updateAll(V update(K key, V value)) {\n  throw new UnimplementedError(\"updateAll\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingMap\/updateAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K, V&gt; get delegate;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/delegate.html",
                    "name": "delegate",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The map entries of <a href=\"quiver.collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_getter\nIterable&lt;Null&gt; get entries {\n  \/\/ Change Iterable&lt;Null&gt; to Iterable&lt;MapEntry&lt;K, V&gt;&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"entries\");\n}<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/entries.html",
                    "name": "entries",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.Null>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; delegate.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; delegate.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"quiver.collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"quiver.collection\/DelegatingMap\/length.html\">length<\/a> and <a href=\"quiver.collection\/DelegatingMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; delegate.keys;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; delegate.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"quiver.collection\/DelegatingMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"quiver.collection\/DelegatingMap\/keys.html\">keys<\/a> and <a href=\"quiver.collection\/DelegatingMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"quiver.collection\/DelegatingMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; delegate.values;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingMap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"dart-collection\/Queue-class.html\">Queue<\/a> that delegates all methods to another <a href=\"dart-collection\/Queue-class.html\">Queue<\/a>.\nFor instance you can create a FruitQueue like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitQueue extends DelegatingQueue&lt;Fruit&gt; {\n  final Queue&lt;Fruit&gt; _fruits = new Queue&lt;Fruit&gt;();\n\n  Queue&lt;Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/DelegatingQueue-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.DelegatingQueue",
            "shortname": "DelegatingQueue",
            "extends": [
                "quiver.collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "quiver.collection\/DelegatingQueue\/DelegatingQueue.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingQueue",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value) =&gt; delegate.add(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all elements of <code>iterable<\/code> at the end of the queue. The\nlength of the queue is extended by the length of <code>iterable<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable) =&gt; delegate.addAll(iterable);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the beginning of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addFirst(E value) =&gt; delegate.addFirst(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/addFirst.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> at the end of the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addLast(E value) =&gt; delegate.addLast(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/addLast.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"quiver.collection\/DelegatingIterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingQueue&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/cast.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.DelegatingQueue",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements in the queue. The size of the queue becomes zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; delegate.clear();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Remove a single instance of <code>value<\/code> from the queue.<\/p>\n<p>Returns <code>true<\/code> if a value was removed, or <code>false<\/code> if the queue\ncontained no element equal to <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object object) =&gt; delegate.remove(object);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes and returns the first element of this queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeFirst() =&gt; delegate.removeFirst();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/removeFirst.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes and returns the last element of the queue.<\/p>\n<p>The queue must not be empty when this method is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast() =&gt; delegate.removeLast();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) =&gt; delegate.removeWhere(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements not matched by <code>test<\/code> from the queue.<\/p>\n<p>The <code>test<\/code> function must not throw or modify the queue.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) =&gt; delegate.retainWhere(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingQueue&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingQueue\/retype.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.DelegatingQueue",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Queue&lt;E&gt; get delegate;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingQueue\/delegate.html",
                    "name": "delegate",
                    "isDeprecated": false,
                    "type": "dart:collection.Queue",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingQueue",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of <a href=\"dart-core\/Set-class.html\">Set<\/a> that delegates all methods to another <a href=\"dart-core\/Set-class.html\">Set<\/a>.\nFor instance you can create a FruitSet like this :<\/p>\n<pre class=\"language-dart\"><code>class FruitSet extends DelegatingSet&lt;Fruit&gt; {\n  final Set&lt;Fruit&gt; _fruits = new Set&lt;Fruit&gt;();\n\n  Set&lt;Fruit&gt; get delegate =&gt; _fruits;\n\n  \/\/ custom methods\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/DelegatingSet-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.DelegatingSet",
            "shortname": "DelegatingSet",
            "extends": [
                "quiver.collection.DelegatingIterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "quiver.collection\/DelegatingSet\/DelegatingSet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DelegatingSet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value) =&gt; delegate.add(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"quiver.collection\/DelegatingSet\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements) =&gt; delegate.addAll(elements);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"quiver.collection\/DelegatingIterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingSet&lt;T&gt; cast&lt;T&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/cast.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.DelegatingSet",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() =&gt; delegate.clear();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other) =&gt; delegate.containsAll(other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/containsAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other) =&gt; delegate.difference(other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other) =&gt; delegate.intersection(other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/intersection.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "intersection",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"quiver.collection\/DelegatingIterable\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"quiver.collection\/DelegatingIterable\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object object) =&gt; delegate.lookup(object);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/lookup.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value) =&gt; delegate.remove(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements) =&gt; delegate.removeAll(elements);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/removeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element)) =&gt; delegate.removeWhere(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements) =&gt; delegate.retainAll(elements);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/retainAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element)) =&gt; delegate.retainWhere(test);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nDelegatingSet&lt;T&gt; retype&lt;T&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/retype.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.DelegatingSet",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other) =&gt; delegate.union(other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/DelegatingSet\/union.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; get delegate;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/DelegatingSet\/delegate.html",
                    "name": "delegate",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.DelegatingSet",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A hash-table based implementation of BiMap.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/HashBiMap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.HashBiMap",
            "shortname": "HashBiMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">HashBiMap() : this._from(new HashMap(), new HashMap());<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/HashBiMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "HashBiMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other) =&gt; other.forEach((k, v) =&gt; _add(k, v, false));<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) {\n  for (var entry in entries) {\n    _add(entry.key, entry.value, false);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/addEntries.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addEntries",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "entries",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.MapEntry>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; cast&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _map.clear();\n  _inverse.clear();\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; _map.containsKey(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; _inverse.containsKey(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) =&gt; _map.forEach(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; transform(K key, V value)) =&gt;\n    _map.map(transform);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent()) {\n  var value = _map[key];\n  if (value != null) return value;\n  if (!_map.containsKey(key)) return _add(key, ifAbsent(), false);\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key) {\n  _inverse.remove(_map[key]);\n  return _map.remove(key);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeWhere(bool test(K key, V value)) {\n  _inverse.removeWhere((v, k) =&gt; test(k, v));\n  _map.removeWhere(test);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Replaces any existing associations(s) involving key and value.<\/p>\n<p>If an association involving <code>key<\/code> or <code>value<\/code> exists in the map, it is\nremoved.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replace(K key, V value) {\n  _add(key, value, true);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/replace.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "replace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; retype&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nV update(K key, V update(V value), {V ifAbsent()}) {\n  var value = _map[key];\n  if (value != null) {\n    return _add(key, update(value), true);\n  } else {\n    if (ifAbsent == null)\n      throw new ArgumentError.value(key, 'key', 'Key not in map');\n    return _add(key, ifAbsent(), false);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/update.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateAll(V update(K key, V value)) {\n  for (var key in this.keys) {\n    _add(key, update(key, _map[key]), true);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/HashBiMap\/updateAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The map entries of <a href=\"quiver.collection\/HashBiMap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;MapEntry&lt;K, V&gt;&gt; get entries =&gt; _map.entries;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/entries.html",
                    "name": "entries",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns the inverse of this map, with key-value pairs (v, k) for each pair\n(k, v) in this map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BiMap&lt;V, K&gt; get inverse =&gt; _cached ??= new HashBiMap._from(_inverse, _map);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/inverse.html",
                    "name": "inverse",
                    "isDeprecated": false,
                    "type": "quiver.collection.BiMap",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _map.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _map.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"quiver.collection\/HashBiMap-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"quiver.collection\/HashBiMap\/length.html\">length<\/a> and <a href=\"quiver.collection\/HashBiMap\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _map.keys;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _map.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"quiver.collection\/HashBiMap-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"quiver.collection\/HashBiMap\/keys.html\">keys<\/a> and <a href=\"quiver.collection\/HashBiMap\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"quiver.collection\/HashBiMap\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _inverse.keys;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/HashBiMap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.HashBiMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A linked hash-table based implementation of <a href=\"quiver.collection\/LruMap-class.html\">LruMap<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/LinkedLruHashMap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.LinkedLruHashMap",
            "shortname": "LinkedLruHashMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a new LinkedLruHashMap with a <code>maximumSize<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LinkedLruHashMap({int maximumSize}) =&gt;\n    new LinkedLruHashMap._fromMap(new HashMap&lt;K, _LinkedEntry&lt;K, V&gt;&gt;(),\n        maximumSize: maximumSize);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/LinkedLruHashMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LinkedLruHashMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "maximumSize",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key-value pairs of <code>other<\/code> to this map.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key and\nassociated value in <code>other<\/code>. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten. If\nthe number of unique keys is greater than <a href=\"quiver.collection\/LinkedLruHashMap\/maximumSize.html\">maximumSize<\/a> then the least\nrecently use keys are evicted. For keys written to by <code>other<\/code>, the least\nrecently user order is determined by <code>other<\/code>'s iteration order.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addAll(Map&lt;K, V&gt; other) =&gt; other.forEach((k, v) =&gt; this[k] = v);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; entries) =&gt;\n    entries.forEach((entry) =&gt; this[entry.key] = entry.value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/addEntries.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addEntries",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "entries",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.MapEntry>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nLinkedLruHashMap&lt;K2, V2&gt; cast&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"cast\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/cast.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.LinkedLruHashMap",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid clear() {\n  _entries.clear();\n  _head = _tail = null;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool containsKey(Object key) =&gt; _entries.containsKey(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool containsValue(Object value) =&gt; values.contains(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>action<\/code> to each key-value pair of the map in order of MRU to\nLRU.<\/p>\n<p>Calling <code>action<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid forEach(void action(K key, V value)) {\n  var head = _head;\n  while (head != null) {\n    action(head.key, head.value);\n    head = head.next;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nMap&lt;K2, V2&gt; map&lt;K2, V2&gt;(Object transform(K key, V value)) {\n  \/\/ Change Object to MapEntry&lt;K2, V2&gt; when\n  \/\/ the MapEntry class has been added.\n  throw new UnimplementedError(\"map\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Look up the value associated with <code>key<\/code>, or add a new value if it isn't\nthere. The pair is promoted to the MRU position.<\/p>\n<p>Otherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to that\n<code>value<\/code>, and then returns the new <code>value<\/code>, with the key-value pair in the\nMRU position. If this causes <a href=\"quiver.collection\/LinkedLruHashMap\/length.html\">length<\/a> to exceed <a href=\"quiver.collection\/LinkedLruHashMap\/maximumSize.html\">maximumSize<\/a>, then the\nLRU position is removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nV putIfAbsent(K key, V ifAbsent()) {\n  final entry =\n      _entries.putIfAbsent(key, () =&gt; _createEntry(key, ifAbsent()));\n  if (length &gt; maximumSize) {\n    _removeLru();\n  }\n  _promoteEntry(entry);\n  return entry.value;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nV remove(Object key) {\n  final entry = _entries.remove(key);\n  if (entry != null) {\n    if (entry == _head &amp;&amp; entry == _tail) {\n      _head = _tail = null;\n    } else if (entry == _head) {\n      _head = _head.next;\n      _head?.previous = null;\n    } else if (entry == _tail) {\n      _tail = _tail.previous;\n      _tail?.next = null;\n    } else {\n      entry.previous.next = entry.next;\n      entry.next.previous = entry.previous;\n    }\n    return entry.value;\n  }\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all entries of this map that satisfy the given <a href=\"package-matcher_matcher\/predicate.html\">predicate<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid removeWhere(bool test(K key, V value)) {\n  var keysToRemove = &lt;K&gt;[];\n  _entries.forEach((key, entry) {\n    if (test(key, entry.value)) keysToRemove.add(key);\n  });\n  for (var key in keysToRemove) {\n    remove(key);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Dart 2.0 requires this method to be implemented.\n\/\/ ignore: override_on_non_overriding_method\nLinkedLruHashMap&lt;K2, V2&gt; retype&lt;K2, V2&gt;() {\n  throw new UnimplementedError(\"retype\");\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/retype.html",
                    "isDeprecated": false,
                    "type": "quiver.collection.LinkedLruHashMap",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ TODO: Use the `MapBase.mapToString()` static method when the minimum SDK\n\/\/ version of this package has been bumped to 2.0.0 or greater.\nString toString() {\n  \/\/ Detect toString() cycles.\n  if (_isToStringVisiting(this)) {\n    return '{...}';\n  }\n\n  var result = new StringBuffer();\n  try {\n    _toStringVisiting.add(this);\n    result.write('{');\n    bool first = true;\n    forEach((k, v) {\n      if (!first) {\n        result.write(', ');\n      }\n      first = false;\n      result.write('$k: $v');\n    });\n    result.write('}');\n  } finally {\n    assert(identical(_toStringVisiting.last, this));\n    _toStringVisiting.removeLast();\n  }\n\n  return result.toString();\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nV update(K key, V update(V value), {V ifAbsent()}) {\n  V newValue;\n  if (containsKey(key)) {\n    newValue = update(this[key]);\n  } else {\n    if (ifAbsent == null)\n      throw new ArgumentError.value(key, 'key', 'Key not in map');\n    newValue = ifAbsent();\n  }\n\n  \/\/ Add this item to the MRU position.\n  _insertMru(_createEntry(key, newValue));\n\n  \/\/ Remove the LRU item if the size would be exceeded by adding this item.\n  if (length &gt; maximumSize) {\n    assert(length == maximumSize + 1);\n    _removeLru();\n  }\n  return newValue;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/update.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid updateAll(V update(K key, V value)) {\n  _entries.forEach((key, entry) {\n    var newValue = _createEntry(key, update(key, entry.value));\n    _entries[key] = newValue;\n  });\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LinkedLruHashMap\/updateAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The map entries of <a href=\"quiver.collection\/LinkedLruHashMap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;MapEntry&lt;K, V&gt;&gt; get entries =&gt; _entries.values\n    .map((entry) =&gt; new MapEntry&lt;K, V&gt;(entry.key, entry.value));<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/entries.html",
                    "name": "entries",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isEmpty =&gt; _entries.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nbool get isNotEmpty =&gt; _entries.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"quiver.collection\/LinkedLruHashMap-class.html\">this<\/a> - in order of MRU to LRU.<\/p>\n<p>The returned iterable does <em>not<\/em> have efficient <code>length<\/code> or <code>contains<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;K&gt; get keys =&gt; _iterable().map((e) =&gt; e.key);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get length =&gt; _entries.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>Maximum size of the <a href=\"dart-core\/Map-class.html\">Map<\/a>. If <a href=\"quiver.collection\/LinkedLruHashMap\/length.html\">length<\/a> exceeds this value at any time, n\nentries accessed the earliest are removed, where n is <a href=\"quiver.collection\/LinkedLruHashMap\/length.html\">length<\/a> -\n<a href=\"quiver.collection\/LinkedLruHashMap\/maximumSize.html\">maximumSize<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get maximumSize =&gt; _maximumSize;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/maximumSize.html",
                    "name": "maximumSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"quiver.collection\/LinkedLruHashMap-class.html\">this<\/a> - in order of MRU to LRU.<\/p>\n<p>The returned iterable does <em>not<\/em> have efficient <code>length<\/code> or <code>contains<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterable&lt;V&gt; get values =&gt; _iterable().map((e) =&gt; e.value);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LinkedLruHashMap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LinkedLruHashMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A multimap implementation that uses <a href=\"dart-core\/List-class.html\">List<\/a>s to store the values associated\nwith each key.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/ListMultimap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.ListMultimap",
            "shortname": "ListMultimap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ListMultimap();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/ListMultimap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ListMultimap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Adds an association from the given key to the given value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(K key, V value) {\n  _map.putIfAbsent(key, _create);\n  _add(_map[key], value);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all associations of <code>other<\/code> to this multimap.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key and\nassociated value in other. It iterates over <code>other<\/code>, which must therefore\nnot change during the iteration.<\/p>\n<p>This implementation iterates through each key of <code>other<\/code> and adds the\nassociated values to this instance via <a href=\"quiver.collection\/ListMultimap\/addValues.html\">addValues<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Multimap&lt;K, V&gt; other) =&gt; other.forEachKey(addValues);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "quiver.collection.Multimap"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds an association from the given key to each of the given values.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addValues(K key, Iterable&lt;V&gt; values) {\n  _map.putIfAbsent(key, _create);\n  _addAll(_map[key], values);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/addValues.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addValues",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a view of this multimap as a map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K, List&lt;V&gt;&gt; asMap() =&gt; new _WrappedMap&lt;K, V, List&lt;V&gt;&gt;(this);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/asMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.List>",
                    "name": "asMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all data from the multimap.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _map.forEach((K key, Iterable&lt;V&gt; value) =&gt; _clear(value));\n  _map.clear();\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given association between <code>key<\/code>\nand <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object key, Object value) =&gt; _map[key]?.contains(value) == true;<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given <code>key<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; _map.keys.contains(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; values.contains(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each {key, value} pair of the multimap.<\/p>\n<p>It is an error to add or remove keys from the map during iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) {\n  _map.forEach((K key, Iterable&lt;V&gt; values) {\n    values.forEach((V value) =&gt; f(key, value));\n  });\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each {key, <code>Iterable&lt;value&gt;<\/code>} pair of the multimap.<\/p>\n<p>It is an error to add or remove keys from the map during iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEachKey(void f(K key, C value)) =&gt; _map.forEach(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/forEachKey.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEachKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<C>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the association between the given <code>key<\/code> and <code>value<\/code>. Returns\n<code>true<\/code> if the association existed, <code>false<\/code> otherwise.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object key, V value) {\n  if (!_map.containsKey(key)) return false;\n  bool removed = _remove(_map[key], value);\n  if (removed &amp;&amp; _map[key].isEmpty) _map.remove(key);\n  return removed;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the association for the given <code>key<\/code>. Returns the collection of\nremoved values, or an empty iterable if <code>key<\/code> was unmapped.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;V&gt; removeAll(Object key) =&gt; super.removeAll(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/ListMultimap\/removeAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns true if there is no key in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _map.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/ListMultimap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _map.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/ListMultimap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"quiver.collection\/ListMultimap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _map.keys;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/ListMultimap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>The number of keys in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _map.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/ListMultimap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"quiver.collection\/ListMultimap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _map.values.expand((x) =&gt; x);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/ListMultimap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.ListMultimap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An implementation of a <a href=\"dart-core\/Map-class.html\">Map<\/a> which has a maximum size and uses a (Least\nRecently Used)<code>http:\/\/en.wikipedia.org\/wiki\/Cache_algorithms#LRU<\/code> algorithm\nto remove items from the <a href=\"dart-core\/Map-class.html\">Map<\/a> when the <a href=\"quiver.collection\/LruMap\/maximumSize.html\">maximumSize<\/a> is reached and new\nitems are added.<\/p>\n<p>It is safe to access the <a href=\"dart-core\/Map\/keys.html\">keys<\/a> and <a href=\"dart-core\/Map\/values.html\">values<\/a> collections without affecting\nthe \"used\" ordering - as well as using <a href=\"dart-core\/Map\/forEach.html\">forEach<\/a>. Other types of access,\nincluding bracket, and <a href=\"dart-core\/Map\/putIfAbsent.html\">putIfAbsent<\/a>, promotes the key-value pair to the\nMRU position.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/LruMap-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.LruMap",
            "shortname": "LruMap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"quiver.collection\/LruMap-class.html\">LruMap<\/a> instance with the default implementation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory LruMap({int maximumSize}) = LinkedLruHashMap&lt;K, V&gt;;<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/LruMap\/LruMap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LruMap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.LruMap",
                    "params": [
                        {
                            "name": "maximumSize",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Maximum size of the <a href=\"dart-core\/Map-class.html\">Map<\/a>. If <a href=\"dart-core\/Map\/length.html\">length<\/a> exceeds this value at any time, n\nentries accessed the earliest are removed, where n is <a href=\"dart-core\/Map\/length.html\">length<\/a> -\n<a href=\"quiver.collection\/LruMap\/maximumSize.html\">maximumSize<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int maximumSize\n\n<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/LruMap\/maximumSize.html",
                    "name": "maximumSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.LruMap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An associative container that maps a key to multiple values.<\/p>\n<p>Key lookups return mutable collections that are views of the multimap.\nUpdates to the multimap are reflected in these collections and similarly,\nmodifications to the returned collections are reflected in the multimap.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/Multimap-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.Multimap",
            "shortname": "Multimap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs a new list-backed multimap.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Multimap() =&gt; new ListMultimap&lt;K, V&gt;();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/Multimap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Multimap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>Adds an association from the given key to the given value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(K key, V value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all associations of <code>other<\/code> to this multimap.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key and\nassociated value in other. It iterates over <code>other<\/code>, which must therefore\nnot change during the iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Multimap&lt;K, V&gt; other);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "quiver.collection.Multimap"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds an association from the given key to each of the given values.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addValues(K key, Iterable&lt;V&gt; values);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/addValues.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addValues",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a view of this multimap as a map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K, Iterable&lt;V&gt;&gt; asMap();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/asMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.Iterable>",
                    "name": "asMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all data from the multimap.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given association between <code>key<\/code>\nand <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object key, Object value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given <code>key<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each {key, value} pair of the multimap.<\/p>\n<p>It is an error to add or remove keys from the map during iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value));<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each {key, <code>Iterable&lt;value&gt;<\/code>} pair of the multimap.<\/p>\n<p>It is an error to add or remove keys from the map during iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEachKey(void f(K key, Iterable&lt;V&gt; value));<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/forEachKey.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEachKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the association between the given <code>key<\/code> and <code>value<\/code>. Returns\n<code>true<\/code> if the association existed, <code>false<\/code> otherwise.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object key, V value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the association for the given <code>key<\/code>. Returns the collection of\nremoved values, or an empty iterable if <code>key<\/code> was unmapped.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; removeAll(Object key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/Multimap\/removeAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns true if there is no key in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/Multimap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/Multimap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"quiver.collection\/Multimap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/Multimap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>The number of keys in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/Multimap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"quiver.collection\/Multimap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/Multimap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.Multimap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A multimap implementation that uses <a href=\"dart-core\/Set-class.html\">Set<\/a>s to store the values associated\nwith each key.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/SetMultimap-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.SetMultimap",
            "shortname": "SetMultimap",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SetMultimap();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/SetMultimap.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SetMultimap",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Adds an association from the given key to the given value.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(K key, V value) {\n  _map.putIfAbsent(key, _create);\n  _add(_map[key], value);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all associations of <code>other<\/code> to this multimap.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key and\nassociated value in other. It iterates over <code>other<\/code>, which must therefore\nnot change during the iteration.<\/p>\n<p>This implementation iterates through each key of <code>other<\/code> and adds the\nassociated values to this instance via <a href=\"quiver.collection\/SetMultimap\/addValues.html\">addValues<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Multimap&lt;K, V&gt; other) =&gt; other.forEachKey(addValues);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "quiver.collection.Multimap"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds an association from the given key to each of the given values.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addValues(K key, Iterable&lt;V&gt; values) {\n  _map.putIfAbsent(key, _create);\n  _addAll(_map[key], values);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/addValues.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addValues",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "values",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a view of this multimap as a map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K, Set&lt;V&gt;&gt; asMap() =&gt; new _WrappedMap&lt;K, V, Set&lt;V&gt;&gt;(this);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/asMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.Set>",
                    "name": "asMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Removes all data from the multimap.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear() {\n  _map.forEach((K key, Iterable&lt;V&gt; value) =&gt; _clear(value));\n  _map.clear();\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given association between <code>key<\/code>\nand <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object key, Object value) =&gt; _map[key]?.contains(value) == true;<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given <code>key<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key) =&gt; _map.keys.contains(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this multimap contains the given <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value) =&gt; values.contains(value);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each {key, value} pair of the multimap.<\/p>\n<p>It is an error to add or remove keys from the map during iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value)) {\n  _map.forEach((K key, Iterable&lt;V&gt; values) {\n    values.forEach((V value) =&gt; f(key, value));\n  });\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each {key, <code>Iterable&lt;value&gt;<\/code>} pair of the multimap.<\/p>\n<p>It is an error to add or remove keys from the map during iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEachKey(void f(K key, C value)) =&gt; _map.forEach(f);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/forEachKey.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEachKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<C>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the association between the given <code>key<\/code> and <code>value<\/code>. Returns\n<code>true<\/code> if the association existed, <code>false<\/code> otherwise.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object key, V value) {\n  if (!_map.containsKey(key)) return false;\n  bool removed = _remove(_map[key], value);\n  if (removed &amp;&amp; _map[key].isEmpty) _map.remove(key);\n  return removed;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the association for the given <code>key<\/code>. Returns the collection of\nremoved values, or an empty iterable if <code>key<\/code> was unmapped.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;V&gt; removeAll(Object key) =&gt; super.removeAll(key);<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/SetMultimap\/removeAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns true if there is no key in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _map.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/SetMultimap\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; _map.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/SetMultimap\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"quiver.collection\/SetMultimap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys =&gt; _map.keys;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/SetMultimap\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>The number of keys in the multimap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _map.length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/SetMultimap\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"quiver.collection\/SetMultimap-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values =&gt; _map.values.expand((x) =&gt; x);<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/SetMultimap\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.SetMultimap",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A <a href=\"dart-core\/Set-class.html\">Set<\/a> of items stored in a binary tree according to <a href=\"quiver.collection\/TreeSet\/comparator.html\">comparator<\/a>.\nSupports bidirectional iteration.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.collection\/TreeSet-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.TreeSet",
            "shortname": "TreeSet",
            "extends": [
                "dart:collection.IterableBase",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "quiver.collection.AvlTreeSet"
            ],
            "events": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Comparator&lt;V&gt; comparator\n\n<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/TreeSet\/comparator.html",
                    "isDeprecated": false,
                    "type": "dart:core.Comparator",
                    "name": "comparator",
                    "memberOf": "quiver.collection.TreeSet",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Create a new <a href=\"quiver.collection\/TreeSet-class.html\">TreeSet<\/a> with an ordering defined by <code>comparator<\/code> or the\ndefault <code>(a, b) =&gt; a.compareTo(b)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory TreeSet({Comparator&lt;V&gt; comparator}) {\n  comparator ??= (a, b) =&gt; (a as dynamic).compareTo(b);\n  return new AvlTreeSet(comparator: comparator);\n}<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/TreeSet\/TreeSet.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TreeSet",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": [
                        {
                            "name": "comparator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Comparator"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"dart-core\/Set\/add.html\">add<\/a> or <a href=\"dart-core\/Set\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ ignore: override_on_non_overriding_method\nSet&lt;T&gt; cast&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/TreeSet\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/BidirectionalIterator-class.html\">BidirectionalIterator<\/a> that starts at <code>anchor<\/code>.  By default,\nthe iterator includes the anchor with the first movement; set <code>inclusive<\/code>\nto false if you want to exclude the anchor. Set <code>reversed<\/code> to true to\nchange the direction of of moveNext and movePrevious.<\/p>\n<p>Note: This iterator allows you to walk the entire set. It does not\npresent a subview.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; fromIterator(V anchor,\n    {bool reversed: false, bool inclusive: true});<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/TreeSet\/fromIterator.html",
                    "isDeprecated": false,
                    "type": "dart:core.BidirectionalIterator",
                    "name": "fromIterator",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": [
                        {
                            "name": "anchor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "inclusive",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "reversed",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Search the tree for the matching <code>object<\/code> or the <code>nearestOption<\/code>\nif missing.  See <a href=\"quiver.collection\/TreeSearch-class.html\">TreeSearch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V nearest(V object, {TreeSearch nearestOption: TreeSearch.NEAREST});<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/TreeSet\/nearest.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "nearest",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": [
                        {
                            "name": "nearestOption",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "quiver.collection.TreeSearch"
                        },
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\n\/\/ ignore: override_on_non_overriding_method\nSet&lt;T&gt; retype&lt;T&gt;();<\/code><\/pre>\n    ",
                    "href": "quiver.collection\/TreeSet\/retype.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "retype",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/BidirectionalIterator-class.html\">BidirectionalIterator<\/a> that iterates over this tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get iterator;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/TreeSet\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.BidirectionalIterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"quiver.collection\/TreeSet-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/TreeSet\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/BidirectionalIterator-class.html\">BidirectionalIterator<\/a> that iterates over this tree, in\nreverse.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">BidirectionalIterator&lt;V&gt; get reverseIterator;<\/code><\/pre>\n        ",
                    "href": "quiver.collection\/TreeSet\/reverseIterator.html",
                    "name": "reverseIterator",
                    "isDeprecated": false,
                    "type": "dart:core.BidirectionalIterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.collection.TreeSet",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [
        {
            "desc": "<p>Controls the results for <a href=\"\">TreeSet.searchNearest<\/a><\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "quiver.collection\/TreeSearch-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.collection",
            "name": "quiver.collection.TreeSearch",
            "shortname": "TreeSearch",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>If result not found, always chose the greater element<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const TreeSearch(2)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "GREATER_THAN",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "quiver.collection.TreeSearch",
                    "params": []
                },
                {
                    "desc": "\n          <p>If result not found, always chose the smaller element<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const TreeSearch(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "LESS_THAN",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "quiver.collection.TreeSearch",
                    "params": []
                },
                {
                    "desc": "\n          <p>If result not found, chose the nearest based on comparison<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const TreeSearch(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "NEAREST",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "quiver.collection.TreeSearch",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">TreeSearch<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "quiver.collection.TreeSearch",
                    "params": []
                }
            ]
        }
    ],
    "typedef": []
}