{
    "class": [
        {
            "desc": "<p>Error thrown when trying to instantiate an abstract class.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/AbstractClassInstantiationError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.AbstractClassInstantiationError",
            "shortname": "AbstractClassInstantiationError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AbstractClassInstantiationError(String className) : _className = className;<\/code><\/pre>\n    ",
                    "href": "dart-core\/AbstractClassInstantiationError\/AbstractClassInstantiationError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AbstractClassInstantiationError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.AbstractClassInstantiationError",
                    "params": [
                        {
                            "name": "className",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/AbstractClassInstantiationError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.AbstractClassInstantiationError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Error thrown when a function is passed an unacceptable argument.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/ArgumentError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.ArgumentError",
            "shortname": "ArgumentError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "dart:core.IndexError",
                "dart:core.RangeError"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>The <code>message<\/code> describes the erroneous argument.<\/p>\n<p>Existing code may be using <code>message<\/code> to hold the invalid value.\nIf the <code>message<\/code> is not a <a href=\"dart-core\/String-class.html\">String<\/a>, it is assumed to be a value instead\nof a message.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nArgumentError([this.message])\n    : invalidValue = null,\n      _hasValue = false,\n      name = null;<\/code><\/pre>\n    ",
                    "href": "dart-core\/ArgumentError\/ArgumentError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ArgumentError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.ArgumentError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Throws if <code>argument<\/code> is <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Since(\"2.1\")\nstatic void checkNotNull(Object argument, [String name]) {\n  if (argument == null) throw ArgumentError.notNull(name);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/ArgumentError\/checkNotNull.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "checkNotNull",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.ArgumentError",
                    "params": [
                        {
                            "name": "argument",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String nameString = \"\";\n  if (name != null) {\n    nameString = \" ($name)\";\n  }\n  var message = (this.message == null) ? \"\" : \": ${this.message}\";\n  String prefix = \"$_errorName$nameString$message\";\n  if (!_hasValue) return prefix;\n  \/\/ If we know the invalid value, we can try to describe the problem.\n  String explanation = _errorExplanation;\n  String errorValue = Error.safeToString(invalidValue);\n  return \"$prefix$explanation: $errorValue\";\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/ArgumentError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.ArgumentError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Name of the invalid argument, if available.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/ArgumentError\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.ArgumentError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown by the runtime system when an assert statement fails.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/AssertionError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.AssertionError",
            "shortname": "AssertionError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "dart:core.TypeError",
                "foundation.FlutterError"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">AssertionError([this.message]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/AssertionError\/AssertionError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AssertionError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.AssertionError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Assertion failed\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/AssertionError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.AssertionError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Message describing the assertion error.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/AssertionError\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.AssertionError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An Iterator that allows moving backwards as well as forwards.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/BidirectionalIterator-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.BidirectionalIterator",
            "shortname": "BidirectionalIterator",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/BidirectionalIterator\/BidirectionalIterator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "BidirectionalIterator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.BidirectionalIterator",
                    "params": []
                },
                {
                    "desc": "<p>Move back to the previous element.<\/p>\n<p>Returns true and updates <a href=\"dart-core\/Iterator\/current.html\">current<\/a> if successful. Returns false\nand sets <a href=\"dart-core\/Iterator\/current.html\">current<\/a> to null if there is no previous element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool movePrevious();<\/code><\/pre>\n    ",
                    "href": "dart-core\/BidirectionalIterator\/movePrevious.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "movePrevious",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BidirectionalIterator",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An arbitrarily large integer.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/BigInt-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.BigInt",
            "shortname": "BigInt",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns the absolute value of this integer.<\/p>\n<p>For any integer <code>x<\/code>, the result is the same as <code>x &lt; 0 ? -x : x<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt abs();<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/abs.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "abs",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Compares this to <code>other<\/code>.<\/p>\n<p>Returns a negative number if <code>this<\/code> is less than <code>other<\/code>, zero if they are\nequal, and a positive number if <code>this<\/code> is greater than <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(BigInt other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.BigInt"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the greatest common divisor of this big integer and <code>other<\/code>.<\/p>\n<p>If either number is non-zero, the result is the numerically greatest\ninteger dividing both <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>The greatest common divisor is independent of the order,\nso <code>x.gcd(y)<\/code> is  always the same as <code>y.gcd(x)<\/code>.<\/p>\n<p>For any integer <code>x<\/code>, <code>x.gcd(x)<\/code> is <code>x.abs()<\/code>.<\/p>\n<p>If both <code>this<\/code> and <code>other<\/code> is zero, the result is also zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt gcd(BigInt other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/gcd.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "gcd",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.BigInt"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the modular multiplicative inverse of this big integer\nmodulo <code>modulus<\/code>.<\/p>\n<p>The <code>modulus<\/code> must be positive.<\/p>\n<p>It is an error if no modular inverse exists.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ Returns 1\/this % modulus, with modulus &gt; 0.\nBigInt modInverse(BigInt modulus);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/modInverse.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "modInverse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "modulus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.BigInt"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns this integer to the power of <code>exponent<\/code> modulo <code>modulus<\/code>.<\/p>\n<p>The <code>exponent<\/code> must be non-negative and <code>modulus<\/code> must be\npositive.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt modPow(BigInt exponent, BigInt modulus);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/modPow.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "modPow",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "exponent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.BigInt"
                        },
                        {
                            "name": "modulus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.BigInt"
                        }
                    ]
                },
                {
                    "desc": "<p>Parses <code>source<\/code> as a, possibly signed, integer literal and returns its\nvalue.<\/p>\n<p>The <code>source<\/code> must be a non-empty sequence of base-<code>radix<\/code> digits,\noptionally prefixed with a minus or plus sign ('-' or '+').<\/p>\n<p>The <code>radix<\/code> must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z' with\nvalues 10 through 35. Also accepts upper-case letters with the same\nvalues as the lower-case ones.<\/p>\n<p>If no <code>radix<\/code> is given then it defaults to 10. In this case, the <code>source<\/code>\ndigits may also start with <code>0x<\/code>, in which case the number is interpreted\nas a hexadecimal literal, which effectively means that the <code>0x<\/code> is ignored\nand the radix is instead set to 16.<\/p>\n<p>For any int <code>n<\/code> and radix <code>r<\/code>, it is guaranteed that\n<code>n == int.parse(n.toRadixString(r), radix: r)<\/code>.<\/p>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the <code>source<\/code> is not a valid integer literal,\noptionally prefixed by a sign.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt parse(String source, {int radix});<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "radix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns <code>this<\/code> to the power of <code>exponent<\/code>.<\/p>\n<p>Returns <a href=\"dart-core\/BigInt\/one.html\">one<\/a> if the <code>exponent<\/code> equals 0.<\/p>\n<p>The <code>exponent<\/code> must otherwise be positive.<\/p>\n<p>The result is always equal to the mathematical result of this to the power\n<code>exponent<\/code>, only limited by the available memory.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt pow(int exponent);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/pow.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "pow",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "exponent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the remainder of the truncating division of <code>this<\/code> by <code>other<\/code>.<\/p>\n<p>The result <code>r<\/code> of this operation satisfies:\n<code>this == (this ~\/ other) * other + r<\/code>.\nAs a consequence the remainder <code>r<\/code> has the same sign as the divider <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt remainder(BigInt other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/remainder.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "remainder",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.BigInt"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns this <a href=\"dart-core\/BigInt-class.html\">BigInt<\/a> as a <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>If the number is not representable as a <a href=\"dart-core\/double-class.html\">double<\/a>, an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double toDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/toDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "toDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Returns this <a href=\"dart-core\/BigInt-class.html\">BigInt<\/a> as an <a href=\"dart-core\/int-class.html\">int<\/a>.<\/p>\n<p>If the number does not fit, clamps to the max (or min)\ninteger.<\/p>\n<p>Warning: the clamping behaves differently on dart2js, dev\ncompiler, and the VM, due to the differences in integer\nprecision.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toInt();<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/toInt.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "toInt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Converts <a href=\"dart-core\/BigInt-class.html\">this<\/a> to a string representation in the given <code>radix<\/code>.<\/p>\n<p>In the string representation, lower-case letters are used for digits above\n'9', with 'a' being 10 an 'z' being 35.<\/p>\n<p>The <code>radix<\/code> argument must be an integer in the range 2 to 36.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toRadixString(int radix);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/toRadixString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toRadixString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "radix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the least significant <code>width<\/code> bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in <code>width<\/code> bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var big15 = new BigInt.from(15);\nvar big16 = new BigInt.from(16);\nvar big239 = new BigInt.from(239);\n                                     V--sign bit-V\nbig16.toSigned(5) == -big16   \/\/  00010000 -&gt; 11110000\nbig239.toSigned(5) == big15   \/\/  11101111 -&gt; 00001111\n                                     ^           ^\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit signed quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toSigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>127<\/code>, wrap to <code>-128<\/code> and count back up to\n<code>127<\/code>.<\/p>\n<p>If the input value fits in <code>width<\/code> bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of <code>x<\/code>\nis <code>x.bitLength + 1<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toSigned(x.bitLength + 1);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt toSigned(int width);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/toSigned.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "toSigned",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a String-representation of this integer.<\/p>\n<p>The returned string is parsable by <a href=\"dart-core\/BigInt\/parse.html\">parse<\/a>.\nFor any <code>BigInt<\/code> <code>i<\/code>, it is guaranteed that\n<code>i == BigInt.parse(i.toString())<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Returns the least significant <code>width<\/code> bits of this big integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>new BigInt.from(-1).toUnsigned(5) == 31   \/\/ 11111111  -&gt;  00011111\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toUnsigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>255<\/code> and then wrap around to <code>0<\/code>.<\/p>\n<p>If the input fits in <code>width<\/code> bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of <code>x<\/code> is\ngiven by <code>x.bitLength<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toUnsigned(x.bitLength);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">BigInt toUnsigned(int width);<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/toUnsigned.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "toUnsigned",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Parses <code>source<\/code> as a, possibly signed, integer literal and returns its\nvalue.<\/p>\n<p>As <a href=\"dart-core\/BigInt\/parse.html\">parse<\/a> except that this method returns <code>null<\/code> if the input is not\nvalid<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt tryParse(String source, {int radix});<\/code><\/pre>\n    ",
                    "href": "dart-core\/BigInt\/tryParse.html",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "name": "tryParse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.BigInt",
                    "params": [
                        {
                            "name": "radix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the minimum number of bits required to store this big integer.<\/p>\n<p>The number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.<\/p>\n<p>To find the number of bits needed to store the value as a signed value,\nadd one, i.e. use <code>x.bitLength + 1<\/code>.<\/p>\n<pre class=\"language-dart\"><code>x.bitLength == (-x-1).bitLength\n\nnew BigInt.from(3).bitLength == 2;   \/\/ 00000011\nnew BigInt.from(2).bitLength == 2;   \/\/ 00000010\nnew BigInt.from(1).bitLength == 1;   \/\/ 00000001\nnew BigInt.from(0).bitLength == 0;   \/\/ 00000000\nnew BigInt.from(-1).bitLength == 0;  \/\/ 11111111\nnew BigInt.from(-2).bitLength == 1;  \/\/ 11111110\nnew BigInt.from(-3).bitLength == 2;  \/\/ 11111101\nnew BigInt.from(-4).bitLength == 2;  \/\/ 11111100\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get bitLength;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/bitLength.html",
                    "name": "bitLength",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Whether this big integer is even.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEven;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/isEven.html",
                    "name": "isEven",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Whether this number is negative.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNegative;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/isNegative.html",
                    "name": "isNegative",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Whether this big integer is odd.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isOdd;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/isOdd.html",
                    "name": "isOdd",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Whether this big integer can be represented as an <code>int<\/code> without losing\nprecision.<\/p>\n<p>Warning: this function may give a different result on\ndart2js, dev compiler, and the VM, due to the differences in\ninteger precision.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isValidInt;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/isValidInt.html",
                    "name": "isValidInt",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt get one;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/one.html",
                    "name": "one",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "<p>Returns the sign of this big integer.<\/p>\n<p>Returns 0 for zero, -1 for values less than zero and\n+1 for values greater than zero.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get sign;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/sign.html",
                    "name": "sign",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt get two;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/two.html",
                    "name": "two",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static BigInt get zero;<\/code><\/pre>\n        ",
                    "href": "dart-core\/BigInt\/zero.html",
                    "name": "zero",
                    "isDeprecated": false,
                    "type": "dart:core.BigInt",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.BigInt",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown by the runtime system when a cast operation fails.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/CastError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.CastError",
            "shortname": "CastError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/CastError\/CastError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CastError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.CastError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Interface used by types that have an intrinsic ordering.<\/p>\n<p>The <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> operation defines a total ordering of objects,\nwhich can be used for ordering and sorting.<\/p>\n<p>The <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> interface should be used for the natural ordering of a type.\nIf a type can be ordered in more than one way,\nand none of them is the obvious natural ordering,\nthen it might be better not to use the <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> interface,\nand to provide separate <a href=\"dart-core\/Comparator.html\">Comparator<\/a>s instead.<\/p>\n<p>It is recommended that the order of a <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> agrees\nwith its operator <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> equality (<code>a.compareTo(b) == 0<\/code> iff <code>a == b<\/code>),\nbut this is not a requirement.\nFor example, <a href=\"dart-core\/double-class.html\">double<\/a> and <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> have <code>compareTo<\/code> methods\nthat do not agree with operator <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>.\nFor doubles the <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> method is more precise than the equality,\nand for <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> it is less precise.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code> (0.0).compareTo(-0.0);  \/\/ =&gt; 1\n 0.0 == -0.0;            \/\/ =&gt; true\n var dt = new DateTime.now();\n var dt2 = dt.toUtc();\n dt == dt2;              \/\/ =&gt; false\n dt.compareTo(dt2);      \/\/ =&gt; 0\n<\/code><\/pre>\n<p>The <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a> interface does not imply the existence\nof the comparison operators <code>&lt;<\/code>, <code>&lt;=<\/code>, <code>&gt;<\/code> and <code>&gt;=<\/code>.\nThese should only be defined\nif the ordering is a less-than\/greater-than ordering,\nthat is, an ordering where you would naturally\nuse the words \"less than\" about the order of two elements.<\/p>\n<p>If the equality operator and <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> disagree,\nthe comparison operators should follow the equality operator,\nand will likely also disagree with <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a>.\nOtherwise they should match the <a href=\"dart-core\/Comparable\/compareTo.html\">compareTo<\/a> method,\nso that <code>a &lt; b<\/code> iff <code>a.compareTo(b) &lt; 0<\/code>.<\/p>\n<p>The <a href=\"dart-core\/double-class.html\">double<\/a> class defines comparison operators\nthat are compatible with equality.\nThe operators differ from <code>double.compareTo<\/code> on -0.0 and NaN.<\/p>\n<p>The <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> class has no comparison operators, instead it has the more\nprecisely named <a href=\"dart-core\/DateTime\/isBefore.html\">DateTime.isBefore<\/a> and <a href=\"dart-core\/DateTime\/isAfter.html\">DateTime.isAfter<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Comparable-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Comparable",
            "shortname": "Comparable",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Comparable\/Comparable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Comparable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Comparable",
                    "params": []
                },
                {
                    "desc": "<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> that compares one comparable to another.<\/p>\n<p>It returns the result of <code>a.compareTo(b)<\/code>.<\/p>\n<p>This utility function is used as the default comparator\nfor ordering collections, for example in the <a href=\"dart-core\/List-class.html\">List<\/a> sort function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int compare(Comparable a, Comparable b) =&gt; a.compareTo(b);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Comparable\/compare.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compare",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Comparable",
                    "params": [
                        {
                            "name": "a",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Comparable"
                        },
                        {
                            "name": "b",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Comparable"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares this object to another <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a><\/p>\n<p>Returns a value like a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> when comparing <code>this<\/code> to <code>other<\/code>.\nThat is, it returns a negative integer if <code>this<\/code> is ordered before <code>other<\/code>,\na positive integer if <code>this<\/code> is ordered after <code>other<\/code>,\nand zero if <code>this<\/code> and <code>other<\/code> are ordered together.<\/p>\n<p>The <code>other<\/code> argument must be a value that is comparable to this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(T other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Comparable\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Comparable",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Error occurring when a collection is modified during iteration.<\/p>\n<p>Some modifications may be allowed for some collections, so each collection\n(<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> or similar collection of values) should declare which operations\nare allowed during an iteration.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/ConcurrentModificationError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.ConcurrentModificationError",
            "shortname": "ConcurrentModificationError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">ConcurrentModificationError([this.modifiedObject]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/ConcurrentModificationError\/ConcurrentModificationError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ConcurrentModificationError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.ConcurrentModificationError",
                    "params": [
                        {
                            "name": "modifiedObject",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  if (modifiedObject == null) {\n    return \"Concurrent modification during iteration.\";\n  }\n  return \"Concurrent modification during iteration: \"\n      \"${Error.safeToString(modifiedObject)}.\";\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/ConcurrentModificationError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.ConcurrentModificationError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The object that was modified in an incompatible way.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object modifiedObject\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/ConcurrentModificationError\/modifiedObject.html",
                    "name": "modifiedObject",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.ConcurrentModificationError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown when a lazily initialized variable cannot be initialized.<\/p>\n<p>A static\/library variable with an initializer expression is initialized\nthe first time it is read. If evaluating the initializer expression causes\nanother read of the variable, this error is thrown.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/CyclicInitializationError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.CyclicInitializationError",
            "shortname": "CyclicInitializationError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nCyclicInitializationError([this.variableName]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/CyclicInitializationError\/CyclicInitializationError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CyclicInitializationError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.CyclicInitializationError",
                    "params": [
                        {
                            "name": "variableName",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; variableName == null\n    ? \"Reading static variable during its initialization\"\n    : \"Reading static variable '$variableName' during its initialization\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/CyclicInitializationError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.CyclicInitializationError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String variableName\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/CyclicInitializationError\/variableName.html",
                    "name": "variableName",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.CyclicInitializationError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An instant in time, such as July 20, 1969, 8:18pm GMT.<\/p>\n<p>DateTimes can represent time values that are at a distance of at most\n100,000,000 days from epoch (1970-01-01 UTC): -271821-04-20 to 275760-09-13.<\/p>\n<p>Create a DateTime object by using one of the constructors\nor by parsing a correctly formatted string,\nwhich complies with a subset of ISO 8601.\nNote that hours are specified between 0 and 23,\nas in a 24-hour clock.\nFor example:<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar berlinWallFell = new DateTime.utc(1989, 11, 9);\nvar moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");  \/\/ 8:18pm\n<\/code><\/pre>\n<p>A DateTime object is anchored either in the UTC time zone\nor in the local time zone of the current computer\nwhen the object is created.<\/p>\n<p>Once created, neither the value nor the time zone\nof a DateTime object may be changed.<\/p>\n<p>You can use properties to get\nthe individual units of a DateTime object.<\/p>\n<pre class=\"language-dart\"><code>assert(berlinWallFell.month == 11);\nassert(moonLanding.hour == 20);\n<\/code><\/pre>\n<p>For convenience and readability,\nthe DateTime class provides a constant for each day and month\nname - for example, <a href=\"dart-core\/DateTime\/august-constant.html\">august<\/a> and <a href=\"dart-core\/DateTime\/friday-constant.html\">friday<\/a>.\nYou can use these constants to improve code readability:<\/p>\n<pre class=\"language-dart\"><code>var berlinWallFell = new DateTime.utc(1989, DateTime.november, 9);\nassert(berlinWallFell.weekday == DateTime.thursday);\n<\/code><\/pre>\n<p>Day and month values begin at 1, and the week starts on Monday.\nThat is, the constants <a href=\"dart-core\/DateTime\/january-constant.html\">january<\/a> and <a href=\"dart-core\/DateTime\/monday-constant.html\">monday<\/a> are both 1.<\/p>\n<h2 id=\"working-with-utc-and-local-time\">Working with UTC and local time<\/h2>\n<p>A DateTime object is in the local time zone\nunless explicitly created in the UTC time zone.<\/p>\n<pre class=\"language-dart\"><code>var dDay = new DateTime.utc(1944, 6, 6);\n<\/code><\/pre>\n<p>Use <a href=\"dart-core\/DateTime\/isUtc.html\">isUtc<\/a> to determine whether a DateTime object is based in UTC.\nUse the methods <a href=\"dart-core\/DateTime\/toLocal.html\">toLocal<\/a> and <a href=\"dart-core\/DateTime\/toUtc.html\">toUtc<\/a>\nto get the equivalent date\/time value specified in the other time zone.\nUse <a href=\"dart-core\/DateTime\/timeZoneName.html\">timeZoneName<\/a> to get an abbreviated name of the time zone\nfor the DateTime object.\nTo find the difference\nbetween UTC and the time zone of a DateTime object\ncall <a href=\"dart-core\/DateTime\/timeZoneOffset.html\">timeZoneOffset<\/a>.<\/p>\n<h2 id=\"comparing-datetime-objects\">Comparing DateTime objects<\/h2>\n<p>The DateTime class contains several handy methods,\nsuch as <a href=\"dart-core\/DateTime\/isAfter.html\">isAfter<\/a>, <a href=\"dart-core\/DateTime\/isBefore.html\">isBefore<\/a>, and <a href=\"dart-core\/DateTime\/isAtSameMomentAs.html\">isAtSameMomentAs<\/a>,\nfor comparing DateTime objects.<\/p>\n<pre class=\"language-dart\"><code>assert(berlinWallFell.isAfter(moonLanding) == true);\nassert(berlinWallFell.isBefore(moonLanding) == false);\n<\/code><\/pre>\n<h2 id=\"using-datetime-with-duration\">Using DateTime with Duration<\/h2>\n<p>Use the <a href=\"dart-core\/DateTime\/add.html\">add<\/a> and <a href=\"dart-core\/DateTime\/subtract.html\">subtract<\/a> methods with a <a href=\"dart-core\/Duration-class.html\">Duration<\/a> object\nto create a new DateTime object based on another.\nFor example, to find the date that is sixty days (24 * 60 hours) after today,\nwrite:<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar sixtyDaysFromNow = now.add(new Duration(days: 60));\n<\/code><\/pre>\n<p>To find out how much time is between two DateTime objects use\n<a href=\"dart-core\/DateTime\/difference.html\">difference<\/a>, which returns a <a href=\"dart-core\/Duration-class.html\">Duration<\/a> object:<\/p>\n<pre class=\"language-dart\"><code>var difference = berlinWallFell.difference(moonLanding);\nassert(difference.inDays == 7416);\n<\/code><\/pre>\n<p>The difference between two dates in different time zones\nis just the number of nanoseconds between the two points in time.\nIt doesn't take calendar days into account.\nThat means that the difference between two midnights in local time may be\nless than 24 hours times the number of days between them,\nif there is a daylight saving change in between.\nIf the difference above is calculated using Australian local time, the\ndifference is 7415 days and 23 hours, which is only 7415 whole days as\nreported by <code>inDays<\/code>.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<p>See <a href=\"dart-core\/Duration-class.html\">Duration<\/a> to represent a span of time.\nSee <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> to measure timespans.<\/p>\n<p>The DateTime class does not provide internationalization.\nTo internationalize your code, use\nthe <a href=\"https:\/\/pub.dartlang.org\/packages\/intl\">intl<\/a> package.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/DateTime-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.DateTime",
            "shortname": "DateTime",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "quiver.async.Metronome"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs a <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance specified in the local time zone.<\/p>\n<p>For example,\nto create a new DateTime object representing the 7th of September 2017,\n5:30pm<\/p>\n<pre class=\"language-dart\"><code>var dentistAppointment = new DateTime(2017, 9, 7, 17, 30);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime(int year,\n    [int month = 1,\n    int day = 1,\n    int hour = 0,\n    int minute = 0,\n    int second = 0,\n    int millisecond = 0,\n    int microsecond = 0])\n    : this._internal(year, month, day, hour, minute, second, millisecond,\n          microsecond, false);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/DateTime.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "DateTime",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "day",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "hour",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "microsecond",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "millisecond",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "minute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "month",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "second",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "year",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance with <code>duration<\/code> added to <a href=\"dart-core\/DateTime-class.html\">this<\/a>.<\/p>\n<pre class=\"language-dart\"><code>var today = new DateTime.now();\nvar fiftyDaysFromNow = today.add(new Duration(days: 50));\n<\/code><\/pre>\n<p>Notice that the duration being added is actually 50 * 24 * 60 * 60\nseconds. If the resulting <code>DateTime<\/code> has a different daylight saving offset\nthan <code>this<\/code>, then the result won't have the same time-of-day as <code>this<\/code>, and\nmay not even hit the calendar date 50 days later.<\/p>\n<p>Be careful when working with dates in local time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external DateTime add(Duration duration);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares this DateTime object to <code>other<\/code>,\nreturning zero if the values are equal.<\/p>\n<p>Returns a negative value if this DateTime <a href=\"dart-core\/DateTime\/isBefore.html\">isBefore<\/a> <code>other<\/code>. It returns 0\nif it <a href=\"dart-core\/DateTime\/isAtSameMomentAs.html\">isAtSameMomentAs<\/a> <code>other<\/code>, and returns a positive value otherwise\n(when this <a href=\"dart-core\/DateTime\/isAfter.html\">isAfter<\/a> <code>other<\/code>).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external int compareTo(DateTime other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a <a href=\"dart-core\/Duration-class.html\">Duration<\/a> with the difference between <a href=\"dart-core\/DateTime-class.html\">this<\/a> and <code>other<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var berlinWallFell = new DateTime.utc(1989, DateTime.november, 9);\nvar dDay = new DateTime.utc(1944, DateTime.june, 6);\n\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n<\/code><\/pre>\n<p>The difference is measured in seconds and fractions of seconds.\nThe difference above counts the number of fractional seconds between\nmidnight at the beginning of those dates.\nIf the dates above had been in local time, not UTC, then the difference\nbetween two midnights may not be a multiple of 24 hours due to daylight\nsaving differences.<\/p>\n<p>For example, in Australia, similar code using local time instead of UTC:<\/p>\n<pre class=\"language-dart\"><code>var berlinWallFell = new DateTime(1989, DateTime.november, 9);\nvar dDay = new DateTime(1944, DateTime.june, 6);\nDuration difference = berlinWallFell.difference(dDay);\nassert(difference.inDays == 16592);\n<\/code><\/pre>\n<p>will fail because the difference is actually 16591 days and 23 hours, and\n<a href=\"dart-core\/Duration\/inDays.html\">Duration.inDays<\/a> only returns the number of whole days.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external Duration difference(DateTime other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if <a href=\"dart-core\/DateTime-class.html\">this<\/a> occurs after <code>other<\/code>.<\/p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar later = now.add(const Duration(seconds: 5));\nassert(later.isAfter(now));\nassert(!now.isBefore(now));\n\n\/\/ This relation stays the same, even when changing timezones.\nassert(later.isAfter(now.toUtc()));\nassert(later.toUtc().isAfter(now));\n\nassert(!now.toUtc().isBefore(now));\nassert(!now.isBefore(now.toUtc()));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool isAfter(DateTime other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/isAfter.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isAfter",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if <a href=\"dart-core\/DateTime-class.html\">this<\/a> occurs at the same moment as <code>other<\/code>.<\/p>\n<p>The comparison is independent of whether the time is in UTC or in the local\ntime zone.<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar later = now.add(const Duration(seconds: 5));\nassert(!later.isAtSameMomentAs(now));\nassert(now.isAtSameMomentAs(now));\n\n\/\/ This relation stays the same, even when changing timezones.\nassert(!later.isAtSameMomentAs(now.toUtc()));\nassert(!later.toUtc().isAtSameMomentAs(now));\n\nassert(now.toUtc().isAtSameMomentAs(now));\nassert(now.isAtSameMomentAs(now.toUtc()));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool isAtSameMomentAs(DateTime other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/isAtSameMomentAs.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isAtSameMomentAs",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if <a href=\"dart-core\/DateTime-class.html\">this<\/a> occurs before <code>other<\/code>.<\/p>\n<p>The comparison is independent\nof whether the time is in UTC or in the local time zone.<\/p>\n<pre class=\"language-dart\"><code>var now = new DateTime.now();\nvar earlier = now.subtract(const Duration(seconds: 5));\nassert(earlier.isBefore(now));\nassert(!now.isBefore(now));\n\n\/\/ This relation stays the same, even when changing timezones.\nassert(earlier.isBefore(now.toUtc()));\nassert(earlier.toUtc().isBefore(now));\n\nassert(!now.toUtc().isBefore(now));\nassert(!now.isBefore(now.toUtc()));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external bool isBefore(DateTime other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/isBefore.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isBefore",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.DateTime"
                        }
                    ]
                },
                {
                    "desc": "<p>Constructs a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance based on <code>formattedString<\/code>.<\/p>\n<p>The <code>formattedString<\/code> must not be <code>null<\/code>.\nThrows a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if the input string cannot be parsed.<\/p>\n<p>The function parses a subset of ISO 8601\nwhich includes the subset accepted by RFC 3339.<\/p>\n<p>The accepted inputs are currently:<\/p>\n<ul>\n<li>A date: A signed four-to-six digit year, two digit month and\ntwo digit day, optionally separated by <code>-<\/code> characters.\nExamples: \"19700101\", \"-0004-12-24\", \"81030-04-01\".<\/li>\n<li>An optional time part, separated from the date by either <code>T<\/code> or a space.\nThe time part is a two digit hour,\nthen optionally a two digit minutes value,\nthen optionally a two digit seconds value, and\nthen optionally a '.' or ',' followed by a one-to-six digit second fraction.\nThe minutes and seconds may be separated from the previous parts by a\n':'.\nExamples: \"12\", \"12:30:24.124\", \"12:30:24,124\", \"123010.50\".<\/li>\n<li>An optional time-zone offset part,\npossibly separated from the previous by a space.\nThe time zone is either 'z' or 'Z', or it is a signed two digit hour\npart and an optional two digit minute part. The sign must be either\n\"+\" or \"-\", and can not be omitted.\nThe minutes may be separated from the hours by a ':'.\nExamples: \"Z\", \"-10\", \"01:30\", \"1130\".<\/li>\n<\/ul>\n<p>This includes the output of both <a href=\"dart-core\/DateTime\/toString.html\">toString<\/a> and <a href=\"dart-core\/DateTime\/toIso8601String.html\">toIso8601String<\/a>, which\nwill be parsed back into a <code>DateTime<\/code> object with the same time as the\noriginal.<\/p>\n<p>The result is always in either local time or UTC.\nIf a time zone offset other than UTC is specified,\nthe time is converted to the equivalent UTC time.<\/p>\n<p>Examples of accepted strings:<\/p>\n<ul>\n<li><code>\"2012-02-27 13:27:00\"<\/code><\/li>\n<li><code>\"2012-02-27 13:27:00.123456z\"<\/code><\/li>\n<li><code>\"2012-02-27 13:27:00,123456z\"<\/code><\/li>\n<li><code>\"20120227 13:27:00\"<\/code><\/li>\n<li><code>\"20120227T132700\"<\/code><\/li>\n<li><code>\"20120227\"<\/code><\/li>\n<li><code>\"+20120227\"<\/code><\/li>\n<li><code>\"2012-02-27T14Z\"<\/code><\/li>\n<li><code>\"2012-02-27T14+00:00\"<\/code><\/li>\n<li>\n<code>\"-123450101 00:00:00 Z\"<\/code>: in the year -12345.<\/li>\n<li>\n<code>\"2002-02-27T14:00:00-0500\"<\/code>: Same as <code>\"2002-02-27T19:00:00Z\"<\/code>\n<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(lrn): restrict incorrect values like  2003-02-29T50:70:80.\n\/\/ Or not, that may be a breaking change.\nstatic DateTime parse(String formattedString) {\n  var re = _parseFormat;\n  Match match = re.firstMatch(formattedString);\n  if (match != null) {\n    int parseIntOrZero(String matched) {\n      if (matched == null) return 0;\n      return int.parse(matched);\n    }\n\n    \/\/ Parses fractional second digits of '.(\\d{1,6})' into the combined\n    \/\/ microseconds.\n    int parseMilliAndMicroseconds(String matched) {\n      if (matched == null) return 0;\n      int length = matched.length;\n      assert(length &gt;= 1);\n      assert(length &lt;= 6);\n\n      int result = 0;\n      for (int i = 0; i &lt; 6; i++) {\n        result *= 10;\n        if (i &lt; matched.length) {\n          result += matched.codeUnitAt(i) ^ 0x30;\n        }\n      }\n      return result;\n    }\n\n    int years = int.parse(match[1]);\n    int month = int.parse(match[2]);\n    int day = int.parse(match[3]);\n    int hour = parseIntOrZero(match[4]);\n    int minute = parseIntOrZero(match[5]);\n    int second = parseIntOrZero(match[6]);\n    bool addOneMillisecond = false;\n    int milliAndMicroseconds = parseMilliAndMicroseconds(match[7]);\n    int millisecond =\n        milliAndMicroseconds ~\/ Duration.microsecondsPerMillisecond;\n    int microsecond =\n        milliAndMicroseconds.remainder(Duration.microsecondsPerMillisecond);\n    bool isUtc = false;\n    if (match[8] != null) {\n      \/\/ timezone part\n      isUtc = true;\n      if (match[9] != null) {\n        \/\/ timezone other than 'Z' and 'z'.\n        int sign = (match[9] == '-') ? -1 : 1;\n        int hourDifference = int.parse(match[10]);\n        int minuteDifference = parseIntOrZero(match[11]);\n        minuteDifference += 60 * hourDifference;\n        minute -= sign * minuteDifference;\n      }\n    }\n    int value = _brokenDownDateToValue(years, month, day, hour, minute,\n        second, millisecond, microsecond, isUtc);\n    if (value == null) {\n      throw new FormatException(\"Time out of range\", formattedString);\n    }\n    return new DateTime._withValue(value, isUtc: isUtc);\n  } else {\n    throw new FormatException(\"Invalid date format\", formattedString);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "formattedString",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance with <code>duration<\/code> subtracted from <a href=\"dart-core\/DateTime-class.html\">this<\/a>.<\/p>\n<pre class=\"language-dart\"><code>DateTime today = new DateTime.now();\nDateTime fiftyDaysAgo = today.subtract(new Duration(days: 50));\n<\/code><\/pre>\n<p>Notice that the duration being subtracted is actually 50 * 24 * 60 * 60\nseconds. If the resulting <code>DateTime<\/code> has a different daylight saving offset\nthan <code>this<\/code>, then the result won't have the same time-of-day as <code>this<\/code>, and\nmay not even hit the calendar date 50 days earlier.<\/p>\n<p>Be careful when working with dates in local time.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external DateTime subtract(Duration duration);<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/subtract.html",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "name": "subtract",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "duration",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an ISO-8601 full-precision extended format representation.<\/p>\n<p>The format is <code>yyyy-MM-ddTHH:mm:ss.mmmuuuZ<\/code> for UTC time, and\n<code>yyyy-MM-ddTHH:mm:ss.mmmuuu<\/code> (no trailing \"Z\") for local\/non-UTC time,\nwhere:<\/p>\n<ul>\n<li>\n<code>yyyy<\/code> is a, possibly negative, four digit representation of the year,\nif the year is in the range -9999 to 9999,\notherwise it is a signed six digit representation of the year.<\/li>\n<li>\n<code>MM<\/code> is the month in the range 01 to 12,<\/li>\n<li>\n<code>dd<\/code> is the day of the month in the range 01 to 31,<\/li>\n<li>\n<code>HH<\/code> are hours in the range 00 to 23,<\/li>\n<li>\n<code>mm<\/code> are minutes in the range 00 to 59,<\/li>\n<li>\n<code>ss<\/code> are seconds in the range 00 to 59 (no leap seconds),<\/li>\n<li>\n<code>mmm<\/code> are milliseconds in the range 000 to 999, and<\/li>\n<li>\n<code>uuu<\/code> are microseconds in the range 001 to 999. If <a href=\"dart-core\/DateTime\/microsecond.html\">microsecond<\/a> equals\n0, then this part is omitted.<\/li>\n<\/ul>\n<p>The resulting string can be parsed back using <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toIso8601String() {\n  String y =\n      (year &gt;= -9999 &amp;&amp; year &lt;= 9999) ? _fourDigits(year) : _sixDigits(year);\n  String m = _twoDigits(month);\n  String d = _twoDigits(day);\n  String h = _twoDigits(hour);\n  String min = _twoDigits(minute);\n  String sec = _twoDigits(second);\n  String ms = _threeDigits(millisecond);\n  String us = microsecond == 0 ? \"\" : _threeDigits(microsecond);\n  if (isUtc) {\n    return \"$y-$m-${d}T$h:$min:$sec.$ms${us}Z\";\n  } else {\n    return \"$y-$m-${d}T$h:$min:$sec.$ms$us\";\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/toIso8601String.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toIso8601String",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>Returns this DateTime value in the local time zone.<\/p>\n<p>Returns <a href=\"dart-core\/DateTime-class.html\">this<\/a> if it is already in the local time zone.\nOtherwise this method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>new DateTime.fromMicrosecondsSinceEpoch(microsecondsSinceEpoch,\n                                        isUtc: false)\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime toLocal() {\n  if (isUtc) {\n    return new DateTime._withValue(_value, isUtc: false);\n  }\n  return this;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/toLocal.html",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "name": "toLocal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>Returns a human-readable string for this instance.<\/p>\n<p>The returned string is constructed for the time zone of this instance.\nThe <code>toString()<\/code> method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the <a href=\"https:\/\/pub.dartlang.org\/packages\/intl\">intl<\/a> package\nat the pub shared packages repo.<\/p>\n<p>The resulting string can be parsed back using <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String y = _fourDigits(year);\n  String m = _twoDigits(month);\n  String d = _twoDigits(day);\n  String h = _twoDigits(hour);\n  String min = _twoDigits(minute);\n  String sec = _twoDigits(second);\n  String ms = _threeDigits(millisecond);\n  String us = microsecond == 0 ? \"\" : _threeDigits(microsecond);\n  if (isUtc) {\n    return \"$y-$m-$d $h:$min:$sec.$ms${us}Z\";\n  } else {\n    return \"$y-$m-$d $h:$min:$sec.$ms$us\";\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>Returns this DateTime value in the UTC time zone.<\/p>\n<p>Returns <a href=\"dart-core\/DateTime-class.html\">this<\/a> if it is already in UTC.\nOtherwise this method is equivalent to:<\/p>\n<pre class=\"language-dart\"><code>new DateTime.fromMicrosecondsSinceEpoch(microsecondsSinceEpoch,\n                                        isUtc: true)\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">DateTime toUtc() {\n  if (isUtc) return this;\n  return new DateTime._withValue(_value, isUtc: true);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/toUtc.html",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "name": "toUtc",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>Constructs a new <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> instance based on <code>formattedString<\/code>.<\/p>\n<p>Works like <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a> except that this function returns <code>null<\/code>\nwhere <a href=\"dart-core\/DateTime\/parse.html\">parse<\/a> would throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static DateTime tryParse(String formattedString) {\n  \/\/ TODO: Optimize to avoid throwing.\n  try {\n    return parse(formattedString);\n  } on FormatException {\n    return null;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/tryParse.html",
                    "isDeprecated": false,
                    "type": "dart:core.DateTime",
                    "name": "tryParse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.DateTime",
                    "params": [
                        {
                            "name": "formattedString",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int april = 4\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/april-constant.html",
                    "name": "april",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int august = 8\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/august-constant.html",
                    "name": "august",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The day of the month <code>1..31<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.day == 20);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get day;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/day.html",
                    "name": "day",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int daysPerWeek = 7\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/daysPerWeek-constant.html",
                    "name": "daysPerWeek",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int december = 12\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/december-constant.html",
                    "name": "december",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int february = 2\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/february-constant.html",
                    "name": "february",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int friday = 5\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/friday-constant.html",
                    "name": "friday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/DateTime\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/DateTime\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; (_value ^ (_value &gt;&gt; 30)) &amp; 0x3FFFFFFF;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The hour of the day, expressed as in a 24-hour clock <code>0..23<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.hour == 20);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get hour;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/hour.html",
                    "name": "hour",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>True if this <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> is set to UTC time.<\/p>\n<pre class=\"language-dart\"><code>var dDay = new DateTime.utc(1944, 6, 6);\nassert(dDay.isUtc);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool isUtc\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/isUtc.html",
                    "name": "isUtc",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int january = 1\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/january-constant.html",
                    "name": "january",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int july = 7\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/july-constant.html",
                    "name": "july",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int june = 6\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/june-constant.html",
                    "name": "june",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int march = 3\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/march-constant.html",
                    "name": "march",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int may = 5\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/may-constant.html",
                    "name": "may",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The microsecond <code>0...999<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.microsecond == 0);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get microsecond;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/microsecond.html",
                    "name": "microsecond",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The number of microseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).<\/p>\n<p>This value is independent of the time zone.<\/p>\n<p>This value is at most\n8,640,000,000,000,000,000us (100,000,000 days) from the Unix epoch.\nIn other words: <code>microsecondsSinceEpoch.abs() &lt;= 8640000000000000000<\/code>.<\/p>\n<p>Note that this value does not fit into 53 bits (the size of a IEEE double).\nA JavaScript number is not able to hold this value.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get microsecondsSinceEpoch;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/microsecondsSinceEpoch.html",
                    "name": "microsecondsSinceEpoch",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The millisecond <code>0...999<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.millisecond == 0);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get millisecond;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/millisecond.html",
                    "name": "millisecond",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).<\/p>\n<p>This value is independent of the time zone.<\/p>\n<p>This value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: <code>millisecondsSinceEpoch.abs() &lt;= 8640000000000000<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get millisecondsSinceEpoch;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/millisecondsSinceEpoch.html",
                    "name": "millisecondsSinceEpoch",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The minute <code>0...59<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.minute == 18);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get minute;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/minute.html",
                    "name": "minute",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int monday = 1\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/monday-constant.html",
                    "name": "monday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The month <code>1..12<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.month == 7);\nassert(moonLanding.month == DateTime.july);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get month;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/month.html",
                    "name": "month",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int monthsPerYear = 12\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/monthsPerYear-constant.html",
                    "name": "monthsPerYear",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int november = 11\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/november-constant.html",
                    "name": "november",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int october = 10\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/october-constant.html",
                    "name": "october",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int saturday = 6\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/saturday-constant.html",
                    "name": "saturday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The second <code>0...59<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.second == 4);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get second;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/second.html",
                    "name": "second",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int september = 9\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/september-constant.html",
                    "name": "september",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int sunday = 7\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/sunday-constant.html",
                    "name": "sunday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int thursday = 4\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/thursday-constant.html",
                    "name": "thursday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The time zone name.<\/p>\n<p>This value is provided by the operating system and may be an\nabbreviation or a full name.<\/p>\n<p>In the browser or on Unix-like systems commonly returns abbreviations,\nsuch as \"CET\" or \"CEST\". On Windows returns the full name, for example\n\"Pacific Standard Time\".<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external String get timeZoneName;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/timeZoneName.html",
                    "name": "timeZoneName",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The time zone offset, which\nis the difference between local time and UTC.<\/p>\n<p>The offset is positive for time zones east of UTC.<\/p>\n<p>Note, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external Duration get timeZoneOffset;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/timeZoneOffset.html",
                    "name": "timeZoneOffset",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int tuesday = 2\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/tuesday-constant.html",
                    "name": "tuesday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int wednesday = 3\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/DateTime\/wednesday-constant.html",
                    "name": "wednesday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The day of the week <a href=\"dart-core\/DateTime\/monday-constant.html\">monday<\/a>..<a href=\"dart-core\/DateTime\/sunday-constant.html\">sunday<\/a>.<\/p>\n<p>In accordance with ISO 8601\na week starts with Monday, which has the value 1.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.weekday == 7);\nassert(moonLanding.weekday == DateTime.sunday);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get weekday;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/weekday.html",
                    "name": "weekday",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                },
                {
                    "desc": "<p>The year.<\/p>\n<pre class=\"language-dart\"><code>var moonLanding = DateTime.parse(\"1969-07-20 20:18:04Z\");\nassert(moonLanding.year == 1969);\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get year;<\/code><\/pre>\n        ",
                    "href": "dart-core\/DateTime\/year.html",
                    "name": "year",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.DateTime",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The annotation <code>@Deprecated('migration')<\/code> marks a feature as deprecated.<\/p>\n<p>The annotation <a href=\"dart-core\/deprecated-constant.html\">deprecated<\/a> is a shorthand for deprecating until\nan unspecified \"next release\" without migration instructions.<\/p>\n<p>The intent of the <code>@Deprecated<\/code> annotation is to inform users of a feature\nthat they should change their code, even if it is currently still working\ncorrectly.<\/p>\n<p>A deprecated feature is scheduled to be removed at a later time, possibly\nspecified in <a href=\"dart-core\/Deprecated\/message.html\">message<\/a>. A deprecated feature should not be used, code using\nit will break at some point in the future. If existing code is using the\nfeature it should be rewritten to not use the deprecated feature.<\/p>\n<p>A deprecated feature should document how the same effect can be achieved in\n<a href=\"dart-core\/Deprecated\/message.html\">message<\/a>, so the programmer knows how to rewrite the code.<\/p>\n<p>The <code>@Deprecated<\/code> annotation applies to libraries, top-level declarations\n(variables, getters, setters, functions, classes and typedefs),\nclass-level declarations (variables, getters, setters, methods, operators or\nconstructors, whether static or not), named optional arguments and\ntrailing optional positional parameters.<\/p>\n<p>Deprecation is transitive:<\/p>\n<ul>\n<li>If a library is deprecated, so is every member of it.<\/li>\n<li>If a class is deprecated, so is every member of it.<\/li>\n<li>If a variable is deprecated, so are its implicit getter and setter.<\/li>\n<\/ul>\n<p>A tool that processes Dart source code may report when:<\/p>\n<ul>\n<li>the code imports a deprecated library.<\/li>\n<li>the code exports a deprecated library, or any deprecated member of\n \u00a0a non-deprecated library.<\/li>\n<li>the code refers statically to a deprecated declaration.<\/li>\n<li>the code dynamically uses a member of an object with a statically known\ntype, where the member is deprecated on the static type of the object.<\/li>\n<li>the code dynamically calls a method with an argument where the\ncorresponding optional parameter is deprecated on the object's static type.<\/li>\n<\/ul>\n<p>If the deprecated use is inside a library, class or method which is itself\ndeprecated, the tool should not bother the user about it.\nA deprecated feature is expected to use other deprecated features.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Deprecated-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Deprecated",
            "shortname": "Deprecated",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a deprecation annotation which specifies the migration path and\nexpiration of the annotated feature.<\/p>\n<p>The <code>message<\/code> argument should be readable by programmers, and should state\nan alternative feature (if available) as well as when an annotated feature\nis expected to be removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Deprecated(this.message);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Deprecated\/Deprecated.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Deprecated",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Deprecated",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Deprecated feature: $message\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/Deprecated\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Deprecated",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('Use `message` instead. Will be removed in Dart 3.0.0')\nString get expires =&gt; message;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Deprecated\/expires.html",
                    "name": "expires",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Deprecated",
                    "params": []
                },
                {
                    "desc": "<p>Message provided to the user when they use the deprecated feature.<\/p>\n<p>The message should explain how to migrate away from the feature if an\nalternative is available, and when the deprecated feature is expected to be\nremoved.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/Deprecated\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Deprecated",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A span of time, such as 27 days, 4 hours, 12 minutes, and 3 seconds.<\/p>\n<p>A <code>Duration<\/code> represents a difference from one point in time to another. The\nduration may be \"negative\" if the difference is from a later time to an\nearlier.<\/p>\n<p>Durations are context independent. For example, a duration of 2 days is\nalways 48 hours, even when it is added to a <code>DateTime<\/code> just when the\ntime zone is about to do a daylight-savings switch. (See <a href=\"dart-core\/DateTime\/add.html\">DateTime.add<\/a>).<\/p>\n<p>Despite the same name, a <code>Duration<\/code> object does not implement \"Durations\"\nas specified by ISO 8601. In particular, a duration object does not keep\ntrack of the individually provided members (such as \"days\" or \"hours\"), but\nonly uses these arguments to compute the length of the corresponding time\ninterval.<\/p>\n<p>To create a new Duration object, use this class's single constructor\ngiving the appropriate arguments:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Duration fastestMarathon = new Duration(hours:2, minutes:3, seconds:2);\n<\/code><\/pre>\n<p>The <a href=\"dart-core\/Duration-class.html\">Duration<\/a> is the sum of all individual parts.\nThis means that individual parts can be larger than the next-bigger unit.\nFor example, <a href=\"dart-core\/Duration\/inMinutes.html\">inMinutes<\/a> can be greater than 59.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(fastestMarathon.inMinutes == 123);\n<\/code><\/pre>\n<p>All individual parts are allowed to be negative.<\/p>\n<p>Use one of the properties, such as <a href=\"dart-core\/Duration\/inDays.html\">inDays<\/a>,\nto retrieve the integer value of the Duration in the specified time unit.\nNote that the returned value is rounded down.\nFor example,<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Duration aLongWeekend = new Duration(hours:88);\nassert(aLongWeekend.inDays == 3);\n<\/code><\/pre>\n<p>This class provides a collection of arithmetic\nand comparison operators,\nplus a set of constants useful for converting time units.<\/p>\n<p>See <a href=\"dart-core\/DateTime-class.html\">DateTime<\/a> to represent a point in time.\nSee <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> to measure time-spans.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Duration-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Duration",
            "shortname": "Duration",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new Duration object whose value\nis the sum of all individual parts.<\/p>\n<p>Individual parts can be larger than the next-bigger unit.\nFor example, <code>hours<\/code> can be greater than 23.<\/p>\n<p>All individual parts are allowed to be negative.\nAll arguments are 0 by default.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Duration(\n    {int days: 0,\n    int hours: 0,\n    int minutes: 0,\n    int seconds: 0,\n    int milliseconds: 0,\n    int microseconds: 0})\n    : this._microseconds(microsecondsPerDay * days +\n          microsecondsPerHour * hours +\n          microsecondsPerMinute * minutes +\n          microsecondsPerSecond * seconds +\n          microsecondsPerMillisecond * milliseconds +\n          microseconds);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/Duration.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Duration",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Duration",
                    "params": [
                        {
                            "name": "days",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "hours",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "microseconds",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "milliseconds",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "minutes",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "seconds",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new <code>Duration<\/code> representing the absolute value of this\n<code>Duration<\/code>.<\/p>\n<p>The returned <code>Duration<\/code> has the same length as this one, but is always\npositive.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Duration abs() =&gt; new Duration._microseconds(_duration.abs());<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/abs.html",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "name": "abs",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Compares this <a href=\"dart-core\/Duration-class.html\">Duration<\/a> to <code>other<\/code>, returning zero if the values are equal.<\/p>\n<p>Returns a negative integer if this <code>Duration<\/code> is shorter than\n<code>other<\/code>, or a positive integer if it is longer.<\/p>\n<p>A negative <code>Duration<\/code> is always considered shorter than a positive one.<\/p>\n<p>It is always the case that <code>duration1.compareTo(duration2) &lt; 0<\/code> iff\n<code>(someDate + duration1).compareTo(someDate + duration2) &lt; 0<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(Duration other) =&gt; _duration.compareTo(other._duration);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Duration",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Duration"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this <code>Duration<\/code>.<\/p>\n<p>Returns a string with hours, minutes, seconds, and microseconds, in the\nfollowing format: <code>HH:MM:SS.mmmmmm<\/code>. For example,<\/p>\n<pre class=\"language-dart\"><code>var d = new Duration(days:1, hours:1, minutes:33, microseconds: 500);\nd.toString();  \/\/ \"25:33:00.000500\"\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String sixDigits(int n) {\n    if (n &gt;= 100000) return \"$n\";\n    if (n &gt;= 10000) return \"0$n\";\n    if (n &gt;= 1000) return \"00$n\";\n    if (n &gt;= 100) return \"000$n\";\n    if (n &gt;= 10) return \"0000$n\";\n    return \"00000$n\";\n  }\n\n  String twoDigits(int n) {\n    if (n &gt;= 10) return \"$n\";\n    return \"0$n\";\n  }\n\n  if (inMicroseconds &lt; 0) {\n    return \"-${-this}\";\n  }\n  String twoDigitMinutes = twoDigits(inMinutes.remainder(minutesPerHour));\n  String twoDigitSeconds = twoDigits(inSeconds.remainder(secondsPerMinute));\n  String sixDigitUs =\n      sixDigits(inMicroseconds.remainder(microsecondsPerSecond));\n  return \"$inHours:$twoDigitMinutes:$twoDigitSeconds.$sixDigitUs\";\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/Duration\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/Duration\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; _duration.hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int hoursPerDay = 24\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/hoursPerDay-constant.html",
                    "name": "hoursPerDay",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of whole days spanned by this Duration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inDays =&gt; _duration ~\/ Duration.microsecondsPerDay;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/inDays.html",
                    "name": "inDays",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of whole hours spanned by this Duration.<\/p>\n<p>The returned value can be greater than 23.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inHours =&gt; _duration ~\/ Duration.microsecondsPerHour;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/inHours.html",
                    "name": "inHours",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns number of whole microseconds spanned by this Duration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inMicroseconds =&gt; _duration;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/inMicroseconds.html",
                    "name": "inMicroseconds",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns number of whole milliseconds spanned by this Duration.<\/p>\n<p>The returned value can be greater than 999.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inMilliseconds =&gt; _duration ~\/ Duration.microsecondsPerMillisecond;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/inMilliseconds.html",
                    "name": "inMilliseconds",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of whole minutes spanned by this Duration.<\/p>\n<p>The returned value can be greater than 59.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inMinutes =&gt; _duration ~\/ Duration.microsecondsPerMinute;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/inMinutes.html",
                    "name": "inMinutes",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of whole seconds spanned by this Duration.<\/p>\n<p>The returned value can be greater than 59.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get inSeconds =&gt; _duration ~\/ Duration.microsecondsPerSecond;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/inSeconds.html",
                    "name": "inSeconds",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether this <code>Duration<\/code> is negative.<\/p>\n<p>A negative <code>Duration<\/code> represents the difference from a later time to an\nearlier time.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNegative =&gt; _duration &lt; 0;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Duration\/isNegative.html",
                    "name": "isNegative",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int microsecondsPerDay = microsecondsPerHour * hoursPerDay\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/microsecondsPerDay-constant.html",
                    "name": "microsecondsPerDay",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int microsecondsPerHour = microsecondsPerMinute * minutesPerHour\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/microsecondsPerHour-constant.html",
                    "name": "microsecondsPerHour",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int microsecondsPerMillisecond = 1000\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/microsecondsPerMillisecond-constant.html",
                    "name": "microsecondsPerMillisecond",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int microsecondsPerMinute =\n    microsecondsPerSecond * secondsPerMinute\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/microsecondsPerMinute-constant.html",
                    "name": "microsecondsPerMinute",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int microsecondsPerSecond =\n    microsecondsPerMillisecond * millisecondsPerSecond\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/microsecondsPerSecond-constant.html",
                    "name": "microsecondsPerSecond",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int millisecondsPerDay = millisecondsPerHour * hoursPerDay\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/millisecondsPerDay-constant.html",
                    "name": "millisecondsPerDay",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int millisecondsPerHour = millisecondsPerMinute * minutesPerHour\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/millisecondsPerHour-constant.html",
                    "name": "millisecondsPerHour",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int millisecondsPerMinute =\n    millisecondsPerSecond * secondsPerMinute\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/millisecondsPerMinute-constant.html",
                    "name": "millisecondsPerMinute",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int millisecondsPerSecond = 1000\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/millisecondsPerSecond-constant.html",
                    "name": "millisecondsPerSecond",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int minutesPerDay = minutesPerHour * hoursPerDay\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/minutesPerDay-constant.html",
                    "name": "minutesPerDay",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int minutesPerHour = 60\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/minutesPerHour-constant.html",
                    "name": "minutesPerHour",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int secondsPerDay = secondsPerHour * hoursPerDay\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/secondsPerDay-constant.html",
                    "name": "secondsPerDay",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int secondsPerHour = secondsPerMinute * minutesPerHour\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/secondsPerHour-constant.html",
                    "name": "secondsPerHour",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int secondsPerMinute = 60\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/secondsPerMinute-constant.html",
                    "name": "secondsPerMinute",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Duration zero = const Duration(seconds: 0)\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Duration\/zero-constant.html",
                    "name": "zero",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Duration",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error objects thrown in the case of a program failure.<\/p>\n<p>An <code>Error<\/code> object represents a program failure that the programmer\nshould have avoided.<\/p>\n<p>Examples include calling a function with invalid arguments,\nor even with the wrong number of arguments,\nor calling it at a time when it is not allowed.<\/p>\n<p>These are not errors that a caller should expect or catch -\nif they occur, the program is erroneous,\nand terminating the program may be the safest response.<\/p>\n<p>When deciding that a function throws an error,\nthe conditions where it happens should be clearly described,\nand they should be detectable and predictable,\nso the programmer using the function can avoid triggering the error.<\/p>\n<p>Such descriptions often uses words like\n\"must\" or \"must not\" to describe the condition,\nand if you see words like that in a function's documentation,\nthen not satisfying the requirement\nis very likely to cause an error to be thrown.<\/p>\n<p>Example (from <a href=\"dart-core\/String\/contains.html\">String.contains<\/a>):<\/p>\n<pre class=\"language-dart\"><code>   `startIndex` must not be negative or greater than `length`.\n<\/code><\/pre>\n<p>In this case, an error will be thrown if <code>startIndex<\/code> is negative\nor too large.<\/p>\n<p>If the conditions are not detectable before calling a function,\nthe called function should not throw an <code>Error<\/code>.\nIt may still throw a value,\nbut the caller will have to catch the thrown value,\neffectively making it an alternative result rather than an error.\nThe thrown object can choose to implement <a href=\"dart-core\/Exception-class.html\">Exception<\/a>\nto document that it represents an exceptional, but not erroneous, occurrence,\nbut it has no other effect than documentation.<\/p>\n<p>All non-<code>null<\/code> values can be thrown in Dart.\nObjects extending <code>Error<\/code> are handled specially:\nThe first time they are thrown,\nthe stack trace at the throw point is recorded\nand stored in the error object.\nIt can be retrieved using the <a href=\"dart-core\/Error\/stackTrace.html\">stackTrace<\/a> getter.\nAn error object that merely implements <code>Error<\/code>, and doesn't extend it,\nwill not store the stack trace automatically.<\/p>\n<p>Error objects are also used for system wide failures\nlike stack overflow or an out-of-memory situation.<\/p>\n<p>Since errors are not created to be caught,\nthere is no need for subclasses to distinguish the errors.\nInstead subclasses have been created in order to make groups\nof related errors easy to create with consistent error messages.\nFor example, the <a href=\"dart-core\/String\/contains.html\">String.contains<\/a> method will use a <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a>\nif its <code>startIndex<\/code> isn't in the range <code>0..length<\/code>,\nwhich is easily created by <code>new RangeError.range(startIndex, 0, length)<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Error-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Error",
            "shortname": "Error",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "dart:convert.JsonCyclicError",
                "dart:convert.JsonUnsupportedObjectError",
                "dart:core.AbstractClassInstantiationError",
                "dart:core.ArgumentError",
                "dart:core.AssertionError",
                "dart:core.CastError",
                "dart:core.ConcurrentModificationError",
                "dart:core.CyclicInitializationError",
                "dart:core.FallThroughError",
                "dart:core.IndexError",
                "dart:core.NoSuchMethodError",
                "dart:core.NullThrownError",
                "dart:core.RangeError",
                "dart:core.StateError",
                "dart:core.TypeError",
                "dart:core.UnimplementedError",
                "dart:core.UnsupportedError",
                "flutter_driver.DriverError",
                "foundation.FlutterError",
                "quiver.async.UnderflowError",
                "quiver.testing.equality.MatchError",
                "record_replay.NoMatchingInvocationError"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Error();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Error\/Error.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Error",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Error",
                    "params": []
                },
                {
                    "desc": "<p>Safely convert a value to a <a href=\"dart-core\/String-class.html\">String<\/a> description.<\/p>\n<p>The conversion is guaranteed to not throw, so it won't use the object's\ntoString method.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String safeToString(Object object) {\n  if (object is num || object is bool || null == object) {\n    return object.toString();\n  }\n  if (object is String) {\n    return _stringToSafeString(object);\n  }\n  return _objectToString(object);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Error\/safeToString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "safeToString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Error",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external StackTrace get stackTrace;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Error\/stackTrace.html",
                    "name": "stackTrace",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Error",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A marker interface implemented by all core library exceptions.<\/p>\n<p>An <a href=\"dart-core\/Exception-class.html\">Exception<\/a> is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.<\/p>\n<p>Creating instances of <a href=\"dart-core\/Exception-class.html\">Exception<\/a> directly with <code>new Exception(\"message\")<\/code>\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Exception-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Exception",
            "shortname": "Exception",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Exception([var message]) =&gt; new _Exception(message);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Exception\/Exception.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Exception",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Exception",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An <a href=\"dart-core\/Expando-class.html\">Expando<\/a> allows adding new properties to objects.<\/p>\n<p>Does not work on numbers, strings, booleans or null.<\/p>\n<p>An <code>Expando<\/code> does not hold on to the added property value after an object\nbecomes inaccessible.<\/p>\n<p>Since you can always create a new number that is identical to an existing\nnumber, it means that an expando property on a number could never be\nreleased. To avoid this, expando properties cannot be added to numbers.\nThe same argument applies to strings, booleans and null, which also have\nliterals that evaluate to identical values when they occur more than once.<\/p>\n<p>There is no restriction on other classes, even for compile time constant\nobjects. Be careful if adding expando properties to compile time constants,\nsince they will stay alive forever.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Expando-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Expando",
            "shortname": "Expando",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"dart-core\/Expando-class.html\">Expando<\/a>. The optional name is only used for\ndebugging purposes and creating two different <a href=\"dart-core\/Expando-class.html\">Expando<\/a>s with the\nsame name yields two <a href=\"dart-core\/Expando-class.html\">Expando<\/a>s that work on different properties\nof the objects they are used on.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external Expando([String name]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Expando\/Expando.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Expando",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Expando",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Expando toString method override.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Expando:$name\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/Expando\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Expando",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The name of the this <a href=\"dart-core\/Expando-class.html\">Expando<\/a> as passed to the constructor. If\nno name was passed to the constructor, the name is <code>null<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/Expando\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Expando",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown when control reaches the end of a switch case.<\/p>\n<p>The Dart specification requires this error to be thrown when\ncontrol reaches the end of a switch case (except the last case\nof a switch) without meeting a break or similar end of the control\nflow.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/FallThroughError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.FallThroughError",
            "shortname": "FallThroughError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">FallThroughError();<\/code><\/pre>\n    ",
                    "href": "dart-core\/FallThroughError\/FallThroughError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FallThroughError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.FallThroughError",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/FallThroughError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.FallThroughError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Exception thrown when a string or some other data does not have an expected\nformat and cannot be parsed or processed.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/FormatException-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.FormatException",
            "shortname": "FormatException",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new FormatException with an optional error <code>message<\/code>.<\/p>\n<p>Optionally also supply the actual <code>source<\/code> with the incorrect format,\nand the <code>offset<\/code> in the format where a problem was detected.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst FormatException([this.message = \"\", this.source, this.offset]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/FormatException\/FormatException.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "FormatException",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.FormatException",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "offset",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a description of the format exception.<\/p>\n<p>The description always contains the <a href=\"dart-core\/FormatException\/message.html\">message<\/a>.<\/p>\n<p>If <a href=\"dart-core\/FormatException\/source.html\">source<\/a> is present and is a string, the description will contain\n(at least a part of) the source.\nIf <a href=\"dart-core\/FormatException\/offset.html\">offset<\/a> is also provided, the part of the source included will\ncontain that offset, and the offset will be marked.<\/p>\n<p>If the source is a string and it contains a line break before offset,\nonly the line containing offset will be included, and its line number\nwill also be part of the description. Line and character offsets are\n1-based.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  String report = \"FormatException\";\n  if (message != null &amp;&amp; \"\" != message) {\n    report = \"$report: $message\";\n  }\n  int offset = this.offset;\n  Object objectSource = this.source;\n  if (objectSource is String) {\n    String source = objectSource;\n    if (offset != null &amp;&amp; (offset &lt; 0 || offset &gt; source.length)) {\n      offset = null;\n    }\n    \/\/ Source is string and offset is null or valid.\n    if (offset == null) {\n      if (source.length &gt; 78) {\n        source = source.substring(0, 75) + \"...\";\n      }\n      return \"$report\\n$source\";\n    }\n    int lineNum = 1;\n    int lineStart = 0;\n    bool previousCharWasCR = false;\n    for (int i = 0; i &lt; offset; i++) {\n      int char = source.codeUnitAt(i);\n      if (char == 0x0a) {\n        if (lineStart != i || !previousCharWasCR) {\n          lineNum++;\n        }\n        lineStart = i + 1;\n        previousCharWasCR = false;\n      } else if (char == 0x0d) {\n        lineNum++;\n        lineStart = i + 1;\n        previousCharWasCR = true;\n      }\n    }\n    if (lineNum &gt; 1) {\n      report += \" (at line $lineNum, character ${offset - lineStart + 1})\\n\";\n    } else {\n      report += \" (at character ${offset + 1})\\n\";\n    }\n    int lineEnd = source.length;\n    for (int i = offset; i &lt; source.length; i++) {\n      int char = source.codeUnitAt(i);\n      if (char == 0x0a || char == 0x0d) {\n        lineEnd = i;\n        break;\n      }\n    }\n    int length = lineEnd - lineStart;\n    int start = lineStart;\n    int end = lineEnd;\n    String prefix = \"\";\n    String postfix = \"\";\n    if (length &gt; 78) {\n      \/\/ Can't show entire line. Try to anchor at the nearest end, if\n      \/\/ one is within reach.\n      int index = offset - lineStart;\n      if (index &lt; 75) {\n        end = start + 75;\n        postfix = \"...\";\n      } else if (end - offset &lt; 75) {\n        start = end - 75;\n        prefix = \"...\";\n      } else {\n        \/\/ Neither end is near, just pick an area around the offset.\n        start = offset - 36;\n        end = offset + 36;\n        prefix = postfix = \"...\";\n      }\n    }\n    String slice = source.substring(start, end);\n    int markOffset = offset - start + prefix.length;\n    return \"$report$prefix$slice$postfix\\n${\" \" * markOffset}^\\n\";\n  } else {\n    \/\/ The source is not a string.\n    if (offset != null) {\n      report += \" (at offset $offset)\";\n    }\n    return report;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/FormatException\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.FormatException",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>A message describing the format error.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/FormatException\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.FormatException",
                    "params": []
                },
                {
                    "desc": "<p>The offset in <a href=\"dart-core\/FormatException\/source.html\">source<\/a> where the error was detected.<\/p>\n<p>A zero-based offset into the source that marks the format error causing\nthis exception to be created. If <code>source<\/code> is a string, this should be a\nstring index in the range <code>0 &lt;= offset &lt;= source.length<\/code>.<\/p>\n<p>If input is a string, the <a href=\"dart-core\/FormatException\/toString.html\">toString<\/a> method may represent this offset as\na line and character position. The offset should be inside the string,\nor at the end of the string.<\/p>\n<p>May be omitted. If present, <a href=\"dart-core\/FormatException\/source.html\">source<\/a> should also be present if possible.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int offset\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/FormatException\/offset.html",
                    "name": "offset",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.FormatException",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The base class for all function types.<\/p>\n<p>A function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of <a href=\"dart-core\/Function-class.html\">Function<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Function-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Function",
            "shortname": "Function",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Function\/Function.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Function",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Function",
                    "params": []
                },
                {
                    "desc": "<p>Dynamically call <code>function<\/code> with the specified arguments.<\/p>\n<p>Acts the same as calling function with positional arguments\ncorresponding to the elements of <code>positionalArguments<\/code> and\nnamed arguments corresponding to the elements of <code>namedArguments<\/code>.<\/p>\n<p>This includes giving the same errors if <code>function<\/code> isn't callable or\nif it expects different parameters.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>Function.apply(foo, [1,2,3], {#f: 4, #g: 5});\n<\/code><\/pre>\n<p>gives exactly the same result as<\/p>\n<pre class=\"language-dart\"><code>foo(1, 2, 3, f: 4, g: 5).\n<\/code><\/pre>\n<p>If <code>positionalArguments<\/code> is null, it's considered an empty list.\nIf <code>namedArguments<\/code> is omitted or null, it is considered an empty map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static apply(Function function, List positionalArguments,\n    [Map&lt;Symbol, dynamic&gt; namedArguments]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Function\/apply.html",
                    "isDeprecated": false,
                    "type": "<dynamic>",
                    "name": "apply",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Function",
                    "params": [
                        {
                            "name": "function",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Function"
                        },
                        {
                            "name": "namedArguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map<dart:core.Symbol>"
                        },
                        {
                            "name": "positionalArguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a hash code value that is compatible with <code>operator==<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Function\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Function",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A specialized <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> used when an index is not in the range\n<code>0..indexable.length-1<\/code>.<\/p>\n<p>Also contains the indexable object, its length at the time of the error,\nand the invalid index itself.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/IndexError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.IndexError",
            "shortname": "IndexError",
            "extends": [
                "dart:core.ArgumentError",
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"dart-core\/IndexError-class.html\">IndexError<\/a> stating that <code>invalidValue<\/code> is not a valid index\ninto <code>indexable<\/code>.<\/p>\n<p>The <code>length<\/code> is the length of <code>indexable<\/code> at the time of the error.\nIf <code>length<\/code> is omitted, it defaults to <code>indexable.length<\/code>.<\/p>\n<p>The message is used as part of the string representation of the error.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IndexError(int invalidValue, dynamic indexable,\n    [String name, String message, int length])\n    : this.indexable = indexable,\n      this.length = length ?? indexable.length,\n      super.value(invalidValue, name,\n          (message != null) ? message : \"Index out of range\");<\/code><\/pre>\n    ",
                    "href": "dart-core\/IndexError\/IndexError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IndexError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.IndexError",
                    "params": [
                        {
                            "name": "indexable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "invalidValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The maximum value that <a href=\"dart-core\/RangeError\/RangeError.value.html\">value<\/a> is allowed to assume.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get end =&gt; length - 1;<\/code><\/pre>\n        ",
                    "href": "dart-core\/IndexError\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.IndexError",
                    "params": []
                },
                {
                    "desc": "<p>The length of <a href=\"dart-core\/IndexError\/indexable.html\">indexable<\/a> at the time of the error.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int length\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/IndexError\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.IndexError",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value that <a href=\"dart-core\/RangeError\/RangeError.value.html\">value<\/a> is allowed to assume.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get start =&gt; 0;<\/code><\/pre>\n        ",
                    "href": "dart-core\/IndexError\/start.html",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.IndexError",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/IntegerDivisionByZeroException-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.IntegerDivisionByZeroException",
            "shortname": "IntegerDivisionByZeroException",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst IntegerDivisionByZeroException();<\/code><\/pre>\n    ",
                    "href": "dart-core\/IntegerDivisionByZeroException\/IntegerDivisionByZeroException.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IntegerDivisionByZeroException",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.IntegerDivisionByZeroException",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"IntegerDivisionByZeroException\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/IntegerDivisionByZeroException\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.IntegerDivisionByZeroException",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Representation of the invocation of a member on an object.<\/p>\n<p>This is the type of objects passed to <a href=\"dart-core\/Object\/noSuchMethod.html\">Object.noSuchMethod<\/a> when\nan object doesn't support the member invocation that was attempted\non it.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Invocation-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Invocation",
            "shortname": "Invocation",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Invocation();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Invocation\/Invocation.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Invocation",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether the invocation was a getter or a setter call.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAccessor =&gt; isGetter || isSetter;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/isAccessor.html",
                    "name": "isAccessor",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>Whether the invocation was a getter call.\nIf so, all three types of arguments lists are empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isGetter;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/isGetter.html",
                    "name": "isGetter",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>Whether the invocation was a method call.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMethod;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/isMethod.html",
                    "name": "isMethod",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>Whether the invocation was a setter call.<\/p>\n<p>If so, <a href=\"dart-core\/Invocation\/positionalArguments.html\">positionalArguments<\/a> has exactly one positional\nargument, <a href=\"dart-core\/Invocation\/namedArguments.html\">namedArguments<\/a> is empty, and typeArguments is\nempty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isSetter;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/isSetter.html",
                    "name": "isSetter",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>The name of the invoked member.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Symbol get memberName;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/memberName.html",
                    "name": "memberName",
                    "isDeprecated": false,
                    "type": "dart:core.Symbol",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>An unmodifiable view of the named arguments of the call.<\/p>\n<p>If the member is a getter, setter or operator,\nthe named arguments map is always empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;Symbol, dynamic&gt; get namedArguments;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/namedArguments.html",
                    "name": "namedArguments",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.Symbol>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>An unmodifiable view of the positional arguments of the call.<\/p>\n<p>If the member is a getter, the positional arguments list is\nalways empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;dynamic&gt; get positionalArguments;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/positionalArguments.html",
                    "name": "positionalArguments",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                },
                {
                    "desc": "<p>An unmodifiable view of the type arguments of the call.<\/p>\n<p>If the member is a getter, setter or operator,\nthe type argument list is always empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;Type&gt; get typeArguments =&gt; const &lt;Type&gt;[];<\/code><\/pre>\n        ",
                    "href": "dart-core\/Invocation\/typeArguments.html",
                    "name": "typeArguments",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.Type>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Invocation",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A collection of values, or \"elements\", that can be accessed sequentially.<\/p>\n<p>The elements of the iterable are accessed by getting an <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a>\nusing the <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> getter, and using it to step through the values.\nStepping with the iterator is done by calling <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>,\nand if the call returns <code>true<\/code>,\nthe iterator has now moved to the next element,\nwhich is then available as <a href=\"dart-core\/Iterator\/current.html\">Iterator.current<\/a>.\nIf the call returns <code>false<\/code>, there are no more elements,\nand <code>iterator.current<\/code> returns <code>null<\/code>.<\/p>\n<p>You can create more than one iterator from the same <code>Iterable<\/code>.\nEach time <code>iterator<\/code> is read, it returns a new iterator,\nand different iterators can be stepped through independently,\neach giving access to all the elements of the iterable.\nThe iterators of the same iterable <em>should<\/em> provide the same values\nin the same order (unless the underlying collection is modified between\nthe iterations, which some collections allow).<\/p>\n<p>You can also iterate over the elements of an <code>Iterable<\/code>\nusing the for-in loop construct, which uses the <code>iterator<\/code> getter behind the\nscenes.\nFor example, you can iterate over all of the keys of a <a href=\"dart-core\/Map-class.html\">Map<\/a>,\nbecause <code>Map<\/code> keys are iterable.<\/p>\n<pre class=\"language-dart\"><code>Map kidsBooks = {'Matilda': 'Roald Dahl',\n                 'Green Eggs and Ham': 'Dr Seuss',\n                 'Where the Wild Things Are': 'Maurice Sendak'};\nfor (var book in kidsBooks.keys) {\n  print('$book was written by ${kidsBooks[book]}');\n}\n<\/code><\/pre>\n<p>The <a href=\"dart-core\/List-class.html\">List<\/a> and <a href=\"dart-core\/Set-class.html\">Set<\/a> classes are both <code>Iterable<\/code>,\nas are most classes in the <code>dart:collection<\/code> library.<\/p>\n<p>Some <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> collections can be modified.\nAdding an element to a <code>List<\/code> or <code>Set<\/code> will change which elements it\ncontains, and adding a new key to a <code>Map<\/code> changes the elements of <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a>.\nIterators created after the change will provide the new elements, and may\nor may not preserve the order of existing elements\n(for example, a <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> may completely change its order when a single\nelement is added).<\/p>\n<p>Changing a collection <em>while<\/em> it is being iterated\nis generally <em>not<\/em> allowed.\nDoing so will break the iteration, which is typically signalled\nby throwing a <a href=\"dart-core\/ConcurrentModificationError-class.html\">ConcurrentModificationError<\/a>\nthe next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called.\nThe current value of <a href=\"dart-core\/Iterator\/current.html\">Iterator.current<\/a> getter\nshould not be affected by the change in the collection,\nthe <code>current<\/code> value was set by the previous call to <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a>.<\/p>\n<p>Some iterables compute their elements dynamically every time they are\niterated, like the one returned by <a href=\"dart-core\/Iterable\/Iterable.generate.html\">Iterable.generate<\/a> or the iterable\nreturned by a <code>sync*<\/code> generator function. If the computation doesn't depend\non other objects that may change, then the generated sequence should be\nthe same one every time it's iterated.<\/p>\n<p>The members of <code>Iterable<\/code>, other than <code>iterator<\/code> itself,\nwork by looking at the elements of the iterable.\nThis can be implemented by running through the <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>, but some classes\nmay have more efficient ways of finding the result\n(like <a href=\"dart-core\/Iterable\/last.html\">last<\/a> or <a href=\"dart-core\/Iterable\/length.html\">length<\/a> on a <a href=\"dart-core\/List-class.html\">List<\/a>, or <a href=\"dart-core\/Iterable\/contains.html\">contains<\/a> on a <a href=\"dart-core\/Set-class.html\">Set<\/a>).<\/p>\n<p>The methods that return another <code>Iterable<\/code> (like <a href=\"dart-core\/Iterable\/map.html\">map<\/a> and <a href=\"dart-core\/Iterable\/where.html\">where<\/a>)\nare all <em>lazy<\/em> - they will iterate the original (as necessary)\nevery time the returned iterable is iterated, and not before.<\/p>\n<p>Since an iterable may be iterated more than once, it's not recommended to\nhave detectable side-effects in the iterator.\nFor methods like <a href=\"dart-core\/Iterable\/map.html\">map<\/a> and <a href=\"dart-core\/Iterable\/where.html\">where<\/a>, the returned iterable will execute the\nargument function on every iteration, so those functions should also not\nhave side effects.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Iterable-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Iterable",
            "shortname": "Iterable",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "collection.CombinedIterableView",
                "collection.IterableZip",
                "dart:collection.DoubleLinkedQueue",
                "dart:collection.LinkedList",
                "dart:collection.ListQueue",
                "dart:core.Runes",
                "dart:ui.PathMetrics",
                "foundation.CachingIterable",
                "foundation.IterableProperty",
                "foundation.ObserverList",
                "path.PathSet",
                "quiver.collection.AvlTreeSet",
                "quiver.core.Optional",
                "quiver.iterables.EnumerateIterable",
                "quiver.iterables.GeneratingIterable"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Iterable();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/Iterable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Iterable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Checks whether any element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>true<\/code> if\nany of them make <code>test<\/code> return <code>true<\/code>, otherwise returns false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool any(bool test(E element)) {\n  for (E element in this) {\n    if (test(element)) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/any.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "any",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this iterable as an iterable of <code>R<\/code> instances.<\/p>\n<p>If this iterable only contains instances of <code>R<\/code>, all operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>When the returned iterable creates a new object that depends on\nthe type <code>R<\/code>, e.g., from <a href=\"dart-core\/Iterable\/toList.html\">toList<\/a>, it will have exactly the type <code>R<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;R&gt; cast&lt;R&gt;() =&gt; Iterable.castFrom&lt;E, R&gt;(this);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Adapts <code>source<\/code> to be an <code>Iterable&lt;T&gt;<\/code>.<\/p>\n<p>Any time the iterable would produce an element that is not a <code>T<\/code>,\nthe element access will throw. If all elements of <code>source<\/code> are actually\ninstances of <code>T<\/code>, or if only elements that are actually instances of <code>T<\/code>\nare accessed, then the resulting iterable can be used as an <code>Iterable&lt;T&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Iterable&lt;T&gt; castFrom&lt;S, T&gt;(Iterable&lt;S&gt; source) =&gt;\n    new CastIterable&lt;S, T&gt;(source);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/castFrom.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "castFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if the collection contains an element equal to <code>element<\/code>.<\/p>\n<p>This operation will check each element in order for being equal to\n<code>element<\/code>, unless it has a more efficient way to find an element\nequal to <code>element<\/code>.<\/p>\n<p>The equality used to determine whether <code>element<\/code> is equal to an element of\nthe iterable defaults to the <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a> of the element.<\/p>\n<p>Some types of iterable may have a different equality used for its elements.\nFor example, a <a href=\"dart-core\/Set-class.html\">Set<\/a> may have a custom equality\n(see <a href=\"dart-core\/Set\/Set.identity.html\">Set.identity<\/a>) that its <code>contains<\/code> uses.\nLikewise the <code>Iterable<\/code> returned by a <a href=\"dart-core\/Map\/keys.html\">Map.keys<\/a> call\nshould use the same equality that the <code>Map<\/code> uses for keys.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object element) {\n  for (E e in this) {\n    if (e == element) return true;\n  }\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"dart-core\/Iterable\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E elementAt(int index) {\n  ArgumentError.checkNotNull(index, \"index\");\n  RangeError.checkNotNegative(index, \"index\");\n  int elementIndex = 0;\n  for (E element in this) {\n    if (index == elementIndex) return element;\n    elementIndex++;\n  }\n  throw new RangeError.index(index, this, \"index\", null, elementIndex);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/elementAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "elementAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Checks whether every element of this iterable satisfies <code>test<\/code>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <code>test<\/code> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool test(E element)) {\n  for (E element in this) {\n    if (!test(element)) return false;\n  }\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/every.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "every",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Expands each element of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> into zero or more elements.<\/p>\n<p>The resulting Iterable runs through the elements returned\nby <code>f<\/code> for each element of this, in iteration order.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is lazy, and calls <code>f<\/code> for each element\nof this every time it's iterated.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var pairs = [[1, 2], [3, 4]];\nvar flattened = pairs.expand((pair) =&gt; pair).toList();\nprint(flattened); \/\/ =&gt; [1, 2, 3, 4];\n\nvar input = [1, 2, 3];\nvar duplicated = input.expand((i) =&gt; [i, i]).toList();\nprint(duplicated); \/\/ =&gt; [1, 1, 2, 2, 3, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; expand&lt;T&gt;(Iterable&lt;T&gt; f(E element)) =&gt;\n    new ExpandIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/expand.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "expand",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>Iterates through elements and returns the first to satisfy <code>test<\/code>.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E firstWhere(bool test(E element), {E orElse()}) {\n  for (E element in this) {\n    if (test(element)) return element;\n  }\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/firstWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "firstWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T fold&lt;T&gt;(T initialValue, T combine(T previousValue, E element)) {\n  var value = initialValue;\n  for (E element in this) value = combine(value, element);\n  return value;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/fold.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "fold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "initialValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "previousValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the lazy concatentation of this iterable and <code>other<\/code>.<\/p>\n<p>The returned iterable will provide the same elements as this iterable,\nand, after that, the elements of <code>other<\/code>, in the same order as in the\noriginal iterables.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; followedBy(Iterable&lt;E&gt; other) {\n  if (this is EfficientLengthIterable&lt;E&gt;) {\n    return new FollowedByIterable&lt;E&gt;.firstEfficient(this, other);\n  }\n  return new FollowedByIterable&lt;E&gt;(this, other);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/followedBy.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "followedBy",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(E element)) {\n  for (E element in this) f(element);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-core\/Iterable\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = \"\"]) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) return \"\";\n  StringBuffer buffer = new StringBuffer();\n  if (separator == null || separator == \"\") {\n    do {\n      buffer.write(\"${iterator.current}\");\n    } while (iterator.moveNext());\n  } else {\n    buffer.write(\"${iterator.current}\");\n    while (iterator.moveNext()) {\n      buffer.write(separator);\n      buffer.write(\"${iterator.current}\");\n    }\n  }\n  return buffer.toString();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/join.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "join",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lastWhere(bool test(E element), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/lastWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lastWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with elements that are created by\ncalling <code>f<\/code> on each element of this <code>Iterable<\/code> in iteration order.<\/p>\n<p>This method returns a view of the mapped elements. As long as the\nreturned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over, the supplied function <code>f<\/code> will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> will invoke the supplied\nfunction <code>f<\/code> multiple times on the same element.<\/p>\n<p>Methods on the returned iterable are allowed to omit calling <code>f<\/code>\non any element where the result isn't needed.\nFor example, <a href=\"dart-core\/Iterable\/elementAt.html\">elementAt<\/a> may call <code>f<\/code> only once.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; map&lt;T&gt;(T f(E e)) =&gt; new MappedIterable&lt;E, T&gt;(this, f);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "e",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E reduce(E combine(E value, E element)) {\n  Iterator&lt;E&gt; iterator = this.iterator;\n  if (!iterator.moveNext()) {\n    throw IterableElementError.noElement();\n  }\n  E value = iterator.current;\n  while (iterator.moveNext()) {\n    value = combine(value, iterator.current);\n  }\n  return value;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/reduce.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "reduce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E singleWhere(bool test(E element), {E orElse()}) {\n  E result;\n  bool foundMatching = false;\n  for (E element in this) {\n    if (test(element)) {\n      if (foundMatching) {\n        throw IterableElementError.tooMany();\n      }\n      result = element;\n      foundMatching = true;\n    }\n  }\n  if (foundMatching) return result;\n  if (orElse != null) return orElse();\n  throw IterableElementError.noElement();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/singleWhere.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "singleWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that provides all but the first <code>count<\/code> elements.<\/p>\n<p>When the returned iterable is iterated, it starts iterating over <code>this<\/code>,\nfirst skipping past the initial <code>count<\/code> elements.\nIf <code>this<\/code> has fewer than <code>count<\/code> elements, then the resulting Iterable is\nempty.\nAfter that, the remaining elements are iterated in the same order as\nin this iterable.<\/p>\n<p>Some iterables may be able to find later elements without first iterating\nthrough earlier elements, for example when iterating a <a href=\"dart-core\/List-class.html\">List<\/a>.\nSuch iterables are allowed to ignore the initial skipped elements.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skip(int count) {\n  return new SkipIterable&lt;E&gt;(this, count);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/skip.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skip",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "count",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <code>Iterable<\/code> that skips leading elements while <code>test<\/code> is satisfied.<\/p>\n<p>The filtering happens lazily. Every new <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> of the returned\niterable iterates over all elements of <code>this<\/code>.<\/p>\n<p>The returned iterable provides elements by iterating this iterable,\nbut skipping over all initial elements where <code>test(element)<\/code> returns\ntrue. If all elements satisfy <code>test<\/code> the resulting iterable is empty,\notherwise it iterates the remaining elements in their original order,\nstarting with the first element for which <code>test(element)<\/code> returns <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; skipWhile(bool test(E value)) {\n  return new SkipWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/skipWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "skipWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the <code>count<\/code> first elements of this iterable.<\/p>\n<p>The returned <code>Iterable<\/code> may contain fewer than <code>count<\/code> elements, if <code>this<\/code>\ncontains fewer than <code>count<\/code> elements.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> until <code>count<\/code>\nelements have been seen.<\/p>\n<p>The <code>count<\/code> must not be negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; take(int count) {\n  return new TakeIterable&lt;E&gt;(this, count);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/take.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "take",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "count",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a lazy iterable of the leading elements satisfying <code>test<\/code>.<\/p>\n<p>The filtering happens lazily. Every new iterator of the returned\niterable starts iterating over the elements of <code>this<\/code>.<\/p>\n<p>The elements can be computed by stepping through <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a> until an\nelement is found where <code>test(element)<\/code> is false. At that point,\nthe returned iterable stops (its <code>moveNext()<\/code> returns false).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; takeWhile(bool test(E value)) {\n  return new TakeWhileIterable&lt;E&gt;(this, test);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/takeWhile.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "takeWhile",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; toList({bool growable: true}) {\n  return new List&lt;E&gt;.from(this, growable: growable);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "growable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet() =&gt; new Set&lt;E&gt;.from(this);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of (some of) the elements of <code>this<\/code>.<\/p>\n<p>Elements are represented by their own <code>toString<\/code> results.<\/p>\n<p>The default representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.<\/p>\n<p>If the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.<\/p>\n<p>The conversion may omit calling <code>toString<\/code> on some elements if they\nare known to not occur in the output, and it may stop iterating after\na hundred elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; IterableBase.iterableToShortString(this, '(', ')');<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that satisfy the\npredicate <code>test<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nAs long as the returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> is not iterated over,\nthe supplied function <code>test<\/code> will not be invoked.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may invoke the supplied\nfunction <code>test<\/code> multiple times on the same element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; where(bool test(E element)) =&gt; new WhereIterable&lt;E&gt;(this, test);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/where.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "where",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new lazy <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> with all elements that have type <code>T<\/code>.<\/p>\n<p>The matching elements have the same order in the returned iterable\nas they have in <a href=\"dart-core\/Iterable\/iterator.html\">iterator<\/a>.<\/p>\n<p>This method returns a view of the mapped elements.\nIterating will not cache results, and thus iterating multiple times over\nthe returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> may yield different results,\nif the underlying elements change between iterations.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;T&gt; whereType&lt;T&gt;() =&gt; new WhereTypeIterable&lt;T&gt;(this);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterable\/whereType.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "whereType",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; !iterator.moveNext();<\/code><\/pre>\n        ",
                    "href": "dart-core\/Iterable\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Iterable\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Iterable\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"dart-core\/Iterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length {\n  assert(this is! EfficientLengthIterable);\n  int count = 0;\n  Iterator it = iterator;\n  while (it.moveNext()) {\n    count++;\n  }\n  return count;\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/Iterable\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Iterable",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interface for getting items, one at a time, from an object.<\/p>\n<p>The for-in construct transparently uses <code>Iterator<\/code> to test for the end\nof the iteration, and to get each item (or <em>element<\/em>).<\/p>\n<p>If the object iterated over is changed during the iteration, the\nbehavior is unspecified.<\/p>\n<p>The <code>Iterator<\/code> is initially positioned before the first element.\nBefore accessing the first element the iterator must thus be advanced using\n<a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> to point to the first element.\nIf no element is left, then <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> returns false, <a href=\"dart-core\/Iterator\/current.html\">current<\/a>\nreturns <code>null<\/code>, and all further calls to <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> will also return false.<\/p>\n<p>A typical usage of an Iterator looks as follows:<\/p>\n<pre class=\"language-dart\"><code>var it = obj.iterator;\nwhile (it.moveNext()) {\n  use(it.current);\n}\n<\/code><\/pre>\n<p><strong>See also:<\/strong>\n<a href=\"http:\/\/www.dartlang.org\/docs\/dart-up-and-running\/contents\/ch03.html#iteration\">Iteration<\/a>\nin the <a href=\"http:\/\/www.dartlang.org\/docs\/dart-up-and-running\/contents\/ch03.html\">library tour<\/a><\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Iterator-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Iterator",
            "shortname": "Iterator",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "quiver.iterables.EnumerateIterator"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Iterator\/Iterator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Iterator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Iterator",
                    "params": []
                },
                {
                    "desc": "<p>Moves to the next element.<\/p>\n<p>Returns true if <a href=\"dart-core\/Iterator\/current.html\">current<\/a> contains the next element.\nReturns false if no elements are left.<\/p>\n<p>It is safe to invoke <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> even when the iterator is already\npositioned after the last element.\nIn this case <a href=\"dart-core\/Iterator\/moveNext.html\">moveNext<\/a> returns false again and has no effect.<\/p>\n<p>A call to <code>moveNext<\/code> may throw if iteration has been broken by\nchanging the underlying collection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool moveNext();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Iterator\/moveNext.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "moveNext",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Iterator",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An indexable collection of objects with a length.<\/p>\n<p>Subclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:<\/p>\n<ul>\n<li>\n<p>Fixed-length list.\nAn error occurs when attempting to use operations\nthat can change the length of the list.<\/p>\n<\/li>\n<li>\n<p>Growable list. Full implementation of the API defined in this class.<\/p>\n<\/li>\n<\/ul>\n<p>The default growable list, as returned by <code>new List()<\/code> or <code>[]<\/code>, keeps\nan internal buffer, and grows that buffer when necessary. This guarantees\nthat a sequence of <a href=\"dart-core\/List\/add.html\">add<\/a> operations will each execute in amortized constant\ntime. Setting the length directly may take time proportional to the new\nlength, and may change the internal capacity so that a following add\noperation will need to immediately increase the buffer capacity.\nOther list implementations may have different performance behavior.<\/p>\n<p>The following code illustrates that some List implementations support\nonly a subset of the API.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; fixedLengthList = new List(5);\nfixedLengthList.length = 0;  \/\/ Error\nfixedLengthList.add(499);    \/\/ Error\nfixedLengthList[0] = 87;\nList&lt;int&gt; growableList = [1, 2];\ngrowableList.length = 0;\ngrowableList.add(499);\ngrowableList[0] = 87;\n<\/code><\/pre>\n<p>Lists are <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices\u2014that is, changing the list's length\u2014between iteration\nsteps causes a <a href=\"dart-core\/ConcurrentModificationError-class.html\">ConcurrentModificationError<\/a>. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.<\/p>\n<p>It is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to <a href=\"dart-core\/Iterable\/forEach.html\">forEach<\/a> or <a href=\"dart-core\/List\/sort.html\">sort<\/a>.\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that is backed by the list, will\nbreak the iteration.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/List-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.List",
            "shortname": "List",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "async.StreamZip",
                "collection.IterableZip",
                "convert.ByteAccumulatorSink",
                "convert.HexCodec",
                "convert.HexDecoder",
                "convert.HexEncoder",
                "convert.PercentCodec",
                "convert.PercentDecoder",
                "convert.PercentEncoder",
                "crypto.Hmac",
                "crypto.MD5",
                "crypto.Sha1",
                "crypto.Sha256",
                "dart:convert.AsciiCodec",
                "dart:convert.AsciiDecoder",
                "dart:convert.AsciiEncoder",
                "dart:convert.Base64Codec",
                "dart:convert.Base64Decoder",
                "dart:convert.Base64Encoder",
                "dart:convert.JsonUtf8Encoder",
                "dart:convert.Latin1Codec",
                "dart:convert.Latin1Decoder",
                "dart:convert.Latin1Encoder",
                "dart:convert.Utf8Codec",
                "dart:convert.Utf8Decoder",
                "dart:convert.Utf8Encoder",
                "dart:io.GZipCodec",
                "dart:io.Stdin",
                "dart:io.SystemEncoding",
                "dart:io.ZLibCodec",
                "dart:io.ZLibDecoder",
                "dart:io.ZLibEncoder"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a list of the given length.<\/p>\n<p>The created list is fixed-length if <code>length<\/code> is provided.<\/p>\n<pre class=\"language-dart\"><code>List fixedLengthList = new List(3);\nfixedLengthList.length;     \/\/ 3\nfixedLengthList.length = 1; \/\/ Error\n<\/code><\/pre>\n<p>The list has length 0 and is growable if <code>length<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List growableList = new List();\ngrowableList.length; \/\/ 0;\ngrowableList.length = 3;\n<\/code><\/pre>\n<p>To create a growable list with a given length, just assign the length\nright after creation:<\/p>\n<pre class=\"language-dart\"><code>List growableList = new List()..length = 500;\n<\/code><\/pre>\n<p>The <code>length<\/code> must not be negative or null, if it is provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory List([int length]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/List.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "List",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the end of this list,\nextending the length by one.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(E value);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Appends all objects of <code>iterable<\/code> to the end of this list.<\/p>\n<p>Extends the length of the list by the number of objects in <code>iterable<\/code>.\nThrows an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an unmodifiable <a href=\"dart-core\/Map-class.html\">Map<\/a> view of <code>this<\/code>.<\/p>\n<p>The map uses the indices of this list as keys and the corresponding objects\nas values. The <code>Map.keys<\/code> <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> iterates the indices of this list\nin numerical order.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; words = ['fee', 'fi', 'fo', 'fum'];\nMap&lt;int, String&gt; map = words.asMap();\nmap[0] + map[1];   \/\/ 'feefi';\nmap.keys.toList(); \/\/ [0, 1, 2, 3]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;int, E&gt; asMap();<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/asMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.int>",
                    "name": "asMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": []
                },
                {
                    "desc": "<p>Returns a view of this list as a list of <code>R<\/code> instances.<\/p>\n<p>If this list contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the list (e.g., by using <a href=\"dart-core\/List\/add.html\">add<\/a> or <a href=\"dart-core\/List\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis list as well.<\/p>\n<p>Typically implemented as <code>List.castFrom&lt;E, R&gt;(this)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;R&gt; cast&lt;R&gt;();<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": []
                },
                {
                    "desc": "<p>Adapts <code>source<\/code> to be a <code>List&lt;T&gt;<\/code>.<\/p>\n<p>Any time the list would produce an element that is not a <code>T<\/code>,\nthe element access will throw.<\/p>\n<p>Any time a <code>T<\/code> value is attempted stored into the adapted list,\nthe store will throw unless the value is also an instance of <code>S<\/code>.<\/p>\n<p>If all accessed elements of <code>source<\/code> are actually instances of <code>T<\/code>,\nand if all elements stored into the returned list are actually instance\nof <code>S<\/code>,\nthen the returned list can be used as a <code>List&lt;T&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;T&gt; castFrom&lt;S, T&gt;(List&lt;S&gt; source) =&gt; new CastList&lt;S, T&gt;(source);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/castFrom.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "castFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list;\nthe length of the list becomes zero.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>, and retains all objects, if this\nis a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": []
                },
                {
                    "desc": "<p>Copy a range of one list into another list.<\/p>\n<p>This is a utility function that can be used to implement methods like\n<a href=\"dart-core\/List\/setRange.html\">setRange<\/a>.<\/p>\n<p>The range from <code>start<\/code> to <code>end<\/code> must be a valid range of <code>source<\/code>,\nand there must be room for <code>end - start<\/code> elements from position <code>at<\/code>.\nIf <code>start<\/code> is omitted, it defaults to zero.\nIf <code>end<\/code> is omitted, it defaults to <code>source.length<\/code>.<\/p>\n<p>If <code>source<\/code> and <code>target<\/code> is the same list, overlapping source and target\nranges are respected so that the target range ends up containing the\ninitial content of the source range.\nOtherwise the order of element copying is not guaranteed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void copyRange&lt;T&gt;(List&lt;T&gt; target, int at, List&lt;T&gt; source,\n    [int start, int end]) {\n  start ??= 0;\n  end = RangeError.checkValidRange(start, end, source.length);\n  int length = end - start;\n  if (target.length &lt; at + length) {\n    throw new ArgumentError.value(target, \"target\",\n        \"Not big enough to hold $length elements at position $at\");\n  }\n  if (!identical(source, target) || start &gt;= at) {\n    for (int i = 0; i &lt; length; i++) {\n      target[at + i] = source[start + i];\n    }\n  } else {\n    for (int i = length; --i &gt;= 0;) {\n      target[at + i] = source[start + i];\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/copyRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "copyRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "at",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "target",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                },
                {
                    "desc": "<p>Sets the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nto the given <code>fillValue<\/code>.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void fillRange(int start, int end, [E fillValue]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/fillRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "fillRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "fillValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that iterates over the objects in the range\n<code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid at the time\nof the call.<\/p>\n<p>A range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The returned <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> behaves like <code>skip(start).take(end - start)<\/code>.\nThat is, it does <em>not<\/em> throw if this list changes size.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; colors = ['red', 'green', 'blue', 'orange', 'pink'];\nIterable&lt;String&gt; range = colors.getRange(1, 4);\nrange.join(', ');  \/\/ 'green, blue, orange'\ncolors.length = 3;\nrange.join(', ');  \/\/ 'green, blue'\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; getRange(int start, int end);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/getRange.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "name": "getRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexOf('re');    \/\/ 1\nnotes.indexOf('re', 2); \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexOf('fa');    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(E element, [int start = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/indexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to the end of the list.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.indexWhere((note) =&gt; note.startsWith('r'));       \/\/ 1\nnotes.indexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.indexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexWhere(bool test(E element), [int start = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/indexWhere.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts the object at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insert(int index, E element);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/insert.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insert",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Inserts all objects of <code>iterable<\/code> at position <code>index<\/code> in this list.<\/p>\n<p>This increases the length of the list by the length of <code>iterable<\/code> and\nshifts all later objects towards the end of the list.<\/p>\n<p>An error occurs if the <code>index<\/code> is less than 0 or greater than length.\nAn <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void insertAll(int index, Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/insertAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "insertAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last index of <code>element<\/code> in this list.<\/p>\n<p>Searches the list backwards from index <code>start<\/code> to 0.<\/p>\n<p>The first time an object <code>o<\/code> is encountered so that <code>o == element<\/code>,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexOf('re', 2); \/\/ 1\n<\/code><\/pre>\n<p>If <code>start<\/code> is not provided, this method searches from the end of the\nlist.\/Returns<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('re');  \/\/ 3\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexOf('fa');  \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(E element, [int start]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/lastIndexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last index in the list that satisfies the provided <code>test<\/code>.<\/p>\n<p>Searches the list from index <code>start<\/code> to 0.\nThe first time an object <code>o<\/code> is encountered so that <code>test(o)<\/code> is true,\nthe index of <code>o<\/code> is returned.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; notes = ['do', 're', 'mi', 're'];\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'));       \/\/ 3\nnotes.lastIndexWhere((note) =&gt; note.startsWith('r'), 2);    \/\/ 1\n<\/code><\/pre>\n<p>Returns -1 if <code>element<\/code> is not found.<\/p>\n<pre class=\"language-dart\"><code>notes.lastIndexWhere((note) =&gt; note.startsWith('k'));    \/\/ -1\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexWhere(bool test(E element), [int start]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/lastIndexWhere.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the first occurrence of <code>value<\/code> from this list.<\/p>\n<p>Returns true if <code>value<\/code> was in the list, false otherwise.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; parts = ['head', 'shoulders', 'knees', 'toes'];\nparts.remove('head'); \/\/ true\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>The method has no effect if <code>value<\/code> was not in the list.<\/p>\n<pre class=\"language-dart\"><code>\/\/ Note: 'head' has already been removed.\nparts.remove('head'); \/\/ false\nparts.join(', ');     \/\/ 'shoulders, knees, toes'\n<\/code><\/pre>\n<p>An <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> occurs if the list is fixed-length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the object at position <code>index<\/code> from this list.<\/p>\n<p>This method reduces the length of <code>this<\/code> by one and moves all later objects\ndown by one position.<\/p>\n<p>Returns the removed object.<\/p>\n<p>The <code>index<\/code> must be in the range <code>0 \u2264 index &lt; length<\/code>.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeAt(int index);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/removeAt.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Pops and returns the last object in this list.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E removeLast();<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/removeLast.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "removeLast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": []
                },
                {
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive.<\/p>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list. In that case\nthe list is not modified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeRange(int start, int end);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/removeRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.removeWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'three, four'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element));<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes the objects in the range <code>start<\/code> inclusive to <code>end<\/code> exclusive\nand inserts the contents of <code>replacement<\/code> in its place.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list = [1, 2, 3, 4, 5];\nlist.replaceRange(1, 4, [6, 7]);\nlist.join(', '); \/\/ '1, 6, 7, 5'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>This method does not work on fixed-length lists, even when <code>replacement<\/code>\nhas the same number of elements as the replaced range. In that case use\n<a href=\"dart-core\/List\/setRange.html\">setRange<\/a> instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void replaceRange(int start, int end, Iterable&lt;E&gt; replacement);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/replaceRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "replaceRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "replacement",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all objects from this list that fail to satisfy <code>test<\/code>.<\/p>\n<p>An object <code>o<\/code> satisfies <code>test<\/code> if <code>test(o)<\/code> is true.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.retainWhere((item) =&gt; item.length == 3);\nnumbers.join(', '); \/\/ 'one, two'\n<\/code><\/pre>\n<p>Throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> if this is a fixed-length list.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element));<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Overwrites objects of <code>this<\/code> with the objects of <code>iterable<\/code>, starting\nat position <code>index<\/code> in this list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; list = ['a', 'b', 'c'];\nlist.setAll(1, ['bee', 'sea']);\nlist.join(', '); \/\/ 'a, bee, sea'\n<\/code><\/pre>\n<p>This operation does not increase the length of <code>this<\/code>.<\/p>\n<p>The <code>index<\/code> must be non-negative and no greater than <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>The <code>iterable<\/code> must not have more elements than what can fit from <code>index<\/code>\nto <a href=\"dart-core\/List\/length.html\">length<\/a>.<\/p>\n<p>If <code>iterable<\/code> is based on this list, its values may change \/during\/ the\n<code>setAll<\/code> operation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setAll(int index, Iterable&lt;E&gt; iterable);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/setAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Copies the objects of <code>iterable<\/code>, skipping <code>skipCount<\/code> objects first,\ninto the range <code>start<\/code>, inclusive, to <code>end<\/code>, exclusive, of the list.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; list1 = [1, 2, 3, 4];\nList&lt;int&gt; list2 = [5, 6, 7, 8, 9];\n\/\/ Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n\/\/ of list1.\nlist1.setRange(1, 3, list2, 3);\nlist1.join(', '); \/\/ '1, 8, 9, 4'\n<\/code><\/pre>\n<p>The provided range, given by <code>start<\/code> and <code>end<\/code>, must be valid.\nA range from <code>start<\/code> to <code>end<\/code> is valid if <code>0 &lt;= start &lt;= end &lt;= len<\/code>, where\n<code>len<\/code> is this list's <code>length<\/code>. The range starts at <code>start<\/code> and has length\n<code>end - start<\/code>. An empty range (with <code>end == start<\/code>) is valid.<\/p>\n<p>The <code>iterable<\/code> must have enough objects to fill the range from <code>start<\/code>\nto <code>end<\/code> after skipping <code>skipCount<\/code> objects.<\/p>\n<p>If <code>iterable<\/code> is this list, the operation copies the elements\noriginally in the range from <code>skipCount<\/code> to <code>skipCount + (end - start)<\/code> to\nthe range <code>start<\/code> to <code>end<\/code>, even if the two ranges overlap.<\/p>\n<p>If <code>iterable<\/code> depends on this list in some other way, no guarantees are\nmade.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void setRange(int start, int end, Iterable&lt;E&gt; iterable, [int skipCount = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/setRange.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "skipCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Shuffles the elements of this list randomly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void shuffle([Random random]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/shuffle.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "shuffle",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "random",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:math.Random"
                        }
                    ]
                },
                {
                    "desc": "<p>Sorts this list according to the order specified by the <code>compare<\/code> function.<\/p>\n<p>The <code>compare<\/code> function must act as a <a href=\"dart-core\/Comparator.html\">Comparator<\/a>.<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['two', 'three', 'four'];\n\/\/ Sort from shortest to longest.\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [two, four, three]\n<\/code><\/pre>\n<p>The default List implementations use <a href=\"dart-core\/Comparable\/compare.html\">Comparable.compare<\/a> if\n<code>compare<\/code> is omitted.<\/p>\n<pre class=\"language-dart\"><code>List&lt;int&gt; nums = [13, 2, -11];\nnums.sort();\nprint(nums);  \/\/ [-11, 2, 13]\n<\/code><\/pre>\n<p>A <a href=\"dart-core\/Comparator.html\">Comparator<\/a> may compare objects as equal (return zero), even if they\nare distinct objects.\nThe sort function is not guaranteed to be stable, so distinct objects\nthat compare as equal may occur in any order in the result:<\/p>\n<pre class=\"language-dart\"><code>List&lt;String&gt; numbers = ['one', 'two', 'three', 'four'];\nnumbers.sort((a, b) =&gt; a.length.compareTo(b.length));\nprint(numbers);  \/\/ [one, two, four, three] OR [two, one, four, three]\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sort([int compare(E a, E b)]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/sort.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "sort",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "a",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        },
                        {
                            "name": "b",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new list containing the elements between <code>start<\/code> and <code>end<\/code>.<\/p>\n<p>The new list is a <code>List&lt;E&gt;<\/code> containing the elements of this list at\npositions greater than or equal to <code>start<\/code> and less than <code>end<\/code> in the same\norder as they occur in this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var colors = [\"red\", \"green\", \"blue\", \"orange\", \"pink\"];\nprint(colors.sublist(1, 3)); \/\/ [green, blue]\n<\/code><\/pre>\n<p>If <code>end<\/code> is omitted, it defaults to the <a href=\"dart-core\/List\/length.html\">length<\/a> of this list.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">print(colors.sublist(1)); \/\/ [green, blue, orange, pink]\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> positions must satisfy the relations\n0 \u2264 <code>start<\/code> \u2264 <code>end<\/code> \u2264 <code>this.length<\/code>\nIf <code>end<\/code> is equal to <code>start<\/code>, then the returned list is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;E&gt; sublist(int start, [int end]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/sublist.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "sublist",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Write the elements of an iterable into a list.<\/p>\n<p>This is a utility function that can be used to implement methods like\n<a href=\"dart-core\/List\/setAll.html\">setAll<\/a>.<\/p>\n<p>The elements of <code>source<\/code> are written into <code>target<\/code> from position <code>at<\/code>.\nThe <code>source<\/code> must not contain more elements after writing the last\nposition of <code>target<\/code>.<\/p>\n<p>If the source is a list, the <a href=\"dart-core\/List\/copyRange.html\">copyRange<\/a> function is likely to be more\nefficient.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void writeIterable&lt;T&gt;(List&lt;T&gt; target, int at, Iterable&lt;T&gt; source) {\n  RangeError.checkValueInInterval(at, 0, target.length, \"at\");\n  int index = at;\n  int targetLength = target.length;\n  for (var element in source) {\n    if (index == targetLength) {\n      throw new IndexError(targetLength, target);\n    }\n    target[index] = element;\n    index++;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/List\/writeIterable.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeIterable",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.List",
                    "params": [
                        {
                            "name": "at",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "target",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the number of objects in this list.<\/p>\n<p>The valid indices for a list are <code>0<\/code> through <code>length - 1<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "dart-core\/List\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.List",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of the objects in this list in reverse order.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;E&gt; get reversed;<\/code><\/pre>\n        ",
                    "href": "dart-core\/List\/reversed.html",
                    "name": "reversed",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.List",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A collection of key\/value pairs, from which you retrieve a value\nusing its associated key.<\/p>\n<p>There is a finite number of keys in the map,\nand each key has exactly one value associated with it.<\/p>\n<p>Maps, and their keys and values, can be iterated.\nThe order of iteration is defined by the individual type of map.\nExamples:<\/p>\n<ul>\n<li>The plain <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a> is unordered (no order is guaranteed),<\/li>\n<li>the <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a> iterates in key insertion order,<\/li>\n<li>and a sorted map like <a href=\"dart-collection\/SplayTreeMap-class.html\">SplayTreeMap<\/a> iterates the keys in sorted order.<\/li>\n<\/ul>\n<p>It is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a <a href=\"dart-core\/Map\/forEach.html\">forEach<\/a> or <a href=\"dart-core\/Map\/putIfAbsent.html\">putIfAbsent<\/a> call.\nModifying the map while iterating the keys or values\nmay also break the iteration.<\/p>\n<p>It is generally not allowed to modify the equality of keys (and thus not\ntheir hashcode) while they are in the map. Some specialized subtypes may be\nmore permissive, in which case they should document this behavior.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Map-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Map",
            "shortname": "Map",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a Map instance with the default implementation, <a href=\"dart-collection\/LinkedHashMap-class.html\">LinkedHashMap<\/a>.<\/p>\n<p>This constructor is equivalent to the non-const map literal <code>&lt;K,V&gt;{}<\/code>.<\/p>\n<p>A <code>LinkedHashMap<\/code> requires the keys to implement compatible\n<code>operator==<\/code> and <code>hashCode<\/code>, and it allows null as a key.\nIt iterates in key insertion order.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory Map();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/Map.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Map",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>other<\/code> to this map.<\/p>\n<p>If a key of <code>other<\/code> is already in this map, its value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[key] = value<\/code> for each key\nand associated value in other. It iterates over <code>other<\/code>, which must\ntherefore not change during the iteration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Map&lt;K, V&gt; other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all key\/value pairs of <code>newEntries<\/code> to this map.<\/p>\n<p>If a key of <code>newEntries<\/code> is already in this map,\nthe corresponding value is overwritten.<\/p>\n<p>The operation is equivalent to doing <code>this[entry.key] = entry.value<\/code>\nfor each <a href=\"dart-core\/MapEntry-class.html\">MapEntry<\/a> of the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addEntries(Iterable&lt;MapEntry&lt;K, V&gt;&gt; newEntries);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/addEntries.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addEntries",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "newEntries",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.MapEntry>"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this map as having <code>RK<\/code> keys and <code>RV<\/code> instances,\nif necessary.<\/p>\n<p>If this map is already a <code>Map&lt;RK, RV&gt;<\/code>, it is returned unchanged.<\/p>\n<p>If this set contains only keys of type <code>RK<\/code> and values of type <code>RV<\/code>,\nall read operations will work correctly.\nIf any operation exposes a non-<code>RK<\/code> key or non-<code>RV<\/code> value,\nthe operation will throw instead.<\/p>\n<p>Entries added to the map must be valid for both a <code>Map&lt;K, V&gt;<\/code> and a\n<code>Map&lt;RK, RV&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;RK, RV&gt; cast&lt;RK, RV&gt;();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>Adapts <code>source<\/code> to be a <code>Map&lt;K2, V2&gt;<\/code>.<\/p>\n<p>Any time the set would produce a key or value that is not a <code>K2<\/code> or <code>V2<\/code>,\nthe access will throw.<\/p>\n<p>Any time <code>K2<\/code> key or <code>V2<\/code> value is attempted added into the adapted map,\nthe store will throw unless the key is also an instance of <code>K<\/code> and\nthe value is also an instance of <code>V<\/code>.<\/p>\n<p>If all accessed entries of <code>source<\/code> are have <code>K2<\/code> keys and <code>V2<\/code> values\nand if all entries added to the returned map have <code>K<\/code> keys and <code>V<\/code>] values,\nthen the returned map can be used as a <code>Map&lt;K2, V2&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Map&lt;K2, V2&gt; castFrom&lt;K, V, K2, V2&gt;(Map&lt;K, V&gt; source) =&gt;\n    new CastMap&lt;K, V, K2, V2&gt;(source);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/castFrom.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "castFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all pairs from the map.<\/p>\n<p>After this, the map is empty.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>key<\/code>.<\/p>\n<p>Returns true if any of the keys in the map are equal to <code>key<\/code>\naccording to the equality used by the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsKey(Object key);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/containsKey.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsKey",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this map contains the given <code>value<\/code>.<\/p>\n<p>Returns true if any of the values in the map are equal to <code>value<\/code>\naccording to the <code>==<\/code> operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsValue(Object value);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/containsValue.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsValue",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies <code>f<\/code> to each key\/value pair of the map.<\/p>\n<p>Calling <code>f<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(K key, V value));<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new map where all entries of this map are transformed by\nthe given <code>f<\/code> function.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;K2, V2&gt; map&lt;K2, V2&gt;(MapEntry&lt;K2, V2&gt; f(K key, V value));<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/map.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map",
                    "name": "map",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Look up the value of <code>key<\/code>, or add a new value if it isn't there.<\/p>\n<p>Returns the value associated to <code>key<\/code>, if there is one.\nOtherwise calls <code>ifAbsent<\/code> to get a new value, associates <code>key<\/code> to\nthat value, and then returns the new value.<\/p>\n<pre class=\"language-dart\"><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      \/\/ 36\nscores['Rohan'];    \/\/  5\nscores['Sophena'];  \/\/  7\n<\/code><\/pre>\n<p>Calling <code>ifAbsent<\/code> must not add or remove keys from the map.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V putIfAbsent(K key, V ifAbsent());<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/putIfAbsent.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "putIfAbsent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>key<\/code> and its associated value, if present, from the map.<\/p>\n<p>Returns the value associated with <code>key<\/code> before it was removed.\nReturns <code>null<\/code> if <code>key<\/code> was not in the map.<\/p>\n<p>Note that values can be <code>null<\/code> and a returned <code>null<\/code> value doesn't\nalways mean that the key was absent.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V remove(Object key);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/remove.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all entries of this map that satisfy the given <code>predicate<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool predicate(K key, V value));<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates the value for the provided <code>key<\/code>.<\/p>\n<p>Returns the new value of the key.<\/p>\n<p>If the key is present, invokes <code>update<\/code> with the current value and stores\nthe new value in the map.<\/p>\n<p>If the key is not present and <code>ifAbsent<\/code> is provided, calls <code>ifAbsent<\/code>\nand adds the key with the returned value to the map.<\/p>\n<p>It's an error if the key is not present and <code>ifAbsent<\/code> is not provided.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">V update(K key, V update(V value), {V ifAbsent()});<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/update.html",
                    "isDeprecated": false,
                    "type": "<V>",
                    "name": "update",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "ifAbsent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        },
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Updates all values.<\/p>\n<p>Iterates over all entries in the map and updates them with the result\nof invoking <code>update<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateAll(V update(K key, V value));<\/code><\/pre>\n    ",
                    "href": "dart-core\/Map\/updateAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Map",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<V>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The map entries of <a href=\"dart-core\/Map-class.html\">this<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;MapEntry&lt;K, V&gt;&gt; get entries;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Map\/entries.html",
                    "name": "entries",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.MapEntry>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is no key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Map\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one key\/value pair in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Map\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>The keys of <a href=\"dart-core\/Map-class.html\">this<\/a>.<\/p>\n<p>The returned iterable has efficient <code>length<\/code> and <code>contains<\/code> operations,\nbased on <a href=\"dart-core\/Map\/length.html\">length<\/a> and <a href=\"dart-core\/Map\/containsKey.html\">containsKey<\/a> of the map.<\/p>\n<p>The order of iteration is defined by the individual <code>Map<\/code> implementation,\nbut must be consistent between changes to the map.<\/p>\n<p>Modifying the map while iterating the keys\nmay break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;K&gt; get keys;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Map\/keys.html",
                    "name": "keys",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>The number of key\/value pairs in the map.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Map\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                },
                {
                    "desc": "<p>The values of <a href=\"dart-core\/Map-class.html\">this<\/a>.<\/p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a href=\"dart-core\/Map\/keys.html\">keys<\/a> and <a href=\"dart-core\/Map\/values.html\">values<\/a> in parallel will\nprovide matching pairs of keys and values.<\/p>\n<p>The returned iterable has an efficient <code>length<\/code> method based on the\n<a href=\"dart-core\/Map\/length.html\">length<\/a> of the map. Its <a href=\"dart-core\/Iterable\/contains.html\">Iterable.contains<\/a> method is based on\n<code>==<\/code> comparison.<\/p>\n<p>Modifying the map while iterating the\nvalues may break the iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;V&gt; get values;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Map\/values.html",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Map",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A key\/value pair representing an entry in a <a href=\"dart-core\/Map-class.html\">Map<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/MapEntry-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.MapEntry",
            "shortname": "MapEntry",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an entry with <code>key<\/code> and <code>value<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory MapEntry(K key, V value) = MapEntry&lt;K, V&gt;._;<\/code><\/pre>\n    ",
                    "href": "dart-core\/MapEntry\/MapEntry.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "MapEntry",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.MapEntry",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<K>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"MapEntry($key: $value)\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/MapEntry\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.MapEntry",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A result from searching within a string.<\/p>\n<p>A Match or an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of Match objects is returned from <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a>\nmatching methods.<\/p>\n<p>The following example finds all matches of a <a href=\"dart-core\/RegExp-class.html\">RegExp<\/a> in a <a href=\"dart-core\/String-class.html\">String<\/a>\nand iterates through the returned iterable of Match objects.<\/p>\n<pre class=\"language-dart\"><code>RegExp exp = new RegExp(r\"(\\w+)\");\nString str = \"Parse my string\";\nIterable&lt;Match&gt; matches = exp.allMatches(str);\nfor (Match m in matches) {\n  String match = m.group(0);\n  print(match);\n}\n<\/code><\/pre>\n<p>The output of the example is:<\/p>\n<pre class=\"language-dart\"><code>Parse\nmy\nstring\n<\/code><\/pre>\n<p>Some patterns, regular expressions in particular, may record substrings\nthat were part of the matching. These are called <em>groups<\/em> in the Match\nobject. Some patterns may never have any groups, and their matches always\nhave zero <a href=\"dart-core\/Match\/groupCount.html\">groupCount<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Match-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Match",
            "shortname": "Match",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Match\/Match.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Match",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Match",
                    "params": []
                },
                {
                    "desc": "<p>Returns the string matched by the given <code>group<\/code>.<\/p>\n<p>If <code>group<\/code> is 0, returns the match of the pattern.<\/p>\n<p>The result may be <code>null<\/code> if the pattern didn't assign a value to it\nas part of this match.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String group(int group);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Match\/group.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "group",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Match",
                    "params": [
                        {
                            "name": "group",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a list of the groups with the given indices.<\/p>\n<p>The list contains the strings returned by <a href=\"dart-core\/Match\/group.html\">group<\/a> for each index in\n<code>groupIndices<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; groups(List&lt;int&gt; groupIndices);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Match\/groups.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.String>",
                    "name": "groups",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Match",
                    "params": [
                        {
                            "name": "groupIndices",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.int>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the index in the string after the last character of the\nmatch.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get end;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Match\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Match",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of captured groups in the match.<\/p>\n<p>Some patterns may capture parts of the input that was used to\ncompute the full match. This is the number of captured groups,\nwhich is also the maximal allowed argument to the <a href=\"dart-core\/Match\/group.html\">group<\/a> method.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get groupCount;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Match\/groupCount.html",
                    "name": "groupCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Match",
                    "params": []
                },
                {
                    "desc": "<p>The string on which this match was computed.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get input;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Match\/input.html",
                    "name": "input",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Match",
                    "params": []
                },
                {
                    "desc": "<p>The pattern used to search in <a href=\"dart-core\/Match\/input.html\">input<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Pattern get pattern;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Match\/pattern.html",
                    "name": "pattern",
                    "isDeprecated": false,
                    "type": "dart:core.Pattern",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Match",
                    "params": []
                },
                {
                    "desc": "<p>Returns the index in the string where the match starts.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get start;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Match\/start.html",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Match",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown by the default implementation of <code>noSuchMethod<\/code> on <a href=\"dart-core\/Object-class.html\">Object<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/NoSuchMethodError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.NoSuchMethodError",
            "shortname": "NoSuchMethodError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a <a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a> corresponding to a failed method call.<\/p>\n<p>The <code>receiver<\/code> is the receiver of the method call.\nThat is, the object on which the method was attempted called.\nIf the receiver is <code>null<\/code>, it is interpreted as a call to a top-level\nfunction of a library.<\/p>\n<p>The <code>memberName<\/code> is a <a href=\"dart-core\/Symbol-class.html\">Symbol<\/a> representing the name of the called method\nor accessor. It should not be <code>null<\/code>.<\/p>\n<p>The <code>positionalArguments<\/code> is a list of the positional arguments that the\nmethod was called with. If <code>null<\/code>, it is considered equivalent to the\nempty list.<\/p>\n<p>The <code>namedArguments<\/code> is a map from <a href=\"dart-core\/Symbol-class.html\">Symbol<\/a>s to the values of named\narguments that the method was called with.<\/p>\n<p>This constructor does not handle type arguments.\nTo include type variables, create an <a href=\"dart-core\/Invocation-class.html\">Invocation<\/a> and use\n<a href=\"dart-core\/NoSuchMethodError\/NoSuchMethodError.withInvocation.html\">NoSuchMethodError.withInvocation<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated(\"Use NoSuchMethod.withInvocation instead\")\nexternal NoSuchMethodError(Object receiver, Symbol memberName,\n    List positionalArguments, Map&lt;Symbol, dynamic&gt; namedArguments,\n    [@deprecated List existingArgumentNames]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/NoSuchMethodError\/NoSuchMethodError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "NoSuchMethodError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.NoSuchMethodError",
                    "params": [
                        {
                            "name": "existingArgumentNames",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List"
                        },
                        {
                            "name": "memberName",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Symbol"
                        },
                        {
                            "name": "namedArguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<dart:core.Symbol>"
                        },
                        {
                            "name": "positionalArguments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List"
                        },
                        {
                            "name": "receiver",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/NoSuchMethodError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.NoSuchMethodError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The reserved word <code>null<\/code> denotes an object that is the sole instance of \nthis class.<\/p>\n<p>It is a compile-time error for a class to attempt to extend or implement\nNull.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Null-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Null",
            "shortname": "Null",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "material.PopupMenuDivider"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns the string <code>\"null\"<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"null\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/Null\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Null",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/Null\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Null\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Null",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown when attempting to throw <code>null<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/NullThrownError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.NullThrownError",
            "shortname": "NullThrownError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nNullThrownError();<\/code><\/pre>\n    ",
                    "href": "dart-core\/NullThrownError\/NullThrownError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "NullThrownError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.NullThrownError",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Throw of null.\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/NullThrownError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.NullThrownError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>The base class for all Dart objects.<\/p>\n<p>Because Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.<\/p>\n<p>When you define a class, you should override <a href=\"dart-core\/Object\/toString.html\">toString<\/a>\nto return a string describing an instance of that class.\nYou might also need to define <a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a> and <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>, as described in the\n<a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#implementing-map-keys\">Implementing map\nkeys<\/a>\nsection of the <a href=\"http:\/\/www.dartlang.org\/docs\/dart-up-and-running\/contents\/ch03.html\">library\ntour<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Object-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Object",
            "shortname": "Object",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.AlwaysStoppedAnimation",
                "animation.AnimationController",
                "animation.AnimationMax",
                "animation.AnimationMean",
                "animation.AnimationMin",
                "animation.ColorTween",
                "animation.ConstantTween",
                "animation.Cubic",
                "animation.CurveTween",
                "animation.CurvedAnimation",
                "animation.ElasticInCurve",
                "animation.ElasticInOutCurve",
                "animation.ElasticOutCurve",
                "animation.FlippedCurve",
                "animation.IntTween",
                "animation.Interval",
                "animation.ProxyAnimation",
                "animation.RectTween",
                "animation.ReverseAnimation",
                "animation.ReverseTween",
                "animation.SawTooth",
                "animation.SizeTween",
                "animation.StepTween",
                "animation.Threshold",
                "animation.TrainHoppingAnimation",
                "animation.Tween",
                "animation.TweenSequence",
                "async.DelegatingStream",
                "async.LazyStream",
                "async.ResultFuture",
                "async.SingleSubscriptionTransformer",
                "async.StreamZip",
                "async.SubscriptionStream",
                "chroot.ChrootFileSystem",
                "collection.CombinedIterableView",
                "collection.CombinedListView",
                "collection.CombinedMapView",
                "collection.DelegatingList",
                "collection.DelegatingQueue",
                "collection.DelegatingSet",
                "collection.EqualityMap",
                "collection.EqualitySet",
                "collection.IterableZip",
                "collection.NonGrowableListView",
                "collection.UnionSet",
                "collection.UnmodifiableSetView",
                "convert.ByteAccumulatorSink",
                "convert.HexCodec",
                "convert.HexDecoder",
                "convert.HexEncoder",
                "convert.IdentityCodec",
                "convert.PercentCodec",
                "convert.PercentDecoder",
                "convert.PercentEncoder",
                "convert.StringAccumulatorSink",
                "crypto.Hmac",
                "crypto.MD5",
                "crypto.Sha1",
                "crypto.Sha256",
                "cupertino.CupertinoActionSheet",
                "cupertino.CupertinoActionSheetAction",
                "cupertino.CupertinoActivityIndicator",
                "cupertino.CupertinoAlertDialog",
                "cupertino.CupertinoApp",
                "cupertino.CupertinoButton",
                "cupertino.CupertinoDatePicker",
                "cupertino.CupertinoDialog",
                "cupertino.CupertinoDialogAction",
                "cupertino.CupertinoFullscreenDialogTransition",
                "cupertino.CupertinoNavigationBar",
                "cupertino.CupertinoNavigationBarBackButton",
                "cupertino.CupertinoPageRoute",
                "cupertino.CupertinoPageScaffold",
                "cupertino.CupertinoPageTransition",
                "cupertino.CupertinoPicker",
                "cupertino.CupertinoPopupSurface",
                "cupertino.CupertinoScrollbar",
                "cupertino.CupertinoSegmentedControl",
                "cupertino.CupertinoSlider",
                "cupertino.CupertinoSliverNavigationBar",
                "cupertino.CupertinoSliverRefreshControl",
                "cupertino.CupertinoSwitch",
                "cupertino.CupertinoTabBar",
                "cupertino.CupertinoTabScaffold",
                "cupertino.CupertinoTabView",
                "cupertino.CupertinoTextField",
                "cupertino.CupertinoTextThemeData",
                "cupertino.CupertinoTheme",
                "cupertino.CupertinoThemeData",
                "cupertino.CupertinoTimerPicker",
                "dart:async.StreamView",
                "dart:collection.DoubleLinkedQueue",
                "dart:collection.LinkedList",
                "dart:collection.ListQueue",
                "dart:collection.UnmodifiableListView",
                "dart:collection.UnmodifiableMapView",
                "dart:convert.AsciiCodec",
                "dart:convert.AsciiDecoder",
                "dart:convert.AsciiEncoder",
                "dart:convert.Base64Codec",
                "dart:convert.Base64Decoder",
                "dart:convert.Base64Encoder",
                "dart:convert.HtmlEscape",
                "dart:convert.JsonCodec",
                "dart:convert.JsonCyclicError",
                "dart:convert.JsonDecoder",
                "dart:convert.JsonEncoder",
                "dart:convert.JsonUnsupportedObjectError",
                "dart:convert.JsonUtf8Encoder",
                "dart:convert.Latin1Codec",
                "dart:convert.Latin1Decoder",
                "dart:convert.Latin1Encoder",
                "dart:convert.LineSplitter",
                "dart:convert.Utf8Codec",
                "dart:convert.Utf8Decoder",
                "dart:convert.Utf8Encoder",
                "dart:core.AbstractClassInstantiationError",
                "dart:core.ArgumentError",
                "dart:core.AssertionError",
                "dart:core.CastError",
                "dart:core.ConcurrentModificationError",
                "dart:core.CyclicInitializationError",
                "dart:core.FallThroughError",
                "dart:core.IndexError",
                "dart:core.NoSuchMethodError",
                "dart:core.NullThrownError",
                "dart:core.RangeError",
                "dart:core.Runes",
                "dart:core.StateError",
                "dart:core.TypeError",
                "dart:core.UnimplementedError",
                "dart:core.UnsupportedError",
                "dart:developer.Counter",
                "dart:developer.Gauge",
                "dart:io.CertificateException",
                "dart:io.FileSystemCreateEvent",
                "dart:io.FileSystemDeleteEvent",
                "dart:io.FileSystemModifyEvent",
                "dart:io.FileSystemMoveEvent",
                "dart:io.GZipCodec",
                "dart:io.HandshakeException",
                "dart:io.RawSecureServerSocket",
                "dart:io.SecureServerSocket",
                "dart:io.Stdin",
                "dart:io.SystemEncoding",
                "dart:io.ZLibCodec",
                "dart:io.ZLibDecoder",
                "dart:io.ZLibEncoder",
                "dart:typed_data.UnmodifiableFloat32ListView",
                "dart:typed_data.UnmodifiableFloat32x4ListView",
                "dart:typed_data.UnmodifiableFloat64ListView",
                "dart:typed_data.UnmodifiableFloat64x2ListView",
                "dart:typed_data.UnmodifiableInt16ListView",
                "dart:typed_data.UnmodifiableInt32ListView",
                "dart:typed_data.UnmodifiableInt32x4ListView",
                "dart:typed_data.UnmodifiableInt64ListView",
                "dart:typed_data.UnmodifiableInt8ListView",
                "dart:typed_data.UnmodifiableUint16ListView",
                "dart:typed_data.UnmodifiableUint32ListView",
                "dart:typed_data.UnmodifiableUint64ListView",
                "dart:typed_data.UnmodifiableUint8ClampedListView",
                "dart:typed_data.UnmodifiableUint8ListView",
                "dart:ui.Gradient",
                "dart:ui.ImageShader",
                "dart:ui.Offset",
                "dart:ui.PathMetrics",
                "dart:ui.Size",
                "flutter_driver.DriverError",
                "flutter_driver.Health",
                "flutter_driver.RenderTree",
                "flutter_localizations.MaterialLocalizationAr",
                "flutter_localizations.MaterialLocalizationBg",
                "flutter_localizations.MaterialLocalizationBs",
                "flutter_localizations.MaterialLocalizationCa",
                "flutter_localizations.MaterialLocalizationCs",
                "flutter_localizations.MaterialLocalizationDa",
                "flutter_localizations.MaterialLocalizationDe",
                "flutter_localizations.MaterialLocalizationDeCh",
                "flutter_localizations.MaterialLocalizationEl",
                "flutter_localizations.MaterialLocalizationEn",
                "flutter_localizations.MaterialLocalizationEnAu",
                "flutter_localizations.MaterialLocalizationEnCa",
                "flutter_localizations.MaterialLocalizationEnGb",
                "flutter_localizations.MaterialLocalizationEnIe",
                "flutter_localizations.MaterialLocalizationEnIn",
                "flutter_localizations.MaterialLocalizationEnSg",
                "flutter_localizations.MaterialLocalizationEnZa",
                "flutter_localizations.MaterialLocalizationEs",
                "flutter_localizations.MaterialLocalizationEs419",
                "flutter_localizations.MaterialLocalizationEsAr",
                "flutter_localizations.MaterialLocalizationEsBo",
                "flutter_localizations.MaterialLocalizationEsCl",
                "flutter_localizations.MaterialLocalizationEsCo",
                "flutter_localizations.MaterialLocalizationEsCr",
                "flutter_localizations.MaterialLocalizationEsDo",
                "flutter_localizations.MaterialLocalizationEsEc",
                "flutter_localizations.MaterialLocalizationEsGt",
                "flutter_localizations.MaterialLocalizationEsHn",
                "flutter_localizations.MaterialLocalizationEsMx",
                "flutter_localizations.MaterialLocalizationEsNi",
                "flutter_localizations.MaterialLocalizationEsPa",
                "flutter_localizations.MaterialLocalizationEsPe",
                "flutter_localizations.MaterialLocalizationEsPr",
                "flutter_localizations.MaterialLocalizationEsPy",
                "flutter_localizations.MaterialLocalizationEsSv",
                "flutter_localizations.MaterialLocalizationEsUs",
                "flutter_localizations.MaterialLocalizationEsUy",
                "flutter_localizations.MaterialLocalizationEsVe",
                "flutter_localizations.MaterialLocalizationEt",
                "flutter_localizations.MaterialLocalizationFa",
                "flutter_localizations.MaterialLocalizationFi",
                "flutter_localizations.MaterialLocalizationFil",
                "flutter_localizations.MaterialLocalizationFr",
                "flutter_localizations.MaterialLocalizationFrCa",
                "flutter_localizations.MaterialLocalizationGl",
                "flutter_localizations.MaterialLocalizationGsw",
                "flutter_localizations.MaterialLocalizationHe",
                "flutter_localizations.MaterialLocalizationHi",
                "flutter_localizations.MaterialLocalizationHr",
                "flutter_localizations.MaterialLocalizationHu",
                "flutter_localizations.MaterialLocalizationHy",
                "flutter_localizations.MaterialLocalizationId",
                "flutter_localizations.MaterialLocalizationIt",
                "flutter_localizations.MaterialLocalizationJa",
                "flutter_localizations.MaterialLocalizationKm",
                "flutter_localizations.MaterialLocalizationKo",
                "flutter_localizations.MaterialLocalizationLt",
                "flutter_localizations.MaterialLocalizationLv",
                "flutter_localizations.MaterialLocalizationMn",
                "flutter_localizations.MaterialLocalizationMr",
                "flutter_localizations.MaterialLocalizationMs",
                "flutter_localizations.MaterialLocalizationNb",
                "flutter_localizations.MaterialLocalizationNl",
                "flutter_localizations.MaterialLocalizationPl",
                "flutter_localizations.MaterialLocalizationPs",
                "flutter_localizations.MaterialLocalizationPt",
                "flutter_localizations.MaterialLocalizationPtPt",
                "flutter_localizations.MaterialLocalizationRo",
                "flutter_localizations.MaterialLocalizationRu",
                "flutter_localizations.MaterialLocalizationSk",
                "flutter_localizations.MaterialLocalizationSl",
                "flutter_localizations.MaterialLocalizationSr",
                "flutter_localizations.MaterialLocalizationSrCyrl",
                "flutter_localizations.MaterialLocalizationSrLatn",
                "flutter_localizations.MaterialLocalizationSv",
                "flutter_localizations.MaterialLocalizationSw",
                "flutter_localizations.MaterialLocalizationTa",
                "flutter_localizations.MaterialLocalizationTh",
                "flutter_localizations.MaterialLocalizationTl",
                "flutter_localizations.MaterialLocalizationTr",
                "flutter_localizations.MaterialLocalizationUk",
                "flutter_localizations.MaterialLocalizationUr",
                "flutter_localizations.MaterialLocalizationVi",
                "flutter_localizations.MaterialLocalizationZh",
                "flutter_localizations.MaterialLocalizationZhHans",
                "flutter_localizations.MaterialLocalizationZhHant",
                "flutter_localizations.MaterialLocalizationZhHantHk",
                "flutter_localizations.MaterialLocalizationZhHantTw",
                "flutter_test.AutomatedTestWidgetsFlutterBinding",
                "flutter_test.LabeledTapTargetGuideline",
                "flutter_test.LiveTestWidgetsFlutterBinding",
                "flutter_test.LiveWidgetController",
                "flutter_test.MinimumTapTargetGuideline",
                "flutter_test.MinimumTextContrastGuideline",
                "flutter_test.TestViewConfiguration",
                "flutter_test.WidgetTester",
                "foundation.CachingIterable",
                "foundation.DiagnosticableNode",
                "foundation.DiagnosticsProperty",
                "foundation.DoubleProperty",
                "foundation.EnumProperty",
                "foundation.FlagProperty",
                "foundation.FlutterError",
                "foundation.IntProperty",
                "foundation.IterableProperty",
                "foundation.LicenseEntryWithLineBreaks",
                "foundation.MessageProperty",
                "foundation.ObjectFlagProperty",
                "foundation.ObserverList",
                "foundation.PercentProperty",
                "foundation.StringProperty",
                "foundation.ValueKey",
                "foundation.ValueNotifier",
                "gestures.DelayedMultiDragGestureRecognizer",
                "gestures.DoubleTapGestureRecognizer",
                "gestures.EagerGestureRecognizer",
                "gestures.FlutterErrorDetailsForPointerEventDispatcher",
                "gestures.FlutterErrorDetailsForPointerRouter",
                "gestures.ForcePressGestureRecognizer",
                "gestures.HorizontalDragGestureRecognizer",
                "gestures.HorizontalMultiDragGestureRecognizer",
                "gestures.ImmediateMultiDragGestureRecognizer",
                "gestures.LongPressGestureRecognizer",
                "gestures.MultiTapGestureRecognizer",
                "gestures.PanGestureRecognizer",
                "gestures.PointerAddedEvent",
                "gestures.PointerCancelEvent",
                "gestures.PointerDownEvent",
                "gestures.PointerEnterEvent",
                "gestures.PointerExitEvent",
                "gestures.PointerHoverEvent",
                "gestures.PointerMoveEvent",
                "gestures.PointerRemovedEvent",
                "gestures.PointerScrollEvent",
                "gestures.PointerUpEvent",
                "gestures.ScaleGestureRecognizer",
                "gestures.TapGestureRecognizer",
                "gestures.VerticalDragGestureRecognizer",
                "gestures.VerticalMultiDragGestureRecognizer",
                "json_rpc_2.Parameter",
                "local.LocalFileSystem",
                "matcher.CustomMatcher",
                "matcher.TypeMatcher",
                "matcher.isInstanceOf",
                "material.AboutDialog",
                "material.AboutListTile",
                "material.ActionChip",
                "material.AlertDialog",
                "material.AnimatedIcon",
                "material.AnimatedTheme",
                "material.AppBar",
                "material.AppBarTheme",
                "material.BackButton",
                "material.BackButtonIcon",
                "material.BottomAppBar",
                "material.BottomAppBarTheme",
                "material.BottomNavigationBar",
                "material.BottomSheet",
                "material.ButtonBar",
                "material.ButtonTheme",
                "material.ButtonThemeData",
                "material.Card",
                "material.CardTheme",
                "material.Checkbox",
                "material.CheckboxListTile",
                "material.CheckedPopupMenuItem",
                "material.Chip",
                "material.ChipTheme",
                "material.ChipThemeData",
                "material.ChoiceChip",
                "material.CircleAvatar",
                "material.CircularProgressIndicator",
                "material.CloseButton",
                "material.ColorScheme",
                "material.CupertinoPageTransitionsBuilder",
                "material.DataTable",
                "material.DayPicker",
                "material.DefaultTabController",
                "material.Dialog",
                "material.DialogTheme",
                "material.Divider",
                "material.Drawer",
                "material.DrawerController",
                "material.DrawerControllerState",
                "material.DrawerHeader",
                "material.DropdownButton",
                "material.DropdownButtonFormField",
                "material.DropdownButtonHideUnderline",
                "material.DropdownMenuItem",
                "material.ExpandIcon",
                "material.ExpansionPanelList",
                "material.ExpansionPanelRadio",
                "material.ExpansionTile",
                "material.FadeUpwardsPageTransitionsBuilder",
                "material.FilterChip",
                "material.FlatButton",
                "material.FlexibleSpaceBar",
                "material.FlexibleSpaceBarSettings",
                "material.FloatingActionButton",
                "material.FloatingActionButtonThemeData",
                "material.FlutterLogo",
                "material.GridTile",
                "material.GridTileBar",
                "material.IconButton",
                "material.Ink",
                "material.InkDecoration",
                "material.InkHighlight",
                "material.InkResponse",
                "material.InkRipple",
                "material.InkSplash",
                "material.InkWell",
                "material.InputChip",
                "material.InputDecorationTheme",
                "material.InputDecorator",
                "material.LicensePage",
                "material.LinearProgressIndicator",
                "material.ListTile",
                "material.ListTileTheme",
                "material.Material",
                "material.MaterialAccentColor",
                "material.MaterialApp",
                "material.MaterialBasedCupertinoThemeData",
                "material.MaterialButton",
                "material.MaterialColor",
                "material.MaterialGap",
                "material.MaterialPageRoute",
                "material.MaterialPointArcTween",
                "material.MaterialRectArcTween",
                "material.MaterialRectCenterArcTween",
                "material.MaterialSlice",
                "material.MergeableMaterial",
                "material.MonthPicker",
                "material.OpenUpwardsPageTransitionsBuilder",
                "material.OutlineButton",
                "material.OutlineInputBorder",
                "material.PaddleSliderValueIndicatorShape",
                "material.PageTransitionsTheme",
                "material.PaginatedDataTable",
                "material.PaginatedDataTableState",
                "material.PersistentBottomSheetController",
                "material.PopupMenuButton",
                "material.PopupMenuDivider",
                "material.PopupMenuItem",
                "material.PopupMenuItemState",
                "material.Radio",
                "material.RadioListTile",
                "material.RaisedButton",
                "material.RawChip",
                "material.RawMaterialButton",
                "material.RectangularSliderTrackShape",
                "material.RefreshIndicator",
                "material.RefreshIndicatorState",
                "material.RefreshProgressIndicator",
                "material.ReorderableListView",
                "material.RoundSliderOverlayShape",
                "material.RoundSliderThumbShape",
                "material.RoundSliderTickMarkShape",
                "material.Scaffold",
                "material.ScaffoldState",
                "material.Scrollbar",
                "material.ShapeBorderTween",
                "material.SimpleDialog",
                "material.SimpleDialogOption",
                "material.Slider",
                "material.SliderTheme",
                "material.SliderThemeData",
                "material.SliverAppBar",
                "material.SnackBar",
                "material.SnackBarAction",
                "material.Stepper",
                "material.Switch",
                "material.SwitchListTile",
                "material.Tab",
                "material.TabBar",
                "material.TabBarTheme",
                "material.TabBarView",
                "material.TabController",
                "material.TabPageSelector",
                "material.TabPageSelectorIndicator",
                "material.TableRowInkWell",
                "material.TextField",
                "material.TextFormField",
                "material.TextTheme",
                "material.Theme",
                "material.ThemeData",
                "material.ThemeDataTween",
                "material.Tooltip",
                "material.Typography",
                "material.UnderlineInputBorder",
                "material.UnderlineTabIndicator",
                "material.UserAccountsDrawerHeader",
                "material.VerticalDivider",
                "material.YearPicker",
                "painting.Alignment",
                "painting.AlignmentDirectional",
                "painting.AssetImage",
                "painting.AutomaticNotchedShape",
                "painting.BeveledRectangleBorder",
                "painting.Border",
                "painting.BorderDirectional",
                "painting.BorderRadius",
                "painting.BorderRadiusDirectional",
                "painting.BoxDecoration",
                "painting.BoxShadow",
                "painting.CircleBorder",
                "painting.CircularNotchedRectangle",
                "painting.ColorSwatch",
                "painting.ContinuousRectangleBorder",
                "painting.DefaultShaderWarmUp",
                "painting.EdgeInsets",
                "painting.EdgeInsetsDirectional",
                "painting.ExactAssetImage",
                "painting.FileImage",
                "painting.FlutterLogoDecoration",
                "painting.FractionalOffset",
                "painting.ImageStream",
                "painting.LinearGradient",
                "painting.MemoryImage",
                "painting.MultiFrameImageStreamCompleter",
                "painting.NetworkImage",
                "painting.OneFrameImageStreamCompleter",
                "painting.RadialGradient",
                "painting.RoundedRectangleBorder",
                "painting.ShapeDecoration",
                "painting.StadiumBorder",
                "painting.StrutStyle",
                "painting.SweepGradient",
                "painting.TextSpan",
                "painting.TextStyle",
                "painting.TransformProperty",
                "path.PathMap",
                "path.PathSet",
                "physics.BoundedFrictionSimulation",
                "physics.ClampedSimulation",
                "physics.FrictionSimulation",
                "physics.GravitySimulation",
                "physics.ScrollSpringSimulation",
                "physics.SpringSimulation",
                "platform.FakePlatform",
                "platform.LocalPlatform",
                "quiver.async.CountdownTimer",
                "quiver.async.FutureStream",
                "quiver.async.Metronome",
                "quiver.async.UnderflowError",
                "quiver.collection.AvlTreeSet",
                "quiver.core.Optional",
                "quiver.iterables.EnumerateIterable",
                "quiver.iterables.EnumerateIterator",
                "quiver.iterables.GeneratingIterable",
                "quiver.testing.equality.MatchError",
                "record_replay.NoMatchingInvocationError",
                "rendering.AlignmentGeometryTween",
                "rendering.AlignmentTween",
                "rendering.AnnotatedRegionLayer",
                "rendering.BackdropFilterLayer",
                "rendering.BoxConstraints",
                "rendering.BoxHitTestEntry",
                "rendering.BoxParentData",
                "rendering.ClipPathLayer",
                "rendering.ClipRRectLayer",
                "rendering.ClipRectLayer",
                "rendering.ContainerLayer",
                "rendering.FixedColumnWidth",
                "rendering.FlexColumnWidth",
                "rendering.FlexParentData",
                "rendering.FlowParentData",
                "rendering.FlutterErrorDetailsForRendering",
                "rendering.FollowerLayer",
                "rendering.FractionColumnWidth",
                "rendering.FractionalOffsetTween",
                "rendering.IntrinsicColumnWidth",
                "rendering.LeaderLayer",
                "rendering.ListBodyParentData",
                "rendering.ListWheelParentData",
                "rendering.MaxColumnWidth",
                "rendering.MinColumnWidth",
                "rendering.MultiChildLayoutParentData",
                "rendering.OffsetLayer",
                "rendering.OpacityLayer",
                "rendering.PaintingContext",
                "rendering.PerformanceOverlayLayer",
                "rendering.PhysicalModelLayer",
                "rendering.PictureLayer",
                "rendering.PlatformViewLayer",
                "rendering.RenderAbsorbPointer",
                "rendering.RenderAndroidView",
                "rendering.RenderAnimatedOpacity",
                "rendering.RenderAnimatedSize",
                "rendering.RenderAnnotatedRegion",
                "rendering.RenderAspectRatio",
                "rendering.RenderBackdropFilter",
                "rendering.RenderBaseline",
                "rendering.RenderBlockSemantics",
                "rendering.RenderClipOval",
                "rendering.RenderClipPath",
                "rendering.RenderClipRRect",
                "rendering.RenderClipRect",
                "rendering.RenderConstrainedBox",
                "rendering.RenderConstrainedOverflowBox",
                "rendering.RenderCustomMultiChildLayoutBox",
                "rendering.RenderCustomPaint",
                "rendering.RenderCustomSingleChildLayoutBox",
                "rendering.RenderDecoratedBox",
                "rendering.RenderEditable",
                "rendering.RenderErrorBox",
                "rendering.RenderExcludeSemantics",
                "rendering.RenderFittedBox",
                "rendering.RenderFlex",
                "rendering.RenderFlow",
                "rendering.RenderFollowerLayer",
                "rendering.RenderFractionalTranslation",
                "rendering.RenderFractionallySizedOverflowBox",
                "rendering.RenderIgnorePointer",
                "rendering.RenderImage",
                "rendering.RenderIndexedSemantics",
                "rendering.RenderIndexedStack",
                "rendering.RenderIntrinsicHeight",
                "rendering.RenderIntrinsicWidth",
                "rendering.RenderLeaderLayer",
                "rendering.RenderLimitedBox",
                "rendering.RenderListBody",
                "rendering.RenderListWheelViewport",
                "rendering.RenderMergeSemantics",
                "rendering.RenderMetaData",
                "rendering.RenderOffstage",
                "rendering.RenderOpacity",
                "rendering.RenderPadding",
                "rendering.RenderParagraph",
                "rendering.RenderPerformanceOverlay",
                "rendering.RenderPhysicalModel",
                "rendering.RenderPhysicalShape",
                "rendering.RenderPointerListener",
                "rendering.RenderPositionedBox",
                "rendering.RenderProxyBox",
                "rendering.RenderRepaintBoundary",
                "rendering.RenderRotatedBox",
                "rendering.RenderSemanticsAnnotations",
                "rendering.RenderSemanticsGestureHandler",
                "rendering.RenderShaderMask",
                "rendering.RenderShrinkWrappingViewport",
                "rendering.RenderSizedOverflowBox",
                "rendering.RenderSliverFillRemaining",
                "rendering.RenderSliverFillViewport",
                "rendering.RenderSliverFixedExtentList",
                "rendering.RenderSliverGrid",
                "rendering.RenderSliverList",
                "rendering.RenderSliverPadding",
                "rendering.RenderSliverToBoxAdapter",
                "rendering.RenderStack",
                "rendering.RenderTable",
                "rendering.RenderTransform",
                "rendering.RenderUiKitView",
                "rendering.RenderUnconstrainedBox",
                "rendering.RenderView",
                "rendering.RenderViewport",
                "rendering.RenderWrap",
                "rendering.RenderingFlutterBinding",
                "rendering.ShaderMaskLayer",
                "rendering.ShapeBorderClipper",
                "rendering.SliverConstraints",
                "rendering.SliverGeometry",
                "rendering.SliverGridDelegateWithFixedCrossAxisCount",
                "rendering.SliverGridDelegateWithMaxCrossAxisExtent",
                "rendering.SliverGridParentData",
                "rendering.SliverGridRegularTileLayout",
                "rendering.SliverHitTestEntry",
                "rendering.SliverLogicalContainerParentData",
                "rendering.SliverLogicalParentData",
                "rendering.SliverMultiBoxAdaptorParentData",
                "rendering.SliverPhysicalContainerParentData",
                "rendering.SliverPhysicalParentData",
                "rendering.StackParentData",
                "rendering.TableCellParentData",
                "rendering.TextureBox",
                "rendering.TextureLayer",
                "rendering.TransformLayer",
                "rendering.WrapParentData",
                "semantics.AnnounceSemanticsEvent",
                "semantics.LongPressSemanticsEvent",
                "semantics.OrdinalSortKey",
                "semantics.SemanticsData",
                "semantics.SemanticsHintOverrides",
                "semantics.SemanticsNode",
                "semantics.SemanticsOwner",
                "semantics.SemanticsProperties",
                "semantics.TapSemanticEvent",
                "semantics.TooltipSemanticsEvent",
                "semantics.UpdateLiveRegionEvent",
                "services.BlacklistingTextInputFormatter",
                "services.LengthLimitingTextInputFormatter",
                "services.LogicalKeyboardKey",
                "services.NetworkAssetBundle",
                "services.OptionalMethodChannel",
                "services.PhysicalKeyboardKey",
                "services.PlatformAssetBundle",
                "services.RawKeyDownEvent",
                "services.RawKeyEventDataAndroid",
                "services.RawKeyEventDataFuchsia",
                "services.RawKeyEventDataMacOs",
                "services.RawKeyUpEvent",
                "services.TextSelection",
                "services.WhitelistingTextInputFormatter",
                "source_span.FileLocation",
                "source_span.SourceLocationBase",
                "source_span.SourceSpanBase",
                "source_span.SourceSpanFormatException",
                "source_span.SourceSpanWithContext",
                "stream_channel.DelegatingStreamChannel",
                "stream_channel.IsolateChannel",
                "stream_channel.VirtualChannel",
                "string_scanner.LineScanner",
                "string_scanner.SpanScanner",
                "string_scanner.StringScannerException",
                "test_api.Throws",
                "typed_data.typed_buffers.Float32Buffer",
                "typed_data.typed_buffers.Float32x4Buffer",
                "typed_data.typed_buffers.Float64Buffer",
                "typed_data.typed_buffers.Int16Buffer",
                "typed_data.typed_buffers.Int32Buffer",
                "typed_data.typed_buffers.Int32x4Buffer",
                "typed_data.typed_buffers.Int64Buffer",
                "typed_data.typed_buffers.Int8Buffer",
                "typed_data.typed_buffers.Uint16Buffer",
                "typed_data.typed_buffers.Uint32Buffer",
                "typed_data.typed_buffers.Uint64Buffer",
                "typed_data.typed_buffers.Uint8Buffer",
                "typed_data.typed_buffers.Uint8ClampedBuffer",
                "vector_math_geometry.BarycentricFilter",
                "vector_math_geometry.CircleGenerator",
                "vector_math_geometry.ColorFilter",
                "vector_math_geometry.CubeGenerator",
                "vector_math_geometry.CylinderGenerator",
                "vector_math_geometry.FlatShadeFilter",
                "vector_math_geometry.InvertFilter",
                "vector_math_geometry.RingGenerator",
                "vector_math_geometry.SphereGenerator",
                "vector_math_geometry.TransformFilter",
                "vector_math_lists.Vector2List",
                "vector_math_lists.Vector3List",
                "vector_math_lists.Vector4List",
                "web_socket_channel.WebSocketChannel",
                "web_socket_channel.WebSocketSink",
                "web_socket_channel.io.IOWebSocketChannel",
                "widgets.AbsorbPointer",
                "widgets.Align",
                "widgets.AlignTransition",
                "widgets.AlwaysScrollableScrollPhysics",
                "widgets.AndroidView",
                "widgets.AnimatedAlign",
                "widgets.AnimatedBuilder",
                "widgets.AnimatedContainer",
                "widgets.AnimatedCrossFade",
                "widgets.AnimatedDefaultTextStyle",
                "widgets.AnimatedList",
                "widgets.AnimatedListState",
                "widgets.AnimatedModalBarrier",
                "widgets.AnimatedOpacity",
                "widgets.AnimatedPadding",
                "widgets.AnimatedPhysicalModel",
                "widgets.AnimatedPositioned",
                "widgets.AnimatedPositionedDirectional",
                "widgets.AnimatedSize",
                "widgets.AnimatedSwitcher",
                "widgets.AnnotatedRegion",
                "widgets.AspectRatio",
                "widgets.AutomaticKeepAlive",
                "widgets.BackdropFilter",
                "widgets.BallisticScrollActivity",
                "widgets.Banner",
                "widgets.BannerPainter",
                "widgets.Baseline",
                "widgets.BlockSemantics",
                "widgets.BorderRadiusTween",
                "widgets.BorderTween",
                "widgets.BouncingScrollPhysics",
                "widgets.BouncingScrollSimulation",
                "widgets.BoxConstraintsTween",
                "widgets.Builder",
                "widgets.Center",
                "widgets.CheckedModeBanner",
                "widgets.ClampingScrollPhysics",
                "widgets.ClampingScrollSimulation",
                "widgets.ClipOval",
                "widgets.ClipPath",
                "widgets.ClipRRect",
                "widgets.ClipRect",
                "widgets.Column",
                "widgets.CompositedTransformFollower",
                "widgets.CompositedTransformTarget",
                "widgets.ConstrainedBox",
                "widgets.Container",
                "widgets.CustomMultiChildLayout",
                "widgets.CustomPaint",
                "widgets.CustomScrollView",
                "widgets.CustomSingleChildLayout",
                "widgets.DecoratedBox",
                "widgets.DecoratedBoxTransition",
                "widgets.DecorationTween",
                "widgets.DefaultAssetBundle",
                "widgets.DefaultTextStyle",
                "widgets.DefaultTextStyleTransition",
                "widgets.Directionality",
                "widgets.Dismissible",
                "widgets.DragScrollActivity",
                "widgets.DragTarget",
                "widgets.Draggable",
                "widgets.DrivenScrollActivity",
                "widgets.EdgeInsetsGeometryTween",
                "widgets.EdgeInsetsTween",
                "widgets.EditableText",
                "widgets.EditableTextState",
                "widgets.ErrorWidget",
                "widgets.ExcludeSemantics",
                "widgets.Expanded",
                "widgets.FadeInImage",
                "widgets.FadeTransition",
                "widgets.FittedBox",
                "widgets.FixedExtentMetrics",
                "widgets.FixedExtentScrollController",
                "widgets.FixedExtentScrollPhysics",
                "widgets.FixedScrollMetrics",
                "widgets.Flex",
                "widgets.Flexible",
                "widgets.Flow",
                "widgets.FocusNode",
                "widgets.FocusScope",
                "widgets.Form",
                "widgets.FormField",
                "widgets.FormFieldState",
                "widgets.FormState",
                "widgets.FractionalTranslation",
                "widgets.FractionallySizedBox",
                "widgets.FutureBuilder",
                "widgets.GestureDetector",
                "widgets.GestureRecognizerFactoryWithHandlers",
                "widgets.GlobalObjectKey",
                "widgets.GlowingOverscrollIndicator",
                "widgets.GridPaper",
                "widgets.GridView",
                "widgets.Hero",
                "widgets.HeroController",
                "widgets.HoldScrollActivity",
                "widgets.Icon",
                "widgets.IconTheme",
                "widgets.IconThemeData",
                "widgets.IdleScrollActivity",
                "widgets.IgnorePointer",
                "widgets.Image",
                "widgets.ImageIcon",
                "widgets.IndexedSemantics",
                "widgets.IndexedStack",
                "widgets.InheritedElement",
                "widgets.InheritedModelElement",
                "widgets.IntrinsicHeight",
                "widgets.IntrinsicWidth",
                "widgets.KeepAlive",
                "widgets.KeepAliveHandle",
                "widgets.KeepAliveNotification",
                "widgets.KeyedSubtree",
                "widgets.LabeledGlobalKey",
                "widgets.LayoutBuilder",
                "widgets.LayoutChangedNotification",
                "widgets.LayoutId",
                "widgets.LeafRenderObjectElement",
                "widgets.LimitedBox",
                "widgets.ListBody",
                "widgets.ListView",
                "widgets.ListWheelChildBuilderDelegate",
                "widgets.ListWheelChildListDelegate",
                "widgets.ListWheelChildLoopingListDelegate",
                "widgets.ListWheelElement",
                "widgets.ListWheelScrollView",
                "widgets.ListWheelViewport",
                "widgets.Listener",
                "widgets.Localizations",
                "widgets.LongPressDraggable",
                "widgets.Matrix4Tween",
                "widgets.MediaQuery",
                "widgets.MergeSemantics",
                "widgets.MetaData",
                "widgets.ModalBarrier",
                "widgets.MultiChildRenderObjectElement",
                "widgets.NavigationToolbar",
                "widgets.Navigator",
                "widgets.NavigatorState",
                "widgets.NestedScrollView",
                "widgets.NestedScrollViewViewport",
                "widgets.NeverScrollableScrollPhysics",
                "widgets.NotificationListener",
                "widgets.ObjectKey",
                "widgets.Offstage",
                "widgets.Opacity",
                "widgets.OrientationBuilder",
                "widgets.OverflowBox",
                "widgets.Overlay",
                "widgets.OverlayState",
                "widgets.OverscrollIndicatorNotification",
                "widgets.OverscrollNotification",
                "widgets.Padding",
                "widgets.PageController",
                "widgets.PageMetrics",
                "widgets.PageRouteBuilder",
                "widgets.PageScrollPhysics",
                "widgets.PageStorage",
                "widgets.PageStorageKey",
                "widgets.PageView",
                "widgets.ParentDataElement",
                "widgets.PerformanceOverlay",
                "widgets.PhysicalModel",
                "widgets.PhysicalShape",
                "widgets.Placeholder",
                "widgets.Positioned",
                "widgets.PositionedDirectional",
                "widgets.PositionedTransition",
                "widgets.PreferredSize",
                "widgets.PrimaryScrollController",
                "widgets.RawGestureDetector",
                "widgets.RawGestureDetectorState",
                "widgets.RawImage",
                "widgets.RawKeyboardListener",
                "widgets.RelativePositionedTransition",
                "widgets.RelativeRectTween",
                "widgets.RenderNestedScrollViewViewport",
                "widgets.RenderObjectToWidgetAdapter",
                "widgets.RenderObjectToWidgetElement",
                "widgets.RenderSliverOverlapAbsorber",
                "widgets.RenderSliverOverlapInjector",
                "widgets.RepaintBoundary",
                "widgets.RichText",
                "widgets.RotatedBox",
                "widgets.RotationTransition",
                "widgets.RouteObserver",
                "widgets.Row",
                "widgets.SafeArea",
                "widgets.ScaleTransition",
                "widgets.ScrollConfiguration",
                "widgets.ScrollController",
                "widgets.ScrollEndNotification",
                "widgets.ScrollPositionWithSingleContext",
                "widgets.ScrollStartNotification",
                "widgets.ScrollUpdateNotification",
                "widgets.Scrollable",
                "widgets.ScrollableState",
                "widgets.ScrollbarPainter",
                "widgets.Semantics",
                "widgets.SemanticsDebugger",
                "widgets.ShaderMask",
                "widgets.ShrinkWrappingViewport",
                "widgets.SingleChildRenderObjectElement",
                "widgets.SingleChildScrollView",
                "widgets.SizeChangedLayoutNotification",
                "widgets.SizeChangedLayoutNotifier",
                "widgets.SizeTransition",
                "widgets.SizedBox",
                "widgets.SizedOverflowBox",
                "widgets.SlideTransition",
                "widgets.SliverChildBuilderDelegate",
                "widgets.SliverChildListDelegate",
                "widgets.SliverFillRemaining",
                "widgets.SliverFillViewport",
                "widgets.SliverFixedExtentList",
                "widgets.SliverGrid",
                "widgets.SliverList",
                "widgets.SliverMultiBoxAdaptorElement",
                "widgets.SliverOverlapAbsorber",
                "widgets.SliverOverlapAbsorberHandle",
                "widgets.SliverOverlapInjector",
                "widgets.SliverPadding",
                "widgets.SliverPersistentHeader",
                "widgets.SliverPrototypeExtentList",
                "widgets.SliverSafeArea",
                "widgets.SliverToBoxAdapter",
                "widgets.Spacer",
                "widgets.Stack",
                "widgets.StatefulBuilder",
                "widgets.StatefulElement",
                "widgets.StatelessElement",
                "widgets.StreamBuilder",
                "widgets.Table",
                "widgets.TableCell",
                "widgets.Text",
                "widgets.TextEditingController",
                "widgets.TextSelectionGestureDetector",
                "widgets.TextStyleTween",
                "widgets.Texture",
                "widgets.TickerMode",
                "widgets.Title",
                "widgets.TrackingScrollController",
                "widgets.Transform",
                "widgets.UiKitView",
                "widgets.UnconstrainedBox",
                "widgets.UniqueKey",
                "widgets.UserScrollNotification",
                "widgets.ValueListenableBuilder",
                "widgets.Viewport",
                "widgets.Visibility",
                "widgets.WidgetInspector",
                "widgets.WidgetToRenderBoxAdapter",
                "widgets.WidgetsApp",
                "widgets.WidgetsFlutterBinding",
                "widgets.WillPopScope",
                "widgets.Wrap"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"dart-core\/Object-class.html\">Object<\/a> instance.<\/p>\n<p><a href=\"dart-core\/Object-class.html\">Object<\/a> instances have no meaningful state, and are only useful\nthrough their identity. An <a href=\"dart-core\/Object-class.html\">Object<\/a> instance is equal to itself\nonly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Object();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Object\/Object.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Object",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Object",
                    "params": []
                },
                {
                    "desc": "<p>Invoked when a non-existent method or property is accessed.<\/p>\n<p>Classes can override <a href=\"dart-core\/Object\/noSuchMethod.html\">noSuchMethod<\/a> to provide custom behavior.<\/p>\n<p>If a value is returned, it becomes the result of the original invocation.<\/p>\n<p>The default behavior is to throw a <a href=\"dart-core\/NoSuchMethodError-class.html\">NoSuchMethodError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nexternal dynamic noSuchMethod(Invocation invocation);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Object\/noSuchMethod.html",
                    "isDeprecated": false,
                    "type": "<dynamic>",
                    "name": "noSuchMethod",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Object",
                    "params": [
                        {
                            "name": "invocation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Invocation"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Object\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Object",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Object\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Object",
                    "params": []
                },
                {
                    "desc": "<p>A representation of the runtime type of the object.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external Type get runtimeType;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Object\/runtimeType.html",
                    "name": "runtimeType",
                    "isDeprecated": false,
                    "type": "dart:core.Type",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Object",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/OutOfMemoryError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.OutOfMemoryError",
            "shortname": "OutOfMemoryError",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst OutOfMemoryError();<\/code><\/pre>\n    ",
                    "href": "dart-core\/OutOfMemoryError\/OutOfMemoryError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "OutOfMemoryError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.OutOfMemoryError",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Out of Memory\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/OutOfMemoryError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.OutOfMemoryError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StackTrace get stackTrace =&gt; null;<\/code><\/pre>\n        ",
                    "href": "dart-core\/OutOfMemoryError\/stackTrace.html",
                    "name": "stackTrace",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.OutOfMemoryError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interface for basic searches within strings.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Pattern-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Pattern",
            "shortname": "Pattern",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Pattern\/Pattern.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Pattern",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Pattern",
                    "params": []
                },
                {
                    "desc": "<p>Match this pattern against the string repeatedly.<\/p>\n<p>If <code>start<\/code> is provided, matching will start at that index.<\/p>\n<p>The returned iterable lazily computes all the non-overlapping matches\nof the pattern on the string, ordered by start index.\nIf a user only requests the first\nmatch, this function should not compute all possible matches.<\/p>\n<p>The matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.<\/p>\n<p>If the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Match&gt; allMatches(String string, [int start = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Pattern\/allMatches.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.Match>",
                    "name": "allMatches",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Pattern",
                    "params": [
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Match this pattern against the start of <code>string<\/code>.<\/p>\n<p>If <code>start<\/code> is provided, it must be an integer in the range <code>0<\/code> ..\n<code>string.length<\/code>. In that case, this patten is tested against the\nstring at the <code>start<\/code> position. That is, a <a href=\"dart-core\/Match-class.html\">Match<\/a> is returned if the\npattern can match a part of the string starting from position <code>start<\/code>.\nReturns <code>null<\/code> if the pattern doesn't match.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Match matchAsPrefix(String string, [int start = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Pattern\/matchAsPrefix.html",
                    "isDeprecated": false,
                    "type": "dart:core.Match",
                    "name": "matchAsPrefix",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Pattern",
                    "params": [
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An annotation class that was used during development of Dart 2.<\/p>\n<p>Should not be used any more.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Provisional-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": true,
            "memberOf": "dart:core",
            "name": "dart:core.Provisional",
            "shortname": "Provisional",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const Provisional({String message});<\/code><\/pre>\n    ",
                    "href": "dart-core\/Provisional\/Provisional.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Provisional",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Provisional",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get message =&gt; null;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Provisional\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Provisional",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Error thrown due to an index being outside a valid range.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/RangeError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.RangeError",
            "shortname": "RangeError",
            "extends": [
                "dart:core.ArgumentError",
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a new <a href=\"dart-core\/RangeError-class.html\">RangeError<\/a> with the given <code>message<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nRangeError(var message)\n    : start = null,\n      end = null,\n      super(message);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RangeError\/RangeError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RangeError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.RangeError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<dynamic>"
                        }
                    ]
                },
                {
                    "desc": "<p>Check that an integer value isn't negative.<\/p>\n<p>Throws if the value is negative.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void checkNotNegative(int value, [String name, String message]) {\n  if (value &lt; 0) throw new RangeError.range(value, 0, null, name, message);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RangeError\/checkNotNegative.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "checkNotNegative",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RangeError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Check that a value is a valid index into an indexable object.<\/p>\n<p>Throws if <code>index<\/code> is not a valid index into <code>indexable<\/code>.<\/p>\n<p>An indexable object is one that has a <code>length<\/code> and a and index-operator\n<code>[]<\/code> that accepts an index if <code>0 &lt;= index &lt; length<\/code>.<\/p>\n<p>If <code>length<\/code> is provided, it is used as the length of the indexable object,\notherwise the length is found as <code>indexable.length<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void checkValidIndex(int index, dynamic indexable,\n    [String name, int length, String message]) {\n  length ??= indexable.length;\n  \/\/ Comparing with `0` as receiver produces better dart2js type inference.\n  if (0 &gt; index || index &gt;= length) {\n    name ??= \"index\";\n    throw new RangeError.index(index, indexable, name, message, length);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RangeError\/checkValidIndex.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "checkValidIndex",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RangeError",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "indexable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Check that a range represents a slice of an indexable object.<\/p>\n<p>Throws if the range is not valid for an indexable object with\nthe given <code>length<\/code>.\nA range is valid for an indexable object with a given <code>length<\/code><\/p>\n<p>if <code>0 &lt;= [start] &lt;= [end] &lt;= [length]<\/code>.\nAn <code>end<\/code> of <code>null<\/code> is considered equivalent to <code>length<\/code>.<\/p>\n<p>The <code>startName<\/code> and <code>endName<\/code> defaults to <code>\"start\"<\/code> and <code>\"end\"<\/code>,\nrespectively.<\/p>\n<p>Returns the actual <code>end<\/code> value, which is <code>length<\/code> if <code>end<\/code> is <code>null<\/code>,\nand <code>end<\/code> otherwise.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int checkValidRange(int start, int end, int length,\n    [String startName, String endName, String message]) {\n  \/\/ Comparing with `0` as receiver produces better dart2js type inference.\n  \/\/ Ditto `start &gt; end` below.\n  if (0 &gt; start || start &gt; length) {\n    startName ??= \"start\";\n    throw new RangeError.range(start, 0, length, startName, message);\n  }\n  if (end != null) {\n    if (start &gt; end || end &gt; length) {\n      endName ??= \"end\";\n      throw new RangeError.range(end, start, length, endName, message);\n    }\n    return end;\n  }\n  return length;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RangeError\/checkValidRange.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "checkValidRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RangeError",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "endName",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "length",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "startName",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Check that a <code>value<\/code> lies in a specific interval.<\/p>\n<p>Throws if <code>value<\/code> is not in the interval.\nThe interval is from <code>minValue<\/code> to <code>maxValue<\/code>, both inclusive.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static void checkValueInInterval(int value, int minValue, int maxValue,\n    [String name, String message]) {\n  if (value &lt; minValue || value &gt; maxValue) {\n    throw new RangeError.range(value, minValue, maxValue, name, message);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RangeError\/checkValueInInterval.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "checkValueInInterval",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RangeError",
                    "params": [
                        {
                            "name": "maxValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "minValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The maximum value that <a href=\"dart-core\/RangeError\/RangeError.value.html\">value<\/a> is allowed to assume.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final num end\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/RangeError\/end.html",
                    "name": "end",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RangeError",
                    "params": []
                },
                {
                    "desc": "<p>The minimum value that <a href=\"dart-core\/RangeError\/RangeError.value.html\">value<\/a> is allowed to assume.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final num start\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/RangeError\/start.html",
                    "name": "start",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RangeError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A regular expression pattern.<\/p>\n<p>Regular expressions are <a href=\"dart-core\/Pattern-class.html\">Pattern<\/a>s, and can as such be used to match strings\nor parts of strings.<\/p>\n<p>Dart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<a href=\"http:\/\/ecma-international.org\/ecma-262\/5.1\/#sec-15.10\">ecma-international.org\/ecma-262\/5.1\/#sec-15.10<\/a>\nfor the specification of JavaScript regular expressions.<\/p>\n<p><a href=\"dart-core\/RegExp\/firstMatch.html\">firstMatch<\/a> is the main implementation method that applies a regular\nexpression to a string and returns the first <a href=\"dart-core\/Match-class.html\">Match<\/a>. All\nother methods in <a href=\"dart-core\/RegExp-class.html\">RegExp<\/a> can build on it.<\/p>\n<p>Use <a href=\"dart-core\/RegExp\/allMatches.html\">allMatches<\/a> to look for all matches of a regular expression in\na string.<\/p>\n<p>The following example finds all matches of a regular expression in\na string.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">RegExp exp = new RegExp(r\"(\\w+)\");\nString str = \"Parse my string\";\nIterable&lt;Match&gt; matches = exp.allMatches(str);\n<\/code><\/pre>\n<p>Note the use of a <em>raw string<\/em> (a string prefixed with <code>r<\/code>)\nin the example above. Use a raw string to treat each character in a string\nas a literal character.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/RegExp-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.RegExp",
            "shortname": "RegExp",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs a regular expression.<\/p>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if <code>source<\/code> is not valid regular\nexpression syntax.<\/p>\n<p>If <code>multiLine<\/code> is enabled, then <code>^<\/code> and <code>$<\/code> will match the beginning and\nend of a <em>line<\/em>, in addition to matching beginning and end of input,\nrespectively.<\/p>\n<p>If <code>caseSensitive<\/code> is disabled, then case is ignored.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var wordPattern = RegExp(r\"(\\w+)\");\nvar bracketedNumberValue = RegExp(\"$key: \\\\[\\\\d+\\\\]\");\n<\/code><\/pre>\n<p>Notice the use of a <em>raw string<\/em> in the first example, and a regular\nstring in the second. Because of the many character classes used in\nregular expressions, it is common to use a raw string here, unless string\ninterpolation is required.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory RegExp(String source,\n    {bool multiLine: false, bool caseSensitive: true});<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExp\/RegExp.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RegExp",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.RegExp",
                    "params": [
                        {
                            "name": "caseSensitive",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "multiLine",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an iterable of the matches of the regular expression on <code>input<\/code>.<\/p>\n<p>If <code>start<\/code> is provided, only start looking for matches at <code>start<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;Match&gt; allMatches(String input, [int start = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExp\/allMatches.html",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.Match>",
                    "name": "allMatches",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RegExp",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a regular expression that matches <code>text<\/code>.<\/p>\n<p>If <code>text<\/code> contains characters that are meaningful in regular expressions,\nthe resulting regular expression will match those characters literally.\nIf <code>text<\/code> contains no characters that have special meaning in a regular\nexpression, it is returned unmodified.<\/p>\n<p>The characters that have special meaning in regular expressions are:\n<code>(<\/code>, <code>)<\/code>, <code>[<\/code>, <code>]<\/code>, <code>{<\/code>, <code>}<\/code>, <code>*<\/code>, <code>+<\/code>, <code>?<\/code>, <code>.<\/code>, <code>^<\/code>, <code>$<\/code>, <code>|<\/code> and <code>\\<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static String escape(String text);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExp\/escape.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "escape",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RegExp",
                    "params": [
                        {
                            "name": "text",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Searches for the first match of the regular expression\nin the string <code>input<\/code>. Returns <code>null<\/code> if there is no match.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Match firstMatch(String input);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExp\/firstMatch.html",
                    "isDeprecated": false,
                    "type": "dart:core.Match",
                    "name": "firstMatch",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RegExp",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether the regular expression has a match in the string <code>input<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasMatch(String input);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExp\/hasMatch.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "hasMatch",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RegExp",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the first substring match of this regular expression in <code>input<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String stringMatch(String input);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExp\/stringMatch.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "stringMatch",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RegExp",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Whether this regular expression is case sensitive.<\/p>\n<p>If the regular expression is not case sensitive, it will match an input\nletter with a pattern letter even if the two letters are different case\nversions of the same letter.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isCaseSensitive;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RegExp\/isCaseSensitive.html",
                    "name": "isCaseSensitive",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RegExp",
                    "params": []
                },
                {
                    "desc": "<p>Whether this regular expression matches multiple lines.<\/p>\n<p>If the regexp does match multiple lines, the \"^\" and \"$\" characters\nmatch the beginning and end of lines. If not, the character match the\nbeginning and end of the input.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMultiLine;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RegExp\/isMultiLine.html",
                    "name": "isMultiLine",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RegExp",
                    "params": []
                },
                {
                    "desc": "<p>The source regular expression string used to create this <code>RegExp<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get pattern;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RegExp\/pattern.html",
                    "name": "pattern",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RegExp",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A regular expression match.<\/p>\n<p>Regular expression matches are <a href=\"dart-core\/Match-class.html\">Match<\/a>es, but also include the ability\nto retrieve the names for any named capture groups and to retrieve\nmatches for named capture groups by name instead of their index.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/RegExpMatch-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.RegExpMatch",
            "shortname": "RegExpMatch",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/RegExpMatch\/RegExpMatch.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RegExpMatch",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.RegExpMatch",
                    "params": []
                },
                {
                    "desc": "<p>The string matched by the group named <code>name<\/code>.<\/p>\n<p>Returns the string matched by the capture group named <code>name<\/code>, or\n<code>null<\/code> if no string was matched by that capture group as part of\nthis match.<\/p>\n<p>The <code>name<\/code> must be the name of a named capture group in the regular\nexpression creating this match (that is, the name must be in\n<a href=\"dart-core\/RegExpMatch\/groupNames.html\">groupNames<\/a>).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String namedGroup(String name);<\/code><\/pre>\n    ",
                    "href": "dart-core\/RegExpMatch\/namedGroup.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "namedGroup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RegExpMatch",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The names of the captured groups in the match.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;String&gt; get groupNames;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RegExpMatch\/groupNames.html",
                    "name": "groupNames",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<dart:core.String>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RegExpMatch",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p><a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> for reading runes (integer Unicode code points) out of a Dart<\/p>\n<ul><li>string.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/RuneIterator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.RuneIterator",
            "shortname": "RuneIterator",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create an iterator positioned at the beginning of the string.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RuneIterator(String string)\n    : this.string = string,\n      _position = 0,\n      _nextPosition = 0;<\/code><\/pre>\n    ",
                    "href": "dart-core\/RuneIterator\/RuneIterator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RuneIterator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": [
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Moves to the next element.<\/p>\n<p>Returns true if <a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> contains the next element.\nReturns false if no elements are left.<\/p>\n<p>It is safe to invoke <a href=\"dart-core\/RuneIterator\/moveNext.html\">moveNext<\/a> even when the iterator is already\npositioned after the last element.\nIn this case <a href=\"dart-core\/RuneIterator\/moveNext.html\">moveNext<\/a> returns false again and has no effect.<\/p>\n<p>A call to <code>moveNext<\/code> may throw if iteration has been broken by\nchanging the underlying collection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool moveNext() {\n  _position = _nextPosition;\n  if (_position == string.length) {\n    _currentCodePoint = null;\n    return false;\n  }\n  int codeUnit = string.codeUnitAt(_position);\n  int nextPosition = _position + 1;\n  if (_isLeadSurrogate(codeUnit) &amp;&amp; nextPosition &lt; string.length) {\n    int nextCodeUnit = string.codeUnitAt(nextPosition);\n    if (_isTrailSurrogate(nextCodeUnit)) {\n      _nextPosition = nextPosition + 1;\n      _currentCodePoint = _combineSurrogatePair(codeUnit, nextCodeUnit);\n      return true;\n    }\n  }\n  _nextPosition = nextPosition;\n  _currentCodePoint = codeUnit;\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RuneIterator\/moveNext.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "moveNext",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                },
                {
                    "desc": "<p>Move back to the previous element.<\/p>\n<p>Returns true and updates <a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> if successful. Returns false\nand sets <a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> to null if there is no previous element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool movePrevious() {\n  _nextPosition = _position;\n  if (_position == 0) {\n    _currentCodePoint = null;\n    return false;\n  }\n  int position = _position - 1;\n  int codeUnit = string.codeUnitAt(position);\n  if (_isTrailSurrogate(codeUnit) &amp;&amp; position &gt; 0) {\n    int prevCodeUnit = string.codeUnitAt(position - 1);\n    if (_isLeadSurrogate(prevCodeUnit)) {\n      _position = position - 1;\n      _currentCodePoint = _combineSurrogatePair(prevCodeUnit, codeUnit);\n      return true;\n    }\n  }\n  _position = position;\n  _currentCodePoint = codeUnit;\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RuneIterator\/movePrevious.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "movePrevious",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                },
                {
                    "desc": "<p>Resets the iterator to the given index into the string.<\/p>\n<p>After this the <a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> value is unset.\nYou must call <a href=\"dart-core\/RuneIterator\/moveNext.html\">moveNext<\/a> make the rune at the position current,\nor <a href=\"dart-core\/RuneIterator\/movePrevious.html\">movePrevious<\/a> for the last rune before the position.<\/p>\n<p>Setting a negative <code>rawIndex<\/code>, or one greater than <code>string.length<\/code>,\nis an error. So is setting it in the middle of a surrogate pair.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset([int rawIndex = 0]) {\n  RangeError.checkValueInInterval(rawIndex, 0, string.length, \"rawIndex\");\n  _checkSplitSurrogate(rawIndex);\n  _position = _nextPosition = rawIndex;\n  _currentCodePoint = null;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/RuneIterator\/reset.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "reset",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": [
                        {
                            "name": "rawIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The rune (integer Unicode code point) starting at the current position in<\/p>\n<ul><li> the string.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get current =&gt; _currentCodePoint;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RuneIterator\/current.html",
                    "name": "current",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                },
                {
                    "desc": "<p>A string containing the current rune.<\/p>\n<p>For runes outside the basic multilingual plane, this will be\na String of length 2, containing two code units.<\/p>\n<p>Returns null if <a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> is null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get currentAsString {\n  if (_position == _nextPosition) return null;\n  if (_position + 1 == _nextPosition) return string[_position];\n  return string.substring(_position, _nextPosition);\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/RuneIterator\/currentAsString.html",
                    "name": "currentAsString",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                },
                {
                    "desc": "<p>The number of code units comprising the current rune.<\/p>\n<p>Returns zero if there is no current rune (<a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> is null).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get currentSize =&gt; _nextPosition - _position;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RuneIterator\/currentSize.html",
                    "name": "currentSize",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                },
                {
                    "desc": "<p>Returns the starting position of the current rune in the string.<\/p>\n<p>Returns null if the <a href=\"dart-core\/RuneIterator\/current.html\">current<\/a> rune is null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get rawIndex =&gt; (_position != _nextPosition) ? _position : null;<\/code><\/pre>\n        ",
                    "href": "dart-core\/RuneIterator\/rawIndex.html",
                    "name": "rawIndex",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                },
                {
                    "desc": "<p>String being iterated.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String string\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/RuneIterator\/string.html",
                    "name": "string",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.RuneIterator",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The runes (integer Unicode code points) of a <a href=\"dart-core\/String-class.html\">String<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Runes-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Runes",
            "shortname": "Runes",
            "extends": [
                "dart:core.int",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Runes(this.string);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Runes\/Runes.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Runes",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Runes",
                    "params": [
                        {
                            "name": "string",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">RuneIterator get iterator =&gt; new RuneIterator(string);<\/code><\/pre>\n        ",
                    "href": "dart-core\/Runes\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.RuneIterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Runes",
                    "params": []
                },
                {
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get last {\n  if (string.length == 0) {\n    throw new StateError('No elements.');\n  }\n  int length = string.length;\n  int code = string.codeUnitAt(length - 1);\n  if (_isTrailSurrogate(code) &amp;&amp; string.length &gt; 1) {\n    int previousCode = string.codeUnitAt(length - 2);\n    if (_isLeadSurrogate(previousCode)) {\n      return _combineSurrogatePair(previousCode, code);\n    }\n  }\n  return code;\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/Runes\/last.html",
                    "name": "last",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Runes",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String string\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/Runes\/string.html",
                    "name": "string",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Runes",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A collection of objects in which each object can occur only once.<\/p>\n<p>That is, for each object of the element type, the object is either considered\nto be in the set, or to <em>not<\/em> be in the set.<\/p>\n<p>Set implementations may consider some elements indistinguishable. These\nelements are treated as being the same for any operation on the set.<\/p>\n<p>The default <a href=\"dart-core\/Set-class.html\">Set<\/a> implementation, <a href=\"dart-collection\/LinkedHashSet-class.html\">LinkedHashSet<\/a>, considers objects\nindistinguishable if they are equal with regard to\noperator <a href=\"dart-core\/Object\/operator_equals.html\">Object.==<\/a>.<\/p>\n<p>Iterating over elements of a set may be either unordered\nor ordered in some way. Examples:<\/p>\n<ul>\n<li>A <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> is unordered, which means that its iteration order is\nunspecified,<\/li>\n<li>\n<a href=\"dart-collection\/LinkedHashSet-class.html\">LinkedHashSet<\/a> iterates in the insertion order of its elements, and<\/li>\n<li>a sorted set like <a href=\"dart-collection\/SplayTreeSet-class.html\">SplayTreeSet<\/a> iterates the elements in sorted order.<\/li>\n<\/ul>\n<p>It is generally not allowed to modify the set (add or remove elements) while\nan operation on the set is being performed, for example during a call to\n<a href=\"dart-core\/Iterable\/forEach.html\">forEach<\/a> or <a href=\"dart-core\/Set\/containsAll.html\">containsAll<\/a>. Nor is it allowed to modify the set while\niterating either the set itself or any <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> that is backed by the set,\nsuch as the ones returned by methods like <a href=\"dart-core\/Iterable\/where.html\">where<\/a> and <a href=\"dart-core\/Iterable\/map.html\">map<\/a>.<\/p>\n<p>It is generally not allowed to modify the equality of elements (and thus not\ntheir hashcode) while they are in the set. Some specialized subtypes may be\nmore permissive, in which case they should document this behavior.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Set-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Set",
            "shortname": "Set",
            "extends": [
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates an empty <a href=\"dart-core\/Set-class.html\">Set<\/a>.<\/p>\n<p>The created <a href=\"dart-core\/Set-class.html\">Set<\/a> is a plain <a href=\"dart-collection\/LinkedHashSet-class.html\">LinkedHashSet<\/a>.\nAs such, it considers elements that are equal (using <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>) to be\nindistinguishable, and requires them to have a compatible\n<a href=\"dart-core\/Object\/hashCode.html\">Object.hashCode<\/a> implementation.<\/p>\n<p>The set is equivalent to one created by <code>new LinkedHashSet&lt;E&gt;()<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Set() = LinkedHashSet&lt;E&gt;;<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/Set.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Set",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": []
                },
                {
                    "desc": "<p>Adds <code>value<\/code> to the set.<\/p>\n<p>Returns <code>true<\/code> if <code>value<\/code> (or an equal value) was not yet in the set.\nOtherwise returns <code>false<\/code> and the set is not changed.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>var set = new Set();\nvar time1 = new DateTime.fromMillisecondsSinceEpoch(0);\nvar time2 = new DateTime.fromMillisecondsSinceEpoch(0);\n\/\/ time1 and time2 are equal, but not identical.\nExpect.isTrue(time1 == time2);\nExpect.isFalse(identical(time1, time2));\nset.add(time1);  \/\/ =&gt; true.\n\/\/ A value equal to time2 exists already in the set, and the call to\n\/\/ add doesn't change the set.\nset.add(time2);  \/\/ =&gt; false.\nExpect.isTrue(set.length == 1);\nExpect.isTrue(identical(time1, set.first));\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool add(E value);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/add.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds all <code>elements<\/code> to this Set.<\/p>\n<p>Equivalent to adding each element in <code>elements<\/code> using <a href=\"dart-core\/Set\/add.html\">add<\/a>,\nbut some collections may be able to optimize it.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addAll(Iterable&lt;E&gt; elements);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/addAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Provides a view of this set as a set of <code>R<\/code> instances.<\/p>\n<p>If this set contains only instances of <code>R<\/code>, all read operations\nwill work correctly. If any operation tries to access an element\nthat is not an instance of <code>R<\/code>, the access will throw instead.<\/p>\n<p>Elements added to the set (e.g., by using <a href=\"dart-core\/Set\/add.html\">add<\/a> or <a href=\"dart-core\/Set\/addAll.html\">addAll<\/a>)\nmust be instance of <code>R<\/code> to be valid arguments to the adding function,\nand they must be instances of <code>E<\/code> as well to be accepted by\nthis set as well.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;R&gt; cast&lt;R&gt;();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/cast.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "cast",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": []
                },
                {
                    "desc": "<p>Adapts <code>source<\/code> to be a <code>Set&lt;T&gt;<\/code>.<\/p>\n<p>If <code>newSet<\/code> is provided, it is used to create the new sets returned\nby <a href=\"dart-core\/Set\/toSet.html\">toSet<\/a>, <a href=\"dart-core\/Set\/union.html\">union<\/a>, and is also used for <a href=\"dart-core\/Set\/intersection.html\">intersection<\/a> and <a href=\"dart-core\/Set\/difference.html\">difference<\/a>.\nIf <code>newSet<\/code> is omitted, it defaults to creating a new set using the\ndefault <a href=\"dart-core\/Set-class.html\">Set<\/a> constructor, and <a href=\"dart-core\/Set\/intersection.html\">intersection<\/a> and <a href=\"dart-core\/Set\/difference.html\">difference<\/a>\nreturns an adapted version of calling the same method on the source.<\/p>\n<p>Any time the set would produce an element that is not a <code>T<\/code>,\nthe element access will throw.<\/p>\n<p>Any time a <code>T<\/code> value is attempted added into the adapted set,\nthe store will throw unless the value is also an instance of <code>S<\/code>.<\/p>\n<p>If all accessed elements of <code>source<\/code> are actually instances of <code>T<\/code>,\nand if all elements added to the returned set are actually instance\nof <code>S<\/code>,\nthen the returned set can be used as a <code>Set&lt;T&gt;<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Set&lt;T&gt; castFrom&lt;S, T&gt;(Set&lt;S&gt; source, {Set&lt;R&gt; Function&lt;R&gt;() newSet}) =&gt;\n    new CastSet&lt;S, T&gt;(source, newSet);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/castFrom.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "castFrom",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "newSet",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void clear();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if <code>value<\/code> is in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Object value);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns whether this Set contains all the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool containsAll(Iterable&lt;Object&gt; other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/containsAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "containsAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set with the elements of this that are not in <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare not elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; difference(Set&lt;Object&gt; other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/difference.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "difference",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new set which is the intersection between this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> that\nare also elements of <code>other<\/code> according to <code>other.contains<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; intersection(Set&lt;Object&gt; other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/intersection.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "intersection",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>If an object equal to <code>object<\/code> is in the set, return it.<\/p>\n<p>Checks whether <code>object<\/code> is in the set, like <a href=\"dart-core\/Set\/contains.html\">contains<\/a>, and if so,\nreturns the object in the set, otherwise returns <code>null<\/code>.<\/p>\n<p>If the equality relation used by the set is not identity,\nthen the returned object may not be <em>identical<\/em> to <code>object<\/code>.\nSome set implementations may not be able to implement this method.\nIf the <a href=\"dart-core\/Set\/contains.html\">contains<\/a> method is computed,\nrather than being based on an actual object instance,\nthen there may not be a specific object instance representing the\nset element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">E lookup(Object object);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/lookup.html",
                    "isDeprecated": false,
                    "type": "<E>",
                    "name": "lookup",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "object",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes <code>value<\/code> from the set. Returns true if <code>value<\/code> was\nin the set. Returns false otherwise. The method has no effect\nif <code>value<\/code> value was not in the set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool remove(Object value);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/remove.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "remove",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes each element of <code>elements<\/code> from this set.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeAll(Iterable&lt;Object&gt; elements);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/removeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void removeWhere(bool test(E element));<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/removeWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that are not elements in <code>elements<\/code>.<\/p>\n<p>Checks for each element of <code>elements<\/code> whether there is an element in this\nset that is equal to it (according to <code>this.contains<\/code>), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in <code>elements<\/code> are removed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainAll(Iterable&lt;Object&gt; elements);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/retainAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "elements",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.Object>"
                        }
                    ]
                },
                {
                    "desc": "<p>Removes all elements of this set that fail to satisfy <code>test<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void retainWhere(bool test(E element));<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/retainWhere.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "retainWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<E>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; toSet();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new set which contains all the elements of this set and <code>other<\/code>.<\/p>\n<p>That is, the returned set contains all the elements of this <a href=\"dart-core\/Set-class.html\">Set<\/a> and\nall the elements of <code>other<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;E&gt; union(Set&lt;E&gt; other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Set\/union.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "union",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Set",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Set"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Provides an iterator that iterates over the elements of this set.<\/p>\n<p>The order of iteration is defined by the individual <code>Set<\/code> implementation,\nbut must be consistent between changes to the set.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;E&gt; get iterator;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Set\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Set",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A generic destination for data.<\/p>\n<p>Multiple data values can be put into a sink, and when no more data is\navailable, the sink should be closed.<\/p>\n<p>This is a generic interface that other data receivers can implement.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Sink-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Sink",
            "shortname": "Sink",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Sink\/Sink.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Sink",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Sink",
                    "params": []
                },
                {
                    "desc": "<p>Adds <code>data<\/code> to the sink.<\/p>\n<p>Must not be called after a call to <a href=\"dart-core\/Sink\/close.html\">close<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void add(T data);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Sink\/add.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "add",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Sink",
                    "params": [
                        {
                            "name": "data",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Closes the sink.<\/p>\n<p>The <a href=\"dart-core\/Sink\/add.html\">add<\/a> method must not be called after this method.<\/p>\n<p>Calling this method more than once is allowed, but does nothing.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Sink\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Sink",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/StackOverflowError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.StackOverflowError",
            "shortname": "StackOverflowError",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nconst StackOverflowError();<\/code><\/pre>\n    ",
                    "href": "dart-core\/StackOverflowError\/StackOverflowError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StackOverflowError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.StackOverflowError",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Stack Overflow\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/StackOverflowError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StackOverflowError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">StackTrace get stackTrace =&gt; null;<\/code><\/pre>\n        ",
                    "href": "dart-core\/StackOverflowError\/stackTrace.html",
                    "name": "stackTrace",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.StackOverflowError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An interface implemented by all stack trace objects.<\/p>\n<p>A <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a> is intended to convey information to the user about the call\nsequence that triggered an exception.<\/p>\n<p>These objects are created by the runtime, it is not possible to create\nthem programmatically.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/StackTrace-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.StackTrace",
            "shortname": "StackTrace",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StackTrace();<\/code><\/pre>\n    ",
                    "href": "dart-core\/StackTrace\/StackTrace.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StackTrace",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.StackTrace",
                    "params": []
                },
                {
                    "desc": "<p>Returns a <a href=\"dart-core\/String-class.html\">String<\/a> representation of the stack trace.<\/p>\n<p>The string represents the full stack trace starting from\nthe point where a throw occurred to the top of the current call sequence.<\/p>\n<p>The exact format of the string representation is not final.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/StackTrace\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StackTrace",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a representation of the current stack trace.<\/p>\n<p>This is similar to what can be achieved by doing:<\/p>\n<pre class=\"language-dart\"><code>try { throw 0; } catch (_, stack) { return stack; }\n<\/code><\/pre>\n<p>The getter achieves this without throwing, except on platforms that\nhave no other way to get a stack trace.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static StackTrace get current;<\/code><\/pre>\n        ",
                    "href": "dart-core\/StackTrace\/current.html",
                    "name": "current",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.StackTrace",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The operation was not allowed by the current state of the object.<\/p>\n<p>This is a generic error used for a variety of different erroneous\nactions. The message should be descriptive.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/StateError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.StateError",
            "shortname": "StateError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StateError(this.message);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StateError\/StateError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StateError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.StateError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Bad state: $message\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/StateError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StateError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/StateError\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.StateError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A simple stopwatch interface to measure elapsed time.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Stopwatch-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Stopwatch",
            "shortname": "Stopwatch",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> in stopped state with a zero elapsed count.<\/p>\n<p>The following example shows how to start a <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a>\nimmediately after allocation.<\/p>\n<pre class=\"language-dart\"><code>var stopwatch = new Stopwatch()..start();\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Stopwatch() {\n  if (_frequency == null) _initTicker();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Stopwatch\/Stopwatch.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Stopwatch",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>Resets the <a href=\"dart-core\/Stopwatch\/elapsed.html\">elapsed<\/a> count to zero.<\/p>\n<p>This method does not stop or start the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void reset() {\n  _start = _stop ?? _now();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Stopwatch\/reset.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "reset",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>Starts the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a>.<\/p>\n<p>The <a href=\"dart-core\/Stopwatch\/elapsed.html\">elapsed<\/a> count is increasing monotonically. If the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> has\nbeen stopped, then calling start again restarts it without resetting the\n<a href=\"dart-core\/Stopwatch\/elapsed.html\">elapsed<\/a> count.<\/p>\n<p>If the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> is currently running, then calling start does nothing.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void start() {\n  if (_stop != null) {\n    \/\/ (Re)start this stopwatch.\n    \/\/ Don't count the time while the stopwatch has been stopped.\n    _start += _now() - _stop;\n    _stop = null;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Stopwatch\/start.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "start",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>Stops the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a>.<\/p>\n<p>The <a href=\"dart-core\/Stopwatch\/elapsedTicks.html\">elapsedTicks<\/a> count stops increasing after this call. If the\n<a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> is currently not running, then calling this method has no\neffect.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void stop() {\n  _stop ??= _now();\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Stopwatch\/stop.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "stop",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The <a href=\"dart-core\/Stopwatch\/elapsedTicks.html\">elapsedTicks<\/a> counter converted to a <a href=\"dart-core\/Duration-class.html\">Duration<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Duration get elapsed {\n  return new Duration(microseconds: elapsedMicroseconds);\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/Stopwatch\/elapsed.html",
                    "name": "elapsed",
                    "isDeprecated": false,
                    "type": "dart:core.Duration",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"dart-core\/Stopwatch\/elapsedTicks.html\">elapsedTicks<\/a> counter converted to microseconds.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get elapsedMicroseconds;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Stopwatch\/elapsedMicroseconds.html",
                    "name": "elapsedMicroseconds",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"dart-core\/Stopwatch\/elapsedTicks.html\">elapsedTicks<\/a> counter converted to milliseconds.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get elapsedMilliseconds;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Stopwatch\/elapsedMilliseconds.html",
                    "name": "elapsedMilliseconds",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>The elapsed number of clock ticks since calling <a href=\"dart-core\/Stopwatch\/start.html\">start<\/a> while the\n<a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> is running.<\/p>\n<p>This is the elapsed number of clock ticks between calling <a href=\"dart-core\/Stopwatch\/start.html\">start<\/a> and\ncalling <a href=\"dart-core\/Stopwatch\/stop.html\">stop<\/a>.<\/p>\n<p>Is 0 if the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> has never been started.<\/p>\n<p>The elapsed number of clock ticks increases by <a href=\"dart-core\/Stopwatch\/frequency.html\">frequency<\/a> every second.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get elapsedTicks {\n  return (_stop ?? _now()) - _start;\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/Stopwatch\/elapsedTicks.html",
                    "name": "elapsedTicks",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>Frequency of the elapsed counter in Hz.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get frequency =&gt; _frequency;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Stopwatch\/frequency.html",
                    "name": "frequency",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                },
                {
                    "desc": "<p>Whether the <a href=\"dart-core\/Stopwatch-class.html\">Stopwatch<\/a> is currently running.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isRunning =&gt; _stop == null;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Stopwatch\/isRunning.html",
                    "name": "isRunning",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Stopwatch",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A sequence of UTF-16 code units.<\/p>\n<p>Strings are mainly used to represent text. A character may be represented by\nmultiple code points, each code point consisting of one or two code\nunits. For example the Papua New Guinea flag character requires four code\nunits to represent two code points, but should be treated like a single\ncharacter: \"\ud83c\uddf5\ud83c\uddec\". Platforms that do not support the flag character may show\nthe letters \"PG\" instead. If the code points are swapped, it instead becomes\nthe Guadeloupe flag \"\ud83c\uddec\ud83c\uddf5\" (\"GP\").<\/p>\n<p>A string can be either single or multiline. Single line strings are\nwritten using matching single or double quotes, and multiline strings are\nwritten using triple quotes. The following are all valid Dart strings:<\/p>\n<pre class=\"language-dart\"><code>'Single quotes';\n\"Double quotes\";\n'Double quotes in \"single\" quotes';\n\"Single quotes in 'double' quotes\";\n\n'''A\nmultiline\nstring''';\n\n\"\"\"\nAnother\nmultiline\nstring\"\"\";\n<\/code><\/pre>\n<p>Strings are immutable. Although you cannot change a string, you can perform\nan operation on a string and assign the result to a new string:<\/p>\n<pre class=\"language-dart\"><code>var string = 'Dart is fun';\nvar newString = string.substring(0, 5);\n<\/code><\/pre>\n<p>You can use the plus (<code>+<\/code>) operator to concatenate strings:<\/p>\n<pre class=\"language-dart\"><code>'Dart ' + 'is ' + 'fun!'; \/\/ 'Dart is fun!'\n<\/code><\/pre>\n<p>You can also use adjacent string literals for concatenation:<\/p>\n<pre class=\"language-dart\"><code>'Dart ' 'is ' 'fun!';    \/\/ 'Dart is fun!'\n<\/code><\/pre>\n<p>You can use <code>${}<\/code> to interpolate the value of Dart expressions\nwithin strings. The curly braces can be omitted when evaluating identifiers:<\/p>\n<pre class=\"language-dart\"><code>string = 'dartlang';\n'$string has ${string.length} letters'; \/\/ 'dartlang has 8 letters'\n<\/code><\/pre>\n<p>A string is represented by a sequence of Unicode UTF-16 code units\naccessible through the <a href=\"dart-core\/String\/codeUnitAt.html\">codeUnitAt<\/a> or the <a href=\"dart-core\/String\/codeUnits.html\">codeUnits<\/a> members:<\/p>\n<pre class=\"language-dart\"><code>string = 'Dart';\nstring.codeUnitAt(0); \/\/ 68\nstring.codeUnits;     \/\/ [68, 97, 114, 116]\n<\/code><\/pre>\n<p>The string representation of code units is accessible through the index\noperator:<\/p>\n<pre class=\"language-dart\"><code>string[0];            \/\/ 'D'\n<\/code><\/pre>\n<p>The characters of a string are encoded in UTF-16. Decoding UTF-16, which\ncombines surrogate pairs, yields Unicode code points. Following a similar\nterminology to Go, we use the name 'rune' for an integer representing a\nUnicode code point. Use the <a href=\"dart-core\/String\/runes.html\">runes<\/a> property to get the runes of a string:<\/p>\n<pre class=\"language-dart\"><code>string.runes.toList(); \/\/ [68, 97, 114, 116]\n<\/code><\/pre>\n<p>For a character outside the Basic Multilingual Plane (plane 0) that is\ncomposed of a surrogate pair, <a href=\"dart-core\/String\/runes.html\">runes<\/a> combines the pair and returns a\nsingle integer.  For example, the Unicode character for a\nmusical G-clef ('\ud834\udd1e') with rune value 0x1D11E consists of a UTF-16 surrogate\npair: <code>0xD834<\/code> and <code>0xDD1E<\/code>. Using <a href=\"dart-core\/String\/codeUnits.html\">codeUnits<\/a> returns the surrogate pair,\nand using <code>runes<\/code> returns their combined value:<\/p>\n<pre class=\"language-dart\"><code>var clef = '\\u{1D11E}';\nclef.codeUnits;         \/\/ [0xD834, 0xDD1E]\nclef.runes.toList();    \/\/ [0x1D11E]\n<\/code><\/pre>\n<p>The String class can not be extended or implemented. Attempting to do so\nyields a compile-time error.<\/p>\n<h2 id=\"other-resources\">Other resources<\/h2>\n<p>See <a href=\"dart-core\/StringBuffer-class.html\">StringBuffer<\/a> to efficiently build a string incrementally. See\n<a href=\"dart-core\/RegExp-class.html\">RegExp<\/a> to work with regular expressions.<\/p>\n<p>Also see:<\/p>\n<ul>\n<li>\n<a href=\"https:\/\/www.dartlang.org\/docs\/cookbook\/#strings\">Dart Cookbook<\/a>\nfor String examples and recipes.<\/li>\n<li><a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#strings-and-regular-expressions\">Dart Up and Running<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/String-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.String",
            "shortname": "String",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "convert.HexCodec",
                "convert.HexDecoder",
                "convert.HexEncoder",
                "convert.PercentCodec",
                "convert.PercentDecoder",
                "convert.PercentEncoder",
                "dart:convert.AsciiCodec",
                "dart:convert.AsciiDecoder",
                "dart:convert.AsciiEncoder",
                "dart:convert.Base64Codec",
                "dart:convert.Base64Decoder",
                "dart:convert.Base64Encoder",
                "dart:convert.HtmlEscape",
                "dart:convert.JsonCodec",
                "dart:convert.JsonDecoder",
                "dart:convert.JsonEncoder",
                "dart:convert.Latin1Codec",
                "dart:convert.Latin1Decoder",
                "dart:convert.Latin1Encoder",
                "dart:convert.LineSplitter",
                "dart:convert.Utf8Codec",
                "dart:convert.Utf8Decoder",
                "dart:convert.Utf8Encoder",
                "dart:io.SystemEncoding",
                "foundation.StringProperty",
                "material.TextFormField",
                "path.PathMap",
                "path.PathSet"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns the 16-bit UTF-16 code unit at the given <code>index<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int codeUnitAt(int index);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/codeUnitAt.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "codeUnitAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares this string to <code>other<\/code>.<\/p>\n<p>Returns a negative value if <code>this<\/code> is ordered before <code>other<\/code>,\na positive value if <code>this<\/code> is ordered after <code>other<\/code>,\nor zero if <code>this<\/code> and <code>other<\/code> are equivalent.<\/p>\n<p>The ordering is the same as the ordering of the code points at the first\nposition where the two strings differ.\nIf one string is a prefix of the other,\nthen the shorter string is ordered before the longer string.\nIf the strings have exactly the same content, they are equivalent with\nregard to the ordering.\nOrdering does not check for Unicode equivalence.\nThe comparison is case sensitive.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(String other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this string contains a match of <code>other<\/code>:<\/p>\n<pre class=\"language-dart\"><code>var string = 'Dart strings';\nstring.contains('D');                     \/\/ true\nstring.contains(new RegExp(r'[A-Z]'));    \/\/ true\n<\/code><\/pre>\n<p>If <code>startIndex<\/code> is provided, this method matches only at or after that\nindex:<\/p>\n<pre class=\"language-dart\"><code>string.contains('X', 1);                  \/\/ false\nstring.contains(new RegExp(r'[A-Z]'), 1); \/\/ false\n<\/code><\/pre>\n<p><code>startIndex<\/code> must not be negative or greater than <a href=\"dart-core\/String\/length.html\">length<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool contains(Pattern other, [int startIndex = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/contains.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "contains",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "startIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this string ends with <code>other<\/code>. For example:<\/p>\n<pre class=\"language-dart\"><code>'Dart'.endsWith('t'); \/\/ true\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool endsWith(String other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/endsWith.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "endsWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the position of the first match of <code>pattern<\/code> in this string,\nstarting at <code>start<\/code>, inclusive:<\/p>\n<pre class=\"language-dart\"><code>var string = 'Dartisans';\nstring.indexOf('art');                     \/\/ 1\nstring.indexOf(new RegExp(r'[A-Z][a-z]')); \/\/ 0\n<\/code><\/pre>\n<p>Returns -1 if no match is found:<\/p>\n<pre class=\"language-dart\"><code>string.indexOf(new RegExp(r'dart'));       \/\/ -1\n<\/code><\/pre>\n<p><code>start<\/code> must be non-negative and not greater than <a href=\"dart-core\/String\/length.html\">length<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int indexOf(Pattern pattern, [int start]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/indexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "indexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the position of the last match <code>pattern<\/code> in this string, searching\nbackward starting at <code>start<\/code>, inclusive:<\/p>\n<pre class=\"language-dart\"><code>var string = 'Dartisans';\nstring.lastIndexOf('a');                    \/\/ 6\nstring.lastIndexOf(new RegExp(r'a(r|n)'));  \/\/ 6\n<\/code><\/pre>\n<p>Returns -1 if <code>pattern<\/code> could not be found in this string.<\/p>\n<pre class=\"language-dart\"><code>string.lastIndexOf(new RegExp(r'DART'));    \/\/ -1\n<\/code><\/pre>\n<p>The <code>start<\/code> must be non-negative and not greater than <a href=\"dart-core\/String\/length.html\">length<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int lastIndexOf(Pattern pattern, [int start]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/lastIndexOf.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "lastIndexOf",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Pads this string on the left if it is shorter than <code>width<\/code>.<\/p>\n<p>Return a new string that prepends <code>padding<\/code> onto this string\none time for each position the length is less than <code>width<\/code>.<\/p>\n<p>If <code>width<\/code> is already smaller than or equal to <code>this.length<\/code>,\nno padding is added. A negative <code>width<\/code> is treated as zero.<\/p>\n<p>If <code>padding<\/code> has length different from 1, the result will not\nhave length <code>width<\/code>. This may be useful for cases where the\npadding is a longer string representing a single character, like\n<code>\"&amp;nbsp;\"<\/code> or <code>\"\\u{10002}<\/code>\".\nIn that case, the user should make sure that <code>this.length<\/code> is\nthe correct measure of the strings length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String padLeft(int width, [String padding = ' ']);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/padLeft.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "padLeft",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "padding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Pads this string on the right if it is shorter than <code>width<\/code>.<\/p>\n<p>Return a new string that appends <code>padding<\/code> after this string\none time for each position the length is less than <code>width<\/code>.<\/p>\n<p>If <code>width<\/code> is already smaller than or equal to <code>this.length<\/code>,\nno padding is added. A negative <code>width<\/code> is treated as zero.<\/p>\n<p>If <code>padding<\/code> has length different from 1, the result will not\nhave length <code>width<\/code>. This may be useful for cases where the\npadding is a longer string representing a single character, like\n<code>\"&amp;nbsp;\"<\/code> or <code>\"\\u{10002}<\/code>\".\nIn that case, the user should make sure that <code>this.length<\/code> is\nthe correct measure of the strings length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String padRight(int width, [String padding = ' ']);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/padRight.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "padRight",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "padding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Replaces all substrings that match <code>from<\/code> with <code>replace<\/code>.<\/p>\n<p>Returns a new string in which the non-overlapping substrings matching\n<code>from<\/code> (the ones iterated by <code>from.allMatches(thisString)<\/code>) are replaced\nby the literal string <code>replace<\/code>.<\/p>\n<pre class=\"language-dart\"><code>'resume'.replaceAll(new RegExp(r'e'), '\u00e9'); \/\/ 'r\u00e9sum\u00e9'\n<\/code><\/pre>\n<p>Notice that the <code>replace<\/code> string is not interpreted. If the replacement\ndepends on the match (for example on a <a href=\"dart-core\/RegExp-class.html\">RegExp<\/a>'s capture groups), use\nthe <a href=\"dart-core\/String\/replaceAllMapped.html\">replaceAllMapped<\/a> method instead.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String replaceAll(Pattern from, String replace);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/replaceAll.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "replaceAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "from",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "replace",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Replace all substrings that match <code>from<\/code> by a string computed from the\nmatch.<\/p>\n<p>Returns a new string in which the non-overlapping substrings that match\n<code>from<\/code> (the ones iterated by <code>from.allMatches(thisString)<\/code>) are replaced\nby the result of calling <code>replace<\/code> on the corresponding <a href=\"dart-core\/Match-class.html\">Match<\/a> object.<\/p>\n<p>This can be used to replace matches with new content that depends on the\nmatch, unlike <a href=\"dart-core\/String\/replaceAll.html\">replaceAll<\/a> where the replacement string is always the same.<\/p>\n<p>The <code>replace<\/code> function is called with the <a href=\"dart-core\/Match-class.html\">Match<\/a> generated\nby the pattern, and its result is used as replacement.<\/p>\n<p>The function defined below converts each word in a string to simplified\n'pig latin' using <a href=\"dart-core\/String\/replaceAllMapped.html\">replaceAllMapped<\/a>:<\/p>\n<pre class=\"language-dart\"><code>pigLatin(String words) =&gt; words.replaceAllMapped(\n    new RegExp(r'\\b(\\w*?)([aeiou]\\w*)', caseSensitive: false),\n    (Match m) =&gt; \"${m[2]}${m[1]}${m[1].isEmpty ? 'way' : 'ay'}\");\n\npigLatin('I have a secret now!'); \/\/ 'Iway avehay away ecretsay ownay!'\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String replaceAllMapped(Pattern from, String replace(Match match));<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/replaceAllMapped.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "replaceAllMapped",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "from",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "match",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Match"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a new string in which the first occurrence of <code>from<\/code> in this string\nis replaced with <code>to<\/code>, starting from <code>startIndex<\/code>:<\/p>\n<pre class=\"language-dart\"><code>'0.0001'.replaceFirst(new RegExp(r'0'), ''); \/\/ '.0001'\n'0.0001'.replaceFirst(new RegExp(r'0'), '7', 1); \/\/ '0.7001'\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String replaceFirst(Pattern from, String to, [int startIndex = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/replaceFirst.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "replaceFirst",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "from",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "startIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "to",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Replace the first occurrence of <code>from<\/code> in this string.<\/p>\n<p>Returns a new string, which is this string\nexcept that the first match of <code>from<\/code>, starting from <code>startIndex<\/code>,\nis replaced by the result of calling <code>replace<\/code> with the match object.<\/p>\n<p>The optional <code>startIndex<\/code> is by default set to 0. If provided, it must be\nan integer in the range <code>[0 .. len]<\/code>, where <code>len<\/code> is this string's length.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String replaceFirstMapped(Pattern from, String replace(Match match),\n    [int startIndex = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/replaceFirstMapped.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "replaceFirstMapped",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "from",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        },
                        {
                            "name": "match",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Match"
                        },
                        {
                            "name": "startIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Replaces the substring from <code>start<\/code> to <code>end<\/code> with <code>replacement<\/code>.<\/p>\n<p>Returns a new string equivalent to:<\/p>\n<pre class=\"language-dart\"><code>this.substring(0, start) + replacement + this.substring(end)\n<\/code><\/pre>\n<p>The <code>start<\/code> and <code>end<\/code> indices must specify a valid range of this string.\nThat is <code>0 &lt;= start &lt;= end &lt;= this.length<\/code>.\nIf <code>end<\/code> is <code>null<\/code>, it defaults to <a href=\"dart-core\/String\/length.html\">length<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String replaceRange(int start, int end, String replacement);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/replaceRange.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "replaceRange",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "replacement",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Splits the string at matches of <code>pattern<\/code> and returns a list of substrings.<\/p>\n<p>Finds all the matches of <code>pattern<\/code> in this string,\nand returns the list of the substrings between the matches.<\/p>\n<pre class=\"language-dart\"><code>var string = \"Hello world!\";\nstring.split(\" \");                      \/\/ ['Hello', 'world!'];\n<\/code><\/pre>\n<p>Empty matches at the beginning and end of the strings are ignored,\nand so are empty matches right after another match.<\/p>\n<pre class=\"language-dart\"><code>var string = \"abba\";\nstring.split(new RegExp(r\"b*\"));        \/\/ ['a', 'a']\n                                        \/\/ not ['', 'a', 'a', '']\n<\/code><\/pre>\n<p>If this string is empty, the result is an empty list if <code>pattern<\/code> matches\nthe empty string, and it is <code>[\"\"]<\/code> if the pattern doesn't match.<\/p>\n<pre class=\"language-dart\"><code>var string = '';\nstring.split('');                       \/\/ []\nstring.split(\"a\");                      \/\/ ['']\n<\/code><\/pre>\n<p>Splitting with an empty pattern splits the string into single-code unit\nstrings.<\/p>\n<pre class=\"language-dart\"><code>var string = 'Pub';\nstring.split('');                       \/\/ ['P', 'u', 'b']\n\nstring.codeUnits.map((unit) {\n  return new String.fromCharCode(unit);\n}).toList();                            \/\/ ['P', 'u', 'b']\n<\/code><\/pre>\n<p>Splitting happens at UTF-16 code unit boundaries,\nand not at rune boundaries:<\/p>\n<pre class=\"language-dart\"><code>\/\/ String made up of two code units, but one rune.\nstring = '\\u{1D11E}';\nstring.split('').length;                 \/\/ 2 surrogate values\n<\/code><\/pre>\n<p>To get a list of strings containing the individual runes of a string,\nyou should not use split. You can instead map each rune to a string\nas follows:<\/p>\n<pre class=\"language-dart\"><code>string.runes.map((rune) =&gt; new String.fromCharCode(rune)).toList();\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; split(Pattern pattern);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/split.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.String>",
                    "name": "split",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>Splits the string, converts its parts, and combines them into a new\nstring.<\/p>\n<p><code>pattern<\/code> is used to split the string into parts and separating matches.<\/p>\n<p>Each match is converted to a string by calling <code>onMatch<\/code>. If <code>onMatch<\/code>\nis omitted, the matched string is used.<\/p>\n<p>Each non-matched part is converted by a call to <code>onNonMatch<\/code>. If\n<code>onNonMatch<\/code> is omitted, the non-matching part is used.<\/p>\n<p>Then all the converted parts are combined into the resulting string.<\/p>\n<pre class=\"language-dart\"><code>'Eats shoots leaves'.splitMapJoin((new RegExp(r'shoots')),\n    onMatch:    (m) =&gt; '${m.group(0)}',\n    onNonMatch: (n) =&gt; '*'); \/\/ *shoots*\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String splitMapJoin(Pattern pattern,\n    {String onMatch(Match match), String onNonMatch(String nonMatch)});<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/splitMapJoin.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "splitMapJoin",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "match",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Match"
                        },
                        {
                            "name": "nonMatch",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns true if this string starts with a match of <code>pattern<\/code>.<\/p>\n<pre class=\"language-dart\"><code>var string = 'Dart';\nstring.startsWith('D');                       \/\/ true\nstring.startsWith(new RegExp(r'[A-Z][a-z]')); \/\/ true\n<\/code><\/pre>\n<p>If <code>index<\/code> is provided, this method checks if the substring starting\nat that index starts with a match of <code>pattern<\/code>:<\/p>\n<pre class=\"language-dart\"><code>string.startsWith('art', 1);                  \/\/ true\nstring.startsWith(new RegExp(r'\\w{3}'));      \/\/ true\n<\/code><\/pre>\n<p><code>index<\/code> must not be negative or greater than <a href=\"dart-core\/String\/length.html\">length<\/a>.<\/p>\n<p>A <a href=\"dart-core\/RegExp-class.html\">RegExp<\/a> containing '^' does not match if the <code>index<\/code> is greater than\nzero. The pattern works on the string as a whole, and does not extract\na substring starting at <code>index<\/code> first:<\/p>\n<pre class=\"language-dart\"><code>string.startsWith(new RegExp(r'^art'), 1);    \/\/ false\nstring.startsWith(new RegExp(r'art'), 1);     \/\/ true\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool startsWith(Pattern pattern, [int index = 0]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/startsWith.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "startsWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "pattern",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Pattern"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the substring of this string that extends from <code>startIndex<\/code>,\ninclusive, to <code>endIndex<\/code>, exclusive.<\/p>\n<pre class=\"language-dart\"><code>var string = 'dartlang';\nstring.substring(1);    \/\/ 'artlang'\nstring.substring(1, 4); \/\/ 'art'\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String substring(int startIndex, [int endIndex]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/substring.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "substring",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": [
                        {
                            "name": "endIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "startIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts all characters in this string to lower case.\nIf the string is already in all lower case, this method returns <code>this<\/code>.<\/p>\n<pre class=\"language-dart\"><code>'ALPHABET'.toLowerCase(); \/\/ 'alphabet'\n'abc'.toLowerCase();      \/\/ 'abc'\n<\/code><\/pre>\n<p>This function uses the language independent Unicode mapping and thus only\nworks in some languages.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(floitsch): document better. (See EcmaScript for description).\nString toLowerCase();<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/toLowerCase.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toLowerCase",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Converts all characters in this string to upper case.\nIf the string is already in all upper case, this method returns <code>this<\/code>.<\/p>\n<pre class=\"language-dart\"><code>'alphabet'.toUpperCase(); \/\/ 'ALPHABET'\n'ABC'.toUpperCase();      \/\/ 'ABC'\n<\/code><\/pre>\n<p>This function uses the language independent Unicode mapping and thus only\nworks in some languages.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(floitsch): document better. (See EcmaScript for description).\nString toUpperCase();<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/toUpperCase.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toUpperCase",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns the string without any leading and trailing whitespace.<\/p>\n<p>If the string contains leading or trailing whitespace, a new string with no\nleading and no trailing whitespace is returned:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">'\\tDart is fun\\n'.trim(); \/\/ 'Dart is fun'\n<\/code><\/pre>\n<p>Otherwise, the original string itself is returned:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var str1 = 'Dart';\nvar str2 = str1.trim();\nidentical(str1, str2);    \/\/ true\n<\/code><\/pre>\n<p>Whitespace is defined by the Unicode White_Space property (as defined in\nversion 6.2 or later) and the BOM character, 0xFEFF.<\/p>\n<p>Here is the list of trimmed characters according to Unicode version 6.3:<\/p>\n<pre class=\"language-dart\"><code>    0009..000D    ; White_Space # Cc   &lt;control-0009&gt;..&lt;control-000D&gt;\n    0020          ; White_Space # Zs   SPACE\n    0085          ; White_Space # Cc   &lt;control-0085&gt;\n    00A0          ; White_Space # Zs   NO-BREAK SPACE\n    1680          ; White_Space # Zs   OGHAM SPACE MARK\n    2000..200A    ; White_Space # Zs   EN QUAD..HAIR SPACE\n    2028          ; White_Space # Zl   LINE SEPARATOR\n    2029          ; White_Space # Zp   PARAGRAPH SEPARATOR\n    202F          ; White_Space # Zs   NARROW NO-BREAK SPACE\n    205F          ; White_Space # Zs   MEDIUM MATHEMATICAL SPACE\n    3000          ; White_Space # Zs   IDEOGRAPHIC SPACE\n\n    FEFF          ; BOM                ZERO WIDTH NO_BREAK SPACE\n<\/code><\/pre>\n<p>Some later versions of Unicode do not include U+0085 as a whitespace\ncharacter. Whether it is trimmed depends on the Unicode version\nused by the system.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String trim();<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/trim.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "trim",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns the string without any leading whitespace.<\/p>\n<p>As <a href=\"dart-core\/String\/trim.html\">trim<\/a>, but only removes leading whitespace.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String trimLeft();<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/trimLeft.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "trimLeft",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns the string without any trailing whitespace.<\/p>\n<p>As <a href=\"dart-core\/String\/trim.html\">trim<\/a>, but only removes trailing whitespace.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String trimRight();<\/code><\/pre>\n    ",
                    "href": "dart-core\/String\/trimRight.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "trimRight",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.String",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns an unmodifiable list of the UTF-16 code units of this string.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;int&gt; get codeUnits;<\/code><\/pre>\n        ",
                    "href": "dart-core\/String\/codeUnits.html",
                    "name": "codeUnits",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns a hash code derived from the code units of the string.<\/p>\n<p>This is compatible with <a href=\"dart-core\/String\/operator_equals.html\">operator ==<\/a>. Strings with the same sequence\nof code units have the same hash code.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/String\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this string is empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/String\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if this string is not empty.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/String\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>The length of the string.<\/p>\n<p>Returns the number of UTF-16 code units in this string. The number\nof <a href=\"dart-core\/String\/runes.html\">runes<\/a> might be fewer, if the string contains characters outside\nthe Basic Multilingual Plane (plane 0):<\/p>\n<pre class=\"language-dart\"><code>'Dart'.length;          \/\/ 4\n'Dart'.runes.length;    \/\/ 4\n\nvar clef = '\\u{1D11E}';\nclef.length;            \/\/ 2\nclef.runes.length;      \/\/ 1\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length;<\/code><\/pre>\n        ",
                    "href": "dart-core\/String\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.String",
                    "params": []
                },
                {
                    "desc": "<p>Returns an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of Unicode code-points of this string.<\/p>\n<p>If the string contains surrogate pairs, they are combined and returned\nas one integer by this iterator. Unmatched surrogate halves are treated\nlike valid 16-bit code-units.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Runes get runes;<\/code><\/pre>\n        ",
                    "href": "dart-core\/String\/runes.html",
                    "name": "runes",
                    "isDeprecated": false,
                    "type": "dart:core.Runes",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.String",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A class for concatenating strings efficiently.<\/p>\n<p>Allows for the incremental building of a string using write*() methods.\nThe strings are concatenated to a single string only when <a href=\"dart-core\/StringBuffer\/toString.html\">toString<\/a> is\ncalled.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/StringBuffer-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.StringBuffer",
            "shortname": "StringBuffer",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates the string buffer with an initial content.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external StringBuffer([Object content = \"\"]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/StringBuffer.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringBuffer",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": [
                        {
                            "name": "content",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Clears the string buffer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void clear();<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/clear.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "clear",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the contents of buffer as a concatenated string.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": []
                },
                {
                    "desc": "<p>Adds the contents of <code>obj<\/code>, converted to a string, to the buffer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void write(Object obj);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/write.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "write",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": [
                        {
                            "name": "obj",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Iterates over the given <code>objects<\/code> and <a href=\"dart-core\/StringBuffer\/write.html\">write<\/a>s them in sequence.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void writeAll(Iterable objects, [String separator = \"\"]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/writeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": [
                        {
                            "name": "objects",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Adds the string representation of <code>charCode<\/code> to the buffer.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void writeCharCode(int charCode);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/writeCharCode.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeCharCode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": [
                        {
                            "name": "charCode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/StringBuffer\/toString.html\">Object.toString<\/a> and \nadds the result to <code>this<\/code>, followed by a newline.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void writeln([Object obj = \"\"]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringBuffer\/writeln.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeln",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": [
                        {
                            "name": "obj",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns whether the buffer is empty. This is a constant-time operation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; length == 0;<\/code><\/pre>\n        ",
                    "href": "dart-core\/StringBuffer\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the buffer is not empty. This is a constant-time\noperation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; !isEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/StringBuffer\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": []
                },
                {
                    "desc": "<p>Returns the length of the content that has been accumulated so far.\nThis is a constant-time operation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get length;<\/code><\/pre>\n        ",
                    "href": "dart-core\/StringBuffer\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.StringBuffer",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/StringSink-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.StringSink",
            "shortname": "StringSink",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/StringSink\/StringSink.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "StringSink",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.StringSink",
                    "params": []
                },
                {
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and \nadds the result to <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void write(Object obj);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringSink\/write.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "write",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringSink",
                    "params": [
                        {
                            "name": "obj",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                },
                {
                    "desc": "<p>Iterates over the given <code>objects<\/code> and <a href=\"dart-core\/StringSink\/write.html\">write<\/a>s them in sequence.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeAll(Iterable objects, [String separator = \"\"]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringSink\/writeAll.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeAll",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringSink",
                    "params": [
                        {
                            "name": "objects",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable"
                        },
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Writes the <code>charCode<\/code> to <code>this<\/code>.<\/p>\n<p>This method is equivalent to <code>write(new String.fromCharCode(charCode))<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeCharCode(int charCode);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringSink\/writeCharCode.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeCharCode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringSink",
                    "params": [
                        {
                            "name": "charCode",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>obj<\/code> to a String by invoking <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> and \nadds the result to <code>this<\/code>, followed by a newline.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void writeln([Object obj = \"\"]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/StringSink\/writeln.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "writeln",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.StringSink",
                    "params": [
                        {
                            "name": "obj",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Opaque name used by mirrors, invocations and <a href=\"dart-core\/Function\/apply.html\">Function.apply<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Symbol-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Symbol",
            "shortname": "Symbol",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs a new <a href=\"dart-core\/Symbol-class.html\">Symbol<\/a> representing the provided name.<\/p>\n<p>The name must be a valid public Dart member name,\npublic constructor name, or library name, optionally qualified.<\/p>\n<p>A qualified name is a valid name preceded by a public identifier name\nand a '<code>.<\/code>', e.g., <code>foo.bar.baz=<\/code> is a qualified version of <code>baz=<\/code>.\nThat means that the content of the <code>name<\/code> String must be either<\/p>\n<ul>\n<li>a valid public Dart identifier\n(that is, an identifier not starting with \"<code>_<\/code>\"),<\/li>\n<li>such an identifier followed by \"=\" (a setter name),<\/li>\n<li>the name of a declarable operator\n(one of \"<code>+<\/code>\", \"<code>-<\/code>\", \"<code>*<\/code>\", \"<code>\/<\/code>\", \"<code>%<\/code>\", \"<code>~\/<\/code>\", \"<code>&amp;<\/code>\", \"<code>|<\/code>\",\n\"<code>^<\/code>\", \"<code>~<\/code>\", \"<code>&lt;&lt;<\/code>\", \"<code>&gt;&gt;<\/code>\", \"<code>&lt;<\/code>\", \"<code>&lt;=<\/code>\", \"<code>&gt;<\/code>\", \"<code>&gt;=<\/code>\", \"<code>==<\/code>\",\n\"<code>[]<\/code>\", \"<code>[]=<\/code>\", or \"<code>unary-<\/code>\"),<\/li>\n<li>any of the above preceded by any number of qualifiers,\nwhere a qualifier is a non-private identifier followed by '<code>.<\/code>',<\/li>\n<li>or the empty string (the default name of a library with no library\nname declaration).<\/li>\n<\/ul>\n<p>Symbol instances created from the same <code>name<\/code> are equal,\nbut not necessarily identical, but symbols created as compile-time\nconstants are canonicalized, as all other constant object creations.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(new Symbol(\"foo\") == new Symbol(\"foo\"));\nassert(identical(const Symbol(\"foo\"), const Symbol(\"foo\")));\n<\/code><\/pre>\n<p>If <code>name<\/code> is a single identifier that does not start with an underscore,\nor it is a qualified identifier,\nor it is an operator name different from <code>unary-<\/code>,\nthen the result of <code>const Symbol(name)<\/code> is the same instance that\nthe symbol literal created by prefixing <code>#<\/code> to the content of <code>name<\/code>\nwould evaluate to.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">assert(new Symbol(\"foo\") == #foo);\nassert(new Symbol(\"[]=\") == #[]=]);\nassert(new Symbol(\"foo.bar\") == #foo.bar);\nassert(identical(const Symbol(\"foo\"), #foo));\nassert(identical(const Symbol(\"[]=\"), #[]=]));\nassert(identical(const Symbol(\"foo.bar\"), #foo.bar));\n<\/code><\/pre>\n<p>This constructor cannot create a <a href=\"dart-core\/Symbol-class.html\">Symbol<\/a> instance that is equal to\na private symbol literal like <code>#_foo<\/code>.<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">const Symbol(\"_foo\") \/\/ Invalid\n<\/code><\/pre>\n<p>The created instance overrides <a href=\"dart-core\/Symbol\/operator_equals.html\">Object.==<\/a>.<\/p>\n<p>The following text is non-normative:<\/p>\n<p>Creating non-const Symbol instances may result in larger output.  If\npossible, use <code>MirrorsUsed<\/code> from \"dart:mirrors\" to specify which names\nmight be passed to this constructor.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory Symbol(String name) = internal.Symbol;<\/code><\/pre>\n    ",
                    "href": "dart-core\/Symbol\/Symbol.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Symbol",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Symbol",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The empty symbol.<\/p>\n<p>The empty symbol is the name of libraries with no library declaration,\nand the base-name of the unnamed constructor.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Symbol empty = const Symbol(\"\")\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Symbol\/empty-constant.html",
                    "name": "empty",
                    "isDeprecated": false,
                    "type": "dart:core.Symbol",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Symbol",
                    "params": []
                },
                {
                    "desc": "<p>Returns a hash code compatible with <a href=\"dart-core\/Symbol\/operator_equals.html\">operator==<\/a>.<\/p>\n<p>Equal symbols have the same hash code.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Symbol\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Symbol",
                    "params": []
                },
                {
                    "desc": "<p>The symbol corresponding to the name of the unary minus operator.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const Symbol unaryMinus = const Symbol(\"unary-\")\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/Symbol\/unaryMinus-constant.html",
                    "name": "unaryMinus",
                    "isDeprecated": false,
                    "type": "dart:core.Symbol",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.Symbol",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Runtime representation of a type.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Type-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Type",
            "shortname": "Type",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/Type\/Type.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Type",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Type",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Error thrown by the runtime system when a type assertion fails.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/TypeError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.TypeError",
            "shortname": "TypeError",
            "extends": [
                "dart:core.AssertionError",
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/TypeError\/TypeError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TypeError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.TypeError",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Thrown by operations that have not been implemented yet.<\/p>\n<p>This <a href=\"dart-core\/Error-class.html\">Error<\/a> is thrown by unfinished code that hasn't yet implemented\nall the features it needs.<\/p>\n<p>If a class is not intending to implement the feature, it should throw\nan <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> instead. This error is only intended for\nuse during development.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/UnimplementedError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.UnimplementedError",
            "shortname": "UnimplementedError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">UnimplementedError([this.message]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/UnimplementedError\/UnimplementedError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnimplementedError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.UnimplementedError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; (this.message != null\n    ? \"UnimplementedError: $message\"\n    : \"UnimplementedError\");<\/code><\/pre>\n    ",
                    "href": "dart-core\/UnimplementedError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.UnimplementedError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/UnimplementedError\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UnimplementedError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The operation was not allowed by the object.<\/p>\n<p>This <a href=\"dart-core\/Error-class.html\">Error<\/a> is thrown when an instance cannot implement one of the methods\nin its signature.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/UnsupportedError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.UnsupportedError",
            "shortname": "UnsupportedError",
            "extends": [
                "dart:core.Error",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nUnsupportedError(this.message);<\/code><\/pre>\n    ",
                    "href": "dart-core\/UnsupportedError\/UnsupportedError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UnsupportedError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.UnsupportedError",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"Unsupported operation: $message\";<\/code><\/pre>\n    ",
                    "href": "dart-core\/UnsupportedError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.UnsupportedError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/UnsupportedError\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UnsupportedError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A parsed URI, such as a URL.<\/p>\n<p><strong>See also:<\/strong><\/p>\n<ul>\n<li>\n<a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/ch03.html#uris\">URIs<\/a> in the <a href=\"https:\/\/www.dartlang.org\/docs\/dart-up-and-running\/contents\/ch03.html\">library tour<\/a>\n<\/li>\n<li><a href=\"http:\/\/tools.ietf.org\/html\/rfc3986\">RFC-3986<\/a><\/li>\n<\/ul>",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/Uri-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.Uri",
            "shortname": "Uri",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new URI from its components.<\/p>\n<p>Each component is set through a named argument. Any number of\ncomponents can be provided. The <code>path<\/code> and <code>query<\/code> components can be set\nusing either of two different named arguments.<\/p>\n<p>The scheme component is set through <code>scheme<\/code>. The scheme is\nnormalized to all lowercase letters. If the scheme is omitted or empty,\nthe URI will not have a scheme part.<\/p>\n<p>The user info part of the authority component is set through\n<code>userInfo<\/code>. It defaults to the empty string, which will be omitted\nfrom the string representation of the URI.<\/p>\n<p>The host part of the authority component is set through\n<code>host<\/code>. The host can either be a hostname, an IPv4 address or an\nIPv6 address, contained in '<code>' and '<\/code>'. If the host contains a\n':' character, the '<code>' and '<\/code>' are added if not already provided.\nThe host is normalized to all lowercase letters.<\/p>\n<p>The port part of the authority component is set through\n<code>port<\/code>.\nIf <code>port<\/code> is omitted or <code>null<\/code>, it implies the default port for\nthe URI's scheme, and is equivalent to passing that port explicitly.\nThe recognized schemes, and their default ports, are \"http\" (80) and\n\"https\" (443). All other schemes are considered as having zero as the\ndefault port.<\/p>\n<p>If any of <code>userInfo<\/code>, <code>host<\/code> or <code>port<\/code> are provided,\nthe URI has an authority according to <a href=\"dart-core\/Uri\/hasAuthority.html\">hasAuthority<\/a>.<\/p>\n<p>The path component is set through either <code>path<\/code> or\n<code>pathSegments<\/code>.\nWhen <code>path<\/code> is used, it should be a valid URI path,\nbut invalid characters, except the general delimiters ':\/@[]?#',\nwill be escaped if necessary.\nWhen <code>pathSegments<\/code> is used, each of the provided segments\nis first percent-encoded and then joined using the forward slash\nseparator.<\/p>\n<p>The percent-encoding of the path segments encodes all\ncharacters except for the unreserved characters and the following\nlist of characters: <code>!$&amp;'()*+,;=:@<\/code>. If the other components\nnecessitate an absolute path, a leading slash <code>\/<\/code> is prepended if\nnot already there.<\/p>\n<p>The query component is set through either <code>query<\/code> or <code>queryParameters<\/code>.\nWhen <code>query<\/code> is used, the provided string should be a valid URI query,\nbut invalid characters, other than general delimiters,\nwill be escaped if necessary.\nWhen <code>queryParameters<\/code> is used the query is built from the\nprovided map. Each key and value in the map is percent-encoded\nand joined using equal and ampersand characters.\nA value in the map must be either a string, or an <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of strings,\nwhere the latter corresponds to multiple values for the same key.<\/p>\n<p>The percent-encoding of the keys and values encodes all characters\nexcept for the unreserved characters, and replaces spaces with <code>+<\/code>.\nIf <code>query<\/code> is the empty string, it is equivalent to omitting it.\nTo have an actual empty query part,\nuse an empty map for <code>queryParameters<\/code>.<\/p>\n<p>If both <code>query<\/code> and <code>queryParameters<\/code> are omitted or <code>null<\/code>,\nthe URI has no query part.<\/p>\n<p>The fragment component is set through <code>fragment<\/code>.\nIt should be a valid URI fragment, but invalid characters other than\ngeneral delimiters, are escaped if necessary.\nIf <code>fragment<\/code> is omitted or <code>null<\/code>, the URI has no fragment part.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">factory Uri(\n    {String scheme,\n    String userInfo,\n    String host,\n    int port,\n    String path,\n    Iterable&lt;String&gt; pathSegments,\n    String query,\n    Map&lt;String, dynamic \/*String|Iterable&lt;String&gt;*\/ &gt; queryParameters,\n    String fragment}) = _Uri;<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/Uri.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Uri",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "fragment",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "host",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "path",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "pathSegments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable<dart:core.String>"
                        },
                        {
                            "name": "port",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "query",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "queryParameters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<dart:core.String>"
                        },
                        {
                            "name": "scheme",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "userInfo",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Decodes the percent-encoding in <code>encodedComponent<\/code>.<\/p>\n<p>Note that decoding a URI component might change its meaning as\nsome of the decoded characters could be characters with are\ndelimiters for a given URI component type. Always split a URI\ncomponent using the delimiters for the component before decoding\nthe individual parts.<\/p>\n<p>For handling the <a href=\"dart-core\/Uri\/path.html\">path<\/a> and <a href=\"dart-core\/Uri\/query.html\">query<\/a> components consider using\n<a href=\"dart-core\/Uri\/pathSegments.html\">pathSegments<\/a> and <a href=\"dart-core\/Uri\/queryParameters.html\">queryParameters<\/a> to get the separated and\ndecoded component.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String decodeComponent(String encodedComponent) {\n  return _Uri._uriDecode(\n      encodedComponent, 0, encodedComponent.length, utf8, false);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/decodeComponent.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "decodeComponent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "encodedComponent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Decodes the percent-encoding in <code>uri<\/code>.<\/p>\n<p>Note that decoding a full URI might change its meaning as some of\nthe decoded characters could be reserved characters. In most\ncases an encoded URI should be parsed into components using\n<a href=\"dart-core\/Uri\/parse.html\">Uri.parse<\/a> before decoding the separate components.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String decodeFull(String uri) {\n  return _Uri._uriDecode(uri, 0, uri.length, utf8, false);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/decodeFull.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "decodeFull",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Decodes the percent-encoding in <code>encodedComponent<\/code>, converting\npluses to spaces.<\/p>\n<p>It will create a byte-list of the decoded characters, and then use\n<code>encoding<\/code> to decode the byte-list to a String. The default encoding is\nUTF-8.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String decodeQueryComponent(String encodedComponent,\n    {Encoding encoding: utf8}) {\n  return _Uri._uriDecode(\n      encodedComponent, 0, encodedComponent.length, encoding, true);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/decodeQueryComponent.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "decodeQueryComponent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "encodedComponent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "encoding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Encoding"
                        }
                    ]
                },
                {
                    "desc": "<p>Encode the string <code>component<\/code> using percent-encoding to make it\nsafe for literal use as a URI component.<\/p>\n<p>All characters except uppercase and lowercase letters, digits and\nthe characters <code>-_.!~*'()<\/code> are percent-encoded. This is the\nset of characters specified in RFC 2396 and the which is\nspecified for the encodeUriComponent in ECMA-262 version 5.1.<\/p>\n<p>When manually encoding path segments or query components remember\nto encode each part separately before building the path or query\nstring.<\/p>\n<p>For encoding the query part consider using\n<a href=\"dart-core\/Uri\/encodeQueryComponent.html\">encodeQueryComponent<\/a>.<\/p>\n<p>To avoid the need for explicitly encoding use the <a href=\"dart-core\/Uri\/pathSegments.html\">pathSegments<\/a>\nand <a href=\"dart-core\/Uri\/queryParameters.html\">queryParameters<\/a> optional named arguments when constructing\na <a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String encodeComponent(String component) {\n  return _Uri._uriEncode(_Uri._unreserved2396Table, component, utf8, false);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/encodeComponent.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "encodeComponent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "component",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Encode the string <code>uri<\/code> using percent-encoding to make it\nsafe for literal use as a full URI.<\/p>\n<p>All characters except uppercase and lowercase letters, digits and\nthe characters <code>!#$&amp;'()*+,-.\/:;=?@_~<\/code> are percent-encoded. This\nis the set of characters specified in in ECMA-262 version 5.1 for\nthe encodeURI function .<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String encodeFull(String uri) {\n  return _Uri._uriEncode(_Uri._encodeFullTable, uri, utf8, false);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/encodeFull.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "encodeFull",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Encode the string <code>component<\/code> according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.<\/p>\n<p>Encode the string <code>component<\/code> according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.<\/p>\n<p>The component is first encoded to bytes using <code>encoding<\/code>.\nThe default is to use <a href=\"dart-convert\/utf8-constant.html\">utf8<\/a> encoding, which preserves all\nthe characters that don't need encoding.<\/p>\n<p>Then the resulting bytes are \"percent-encoded\". This transforms\nspaces (U+0020) to a plus sign ('+') and all bytes that are not\nthe ASCII decimal digits, letters or one of '-._~' are written as\na percent sign '%' followed by the two-digit hexadecimal\nrepresentation of the byte.<\/p>\n<p>Note that the set of characters which are percent-encoded is a\nsuperset of what HTML 4.01 requires, since it refers to RFC 1738\nfor reserved characters.<\/p>\n<p>When manually encoding query components remember to encode each\npart separately before building the query string.<\/p>\n<p>To avoid the need for explicitly encoding the query use the\n<a href=\"dart-core\/Uri\/queryParameters.html\">queryParameters<\/a> optional named arguments when constructing a\n<a href=\"dart-core\/Uri-class.html\">Uri<\/a>.<\/p>\n<p>See <a href=\"http:\/\/www.w3.org\/TR\/html401\/interact\/forms.html#h-17.13.4.2\">http:\/\/www.w3.org\/TR\/html401\/interact\/forms.html#h-17.13.4.2<\/a> for more\ndetails.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static String encodeQueryComponent(String component,\n    {Encoding encoding: utf8}) {\n  return _Uri._uriEncode(_Uri._unreservedTable, component, encoding, true);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/encodeQueryComponent.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "encodeQueryComponent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "component",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "encoding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Encoding"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether the scheme of this <a href=\"dart-core\/Uri-class.html\">Uri<\/a> is <code>scheme<\/code>.<\/p>\n<p>The <code>scheme<\/code> should be the same as the one returned by <a href=\"dart-core\/Uri\/scheme.html\">Uri.scheme<\/a>,\nbut doesn't have to be case-normalized to lower-case characters.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var uri = Uri.parse(\"http:\/\/example.com\/\");\nprint(uri.isScheme(\"HTTP\"));  \/\/ Prints true.\n<\/code><\/pre>\n<p>A <code>null<\/code> or empty <code>scheme<\/code> string matches a URI with no scheme\n(one where <a href=\"dart-core\/Uri\/hasScheme.html\">hasScheme<\/a> returns false).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isScheme(String scheme);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/isScheme.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isScheme",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "scheme",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a URI where the path has been normalized.<\/p>\n<p>A normalized path does not contain <code>.<\/code> segments or non-leading <code>..<\/code>\nsegments.\nOnly a relative path with no scheme or authority may contain\nleading <code>..<\/code> segments,\na path that starts with <code>\/<\/code> will also drop any leading <code>..<\/code> segments.<\/p>\n<p>This uses the same normalization strategy as <code>new Uri().resolve(this)<\/code>.<\/p>\n<p>Does not change any part of the URI except the path.<\/p>\n<p>The default implementation of <code>Uri<\/code> always normalizes paths, so calling\nthis function has no effect.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri normalizePath();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/normalizePath.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "normalizePath",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Creates a new <code>Uri<\/code> object by parsing a URI string.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, they must specify a valid substring\nof <code>uri<\/code>, and only the substring from <code>start<\/code> to <code>end<\/code> is parsed as a URI.<\/p>\n<p>The <code>uri<\/code> must not be <code>null<\/code>.\nIf the <code>uri<\/code> string is not valid as a URI or URI reference,\na <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> is thrown.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Uri parse(String uri, [int start = 0, int end]) {\n  \/\/ This parsing will not validate percent-encoding, IPv6, etc.\n  \/\/ When done splitting into parts, it will call, e.g., [_makeFragment]\n  \/\/ to do the final parsing.\n  \/\/\n  \/\/ Important parts of the RFC 3986 used here:\n  \/\/ URI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n  \/\/\n  \/\/ hier-part     = \"\/\/\" authority path-abempty\n  \/\/               \/ path-absolute\n  \/\/               \/ path-rootless\n  \/\/               \/ path-empty\n  \/\/\n  \/\/ URI-reference = URI \/ relative-ref\n  \/\/\n  \/\/ absolute-URI  = scheme \":\" hier-part [ \"?\" query ]\n  \/\/\n  \/\/ relative-ref  = relative-part [ \"?\" query ] [ \"#\" fragment ]\n  \/\/\n  \/\/ relative-part = \"\/\/\" authority path-abempty\n  \/\/               \/ path-absolute\n  \/\/               \/ path-noscheme\n  \/\/               \/ path-empty\n  \/\/\n  \/\/ scheme        = ALPHA *( ALPHA \/ DIGIT \/ \"+\" \/ \"-\" \/ \".\" )\n  \/\/\n  \/\/ authority     = [ userinfo \"@\" ] host [ \":\" port ]\n  \/\/ userinfo      = *( unreserved \/ pct-encoded \/ sub-delims \/ \":\" )\n  \/\/ host          = IP-literal \/ IPv4address \/ reg-name\n  \/\/ port          = *DIGIT\n  \/\/ reg-name      = *( unreserved \/ pct-encoded \/ sub-delims )\n  \/\/\n  \/\/ path          = path-abempty    ; begins with \"\/\" or is empty\n  \/\/               \/ path-absolute   ; begins with \"\/\" but not \"\/\/\"\n  \/\/               \/ path-noscheme   ; begins with a non-colon segment\n  \/\/               \/ path-rootless   ; begins with a segment\n  \/\/               \/ path-empty      ; zero characters\n  \/\/\n  \/\/ path-abempty  = *( \"\/\" segment )\n  \/\/ path-absolute = \"\/\" [ segment-nz *( \"\/\" segment ) ]\n  \/\/ path-noscheme = segment-nz-nc *( \"\/\" segment )\n  \/\/ path-rootless = segment-nz *( \"\/\" segment )\n  \/\/ path-empty    = 0&lt;pchar&gt;\n  \/\/\n  \/\/ segment       = *pchar\n  \/\/ segment-nz    = 1*pchar\n  \/\/ segment-nz-nc = 1*( unreserved \/ pct-encoded \/ sub-delims \/ \"@\" )\n  \/\/               ; non-zero-length segment without any colon \":\"\n  \/\/\n  \/\/ pchar         = unreserved \/ pct-encoded \/ sub-delims \/ \":\" \/ \"@\"\n  \/\/\n  \/\/ query         = *( pchar \/ \"\/\" \/ \"?\" )\n  \/\/\n  \/\/ fragment      = *( pchar \/ \"\/\" \/ \"?\" )\n  end ??= uri.length;\n\n  \/\/ Special case data:URIs. Ignore case when testing.\n  if (end &gt;= start + 5) {\n    int dataDelta = _startsWithData(uri, start);\n    if (dataDelta == 0) {\n      \/\/ The case is right.\n      if (start &gt; 0 || end &lt; uri.length) uri = uri.substring(start, end);\n      return UriData._parse(uri, 5, null).uri;\n    } else if (dataDelta == 0x20) {\n      return UriData._parse(uri.substring(start + 5, end), 0, null).uri;\n    }\n    \/\/ Otherwise the URI doesn't start with \"data:\" or any case variant of it.\n  }\n\n  \/\/ The following index-normalization belongs with the scanning, but is\n  \/\/ easier to do here because we already have extracted variables from the\n  \/\/ indices list.\n  var indices = new List&lt;int&gt;(8);\n\n  \/\/ Set default values for each position.\n  \/\/ The value will either be correct in some cases where it isn't set\n  \/\/ by the scanner, or it is clearly recognizable as an unset value.\n  indices\n    ..[0] = 0\n    ..[_schemeEndIndex] = start - 1\n    ..[_hostStartIndex] = start - 1\n    ..[_notSimpleIndex] = start - 1\n    ..[_portStartIndex] = start\n    ..[_pathStartIndex] = start\n    ..[_queryStartIndex] = end\n    ..[_fragmentStartIndex] = end;\n  var state = _scan(uri, start, end, _uriStart, indices);\n  \/\/ Some states that should be non-simple, but the URI ended early.\n  \/\/ Paths that end at a \"..\" must be normalized to end in \"..\/\".\n  if (state &gt;= _nonSimpleEndStates) {\n    indices[_notSimpleIndex] = end;\n  }\n  int schemeEnd = indices[_schemeEndIndex];\n  if (schemeEnd &gt;= start) {\n    \/\/ Rescan the scheme part now that we know it's not a path.\n    state = _scan(uri, start, schemeEnd, _schemeStart, indices);\n    if (state == _schemeStart) {\n      \/\/ Empty scheme.\n      indices[_notSimpleIndex] = schemeEnd;\n    }\n  }\n  \/\/ The returned positions are limited by the scanners ability to write only\n  \/\/ one position per character, and only the current position.\n  \/\/ Scanning from left to right, we only know whether something is a scheme\n  \/\/ or a path when we see a `:` or `\/`, and likewise we only know if the first\n  \/\/ `\/` is part of the path or is leading an authority component when we see\n  \/\/ the next character.\n\n  int hostStart = indices[_hostStartIndex] + 1;\n  int portStart = indices[_portStartIndex];\n  int pathStart = indices[_pathStartIndex];\n  int queryStart = indices[_queryStartIndex];\n  int fragmentStart = indices[_fragmentStartIndex];\n\n  \/\/ We may discover scheme while handling special cases.\n  String scheme;\n\n  \/\/ Derive some positions that weren't set to normalize the indices.\n  if (fragmentStart &lt; queryStart) queryStart = fragmentStart;\n  \/\/ If pathStart isn't set (it's before scheme end or host start), then\n  \/\/ the path is empty, or there is no authority part and the path\n  \/\/ starts with a non-simple character.\n  if (pathStart &lt; hostStart) {\n    \/\/ There is an authority, but no path. The path would start with `\/`\n    \/\/ if it was there.\n    pathStart = queryStart;\n  } else if (pathStart &lt;= schemeEnd) {\n    \/\/ There is a scheme, but no authority.\n    pathStart = schemeEnd + 1;\n  }\n  \/\/ If there is an authority with no port, set the port position\n  \/\/ to be at the end of the authority (equal to pathStart).\n  \/\/ This also handles a \":\" in a user-info component incorrectly setting\n  \/\/ the port start position.\n  if (portStart &lt; hostStart) portStart = pathStart;\n\n  assert(hostStart == start || schemeEnd &lt;= hostStart);\n  assert(hostStart &lt;= portStart);\n  assert(schemeEnd &lt;= pathStart);\n  assert(portStart &lt;= pathStart);\n  assert(pathStart &lt;= queryStart);\n  assert(queryStart &lt;= fragmentStart);\n\n  bool isSimple = indices[_notSimpleIndex] &lt; start;\n\n  if (isSimple) {\n    \/\/ Check\/do normalizations that weren't detected by the scanner.\n    \/\/ This includes removal of empty port or userInfo,\n    \/\/ or scheme specific port and path normalizations.\n    if (hostStart &gt; schemeEnd + 3) {\n      \/\/ Always be non-simple if URI contains user-info.\n      \/\/ The scanner doesn't set the not-simple position in this case because\n      \/\/ it's setting the host-start position instead.\n      isSimple = false;\n    } else if (portStart &gt; start &amp;&amp; portStart + 1 == pathStart) {\n      \/\/ If the port is empty, it should be omitted.\n      \/\/ Pathological case, don't bother correcting it.\n      isSimple = false;\n    } else if (queryStart &lt; end &amp;&amp;\n            (queryStart == pathStart + 2 &amp;&amp;\n                uri.startsWith(\"..\", pathStart)) ||\n        (queryStart &gt; pathStart + 2 &amp;&amp;\n            uri.startsWith(\"\/..\", queryStart - 3))) {\n      \/\/ The path ends in a \"..\" segment. This should be normalized to \"..\/\".\n      \/\/ We didn't detect this while scanning because a query or fragment was\n      \/\/ detected at the same time (which is why we only need to check this\n      \/\/ if there is something after the path).\n      isSimple = false;\n    } else {\n      \/\/ There are a few scheme-based normalizations that\n      \/\/ the scanner couldn't check.\n      \/\/ That means that the input is very close to simple, so just do\n      \/\/ the normalizations.\n      if (schemeEnd == start + 4) {\n        \/\/ Do scheme based normalizations for file, http.\n        if (uri.startsWith(\"file\", start)) {\n          scheme = \"file\";\n          if (hostStart &lt;= start) {\n            \/\/ File URIs should have an authority.\n            \/\/ Paths after an authority should be absolute.\n            String schemeAuth = \"file:\/\/\";\n            int delta = 2;\n            if (!uri.startsWith(\"\/\", pathStart)) {\n              schemeAuth = \"file:\/\/\/\";\n              delta = 3;\n            }\n            uri = schemeAuth + uri.substring(pathStart, end);\n            schemeEnd -= start;\n            hostStart = 7;\n            portStart = 7;\n            pathStart = 7;\n            queryStart += delta - start;\n            fragmentStart += delta - start;\n            start = 0;\n            end = uri.length;\n          } else if (pathStart == queryStart) {\n            \/\/ Uri has authority and empty path. Add \"\/\" as path.\n            if (start == 0 &amp;&amp; end == uri.length) {\n              uri = uri.replaceRange(pathStart, queryStart, \"\/\");\n              queryStart += 1;\n              fragmentStart += 1;\n              end += 1;\n            } else {\n              uri = \"${uri.substring(start, pathStart)}\/\"\n                  \"${uri.substring(queryStart, end)}\";\n              schemeEnd -= start;\n              hostStart -= start;\n              portStart -= start;\n              pathStart -= start;\n              queryStart += 1 - start;\n              fragmentStart += 1 - start;\n              start = 0;\n              end = uri.length;\n            }\n          }\n        } else if (uri.startsWith(\"http\", start)) {\n          scheme = \"http\";\n          \/\/ HTTP URIs should not have an explicit port of 80.\n          if (portStart &gt; start &amp;&amp;\n              portStart + 3 == pathStart &amp;&amp;\n              uri.startsWith(\"80\", portStart + 1)) {\n            if (start == 0 &amp;&amp; end == uri.length) {\n              uri = uri.replaceRange(portStart, pathStart, \"\");\n              pathStart -= 3;\n              queryStart -= 3;\n              fragmentStart -= 3;\n              end -= 3;\n            } else {\n              uri = uri.substring(start, portStart) +\n                  uri.substring(pathStart, end);\n              schemeEnd -= start;\n              hostStart -= start;\n              portStart -= start;\n              pathStart -= 3 + start;\n              queryStart -= 3 + start;\n              fragmentStart -= 3 + start;\n              start = 0;\n              end = uri.length;\n            }\n          }\n        }\n      } else if (schemeEnd == start + 5 &amp;&amp; uri.startsWith(\"https\", start)) {\n        scheme = \"https\";\n        \/\/ HTTPS URIs should not have an explicit port of 443.\n        if (portStart &gt; start &amp;&amp;\n            portStart + 4 == pathStart &amp;&amp;\n            uri.startsWith(\"443\", portStart + 1)) {\n          if (start == 0 &amp;&amp; end == uri.length) {\n            uri = uri.replaceRange(portStart, pathStart, \"\");\n            pathStart -= 4;\n            queryStart -= 4;\n            fragmentStart -= 4;\n            end -= 3;\n          } else {\n            uri = uri.substring(start, portStart) +\n                uri.substring(pathStart, end);\n            schemeEnd -= start;\n            hostStart -= start;\n            portStart -= start;\n            pathStart -= 4 + start;\n            queryStart -= 4 + start;\n            fragmentStart -= 4 + start;\n            start = 0;\n            end = uri.length;\n          }\n        }\n      }\n    }\n  }\n\n  if (isSimple) {\n    if (start &gt; 0 || end &lt; uri.length) {\n      uri = uri.substring(start, end);\n      schemeEnd -= start;\n      hostStart -= start;\n      portStart -= start;\n      pathStart -= start;\n      queryStart -= start;\n      fragmentStart -= start;\n    }\n    return new _SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart,\n        queryStart, fragmentStart, scheme);\n  }\n\n  return new _Uri.notSimple(uri, start, end, schemeEnd, hostStart, portStart,\n      pathStart, queryStart, fragmentStart, scheme);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Parse the <code>host<\/code> as an IP version 4 (IPv4) address, returning the address\nas a list of 4 bytes in network byte order (big endian).<\/p>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if <code>host<\/code> is not a valid IPv4 address\nrepresentation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;int&gt; parseIPv4Address(String host) =&gt;\n    _parseIPv4Address(host, 0, host.length);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/parseIPv4Address.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "name": "parseIPv4Address",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "host",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Parse the <code>host<\/code> as an IP version 6 (IPv6) address, returning the address\nas a list of 16 bytes in network byte order (big endian).<\/p>\n<p>Throws a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> if <code>host<\/code> is not a valid IPv6 address\nrepresentation.<\/p>\n<p>Acts on the substring from <code>start<\/code> to <code>end<\/code>. If <code>end<\/code> is omitted, it\ndefaults ot the end of the string.<\/p>\n<p>Some examples of IPv6 addresses:<\/p>\n<ul>\n<li>::1<\/li>\n<li>FEDC:BA98:7654:3210:FEDC:BA98:7654:3210<\/li>\n<li>3ffe:2a00\ud83d\udcaf7031::1<\/li>\n<li>::FFFF:129.144.52.38<\/li>\n<li>2010:836B:4179::836B:4179<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static List&lt;int&gt; parseIPv6Address(String host, [int start = 0, int end]) {\n  end ??= host.length;\n  \/\/ An IPv6 address consists of exactly 8 parts of 1-4 hex digits, separated\n  \/\/ by `:`'s, with the following exceptions:\n  \/\/\n  \/\/  - One (and only one) wildcard (`::`) may be present, representing a fill\n  \/\/    of 0's. The IPv6 `::` is thus 16 bytes of `0`.\n  \/\/  - The last two parts may be replaced by an IPv4 \"dotted-quad\" address.\n\n  \/\/ Helper function for reporting a badly formatted IPv6 address.\n  void error(String msg, [position]) {\n    throw new FormatException('Illegal IPv6 address, $msg', host, position);\n  }\n\n  \/\/ Parse a hex block.\n  int parseHex(int start, int end) {\n    if (end - start &gt; 4) {\n      error('an IPv6 part can only contain a maximum of 4 hex digits', start);\n    }\n    int value = int.parse(host.substring(start, end), radix: 16);\n    if (value &lt; 0 || value &gt; 0xFFFF) {\n      error('each part must be in the range of `0x0..0xFFFF`', start);\n    }\n    return value;\n  }\n\n  if (host.length &lt; 2) error('address is too short');\n  List&lt;int&gt; parts = [];\n  bool wildcardSeen = false;\n  \/\/ Set if seeing a \".\", suggesting that there is an IPv4 address.\n  bool seenDot = false;\n  int partStart = start;\n  \/\/ Parse all parts, except a potential last one.\n  for (int i = start; i &lt; end; i++) {\n    int char = host.codeUnitAt(i);\n    if (char == _COLON) {\n      if (i == start) {\n        \/\/ If we see a `:` in the beginning, expect wildcard.\n        i++;\n        if (host.codeUnitAt(i) != _COLON) {\n          error('invalid start colon.', i);\n        }\n        partStart = i;\n      }\n      if (i == partStart) {\n        \/\/ Wildcard. We only allow one.\n        if (wildcardSeen) {\n          error('only one wildcard `::` is allowed', i);\n        }\n        wildcardSeen = true;\n        parts.add(-1);\n      } else {\n        \/\/ Found a single colon. Parse [partStart..i] as a hex entry.\n        parts.add(parseHex(partStart, i));\n      }\n      partStart = i + 1;\n    } else if (char == _DOT) {\n      seenDot = true;\n    }\n  }\n  if (parts.length == 0) error('too few parts');\n  bool atEnd = (partStart == end);\n  bool isLastWildcard = (parts.last == -1);\n  if (atEnd &amp;&amp; !isLastWildcard) {\n    error('expected a part after last `:`', end);\n  }\n  if (!atEnd) {\n    if (!seenDot) {\n      parts.add(parseHex(partStart, end));\n    } else {\n      List&lt;int&gt; last = _parseIPv4Address(host, partStart, end);\n      parts.add(last[0] &lt;&lt; 8 | last[1]);\n      parts.add(last[2] &lt;&lt; 8 | last[3]);\n    }\n  }\n  if (wildcardSeen) {\n    if (parts.length &gt; 7) {\n      error('an address with a wildcard must have less than 7 parts');\n    }\n  } else if (parts.length != 8) {\n    error('an address without a wildcard must contain exactly 8 parts');\n  }\n  List&lt;int&gt; bytes = new Uint8List(16);\n  for (int i = 0, index = 0; i &lt; parts.length; i++) {\n    int value = parts[i];\n    if (value == -1) {\n      int wildCardLength = 9 - parts.length;\n      for (int j = 0; j &lt; wildCardLength; j++) {\n        bytes[index] = 0;\n        bytes[index + 1] = 0;\n        index += 2;\n      }\n    } else {\n      bytes[index] = value &gt;&gt; 8;\n      bytes[index + 1] = value &amp; 0xff;\n      index += 2;\n    }\n  }\n  return bytes;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/parseIPv6Address.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "name": "parseIPv6Address",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "host",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a <code>Uri<\/code> that differs from this only in not having a fragment.<\/p>\n<p>If this <code>Uri<\/code> does not have a fragment, it is itself returned.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri removeFragment();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/removeFragment.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "removeFragment",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Uri<\/code> based on this one, but with some parts replaced.<\/p>\n<p>This method takes the same parameters as the <a href=\"dart-core\/Uri\/Uri.html\">new Uri<\/a> constructor,\nand they have the same meaning.<\/p>\n<p>At most one of <code>path<\/code> and <code>pathSegments<\/code> must be provided.\nLikewise, at most one of <code>query<\/code> and <code>queryParameters<\/code> must be provided.<\/p>\n<p>Each part that is not provided will default to the corresponding\nvalue from this <code>Uri<\/code> instead.<\/p>\n<p>This method is different from <a href=\"dart-core\/Uri\/resolve.html\">Uri.resolve<\/a> which overrides in a\nhierarchical manner,\nand can instead replace each part of a <code>Uri<\/code> individually.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>Uri uri1 = Uri.parse(\"a:\/\/b@c:4\/d\/e?f#g\");\nUri uri2 = uri1.replace(scheme: \"A\", path: \"D\/E\/E\", fragment: \"G\");\nprint(uri2);  \/\/ prints \"a:\/\/b@c:4\/D\/E\/E?f#G\"\n<\/code><\/pre>\n<p>This method acts similarly to using the <code>new Uri<\/code> constructor with\nsome of the arguments taken from this <code>Uri<\/code>. Example:<\/p>\n<pre class=\"language-dart\"><code>Uri uri3 = new Uri(\n    scheme: \"A\",\n    userInfo: uri1.userInfo,\n    host: uri1.host,\n    port: uri1.port,\n    path: \"D\/E\/E\",\n    query: uri1.query,\n    fragment: \"G\");\nprint(uri3);  \/\/ prints \"a:\/\/b@c:4\/D\/E\/E?f#G\"\nprint(uri2 == uri3);  \/\/ prints true.\n<\/code><\/pre>\n<p>Using this method can be seen as a shorthand for the <code>Uri<\/code> constructor\ncall above, but may also be slightly faster because the parts taken\nfrom this <code>Uri<\/code> need not be checked for validity again.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri replace(\n    {String scheme,\n    String userInfo,\n    String host,\n    int port,\n    String path,\n    Iterable&lt;String&gt; pathSegments,\n    String query,\n    Map&lt;String, dynamic \/*String|Iterable&lt;String&gt;*\/ &gt; queryParameters,\n    String fragment});<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/replace.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "replace",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "fragment",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "host",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "path",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "pathSegments",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Iterable<dart:core.String>"
                        },
                        {
                            "name": "port",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "query",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "queryParameters",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map<dart:core.String>"
                        },
                        {
                            "name": "scheme",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "userInfo",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Resolve <code>reference<\/code> as an URI relative to <code>this<\/code>.<\/p>\n<p>First turn <code>reference<\/code> into a URI using <a href=\"dart-core\/Uri\/parse.html\">Uri.parse<\/a>. Then resolve the\nresulting URI relative to <code>this<\/code>.<\/p>\n<p>Returns the resolved URI.<\/p>\n<p>See <a href=\"dart-core\/Uri\/resolveUri.html\">resolveUri<\/a> for details.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri resolve(String reference);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/resolve.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "resolve",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "reference",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Resolve <code>reference<\/code> as an URI relative to <code>this<\/code>.<\/p>\n<p>Returns the resolved URI.<\/p>\n<p>The algorithm \"Transform Reference\" for resolving a reference is described\nin <a href=\"http:\/\/tools.ietf.org\/html\/rfc3986#section-5\" title=\"RFC-1123\">RFC-3986 Section 5<\/a>.<\/p>\n<p>Updated to handle the case where the base URI is just a relative path -\nthat is: when it has no scheme and no authority and the path does not start\nwith a slash.\nIn that case, the paths are combined without removing leading \"..\", and\nan empty path is not converted to \"\/\".<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uri resolveUri(Uri reference);<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/resolveUri.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "resolveUri",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "reference",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Uri"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>query<\/code> split into a map according to the rules\nspecified for FORM post in the <a href=\"http:\/\/www.w3.org\/TR\/REC-html40\/interact\/forms.html#h-17.13.4\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section\n17.13.4<\/a>.\nEach key and value in the returned map has been decoded. If the <code>query<\/code>\nis the empty string an empty map is returned.<\/p>\n<p>Keys in the query string that have no value are mapped to the\nempty string.<\/p>\n<p>Each query component will be decoded using <code>encoding<\/code>. The default encoding\nis UTF-8.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Map&lt;String, String&gt; splitQueryString(String query,\n    {Encoding encoding: utf8}) {\n  return query.split(\"&amp;\").fold({}, (map, element) {\n    int index = element.indexOf(\"=\");\n    if (index == -1) {\n      if (element != \"\") {\n        map[decodeQueryComponent(element, encoding: encoding)] = \"\";\n      }\n    } else if (index != 0) {\n      var key = element.substring(0, index);\n      var value = element.substring(index + 1);\n      map[decodeQueryComponent(key, encoding: encoding)] =\n          decodeQueryComponent(value, encoding: encoding);\n    }\n    return map;\n  });\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/splitQueryString.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "name": "splitQueryString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "encoding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Encoding"
                        },
                        {
                            "name": "query",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the file path from a file URI.<\/p>\n<p>The returned path has either Windows or non-Windows\nsemantics.<\/p>\n<p>For non-Windows semantics the slash (\"\/\") is used to separate\npath segments.<\/p>\n<p>For Windows semantics the backslash (\"\\\") separator is used to\nseparate path segments.<\/p>\n<p>If the URI is absolute the path starts with a path separator\nunless Windows semantics is used and the first path segment is a\ndrive letter. When Windows semantics is used a host component in\nthe uri in interpreted as a file server and a UNC path is\nreturned.<\/p>\n<p>The default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.<\/p>\n<p>To override the automatic detection of which semantics to use pass\na value for <code>windows<\/code>. Passing <code>true<\/code> will use Windows\nsemantics and passing <code>false<\/code> will use non-Windows semantics.<\/p>\n<p>If the URI ends with a slash (i.e. the last path component is\nempty) the returned file path will also end with a slash.<\/p>\n<p>With Windows semantics URIs starting with a drive letter cannot\nbe relative to the current drive on the designated drive. That is\nfor the URI <code>file:\/\/\/c:abc<\/code> calling <code>toFilePath<\/code> will throw as a\npath segment cannot contain colon on Windows.<\/p>\n<p>Examples using non-Windows semantics (resulting of calling\ntoFilePath in comment):<\/p>\n<pre class=\"language-dart\"><code>Uri.parse(\"xxx\/yyy\");  \/\/ xxx\/yyy\nUri.parse(\"xxx\/yyy\/\");  \/\/ xxx\/yyy\/\nUri.parse(\"file:\/\/\/xxx\/yyy\");  \/\/ \/xxx\/yyy\nUri.parse(\"file:\/\/\/xxx\/yyy\/\");  \/\/ \/xxx\/yyy\/\nUri.parse(\"file:\/\/\/C:\");  \/\/ \/C:\nUri.parse(\"file:\/\/\/C:a\");  \/\/ \/C:a\n<\/code><\/pre>\n<p>Examples using Windows semantics (resulting URI in comment):<\/p>\n<pre class=\"language-dart\"><code>Uri.parse(\"xxx\/yyy\");  \/\/ xxx\\yyy\nUri.parse(\"xxx\/yyy\/\");  \/\/ xxx\\yyy\\\nUri.parse(\"file:\/\/\/xxx\/yyy\");  \/\/ \\xxx\\yyy\nUri.parse(\"file:\/\/\/xxx\/yyy\/\");  \/\/ \\xxx\\yyy\\\nUri.parse(\"file:\/\/\/C:\/xxx\/yyy\");  \/\/ C:\\xxx\\yyy\nUri.parse(\"file:C:xxx\/yyy\");  \/\/ Throws as a path segment\n                              \/\/ cannot contain colon on Windows.\nUri.parse(\"file:\/\/server\/share\/file\");  \/\/ \\\\server\\share\\file\n<\/code><\/pre>\n<p>If the URI is not a file URI calling this throws\n<a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n<p>If the URI cannot be converted to a file path calling this throws\n<a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/\/ TODO(lrn): Deprecate and move functionality to File class or similar.\n\/\/ The core libraries should not worry about the platform.\nString toFilePath({bool windows});<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/toFilePath.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toFilePath",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "windows",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the normalized string representation of the URI.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Creates a new <code>Uri<\/code> object by parsing a URI string.<\/p>\n<p>If <code>start<\/code> and <code>end<\/code> are provided, they must specify a valid substring\nof <code>uri<\/code>, and only the substring from <code>start<\/code> to <code>end<\/code> is parsed as a URI.\nThe <code>uri<\/code> must not be <code>null<\/code>.<\/p>\n<p>Returns <code>null<\/code> if the <code>uri<\/code> string is not valid as a URI or URI reference.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Uri tryParse(String uri, [int start = 0, int end]) {\n  \/\/ TODO: Optimize to avoid throwing-and-recatching.\n  try {\n    return parse(uri, start, end);\n  } on FormatException {\n    return null;\n  }\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/Uri\/tryParse.html",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "name": "tryParse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.Uri",
                    "params": [
                        {
                            "name": "end",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "start",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the authority component.<\/p>\n<p>The authority is formatted from the <a href=\"dart-core\/Uri\/userInfo.html\">userInfo<\/a>, <a href=\"dart-core\/Uri\/host.html\">host<\/a> and <a href=\"dart-core\/Uri\/port.html\">port<\/a>\nparts.<\/p>\n<p>Returns the empty string if there is no authority component.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get authority;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/authority.html",
                    "name": "authority",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the natural base URI for the current platform.<\/p>\n<p>When running in a browser this is the current URL of the current page\n(from <code>window.location.href<\/code>).<\/p>\n<p>When not running in a browser this is the file URI referencing\nthe current working directory.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static Uri get base;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/base.html",
                    "name": "base",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Access the structure of a <code>data:<\/code> URI.<\/p>\n<p>Returns a <a href=\"dart-core\/UriData-class.html\">UriData<\/a> object for <code>data:<\/code> URIs and <code>null<\/code> for all other\nURIs.\nThe <a href=\"dart-core\/UriData-class.html\">UriData<\/a> object can be used to access the media type and data\nof a <code>data:<\/code> URI.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">UriData get data;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/data.html",
                    "name": "data",
                    "isDeprecated": false,
                    "type": "dart:core.UriData",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the fragment identifier component.<\/p>\n<p>Returns the empty string if there is no fragment identifier\ncomponent.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get fragment;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/fragment.html",
                    "name": "fragment",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has an absolute path (starting with '\/').<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasAbsolutePath;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasAbsolutePath.html",
                    "name": "hasAbsolutePath",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has an <a href=\"dart-core\/Uri\/authority.html\">authority<\/a> component.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasAuthority;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasAuthority.html",
                    "name": "hasAuthority",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has an empty path.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasEmptyPath;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasEmptyPath.html",
                    "name": "hasEmptyPath",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has a fragment part.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasFragment;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasFragment.html",
                    "name": "hasFragment",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has an explicit port.<\/p>\n<p>If the port number is the default port number\n(zero for unrecognized schemes, with http (80) and https (443) being\nrecognized),\nthen the port is made implicit and omitted from the URI.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasPort;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasPort.html",
                    "name": "hasPort",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has a query part.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasQuery;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasQuery.html",
                    "name": "hasQuery",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI has a <a href=\"dart-core\/Uri\/scheme.html\">scheme<\/a> component.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasScheme =&gt; scheme.isNotEmpty;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hasScheme.html",
                    "name": "hasScheme",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns a hash code computed as <code>toString().hashCode<\/code>.<\/p>\n<p>This guarantees that URIs with the same normalized<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the host part of the authority component.<\/p>\n<p>Returns the empty string if there is no authority component and\nhence no host.<\/p>\n<p>If the host is an IP version 6 address, the surrounding <code>[<\/code> and <code>]<\/code> is\nremoved.<\/p>\n<p>The host string is case-insensitive.\nThe returned host name is canonicalized to lower-case\nwith upper-case percent-escapes.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get host;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/host.html",
                    "name": "host",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns whether the URI is absolute.<\/p>\n<p>A URI is an absolute URI in the sense of RFC 3986 if it has a scheme\nand no fragment.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isAbsolute;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/isAbsolute.html",
                    "name": "isAbsolute",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the origin of the URI in the form scheme:\/\/host:port for the\nschemes http and https.<\/p>\n<p>It is an error if the scheme is not \"http\" or \"https\", or if the host name\nis missing or empty.<\/p>\n<p>See: <a href=\"http:\/\/www.w3.org\/TR\/2011\/WD-html5-20110405\/origin-0.html#origin\">http:\/\/www.w3.org\/TR\/2011\/WD-html5-20110405\/origin-0.html#origin<\/a><\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get origin;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/origin.html",
                    "name": "origin",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the path component.<\/p>\n<p>The returned path is encoded. To get direct access to the decoded\npath use <a href=\"dart-core\/Uri\/pathSegments.html\">pathSegments<\/a>.<\/p>\n<p>Returns the empty string if there is no path component.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get path;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/path.html",
                    "name": "path",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the URI path split into its segments. Each of the segments in the\nreturned list have been decoded. If the path is empty the empty list will\nbe returned. A leading slash <code>\/<\/code> does not affect the segments returned.<\/p>\n<p>The returned list is unmodifiable and will throw <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> on any\ncalls that would mutate it.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;String&gt; get pathSegments;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/pathSegments.html",
                    "name": "pathSegments",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.String>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the port part of the authority component.<\/p>\n<p>Returns the default port if there is no port number in the authority\ncomponent. That's 80 for http, 443 for https, and 0 for everything else.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get port;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/port.html",
                    "name": "port",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the query component. The returned query is encoded. To get\ndirect access to the decoded query use <a href=\"dart-core\/Uri\/queryParameters.html\">queryParameters<\/a>.<\/p>\n<p>Returns the empty string if there is no query component.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get query;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/query.html",
                    "name": "query",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the URI query split into a map according to the rules\nspecified for FORM post in the <a href=\"http:\/\/www.w3.org\/TR\/REC-html40\/interact\/forms.html#h-17.13.4\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section\n17.13.4<\/a>.\nEach key and value in the returned map has been decoded.\nIf there is no query the empty map is returned.<\/p>\n<p>Keys in the query string that have no value are mapped to the\nempty string.\nIf a key occurs more than once in the query string, it is mapped to\nan arbitrary choice of possible value.\nThe <a href=\"dart-core\/Uri\/queryParametersAll.html\">queryParametersAll<\/a> getter can provide a map\nthat maps keys to all of their values.<\/p>\n<p>The returned map is unmodifiable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, String&gt; get queryParameters;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/queryParameters.html",
                    "name": "queryParameters",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the URI query split into a map according to the rules\nspecified for FORM post in the <a href=\"http:\/\/www.w3.org\/TR\/REC-html40\/interact\/forms.html#h-17.13.4\" title=\"HTML 4.01 section 17.13.4\">HTML 4.01 specification section\n17.13.4<\/a>.\nEach key and value in the returned map has been decoded. If there is no\nquery the empty map is returned.<\/p>\n<p>Keys are mapped to lists of their values. If a key occurs only once,\nits value is a singleton list. If a key occurs with no value, the\nempty string is used as the value for that occurrence.<\/p>\n<p>The returned map and the lists it contains are unmodifiable.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, List&lt;String&gt;&gt; get queryParametersAll;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/queryParametersAll.html",
                    "name": "queryParametersAll",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.List<dart:core.String>>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>The scheme component of the URI.<\/p>\n<p>Returns the empty string if there is no scheme component.<\/p>\n<p>A URI scheme is case insensitive.\nThe returned scheme is canonicalized to lowercase letters.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get scheme;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/scheme.html",
                    "name": "scheme",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                },
                {
                    "desc": "<p>Returns the user info part of the authority component.<\/p>\n<p>Returns the empty string if there is no user info in the\nauthority component.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get userInfo;<\/code><\/pre>\n        ",
                    "href": "dart-core\/Uri\/userInfo.html",
                    "name": "userInfo",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.Uri",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A way to access the structure of a <code>data:<\/code> URI.<\/p>\n<p>Data URIs are non-hierarchical URIs that can contain any binary data.\nThey are defined by <a href=\"https:\/\/tools.ietf.org\/html\/rfc2397\">RFC 2397<\/a>.<\/p>\n<p>This class allows parsing the URI text and extracting individual parts of the\nURI, as well as building the URI text from structured parts.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/UriData-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.UriData",
            "shortname": "UriData",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>The content part of the data URI as bytes.<\/p>\n<p>If the data is Base64 encoded, it will be decoded to bytes.<\/p>\n<p>If the data is not Base64 encoded, it will be decoded by unescaping\npercent-escaped characters and returning byte values of each unescaped\ncharacter. The bytes will not be, e.g., UTF-8 decoded.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Uint8List contentAsBytes() {\n  String text = _text;\n  int start = _separatorIndices.last + 1;\n  if (isBase64) {\n    return base64.decoder.convert(text, start);\n  }\n\n  \/\/ Not base64, do percent-decoding and return the remaining bytes.\n  \/\/ Compute result size.\n  const int percent = 0x25;\n  int length = text.length - start;\n  for (int i = start; i &lt; text.length; i++) {\n    var codeUnit = text.codeUnitAt(i);\n    if (codeUnit == percent) {\n      i += 2;\n      length -= 2;\n    }\n  }\n  \/\/ Fill result array.\n  Uint8List result = new Uint8List(length);\n  if (length == text.length) {\n    result.setRange(0, length, text.codeUnits, start);\n    return result;\n  }\n  int index = 0;\n  for (int i = start; i &lt; text.length; i++) {\n    var codeUnit = text.codeUnitAt(i);\n    if (codeUnit != percent) {\n      result[index++] = codeUnit;\n    } else {\n      if (i + 2 &lt; text.length) {\n        int byte = parseHexByte(text, i + 1);\n        if (byte &gt;= 0) {\n          result[index++] = byte;\n          i += 2;\n          continue;\n        }\n      }\n      throw new FormatException(\"Invalid percent escape\", text, i);\n    }\n  }\n  assert(index == result.length);\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/UriData\/contentAsBytes.html",
                    "isDeprecated": false,
                    "type": "dart:typed_data.Uint8List",
                    "name": "contentAsBytes",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string created from the content of the data URI.<\/p>\n<p>If the content is Base64 encoded, it will be decoded to bytes and then\ndecoded to a string using <code>encoding<\/code>.\nIf encoding is omitted, the value of a <code>charset<\/code> parameter is used\nif it is recognized by <a href=\"dart-convert\/Encoding\/getByName.html\">Encoding.getByName<\/a>, otherwise it defaults to\nthe <a href=\"dart-convert\/ascii-constant.html\">ascii<\/a> encoding, which is the default encoding for data URIs\nthat do not specify an encoding.<\/p>\n<p>If the content is not Base64 encoded, it will first have percent-escapes\nconverted to bytes and then the character codes and byte values are\ndecoded using <code>encoding<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String contentAsString({Encoding encoding}) {\n  if (encoding == null) {\n    var charset = this.charset; \/\/ Returns \"US-ASCII\" if not present.\n    encoding = Encoding.getByName(charset);\n    if (encoding == null) {\n      throw new UnsupportedError(\"Unknown charset: $charset\");\n    }\n  }\n  String text = _text;\n  int start = _separatorIndices.last + 1;\n  if (isBase64) {\n    var converter = base64.decoder.fuse(encoding.decoder);\n    return converter.convert(text.substring(start));\n  }\n  return _Uri._uriDecode(text, start, text.length, encoding, false);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/UriData\/contentAsString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "contentAsString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.UriData",
                    "params": [
                        {
                            "name": "encoding",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:convert.Encoding"
                        }
                    ]
                },
                {
                    "desc": "<p>Parses a string as a <code>data<\/code> URI.<\/p>\n<p>The string must have the format:<\/p>\n<pre class=\"language-dart\"><code>'data:' (type '\/' subtype)? (';' attribute '=' value)* (';base64')? ',' data\n<\/code><\/pre>\n<p>where <code>type<\/code>, <code>subtype<\/code>, <code>attribute<\/code> and <code>value<\/code> are specified in RFC-2045,\nand <code>data<\/code> is a sequence of URI-characters (RFC-2396 <code>uric<\/code>).<\/p>\n<p>This means that all the characters must be ASCII, but the URI may contain\npercent-escapes for non-ASCII byte values that need an interpretation\nto be converted to the corresponding string.<\/p>\n<p>Parsing checks that Base64 encoded data is valid, and it normalizes it\nto use the default Base64 alphabet and to use padding.\nNon-Base64 data is escaped using percent-escapes as necessary to make\nit valid, and existing escapes are case normalized.<\/p>\n<p>Accessing the individual parts may fail later if they turn out to have\ncontent that can't be decoded successfully as a string, for example if\nexisting percent escapes represent bytes that cannot be decoded\nby the chosen <a href=\"dart-convert\/Encoding-class.html\">Encoding<\/a> (see <a href=\"dart-core\/UriData\/contentAsString.html\">contentAsString<\/a>).<\/p>\n<p>A <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> is thrown if <code>uri<\/code> is not a valid data URI.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static UriData parse(String uri) {\n  if (uri.length &gt;= 5) {\n    int dataDelta = _startsWithData(uri, 0);\n    if (dataDelta == 0) {\n      \/\/ Exact match on \"data:\".\n      return _parse(uri, 5, null);\n    }\n    if (dataDelta == 0x20) {\n      \/\/ Starts with a non-normalized \"data\" scheme containing upper-case\n      \/\/ letters. Parse anyway, but throw away the scheme.\n      return _parse(uri.substring(5), 0, null);\n    }\n  }\n  throw new FormatException(\"Does not start with 'data:'\", uri, 0);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/UriData\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.UriData",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.UriData",
                    "params": [
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt;\n    (_separatorIndices[0] == _noScheme) ? \"data:$_text\" : _text;<\/code><\/pre>\n    ",
                    "href": "dart-core\/UriData\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The charset parameter of the media type.<\/p>\n<p>If the parameters of the media type contains a <code>charset<\/code> parameter\nthen this returns its value, otherwise it returns <code>US-ASCII<\/code>,\nwhich is the default charset for data URIs.\nIf the value contain non-ASCII percent escapes, they are decoded as UTF-8.<\/p>\n<p>If the MIME type representation in the URI text contains URI escapes,\nthey are unescaped in the returned string.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get charset {\n  int parameterStart = 1;\n  int parameterEnd = _separatorIndices.length - 1; \/\/ The ',' before data.\n  if (isBase64) {\n    \/\/ There is a \";base64\" separator, so subtract one for that as well.\n    parameterEnd -= 1;\n  }\n  for (int i = parameterStart; i &lt; parameterEnd; i += 2) {\n    var keyStart = _separatorIndices[i] + 1;\n    var keyEnd = _separatorIndices[i + 1];\n    if (keyEnd == keyStart + 7 &amp;&amp; _text.startsWith(\"charset\", keyStart)) {\n      return _Uri._uriDecode(\n          _text, keyEnd + 1, _separatorIndices[i + 2], utf8, false);\n    }\n  }\n  return \"US-ASCII\";\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/UriData\/charset.html",
                    "name": "charset",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                },
                {
                    "desc": "<p>The content part of the data URI, as its actual representation.<\/p>\n<p>This string may contain percent escapes.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get contentText =&gt; _text.substring(_separatorIndices.last + 1);<\/code><\/pre>\n        ",
                    "href": "dart-core\/UriData\/contentText.html",
                    "name": "contentText",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                },
                {
                    "desc": "<p>Whether the data is Base64 encoded or not.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isBase64 =&gt; _separatorIndices.length.isOdd;<\/code><\/pre>\n        ",
                    "href": "dart-core\/UriData\/isBase64.html",
                    "name": "isBase64",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                },
                {
                    "desc": "<p>The MIME type of the data URI.<\/p>\n<p>A data URI consists of a \"media type\" followed by data.\nThe media type starts with a MIME type and can be followed by\nextra parameters.\nIf the MIME type representation in the URI text contains URI escapes,\nthey are unescaped in the returned string.\nIf the value contain non-ASCII percent escapes, they are decoded as UTF-8.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>data:text\/plain;charset=utf-8,Hello%20World!\n<\/code><\/pre>\n<p>This data URI has the media type <code>text\/plain;charset=utf-8<\/code>, which is the\nMIME type <code>text\/plain<\/code> with the parameter <code>charset<\/code> with value <code>utf-8<\/code>.\nSee <a href=\"https:\/\/tools.ietf.org\/html\/rfc2045\">RFC 2045<\/a> for more detail.<\/p>\n<p>If the first part of the data URI is empty, it defaults to <code>text\/plain<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get mimeType {\n  int start = _separatorIndices[0] + 1;\n  int end = _separatorIndices[1];\n  if (start == end) return \"text\/plain\";\n  return _Uri._uriDecode(_text, start, end, utf8, false);\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/UriData\/mimeType.html",
                    "name": "mimeType",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                },
                {
                    "desc": "<p>A map representing the parameters of the media type.<\/p>\n<p>A data URI may contain parameters between the MIME type and the\ndata. This converts these parameters to a map from parameter name\nto parameter value.\nThe map only contains parameters that actually occur in the URI.\nThe <code>charset<\/code> parameter has a default value even if it doesn't occur\nin the URI, which is reflected by the <a href=\"dart-core\/UriData\/charset.html\">charset<\/a> getter. This means that\n<a href=\"dart-core\/UriData\/charset.html\">charset<\/a> may return a value even if <code>parameters[\"charset\"]<\/code> is <code>null<\/code>.<\/p>\n<p>If the values contain non-ASCII values or percent escapes,\nthey are decoded as UTF-8.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, String&gt; get parameters {\n  var result = &lt;String, String&gt;{};\n  for (int i = 3; i &lt; _separatorIndices.length; i += 2) {\n    var start = _separatorIndices[i - 2] + 1;\n    var equals = _separatorIndices[i - 1];\n    var end = _separatorIndices[i];\n    String key = _Uri._uriDecode(_text, start, equals, utf8, false);\n    String value = _Uri._uriDecode(_text, equals + 1, end, utf8, false);\n    result[key] = value;\n  }\n  return result;\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/UriData\/parameters.html",
                    "name": "parameters",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String<dart:core.String>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"dart-core\/Uri-class.html\">Uri<\/a> that this <code>UriData<\/code> is giving access to.<\/p>\n<p>Returns a <code>Uri<\/code> with scheme <code>data<\/code> and the remainder of the data URI\nas path.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Uri get uri {\n  if (_uriCache != null) return _uriCache;\n  String path = _text;\n  String query;\n  int colonIndex = _separatorIndices[0];\n  int queryIndex = _text.indexOf('?', colonIndex + 1);\n  int end = _text.length;\n  if (queryIndex &gt;= 0) {\n    query = _Uri._normalizeOrSubstring(\n        _text, queryIndex + 1, end, _Uri._queryCharTable);\n    end = queryIndex;\n  }\n  path = _Uri._normalizeOrSubstring(\n      _text, colonIndex + 1, end, _Uri._pathCharOrSlashTable);\n  _uriCache = new _DataUri(this, path, query);\n  return _uriCache;\n}<\/code><\/pre>\n        ",
                    "href": "dart-core\/UriData\/uri.html",
                    "name": "uri",
                    "isDeprecated": false,
                    "type": "dart:core.Uri",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.UriData",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The reserved words <code>true<\/code> and <code>false<\/code> denote objects that are the only two\ninstances of this class.<\/p>\n<p>It is a compile-time error for a class to attempt to extend or implement\nbool.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/bool-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.bool",
            "shortname": "bool",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "foundation.FlagProperty"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns either <code>\"true\"<\/code> for <code>true<\/code> and <code>\"false\"<\/code> for <code>false<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() {\n  return this ? \"true\" : \"false\";\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/bool\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.bool",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"dart-core\/bool\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"dart-core\/Object\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/bool\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.bool",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A double-precision floating point number.<\/p>\n<p>Representation of Dart doubles containing double specific constants\nand operations and specializations of operations inherited from\n<a href=\"dart-core\/num-class.html\">num<\/a>. Dart doubles are 64-bit floating-point numbers as specified in the\nIEEE 754 standard.<\/p>\n<p>The <a href=\"dart-core\/double-class.html\">double<\/a> type is contagious. Operations on <a href=\"dart-core\/double-class.html\">double<\/a>s return\n<a href=\"dart-core\/double-class.html\">double<\/a> results.<\/p>\n<p>It is a compile-time error for a class to attempt to extend or implement\ndouble.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/double-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.double",
            "shortname": "double",
            "extends": [
                "dart:core.num",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.AnimationController",
                "animation.AnimationMean",
                "animation.CurveTween",
                "animation.CurvedAnimation",
                "animation.ProxyAnimation",
                "animation.ReverseAnimation",
                "animation.TrainHoppingAnimation",
                "dart:typed_data.UnmodifiableFloat32ListView",
                "dart:typed_data.UnmodifiableFloat64ListView",
                "foundation.DoubleProperty",
                "foundation.PercentProperty",
                "typed_data.typed_buffers.Float32Buffer",
                "typed_data.typed_buffers.Float64Buffer"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns the absolute value of this <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double abs();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/abs.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "abs",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the least integer no smaller than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ceil();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/ceil.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "ceil",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the least integer double value no smaller than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double ceilToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/ceilToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "ceilToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/double\/double.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "double",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the greatest integer no greater than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int floor();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/floor.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "floor",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the greatest integer double value no greater than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>0.0 &lt; d &lt; 1.0<\/code> will return <code>0.0<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double floorToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/floorToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "floorToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Parse <code>source<\/code> as an double literal and return its value.<\/p>\n<p>Accepts an optional sign (<code>+<\/code> or <code>-<\/code>) followed by either the characters\n\"Infinity\", the characters \"NaN\" or a floating-point representation.\nA floating-point representation is composed of a mantissa and an optional\nexponent part. The mantissa is either a decimal point (<code>.<\/code>) followed by a\nsequence of (decimal) digits, or a sequence of digits\noptionally followed by a decimal point and optionally more digits. The\n(optional) exponent part consists of the character \"e\" or \"E\", an optional\nsign, and one or more digits.\nThe <code>source<\/code> must not be <code>null<\/code>.<\/p>\n<p>Leading and trailing whitespace is ignored.<\/p>\n<p>If the <code>source<\/code> string is not a valid double literal, the <code>onError<\/code>\nis called with the <code>source<\/code> as argument, and its return value is\nused instead. If no <code>onError<\/code> is provided, a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>\nis thrown instead.<\/p>\n<p>The <code>onError<\/code> function is only invoked if <code>source<\/code> is a <a href=\"dart-core\/String-class.html\">String<\/a> with an\ninvalid format. It is not invoked if <code>source<\/code> is <code>null<\/code>.<\/p>\n<p>Examples of accepted strings:<\/p>\n<pre class=\"language-dart\"><code>\"3.14\"\n\"  3.14 \\xA0\"\n\"0.\"\n\".0\"\n\"-1.e3\"\n\"1234E+7\"\n\"+.12e-9\"\n\"-NaN\"\n<\/code><\/pre>\n<p>The <code>onError<\/code> parameter is deprecated and will be removed.\nInstead of <code>double.parse(string, (string) { ... })<\/code>,\nyou should use <code>double.tryParse(string) ?? (...)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static double parse(String source,\n    [@deprecated double onError(String source)]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the remainder of the truncating division of <code>this<\/code> by <code>other<\/code>.<\/p>\n<p>The result <code>r<\/code> of this operation satisfies:\n<code>this == (this ~\/ other) * other + r<\/code>.\nAs a consequence the remainder <code>r<\/code> has the same sign as the divider <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double remainder(num other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/remainder.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "remainder",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the integer closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).round() == 4<\/code> and <code>(-3.5).round() == -4<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int round();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/round.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "round",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the integer double value closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).roundToDouble() == 4<\/code> and <code>(-3.5).roundToDouble() == -4<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>,\nand <code>-0.0<\/code> is therefore considered closer to negative numbers than <code>0.0<\/code>.\nThis means that for a value, <code>d<\/code> in the range <code>-0.5 &lt; d &lt; 0.0<\/code>,\nthe result is <code>-0.0<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double roundToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/roundToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "roundToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Provide a representation of this <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/p>\n<p>The representation is a number literal such that the closest double value\nto the representation's mathematical value is this <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>Returns \"NaN\" for the Not-a-Number value.\nReturns \"Infinity\" and \"-Infinity\" for positive and negative Infinity.\nReturns \"-0.0\" for negative zero.<\/p>\n<p>For all doubles, <code>d<\/code>, converting to a string and parsing the string back\ngives the same value again: <code>d == double.parse(d.toString())<\/code> (except when\n<code>d<\/code> is NaN).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the integer obtained by discarding any fractional\ndigits from <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int truncate();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/truncate.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "truncate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the integer double value obtained by discarding any fractional\ndigits from <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is not\na finite value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>, and\nin the range <code>0.0 &lt; d &lt; 1.0<\/code> it will return 0.0.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double truncateToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/truncateToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "truncateToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Parse <code>source<\/code> as an double literal and return its value.<\/p>\n<p>Like <a href=\"dart-core\/double\/parse.html\">parse<\/a> except that this function returns <code>null<\/code> for invalid inputs\ninstead of throwing, and the <code>source<\/code> must still not be <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static double tryParse(String source);<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/tryParse.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "tryParse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.double",
                    "params": [
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double infinity = 1.0 \/ 0.0\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/infinity-constant.html",
                    "name": "infinity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double maxFinite = 1.7976931348623157e+308\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/maxFinite-constant.html",
                    "name": "maxFinite",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double minPositive = 5e-324\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/minPositive-constant.html",
                    "name": "minPositive",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double nan = 0.0 \/ 0.0\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/nan-constant.html",
                    "name": "nan",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const double negativeInfinity = -infinity\n\n<\/code><\/pre>\n    ",
                    "href": "dart-core\/double\/negativeInfinity-constant.html",
                    "name": "negativeInfinity",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:core.double",
                    "params": []
                },
                {
                    "desc": "<p>Returns the sign of the double's numerical value.<\/p>\n<p>Returns -1.0 if the value is less than zero,\n+1.0 if the value is greater than zero,\nand the value itself if it is -0.0, 0.0 or NaN.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get sign;<\/code><\/pre>\n        ",
                    "href": "dart-core\/double\/sign.html",
                    "name": "sign",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.double",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An integer number.<\/p>\n<p>The default implementation of <code>int<\/code> is 64-bit two's complement integers\nwith operations that wrap to that range on overflow.<\/p>\n<p><strong>Note:<\/strong> When compiling to JavaScript, integers are restricted to values\nthat can be represented exactly by double-precision floating point values.\nThe available integer values include all integers between -2^53 and 2^53,\nand some integers with larger magnitude. That includes some integers larger\nthan 2^63.\nThe behavior of the operators and methods in the <a href=\"dart-core\/int-class.html\">int<\/a>\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript. For example, the bitwise operators truncate their\noperands to 32-bit integers when compiled to JavaScript.<\/p>\n<p>Classes cannot extend, implement, or mix in <code>int<\/code>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/int-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.int",
            "shortname": "int",
            "extends": [
                "dart:core.num",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "animation.IntTween",
                "animation.StepTween",
                "convert.ByteAccumulatorSink",
                "convert.HexCodec",
                "convert.HexDecoder",
                "convert.HexEncoder",
                "convert.PercentCodec",
                "convert.PercentDecoder",
                "convert.PercentEncoder",
                "crypto.Hmac",
                "crypto.MD5",
                "crypto.Sha1",
                "crypto.Sha256",
                "dart:convert.AsciiCodec",
                "dart:convert.AsciiDecoder",
                "dart:convert.AsciiEncoder",
                "dart:convert.Base64Codec",
                "dart:convert.Base64Decoder",
                "dart:convert.Base64Encoder",
                "dart:convert.JsonUtf8Encoder",
                "dart:convert.Latin1Codec",
                "dart:convert.Latin1Decoder",
                "dart:convert.Latin1Encoder",
                "dart:convert.Utf8Codec",
                "dart:convert.Utf8Decoder",
                "dart:convert.Utf8Encoder",
                "dart:core.Runes",
                "dart:io.GZipCodec",
                "dart:io.Stdin",
                "dart:io.SystemEncoding",
                "dart:io.ZLibCodec",
                "dart:io.ZLibDecoder",
                "dart:io.ZLibEncoder",
                "dart:typed_data.UnmodifiableInt16ListView",
                "dart:typed_data.UnmodifiableInt32ListView",
                "dart:typed_data.UnmodifiableInt64ListView",
                "dart:typed_data.UnmodifiableInt8ListView",
                "dart:typed_data.UnmodifiableUint16ListView",
                "dart:typed_data.UnmodifiableUint32ListView",
                "dart:typed_data.UnmodifiableUint64ListView",
                "dart:typed_data.UnmodifiableUint8ClampedListView",
                "dart:typed_data.UnmodifiableUint8ListView",
                "foundation.IntProperty",
                "material.MaterialAccentColor",
                "material.MaterialColor",
                "typed_data.typed_buffers.Int16Buffer",
                "typed_data.typed_buffers.Int32Buffer",
                "typed_data.typed_buffers.Int64Buffer",
                "typed_data.typed_buffers.Int8Buffer",
                "typed_data.typed_buffers.Uint16Buffer",
                "typed_data.typed_buffers.Uint32Buffer",
                "typed_data.typed_buffers.Uint64Buffer",
                "typed_data.typed_buffers.Uint8Buffer",
                "typed_data.typed_buffers.Uint8ClampedBuffer"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns the absolute value of this integer.<\/p>\n<p>For any integer <code>x<\/code>, the result is the same as <code>x &lt; 0 ? -x : x<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int abs();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/abs.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "abs",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ceil();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/ceil.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "ceil",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double ceilToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/ceilToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "ceilToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int floor();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/floor.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "floor",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double floorToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/floorToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "floorToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns the greatest common divisor of this integer and <code>other<\/code>.<\/p>\n<p>If either number is non-zero, the result is the numerically greatest\ninteger dividing both <code>this<\/code> and <code>other<\/code>.<\/p>\n<p>The greatest common divisor is independent of the order,\nso <code>x.gcd(y)<\/code> is  always the same as <code>y.gcd(x)<\/code>.<\/p>\n<p>For any integer <code>x<\/code>, <code>x.gcd(x)<\/code> is <code>x.abs()<\/code>.<\/p>\n<p>If both <code>this<\/code> and <code>other<\/code> is zero, the result is also zero.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int gcd(int other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/gcd.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "gcd",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the modular multiplicative inverse of this integer\nmodulo <code>modulus<\/code>.<\/p>\n<p>The <code>modulus<\/code> must be positive.<\/p>\n<p>It is an error if no modular inverse exists.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int modInverse(int modulus);<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/modInverse.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "modInverse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "modulus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns this integer to the power of <code>exponent<\/code> modulo <code>modulus<\/code>.<\/p>\n<p>The <code>exponent<\/code> must be non-negative and <code>modulus<\/code> must be\npositive.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int modPow(int exponent, int modulus);<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/modPow.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "modPow",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "exponent",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "modulus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Parse <code>source<\/code> as a, possibly signed, integer literal and return its value.<\/p>\n<p>The <code>source<\/code> must be a non-empty sequence of base-<code>radix<\/code> digits,\noptionally prefixed with a minus or plus sign ('-' or '+').\nIt must not be <code>null<\/code>.<\/p>\n<p>The <code>radix<\/code> must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z' with\nvalues 10 through 35. Also accepts upper-case letters with the same\nvalues as the lower-case ones.<\/p>\n<p>If no <code>radix<\/code> is given then it defaults to 10. In this case, the <code>source<\/code>\ndigits may also start with <code>0x<\/code>, in which case the number is interpreted\nas a hexadecimal integer literal,\nWhen <code>int<\/code> is implemented by 64-bit signed integers,\nhexadecimal integer literals may represent values larger than\n2<sup>63<\/sup>, in which case the value is parsed as if it is an\n<em>unsigned<\/em> number, and the resulting value is the corresponding\nsigned integer value.<\/p>\n<p>For any int <code>n<\/code> and valid radix <code>r<\/code>, it is guaranteed that\n<code>n == int.parse(n.toRadixString(r), radix: r)<\/code>.<\/p>\n<p>If the <code>source<\/code> string does not contain a valid integer literal,\noptionally prefixed by a sign, a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> is thrown\n(unless the deprecated <code>onError<\/code> parameter is used, see below).<\/p>\n<p>Instead of throwing and immediately catching the <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>,\ninstead use <a href=\"dart-core\/int\/tryParse.html\">tryParse<\/a> to handle a parsing error.\nExample:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">var value = int.tryParse(text);\nif (value == null) ... handle the problem\n<\/code><\/pre>\n<p>The <code>onError<\/code> parameter is deprecated and will be removed.\nInstead of <code>int.parse(string, onError: (string) =&gt; ...)<\/code>,\nyou should use <code>int.tryParse(string) ?? (...)<\/code>.<\/p>\n<p>When the source string is not valid and <code>onError<\/code> is provided,\nwhenever a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a> would be thrown,\n<code>onError<\/code> is instead called with <code>source<\/code> as argument,\nand the result of that call is returned by <a href=\"dart-core\/int\/parse.html\">parse<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static int parse(String source,\n    {int radix, @deprecated int onError(String source)});<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "radix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int round();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/round.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "round",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double roundToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/roundToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "roundToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Converts <a href=\"dart-core\/int-class.html\">this<\/a> to a string representation in the given <code>radix<\/code>.<\/p>\n<p>In the string representation, lower-case letters are used for digits above\n'9', with 'a' being 10 an 'z' being 35.<\/p>\n<p>The <code>radix<\/code> argument must be an integer in the range 2 to 36.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toRadixString(int radix);<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/toRadixString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toRadixString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "radix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the least significant <code>width<\/code> bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in <code>width<\/code> bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>                               V--sign bit-V\n16.toSigned(5) == -16   \/\/  00010000 -&gt; 11110000\n239.toSigned(5) == 15   \/\/  11101111 -&gt; 00001111\n                               ^           ^\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit signed quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toSigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>127<\/code>, wrap to <code>-128<\/code> and count back up to\n<code>127<\/code>.<\/p>\n<p>If the input value fits in <code>width<\/code> bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of <code>x<\/code>\nis <code>x.bitLength + 1<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toSigned(x.bitLength + 1);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toSigned(int width);<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/toSigned.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "toSigned",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this integer.<\/p>\n<p>The returned string is parsable by <a href=\"dart-core\/int\/parse.html\">parse<\/a>.\nFor any <code>int<\/code> <code>i<\/code>, it is guaranteed that\n<code>i == int.parse(i.toString())<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns the least significant <code>width<\/code> bits of this integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than <code>width<\/code>.<\/p>\n<pre class=\"language-dart\"><code>(-1).toUnsigned(5) == 31   \/\/ 11111111  -&gt;  00011111\n<\/code><\/pre>\n<p>This operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit quantity:<\/p>\n<pre class=\"language-dart\"><code>q = (q + 1).toUnsigned(8);\n<\/code><\/pre>\n<p><code>q<\/code> will count from <code>0<\/code> up to <code>255<\/code> and then wrap around to <code>0<\/code>.<\/p>\n<p>If the input fits in <code>width<\/code> bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of <code>x<\/code> is\ngiven by <code>x.bitLength<\/code>, i.e.<\/p>\n<pre class=\"language-dart\"><code>x == x.toUnsigned(x.bitLength);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toUnsigned(int width);<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/toUnsigned.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "toUnsigned",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "width",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int truncate();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/truncate.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "truncate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>this.toDouble()<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double truncateToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/truncateToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "truncateToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Parse <code>source<\/code> as a, possibly signed, integer literal and return its value.<\/p>\n<p>Like <a href=\"dart-core\/int\/parse.html\">parse<\/a> except that this function returns <code>null<\/code> where a\nsimilar call to <a href=\"dart-core\/int\/parse.html\">parse<\/a> would throw a <a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>,\nand the <code>source<\/code> must still not be <code>null<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static int tryParse(String source, {int radix});<\/code><\/pre>\n    ",
                    "href": "dart-core\/int\/tryParse.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "tryParse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.int",
                    "params": [
                        {
                            "name": "radix",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "source",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the minimum number of bits required to store this integer.<\/p>\n<p>The number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.<\/p>\n<p>To find the number of bits needed to store the value as a signed value,\nadd one, i.e. use <code>x.bitLength + 1<\/code>.<\/p>\n<pre class=\"language-dart\"><code>x.bitLength == (-x-1).bitLength\n\n3.bitLength == 2;     \/\/ 00000011\n2.bitLength == 2;     \/\/ 00000010\n1.bitLength == 1;     \/\/ 00000001\n0.bitLength == 0;     \/\/ 00000000\n(-1).bitLength == 0;  \/\/ 11111111\n(-2).bitLength == 1;  \/\/ 11111110\n(-3).bitLength == 2;  \/\/ 11111101\n(-4).bitLength == 2;  \/\/ 11111100\n<\/code><\/pre>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get bitLength;<\/code><\/pre>\n        ",
                    "href": "dart-core\/int\/bitLength.html",
                    "name": "bitLength",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if and only if this integer is even.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEven;<\/code><\/pre>\n        ",
                    "href": "dart-core\/int\/isEven.html",
                    "name": "isEven",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if and only if this integer is odd.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isOdd;<\/code><\/pre>\n        ",
                    "href": "dart-core\/int\/isOdd.html",
                    "name": "isOdd",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.int",
                    "params": []
                },
                {
                    "desc": "<p>Returns the sign of this integer.<\/p>\n<p>Returns 0 for zero, -1 for values less than zero and\n+1 for values greater than zero.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get sign;<\/code><\/pre>\n        ",
                    "href": "dart-core\/int\/sign.html",
                    "name": "sign",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.int",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An integer or floating-point number.<\/p>\n<p>It is a compile-time error for any type other than <a href=\"dart-core\/int-class.html\">int<\/a> or <a href=\"dart-core\/double-class.html\">double<\/a>\nto attempt to extend or implement num.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/num-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.num",
            "shortname": "num",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Returns the absolute value of this <a href=\"dart-core\/num-class.html\">num<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num abs();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/abs.html",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "name": "abs",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns the least integer no smaller than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int ceil();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/ceil.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "ceil",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns the least double integer value no smaller than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double ceilToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/ceilToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "ceilToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns this <a href=\"dart-core\/num-class.html\">num<\/a> clamped to be in the range <code>lowerLimit<\/code>-<code>upperLimit<\/code>.<\/p>\n<p>The comparison is done using <a href=\"dart-core\/num\/compareTo.html\">compareTo<\/a> and therefore takes <code>-0.0<\/code> into\naccount. This also implies that <a href=\"dart-core\/double\/nan-constant.html\">double.nan<\/a> is treated as the maximal\ndouble value.<\/p>\n<p>The arguments <code>lowerLimit<\/code> and <code>upperLimit<\/code> must form a valid range where\n<code>lowerLimit.compareTo(upperLimit) &lt;= 0<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num clamp(num lowerLimit, num upperLimit);<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/clamp.html",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "name": "clamp",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "lowerLimit",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        },
                        {
                            "name": "upperLimit",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares this to <code>other<\/code>.<\/p>\n<p>Returns a negative number if <code>this<\/code> is less than <code>other<\/code>, zero if they are\nequal, and a positive number if <code>this<\/code> is greater than <code>other<\/code>.<\/p>\n<p>The ordering represented by this method is a total ordering of <a href=\"dart-core\/num-class.html\">num<\/a>\nvalues. All distinct doubles are non-equal, as are all distinct integers,\nbut integers are equal to doubles if they have the same numerical\nvalue.<\/p>\n<p>For doubles, the <code>compareTo<\/code> operation is different from the partial\nordering given by <a href=\"dart-core\/num\/operator_equals.html\">operator==<\/a>, <a href=\"dart-core\/num\/operator_less.html\">operator&lt;<\/a> and <a href=\"dart-core\/num\/operator_greater.html\">operator&gt;<\/a>. For example,\nIEEE doubles impose that <code>0.0 == -0.0<\/code> and all comparison operations on\nNaN return false.<\/p>\n<p>This function imposes a complete ordering for doubles. When using\n<code>compareTo<\/code> the following properties hold:<\/p>\n<ul>\n<li>All NaN values are considered equal, and greater than any numeric value.<\/li>\n<li>-0.0 is less than 0.0 (and the integer 0), but greater than any non-zero\n negative value.<\/li>\n<li>Negative infinity is less than all other values and positive infinity is\ngreater than all non-NaN values.<\/li>\n<li>All other values are compared using their numeric value.<\/li>\n<\/ul>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>print(1.compareTo(2)); \/\/ =&gt; -1\nprint(2.compareTo(1)); \/\/ =&gt; 1\nprint(1.compareTo(1)); \/\/ =&gt; 0\n\n\/\/ The following comparisons yield different results than the\n\/\/ corresponding comparison operators.\nprint((-0.0).compareTo(0.0));  \/\/ =&gt; -1\nprint(double.nan.compareTo(double.nan));  \/\/ =&gt; 0\nprint(double.infinity.compareTo(double.nan)); \/\/ =&gt; -1\n\n\/\/ -0.0, and NaN comparison operators have rules imposed by the IEEE\n\/\/ standard.\nprint(-0.0 == 0.0); \/\/ =&gt; true\nprint(double.nan == double.nan);  \/\/ =&gt; false\nprint(double.infinity &lt; double.nan);  \/\/ =&gt; false\nprint(double.nan &lt; double.infinity);  \/\/ =&gt; false\nprint(double.nan == double.infinity);  \/\/ =&gt; false\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int compareTo(num other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the greatest integer no greater than <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int floor();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/floor.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "floor",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns the greatest double integer value no greater than <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>0.0 &lt; d &lt; 1.0<\/code> will return <code>0.0<\/code>.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double floorToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/floorToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "floorToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-core\/num\/num.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "num",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Parses a string containing a number literal into a number.<\/p>\n<p>The method first tries to read the <code>input<\/code> as integer (similar to\n<a href=\"dart-core\/num\/parse.html\">int.parse<\/a> without a radix).\nIf that fails, it tries to parse the <code>input<\/code> as a double (similar to\n<a href=\"dart-core\/num\/parse.html\">double.parse<\/a>).\nIf that fails, too, it invokes <code>onError<\/code> with <code>input<\/code>, and the result\nof that invocation becomes the result of calling <code>parse<\/code>.<\/p>\n<p>If no <code>onError<\/code> is supplied, it defaults to a function that throws a\n<a href=\"dart-core\/FormatException-class.html\">FormatException<\/a>.<\/p>\n<p>For any number <code>n<\/code>, this function satisfies\n<code>identical(n, num.parse(n.toString()))<\/code> (except when <code>n<\/code> is a NaN <code>double<\/code>\nwith a payload).<\/p>\n<p>The <code>onError<\/code> parameter is deprecated and will be removed.\nInstead of <code>num.parse(string, (string) { ... })<\/code>,\nyou should use <code>num.tryParse(string) ?? (...)<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static num parse(String input, [@deprecated num onError(String input)]) {\n  num result = tryParse(input);\n  if (result != null) return result;\n  if (onError == null) throw new FormatException(input);\n  return onError(input);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/parse.html",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "name": "parse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the remainder of the truncating division of <code>this<\/code> by <code>other<\/code>.<\/p>\n<p>The result <code>r<\/code> of this operation satisfies:\n<code>this == (this ~\/ other) * other + r<\/code>.\nAs a consequence the remainder <code>r<\/code> has the same sign as the divider <code>this<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">num remainder(num other);<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/remainder.html",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "name": "remainder",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.num"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the integer closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).round() == 4<\/code> and <code>(-3.5).round() == -4<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int round();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/round.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "round",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns the double integer value closest to <code>this<\/code>.<\/p>\n<p>Rounds away from zero when there is no closest integer:\n <code>(3.5).roundToDouble() == 4<\/code> and <code>(-3.5).roundToDouble() == -4<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>,\nand <code>-0.0<\/code> is therefore considered closer to negative numbers than <code>0.0<\/code>.\nThis means that for a value, <code>d<\/code> in the range <code>-0.5 &lt; d &lt; 0.0<\/code>,\nthe result is <code>-0.0<\/code>.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double roundToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/roundToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "roundToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Return this <a href=\"dart-core\/num-class.html\">num<\/a> as a <a href=\"dart-core\/double-class.html\">double<\/a>.<\/p>\n<p>If the number is not representable as a <a href=\"dart-core\/double-class.html\">double<\/a>, an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double toDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/toDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "toDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Truncates this <a href=\"dart-core\/num-class.html\">num<\/a> to an integer and returns the result as an <a href=\"dart-core\/int-class.html\">int<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int toInt();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/toInt.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "toInt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns the shortest string that correctly represent the input number.<\/p>\n<p>All <a href=\"dart-core\/double-class.html\">double<\/a>s in the range <code>10^-6<\/code> (inclusive) to <code>10^21<\/code> (exclusive)\nare converted to their decimal representation with at least one digit\nafter the decimal point. For all other doubles,\nexcept for special values like <code>NaN<\/code> or <code>Infinity<\/code>, this method returns an\nexponential representation (see <a href=\"dart-core\/num\/toStringAsExponential.html\">toStringAsExponential<\/a>).<\/p>\n<p>Returns <code>\"NaN\"<\/code> for <a href=\"dart-core\/double\/nan-constant.html\">double.nan<\/a>, <code>\"Infinity\"<\/code> for <a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>, and\n<code>\"-Infinity\"<\/code> for <a href=\"dart-core\/double\/negativeInfinity-constant.html\">double.negativeInfinity<\/a>.<\/p>\n<p>An <a href=\"dart-core\/int-class.html\">int<\/a> is converted to a decimal representation with no decimal point.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>(0.000001).toString();  \/\/ \"0.000001\"\n(0.0000001).toString(); \/\/ \"1e-7\"\n(111111111111111111111.0).toString();  \/\/ \"111111111111111110000.0\"\n(100000000000000000000.0).toString();  \/\/ \"100000000000000000000.0\"\n(1000000000000000000000.0).toString(); \/\/ \"1e+21\"\n(1111111111111111111111.0).toString(); \/\/ \"1.1111111111111111e+21\"\n1.toString(); \/\/ \"1\"\n111111111111111111111.toString();  \/\/ \"111111111111111110000\"\n100000000000000000000.toString();  \/\/ \"100000000000000000000\"\n1000000000000000000000.toString(); \/\/ \"1000000000000000000000\"\n1111111111111111111111.toString(); \/\/ \"1111111111111111111111\"\n1.234e5.toString();   \/\/ 123400\n1234.5e6.toString();  \/\/ 1234500000\n12.345e67.toString(); \/\/ 1.2345e+68\n<\/code><\/pre>\n<p>Note: the conversion may round the output if the returned string\nis accurate enough to uniquely identify the input-number.\nFor example the most precise representation of the <a href=\"dart-core\/double-class.html\">double<\/a> <code>9e59<\/code> equals\n<code>\"899999999999999918767229449717619953810131273674690656206848\"<\/code>, but\nthis method returns the shorter (but still uniquely identifying) <code>\"9e59\"<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns an exponential string-representation of <code>this<\/code>.<\/p>\n<p>Converts <code>this<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> before computing the string representation.<\/p>\n<p>If <code>fractionDigits<\/code> is given then it must be an integer satisfying:\n<code>0 &lt;= fractionDigits &lt;= 20<\/code>. In this case the string contains exactly\n<code>fractionDigits<\/code> after the decimal point. Otherwise, without the parameter,\nthe returned string uses the shortest number of digits that accurately\nrepresent <a href=\"dart-core\/num-class.html\">this<\/a>.<\/p>\n<p>If <code>fractionDigits<\/code> equals 0 then the decimal point is omitted.\nExamples:<\/p>\n<pre class=\"language-dart\"><code>1.toStringAsExponential();       \/\/ 1e+0\n1.toStringAsExponential(3);      \/\/ 1.000e+0\n123456.toStringAsExponential();  \/\/ 1.23456e+5\n123456.toStringAsExponential(3); \/\/ 1.235e+5\n123.toStringAsExponential(0);    \/\/ 1e+2\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringAsExponential([int fractionDigits]);<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/toStringAsExponential.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringAsExponential",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "fractionDigits",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a decimal-point string-representation of <code>this<\/code>.<\/p>\n<p>Converts <code>this<\/code> to a <a href=\"dart-core\/double-class.html\">double<\/a> before computing the string representation.<\/p>\n<p>If the absolute value of <code>this<\/code> is greater or equal to <code>10^21<\/code> then this\nmethods returns an exponential representation computed by\n<code>this.toStringAsExponential()<\/code>. Otherwise the result\nis the closest string representation with exactly <code>fractionDigits<\/code> digits\nafter the decimal point. If <code>fractionDigits<\/code> equals 0 then the decimal\npoint is omitted.<\/p>\n<p>The parameter <code>fractionDigits<\/code> must be an integer satisfying:\n<code>0 &lt;= fractionDigits &lt;= 20<\/code>.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>1.toStringAsFixed(3);  \/\/ 1.000\n(4321.12345678).toStringAsFixed(3);  \/\/ 4321.123\n(4321.12345678).toStringAsFixed(5);  \/\/ 4321.12346\n123456789012345678901.toStringAsFixed(3);  \/\/ 123456789012345683968.000\n1000000000000000000000.toStringAsFixed(3); \/\/ 1e+21\n5.25.toStringAsFixed(0); \/\/ 5\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringAsFixed(int fractionDigits);<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/toStringAsFixed.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringAsFixed",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "fractionDigits",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts <code>this<\/code> to a double and returns a string representation with\nexactly <code>precision<\/code> significant digits.<\/p>\n<p>The parameter <code>precision<\/code> must be an integer satisfying:\n<code>1 &lt;= precision &lt;= 21<\/code>.<\/p>\n<p>Examples:<\/p>\n<pre class=\"language-dart\"><code>1.toStringAsPrecision(2);       \/\/ 1.0\n1e15.toStringAsPrecision(3);    \/\/ 1.00e+15\n1234567.toStringAsPrecision(3); \/\/ 1.23e+6\n1234567.toStringAsPrecision(9); \/\/ 1234567.00\n12345678901234567890.toStringAsPrecision(20); \/\/ 12345678901234567168\n12345678901234567890.toStringAsPrecision(14); \/\/ 1.2345678901235e+19\n0.00000012345.toStringAsPrecision(15); \/\/ 1.23450000000000e-7\n0.0000012345.toStringAsPrecision(15);  \/\/ 0.00000123450000000000\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toStringAsPrecision(int precision);<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/toStringAsPrecision.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringAsPrecision",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "precision",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the integer obtained by discarding any fractional\ndigits from <code>this<\/code>.<\/p>\n<p>If <code>this<\/code> is not finite (<code>NaN<\/code> or infinity), throws an <a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">int truncate();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/truncate.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "truncate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns the double integer value obtained by discarding any fractional\ndigits from the double value of <code>this<\/code>.<\/p>\n<p>If this is already an integer valued double, including <code>-0.0<\/code>, or it is a\nnon-finite double value, the value is returned unmodified.<\/p>\n<p>For the purpose of rounding, <code>-0.0<\/code> is considered to be below <code>0.0<\/code>.\nA number <code>d<\/code> in the range <code>-1.0 &lt; d &lt; 0.0<\/code> will return <code>-0.0<\/code>, and\nin the range <code>0.0 &lt; d &lt; 1.0<\/code> it will return 0.0.<\/p>\n<p>The result is always a double.\nIf this is a numerically large integer, the result may be an infinite\ndouble.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">double truncateToDouble();<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/truncateToDouble.html",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "name": "truncateToDouble",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Parses a string containing a number literal into a number.<\/p>\n<p>Like <a href=\"dart-core\/num\/parse.html\">parse<\/a> except that this function returns <code>null<\/code> for invalid inputs\ninstead of throwing.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static num tryParse(String input) {\n  String source = input.trim();\n  \/\/ TODO(lrn): Optimize to detect format and result type in one check.\n  return int.tryParse(source) ?? double.tryParse(source);\n}<\/code><\/pre>\n    ",
                    "href": "dart-core\/num\/tryParse.html",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "name": "tryParse",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:core.num",
                    "params": [
                        {
                            "name": "input",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a hash code for a numerical value.<\/p>\n<p>The hash code is compatible with equality. It returns the same value\nfor an <a href=\"dart-core\/int-class.html\">int<\/a> and a <a href=\"dart-core\/double-class.html\">double<\/a> with the same numerical value, and therefore\nthe same value for the doubles zero and minus zero.<\/p>\n<p>No guarantees are made about the hash code of NaN values.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-core\/num\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>True if the number is finite; otherwise, false.<\/p>\n<p>The only non-finite numbers are NaN, positive infinity, and\nnegative infinity.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFinite;<\/code><\/pre>\n        ",
                    "href": "dart-core\/num\/isFinite.html",
                    "name": "isFinite",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>True if the number is positive infinity or negative infinity; otherwise,\nfalse.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInfinite;<\/code><\/pre>\n        ",
                    "href": "dart-core\/num\/isInfinite.html",
                    "name": "isInfinite",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>True if the number is the double Not-a-Number value; otherwise, false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNaN;<\/code><\/pre>\n        ",
                    "href": "dart-core\/num\/isNaN.html",
                    "name": "isNaN",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>True if the number is negative; otherwise, false.<\/p>\n<p>Negative numbers are those less than zero, and the double <code>-0.0<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNegative;<\/code><\/pre>\n        ",
                    "href": "dart-core\/num\/isNegative.html",
                    "name": "isNegative",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.num",
                    "params": []
                },
                {
                    "desc": "<p>Returns minus one, zero or plus one depending on the sign and\nnumerical value of the number.<\/p>\n<p>Returns minus one if the number is less than zero,\nplus one if the number is greater than zero,\nand zero if the number is equal to zero.<\/p>\n<p>Returns NaN if the number is the double NaN value.<\/p>\n<p>Returns a number of the same type as this number.\nFor doubles, <code>-0.0.sign == -0.0<\/code>.<\/p>\n<p>The result satisfies:<\/p>\n<pre class=\"language-dart\"><code>n == n.sign * n.abs()\n<\/code><\/pre>\n<p>for all numbers <code>n<\/code> (except NaN, because NaN isn't <code>==<\/code> to itself).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">num get sign;<\/code><\/pre>\n        ",
                    "href": "dart-core\/num\/sign.html",
                    "name": "sign",
                    "isDeprecated": false,
                    "type": "dart:core.num",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.num",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A hint to tools.<\/p>\n<p>Tools that work with Dart programs may accept hints to guide their behavior\nas <code>pragma<\/code> annotations on declarations.\nEach tool decides which hints it accepts, what they mean, and whether and\nhow they apply to sub-parts of the annotated entity.<\/p>\n<p>Tools that recognize pragma hints should pick a pragma prefix to identify\nthe tool. They should recognize any hint with a <a href=\"dart-core\/pragma\/name.html\">name<\/a> starting with their\nprefix followed by <code>:<\/code> as if it was intended for that tool. A hint with a\nprefix for another tool should be ignored (unless compatibility with that\nother tool is a goal).<\/p>\n<p>A tool may recognize unprefixed names as well, if they would recognize that\nname with their own prefix in front.<\/p>\n<p>If the hint can be parameterized, an extra <a href=\"dart-core\/pragma\/options.html\">options<\/a> object can be added as well.<\/p>\n<p>For example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">@pragma('Tool:pragma-name', [param1, param2, ...])\nclass Foo { }\n\n@pragma('OtherTool:other-pragma')\nvoid foo() { }\n<\/code><\/pre>\n<p>Here class Foo is annotated with a Tool specific pragma 'pragma-name' and\nfunction foo is annotated with a pragma 'other-pragma' specific to OtherTool.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-core\/pragma-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:core",
            "name": "dart:core.pragma",
            "shortname": "pragma",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a hint named <code>name<\/code> with optional <code>options<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const factory pragma(String name, [Object options]) = pragma._;<\/code><\/pre>\n    ",
                    "href": "dart-core\/pragma\/pragma.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "pragma",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:core.pragma",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "options",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Object"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The name of the hint.<\/p>\n<p>A string that is recognized by one or more tools, or such a string prefixed\nby a tool identifier and a colon, which is only recognized by that\nparticular tool.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/pragma\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.pragma",
                    "params": []
                },
                {
                    "desc": "<p>Optional extra data parameterizing the hint.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Object options\n\n<\/code><\/pre>\n        ",
                    "href": "dart-core\/pragma\/options.html",
                    "name": "options",
                    "isDeprecated": false,
                    "type": "dart:core.Object",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:core.pragma",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}