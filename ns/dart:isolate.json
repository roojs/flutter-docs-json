{
    "class": [
        {
            "desc": "<p>An unforgeable object that comes back as equal when passed through other\nisolates.<\/p>\n<p>Sending a capability object to another isolate, and getting it back,\nwill produce an object that is equal to the original.\nThere is no other way to create objects equal to a capability object.<\/p>\n<p>Capabilities can be used as access guards: A remote isolate can send\na request for an operation, but it is only allowed if the request contains\nthe correct capability object.<\/p>\n<p>This allows exposing the same interface to multiple clients,\nbut restricting some operations to only those clients\nthat have also been given the corresponding capability.<\/p>\n<p>Capabilities can be used inside a single isolate,\nbut they have no advantage over\njust using <code>new Object<\/code> to create a unique object,\nand it offers no real security against other code\nrunning in the same isolate.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/Capability-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.Capability",
            "shortname": "Capability",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a new unforgeable capability object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory Capability();<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Capability\/Capability.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Capability",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.Capability",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An isolated Dart execution context.<\/p>\n<p>All Dart code runs in an isolate, and code can access classes and values\nonly from the same isolate. Different isolates can communicate by sending\nvalues through ports (see <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>, <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>).<\/p>\n<p>An <code>Isolate<\/code> object is a reference to an isolate, usually different from\nthe current isolate.\nIt represents, and can be used to control, the other isolate.<\/p>\n<p>When spawning a new isolate, the spawning isolate receives an <code>Isolate<\/code>\nobject representing the new isolate when the spawn operation succeeds.<\/p>\n<p>Isolates run code in its own event loop, and each event may run smaller tasks\nin a nested microtask queue.<\/p>\n<p>An <code>Isolate<\/code> object allows other isolates to control the event loop\nof the isolate that it represents, and to inspect the isolate,\nfor example by pausing the isolate or by getting events when the isolate\nhas an uncaught error.<\/p>\n<p>The <a href=\"dart-isolate\/Isolate\/controlPort.html\">controlPort<\/a> identifies and gives access to controlling the isolate,\nand the <a href=\"dart-isolate\/Isolate\/pauseCapability.html\">pauseCapability<\/a> and <a href=\"dart-isolate\/Isolate\/terminateCapability.html\">terminateCapability<\/a> guard access\nto some control operations.\nFor example, calling <a href=\"dart-isolate\/Isolate\/pause.html\">pause<\/a> on an <code>Isolate<\/code> object created without a\n<a href=\"dart-isolate\/Isolate\/pauseCapability.html\">pauseCapability<\/a>, has no effect.<\/p>\n<p>The <code>Isolate<\/code> object provided by a spawn operation will have the\ncontrol port and capabilities needed to control the isolate.\nNew isolate objects can be created without some of these capabilities\nif necessary, using the <a href=\"dart-isolate\/Isolate\/Isolate.html\">Isolate.Isolate<\/a> constructor.<\/p>\n<p>An <code>Isolate<\/code> object cannot be sent over a <code>SendPort<\/code>, but the control port\nand capabilities can be sent, and can be used to create a new functioning\n<code>Isolate<\/code> object in the receiving port's isolate.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/Isolate-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.Isolate",
            "shortname": "Isolate",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Create a new <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a> object with a restricted set of capabilities.<\/p>\n<p>The port should be a control port for an isolate, as taken from\nanother <code>Isolate<\/code> object.<\/p>\n<p>The capabilities should be the subset of the capabilities that are\navailable to the original isolate.\nCapabilities of an isolate are locked to that isolate, and have no effect\nanywhere else, so the capabilities should come from the same isolate as\nthe control port.<\/p>\n<p>Can also be used to create an <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a> object from a control port, and\nany available capabilities, that have been sent through a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code class=\"language-dart\">Isolate isolate = findSomeIsolate();\nIsolate restrictedIsolate = new Isolate(isolate.controlPort);\nuntrustedCode(restrictedIsolate);\n<\/code><\/pre>\n<p>This example creates a new <code>Isolate<\/code> object that cannot be used to\npause or terminate the isolate. All the untrusted code can do is to\ninspect the isolate and see uncaught errors or when it terminates.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Isolate(this.controlPort, {this.pauseCapability, this.terminateCapability});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/Isolate.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Isolate",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "controlPort",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:isolate.SendPort"
                        },
                        {
                            "name": "pauseCapability",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:isolate.Capability"
                        },
                        {
                            "name": "terminateCapability",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:isolate.Capability"
                        }
                    ]
                },
                {
                    "desc": "<p>Requests that uncaught errors of the isolate are sent back to <code>port<\/code>.<\/p>\n<p>The errors are sent back as two elements lists.\nThe first element is a <code>String<\/code> representation of the error, usually\ncreated by calling <code>toString<\/code> on the error.\nThe second element is a <code>String<\/code> representation of an accompanying\nstack trace, or <code>null<\/code> if no stack trace was provided.\nTo convert this back to a <a href=\"dart-core\/StackTrace-class.html\">StackTrace<\/a> object, use <a href=\"dart-core\/StackTrace\/StackTrace.fromString.html\">StackTrace.fromString<\/a>.<\/p>\n<p>Listening using the same port more than once does nothing.\nA port will only receive each error once,\nand will only need to be removed once using <a href=\"dart-isolate\/Isolate\/removeErrorListener.html\">removeErrorListener<\/a>.<\/p>\n<p>Closing the receive port that is associated with the port does not stop\nthe isolate from sending uncaught errors, they are just going to be lost.\nInstead use <a href=\"dart-isolate\/Isolate\/removeErrorListener.html\">removeErrorListener<\/a> to stop receiving errors on <code>port<\/code>.<\/p>\n<p>Since isolates run concurrently, it's possible for it to exit before the\nerror listener is established. To avoid this, start the isolate paused,\nadd the listener and then resume the isolate.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void addErrorListener(SendPort port);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/addErrorListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addErrorListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "port",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        }
                    ]
                },
                {
                    "desc": "<p>Requests an exit message on <code>responsePort<\/code> when the isolate terminates.<\/p>\n<p>The isolate will send <code>response<\/code> as a message on <code>responsePort<\/code> as the last\nthing before it terminates. It will run no further code after the message\nhas been sent.<\/p>\n<p>Adding the same port more than once will only cause it to receive one exit\nmessage, using the last response value that was added,\nand it only needs to be removed once using <a href=\"dart-isolate\/Isolate\/removeOnExitListener.html\">removeOnExitListener<\/a>.<\/p>\n<p>If the isolate has terminated before it can receive this request,\nno exit message will be sent.<\/p>\n<p>The <code>response<\/code> object must follow the same restrictions as enforced by\n<a href=\"dart-isolate\/SendPort\/send.html\">SendPort.send<\/a>.\nIt is recommended to only use simple values that can be sent to all\nisolates, like <code>null<\/code>, booleans, numbers or strings.<\/p>\n<p>Since isolates run concurrently, it's possible for it to exit before the\nexit listener is established, and in that case no response will be\nsent on <code>responsePort<\/code>.\nTo avoid this, either use the corresponding parameter to the spawn\nfunction, or start the isolate paused, add the listener and\nthen resume the isolate.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">\/* TODO(lrn): Can we do better? Can the system recognize this message and\n * send a reply if the receiving isolate is dead?\n *\/\nexternal void addOnExitListener(SendPort responsePort, {Object response});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/addOnExitListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addOnExitListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "response",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "responsePort",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        }
                    ]
                },
                {
                    "desc": "<p>Requests the isolate to shut down.<\/p>\n<p>The isolate is requested to terminate itself.\nThe <code>priority<\/code> argument specifies when this must happen.<\/p>\n<p>The <code>priority<\/code>, when provided, must be one of <a href=\"dart-isolate\/Isolate\/immediate-constant.html\">immediate<\/a> or\n<a href=\"dart-isolate\/Isolate\/beforeNextEvent-constant.html\">beforeNextEvent<\/a> (the default).\nThe shutdown is performed at different times depending on the priority:<\/p>\n<ul>\n<li>\n<code>immediate<\/code>: The isolate shuts down as soon as possible.\n  Control messages are handled in order, so all previously sent control\n  events from this isolate will all have been processed.\n  The shutdown should happen no later than if sent with\n  <code>beforeNextEvent<\/code>.\n  It may happen earlier if the system has a way to shut down cleanly\n  at an earlier time, even during the execution of another event.<\/li>\n<li>\n<code>beforeNextEvent<\/code>: The shutdown is scheduled for the next time\n  control returns to the event loop of the receiving isolate,\n  after the current event, and any already scheduled control events,\n  are completed.<\/li>\n<\/ul>\n<p>If <a href=\"dart-isolate\/Isolate\/terminateCapability.html\">terminateCapability<\/a> is <code>null<\/code>, or it's not the terminate capability\nof the isolate identified by <a href=\"dart-isolate\/Isolate\/controlPort.html\">controlPort<\/a>,\nthe kill request is ignored by the receiving isolate.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void kill({int priority: beforeNextEvent});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/kill.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "kill",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "priority",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Requests the isolate to pause.<\/p>\n<p>When the isolate receives the pause command, it stops\nprocessing events from the event loop queue.\nIt may still add new events to the queue in response to, e.g., timers\nor receive-port messages. When the isolate is resumed,\nit starts handling the already enqueued events.<\/p>\n<p>The pause request is sent through the isolate's command port,\nwhich bypasses the receiving isolate's event loop.\nThe pause takes effect when it is received, pausing the event loop\nas it is at that time.<\/p>\n<p>The <code>resumeCapability<\/code> is used to identity the pause,\nand must be used again to end the pause using <a href=\"dart-isolate\/Isolate\/resume.html\">resume<\/a>.\nIf <code>resumeCapability<\/code> is omitted, a new capability object is created\nand used instead.<\/p>\n<p>If an isolate is paused more than once using the same capability,\nonly one resume with that capability is needed to end the pause.<\/p>\n<p>If an isolate is paused using more than one capability,\neach pause must be individually ended before the isolate resumes.<\/p>\n<p>Returns the capability that must be used to end the pause.\nThis is either <code>resumeCapability<\/code>, or a new capability when\n<code>resumeCapability<\/code> is omitted.<\/p>\n<p>If <a href=\"dart-isolate\/Isolate\/pauseCapability.html\">pauseCapability<\/a> is <code>null<\/code>, or it's not the pause capability\nof the isolate identified by <a href=\"dart-isolate\/Isolate\/controlPort.html\">controlPort<\/a>,\nthe pause request is ignored by the receiving isolate.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Capability pause([Capability resumeCapability]) {\n  resumeCapability ??= new Capability();\n  _pause(resumeCapability);\n  return resumeCapability;\n}<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/pause.html",
                    "isDeprecated": false,
                    "type": "dart:isolate.Capability",
                    "name": "pause",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "resumeCapability",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.Capability"
                        }
                    ]
                },
                {
                    "desc": "<p>Requests that the isolate send <code>response<\/code> on the <code>responsePort<\/code>.<\/p>\n<p>The <code>response<\/code> object must follow the same restrictions as enforced by\n<a href=\"dart-isolate\/SendPort\/send.html\">SendPort.send<\/a>.\nIt is recommended to only use simple values that can be sent to all\nisolates, like <code>null<\/code>, booleans, numbers or strings.<\/p>\n<p>If the isolate is alive, it will eventually send <code>response<\/code>\n(defaulting to <code>null<\/code>) on the response port.<\/p>\n<p>The <code>priority<\/code> must be one of <a href=\"dart-isolate\/Isolate\/immediate-constant.html\">immediate<\/a> or <a href=\"dart-isolate\/Isolate\/beforeNextEvent-constant.html\">beforeNextEvent<\/a>.\nThe response is sent at different times depending on the ping type:<\/p>\n<ul>\n<li>\n<code>immediate<\/code>: The isolate responds as soon as it receives the\n  control message. This is after any previous control message\n  from the same isolate has been received and processed,\n  but may be during execution of another event.<\/li>\n<li>\n<code>beforeNextEvent<\/code>: The response is scheduled for the next time\n  control returns to the event loop of the receiving isolate,\n  after the current event, and any already scheduled control events,\n  are completed.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void ping(SendPort responsePort,\n    {Object response, int priority: immediate});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/ping.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "ping",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "priority",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "response",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Object"
                        },
                        {
                            "name": "responsePort",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops listening for uncaught errors from the isolate.<\/p>\n<p>Requests for the isolate to not send uncaught errors on <code>port<\/code>.\nIf the isolate isn't expecting to send uncaught errors on <code>port<\/code>,\nbecause the port hasn't been added using <a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a>,\nor because it has already been removed, the request is ignored.<\/p>\n<p>If the same port has been passed via <a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a> more than once,\nonly one call to <code>removeErrorListener<\/code> is needed to stop it from receiving\nuncaught errors.<\/p>\n<p>Uncaught errors message may still be sent by the isolate\nuntil this request is received and processed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void removeErrorListener(SendPort port);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/removeErrorListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeErrorListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "port",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        }
                    ]
                },
                {
                    "desc": "<p>Stops listening for exit messages from the isolate.<\/p>\n<p>Requests for the isolate to not send exit messages on <code>responsePort<\/code>.\nIf the isolate isn't expecting to send exit messages on <code>responsePort<\/code>,\nbecause the port hasn't been added using <a href=\"dart-isolate\/Isolate\/addOnExitListener.html\">addOnExitListener<\/a>,\nor because it has already been removed, the request is ignored.<\/p>\n<p>If the same port has been passed via <a href=\"dart-isolate\/Isolate\/addOnExitListener.html\">addOnExitListener<\/a> more than once,\nonly one call to <code>removeOnExitListener<\/code> is needed to stop it from receiving\nexit messages.<\/p>\n<p>Closing the receive port that is associated with the <code>responsePort<\/code> does\nnot stop the isolate from sending uncaught errors, they are just going to\nbe lost.<\/p>\n<p>An exit message may still be sent if the isolate terminates\nbefore this request is received and processed.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void removeOnExitListener(SendPort responsePort);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/removeOnExitListener.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "removeOnExitListener",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "responsePort",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        }
                    ]
                },
                {
                    "desc": "<p>Maps a package: URI to a non-package Uri.<\/p>\n<p>If there is no valid mapping from the package: URI in the current\nisolate, then this call returns <code>null<\/code>. Non-package: URIs are\nreturned unmodified.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;Uri&gt; resolvePackageUri(Uri packageUri);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/resolvePackageUri.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:core.Uri>",
                    "name": "resolvePackageUri",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "packageUri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Uri"
                        }
                    ]
                },
                {
                    "desc": "<p>Resumes a paused isolate.<\/p>\n<p>Sends a message to an isolate requesting that it ends a pause\nthat was previously requested.<\/p>\n<p>When all active pause requests have been cancelled, the isolate\nwill continue processing events and handling normal messages.<\/p>\n<p>If the <code>resumeCapability<\/code> is not one that has previously been used\nto pause the isolate, or it has already been used to resume from\nthat pause, the resume call has no effect.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void resume(Capability resumeCapability);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/resume.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "resume",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "resumeCapability",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.Capability"
                        }
                    ]
                },
                {
                    "desc": "<p>Sets whether uncaught errors will terminate the isolate.<\/p>\n<p>If errors are fatal, any uncaught error will terminate the isolate\nevent loop and shut down the isolate.<\/p>\n<p>This call requires the <a href=\"dart-isolate\/Isolate\/terminateCapability.html\">terminateCapability<\/a> for the isolate.\nIf the capability is absent or incorrect, no change is made.<\/p>\n<p>Since isolates run concurrently, it's possible for the receiving isolate\nto exit due to an error, before a request, using this method, has been\nreceived and processed.\nTo avoid this, either use the corresponding parameter to the spawn\nfunction, or start the isolate paused, set errors non-fatal and\nthen resume the isolate.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external void setErrorsFatal(bool errorsAreFatal);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/setErrorsFatal.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "setErrorsFatal",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "errorsAreFatal",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates and spawns an isolate that shares the same code as the current\nisolate.<\/p>\n<p>The argument <code>entryPoint<\/code> specifies the initial function to call\nin the spawned isolate.\nThe entry-point function is invoked in the new isolate with <code>message<\/code>\nas the only argument.<\/p>\n<p>The function must be a top-level function or a static method\nthat can be called with a single argument,\nthat is, a compile-time constant function value\nwhich accepts at least one positional parameter\nand has at most one required positional parameter.\nThe function may accept any number of optional parameters,\nas long as it <em>can<\/em> be called with just a single argument.\nThe function must not be the value of a function expression\nor an instance method tear-off.<\/p>\n<p>Usually the initial <code>message<\/code> contains a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> so\nthat the spawner and spawnee can communicate with each other.<\/p>\n<p>If the <code>paused<\/code> parameter is set to <code>true<\/code>,\nthe isolate will start up in a paused state,\njust before calling the <code>entryPoint<\/code> function with the <code>message<\/code>,\nas if by an initial call of <code>isolate.pause(isolate.pauseCapability)<\/code>.\nTo resume the isolate, call <code>isolate.resume(isolate.pauseCapability)<\/code>.<\/p>\n<p>If the <code>errorsAreFatal<\/code>, <code>onExit<\/code> and\/or <code>onError<\/code> parameters are provided,\nthe isolate will act as if, respectively, <a href=\"dart-isolate\/Isolate\/setErrorsFatal.html\">setErrorsFatal<\/a>,\n<a href=\"dart-isolate\/Isolate\/addOnExitListener.html\">addOnExitListener<\/a> and <a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a> were called with the\ncorresponding parameter and was processed before the isolate starts\nrunning.<\/p>\n<p>If <code>errorsAreFatal<\/code> is omitted, the platform may choose a default behavior\nor inherit the current isolate's behavior.<\/p>\n<p>You can also call the <a href=\"dart-isolate\/Isolate\/setErrorsFatal.html\">setErrorsFatal<\/a>, <a href=\"dart-isolate\/Isolate\/addOnExitListener.html\">addOnExitListener<\/a> and\n<a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a> methods on the returned isolate, but unless the\nisolate was started as <code>paused<\/code>, it may already have terminated\nbefore those methods can complete.<\/p>\n<p>Returns a future which will complete with an <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a> instance if the\nspawning succeeded. It will complete with an error otherwise.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;Isolate&gt; spawn&lt;T&gt;(\n    void entryPoint(T message), T message,\n    {bool paused: false,\n    bool errorsAreFatal,\n    SendPort onExit,\n    SendPort onError});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/spawn.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:isolate.Isolate>",
                    "name": "spawn",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "errorsAreFatal",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "onError",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        },
                        {
                            "name": "onExit",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        },
                        {
                            "name": "paused",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates and spawns an isolate that runs the code from the library with\nthe specified URI.<\/p>\n<p>The isolate starts executing the top-level <code>main<\/code> function of the library\nwith the given URI.<\/p>\n<p>The target <code>main<\/code> must be callable with zero, one or two arguments.\nExamples:<\/p>\n<ul>\n<li><code>main()<\/code><\/li>\n<li><code>main(args)<\/code><\/li>\n<li><code>main(args, message)<\/code><\/li>\n<\/ul>\n<p>When present, the parameter <code>args<\/code> is set to the provided <code>args<\/code> list.\nWhen present, the parameter <code>message<\/code> is set to the initial <code>message<\/code>.<\/p>\n<p>If the <code>paused<\/code> parameter is set to <code>true<\/code>,\nthe isolate will start up in a paused state,\nas if by an initial call of <code>isolate.pause(isolate.pauseCapability)<\/code>.\nTo resume the isolate, call <code>isolate.resume(isolate.pauseCapability)<\/code>.<\/p>\n<p>If the <code>errorsAreFatal<\/code>, <code>onExit<\/code> and\/or <code>onError<\/code> parameters are provided,\nthe isolate will act as if, respectively, <a href=\"dart-isolate\/Isolate\/setErrorsFatal.html\">setErrorsFatal<\/a>,\n<a href=\"dart-isolate\/Isolate\/addOnExitListener.html\">addOnExitListener<\/a> and <a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a> were called with the\ncorresponding parameter and was processed before the isolate starts\nrunning.<\/p>\n<p>You can also call the <a href=\"dart-isolate\/Isolate\/setErrorsFatal.html\">setErrorsFatal<\/a>, <a href=\"dart-isolate\/Isolate\/addOnExitListener.html\">addOnExitListener<\/a> and\n<a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a> methods on the returned isolate, but unless the\nisolate was started as <code>paused<\/code>, it may already have terminated\nbefore those methods can complete.<\/p>\n<p>If the <code>checked<\/code> parameter is set to <code>true<\/code> or <code>false<\/code>,\nthe new isolate will run code in checked mode (enabling asserts and type\nchecks), respectively in production mode (disabling asserts and type\nchecks), if possible. If the parameter is omitted, the new isolate will\ninherit the value from the current isolate.<\/p>\n<p>In Dart2 strong mode, the <code>checked<\/code> parameter only controls asserts, but\nnot type checks.<\/p>\n<p>It may not always be possible to honor the <code>checked<\/code> parameter.\nIf the isolate code was pre-compiled, it may not be possible to change\nthe checked mode setting dynamically.\nIn that case, the <code>checked<\/code> parameter is ignored.<\/p>\n<p>WARNING: The <code>checked<\/code> parameter is not implemented on all platforms yet.<\/p>\n<p>If the <code>packageConfig<\/code> parameter is provided, then it is used to find the\nlocation of a package resolution configuration file for the spawned\nisolate.<\/p>\n<p>If the <code>automaticPackageResolution<\/code> parameter is provided, then the\nlocation of the package sources in the spawned isolate is automatically\ndetermined.<\/p>\n<p>The <code>environment<\/code> is a mapping from strings to strings which the\nspawned isolate uses when looking up <a href=\"dart-core\/String\/String.fromEnvironment.html\">String.fromEnvironment<\/a> values.\nThe system may add its own entries to environment as well.\nIf <code>environment<\/code> is omitted, the spawned isolate has the same environment\ndeclarations as the spawning isolate.<\/p>\n<p>WARNING: The <code>environment<\/code> parameter is not implemented on all\nplatforms yet.<\/p>\n<p>Returns a future that will complete with an <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a> instance if the\nspawning succeeded. It will complete with an error otherwise.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;Isolate&gt; spawnUri(\n    Uri uri,\n    List&lt;String&gt; args,\n    var message,\n    {bool paused: false,\n    SendPort onExit,\n    SendPort onError,\n    bool errorsAreFatal,\n    bool checked,\n    Map&lt;String, String&gt; environment,\n    @Deprecated('The packages\/ dir is not supported in Dart 2')\n        Uri packageRoot,\n    Uri packageConfig,\n    bool automaticPackageResolution: false});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/spawnUri.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:isolate.Isolate>",
                    "name": "spawnUri",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": [
                        {
                            "name": "args",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<dart:core.String>"
                        },
                        {
                            "name": "automaticPackageResolution",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "checked",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "environment",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Map<dart:core.String<dart:core.String>>"
                        },
                        {
                            "name": "errorsAreFatal",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "onError",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        },
                        {
                            "name": "onExit",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:isolate.SendPort"
                        },
                        {
                            "name": "packageConfig",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Uri"
                        },
                        {
                            "name": "packageRoot",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Uri"
                        },
                        {
                            "name": "paused",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "uri",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Uri"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Argument to <code>ping<\/code> and <code>kill<\/code>: Ask for action before the next event.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int beforeNextEvent = 1\n\n<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/beforeNextEvent-constant.html",
                    "name": "beforeNextEvent",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>Control port used to send control messages to the isolate.<\/p>\n<p>The control port identifies the isolate.<\/p>\n<p>An <code>Isolate<\/code> object allows sending control messages\nthrough the control port.<\/p>\n<p>Some control messages require a specific capability to be passed along\nwith the message (see <a href=\"dart-isolate\/Isolate\/pauseCapability.html\">pauseCapability<\/a> and <a href=\"dart-isolate\/Isolate\/terminateCapability.html\">terminateCapability<\/a>),\notherwise the message is ignored by the isolate.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SendPort controlPort\n\n<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/controlPort.html",
                    "name": "controlPort",
                    "isDeprecated": false,
                    "type": "dart:isolate.SendPort",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>Return an <a href=\"dart-isolate\/Isolate-class.html\">Isolate<\/a> object representing the current isolate.<\/p>\n<p>The current isolate for code using <a href=\"dart-isolate\/Isolate\/current.html\">current<\/a>\nis the isolate running the code.<\/p>\n<p>The isolate object provides the capabilities required to inspect,\npause or kill the isolate, and allows granting these capabilities\nto others.<\/p>\n<p>It is possible to pause the current isolate, but doing so <em>without<\/em>\nfirst passing the ability to resume it again to another isolate,\nis a sure way to hang your program.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static Isolate get current;<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/current.html",
                    "name": "current",
                    "isDeprecated": false,
                    "type": "dart:isolate.Isolate",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>Returns a broadcast stream of uncaught errors from the isolate.<\/p>\n<p>Each error is provided as an error event on the stream.<\/p>\n<p>The actual error object and stackTraces will not necessarily\nbe the same object types as in the actual isolate, but they will\nalways have the same <a href=\"dart-core\/Object\/toString.html\">Object.toString<\/a> result.<\/p>\n<p>This stream is based on <a href=\"dart-isolate\/Isolate\/addErrorListener.html\">addErrorListener<\/a> and <a href=\"dart-isolate\/Isolate\/removeErrorListener.html\">removeErrorListener<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Stream get errors {\n  StreamController controller;\n  RawReceivePort port;\n  void handleError(message) {\n    List listMessage = message;\n    String errorDescription = listMessage[0];\n    String stackDescription = listMessage[1];\n    var error = new RemoteError(errorDescription, stackDescription);\n    controller.addError(error, error.stackTrace);\n  }\n\n  controller = new StreamController.broadcast(\n      sync: true,\n      onListen: () {\n        port = new RawReceivePort(handleError);\n        this.addErrorListener(port.sendPort);\n      },\n      onCancel: () {\n        this.removeErrorListener(port.sendPort);\n        port.close();\n        port = null;\n      });\n  return controller.stream;\n}<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/errors.html",
                    "name": "errors",
                    "isDeprecated": false,
                    "type": "dart:async.Stream",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>Argument to <code>ping<\/code> and <code>kill<\/code>: Ask for immediate action.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static const int immediate = 0\n\n<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/Isolate\/immediate-constant.html",
                    "name": "immediate",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "constant",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>The package root of the current isolate, if any.<\/p>\n<p>If the isolate is using a <a class=\"deprecated\" href=\"dart-isolate\/Isolate\/packageRoot.html\">packageRoot<\/a> or the isolate has not been\nsetup for package resolution, this getter returns <code>null<\/code>, otherwise it\nreturns the package config URI.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">external static Future&lt;Uri&gt; get packageConfig;<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/packageConfig.html",
                    "name": "packageConfig",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:core.Uri>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>The location of the package configuration of the current isolate, if any.<\/p>\n<p>This getter returns <code>null<\/code>, as the <code>packages\/<\/code> directory is not supported\nin Dart 2.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@Deprecated('packages\/ directory resolution is not supported in Dart 2.')\nexternal static Future&lt;Uri&gt; get packageRoot;<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/packageRoot.html",
                    "name": "packageRoot",
                    "isDeprecated": false,
                    "type": "dart:async.Future<dart:core.Uri>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>Capability granting the ability to pause the isolate.<\/p>\n<p>This capability is required by <a href=\"dart-isolate\/Isolate\/pause.html\">pause<\/a>.\nIf the capability is <code>null<\/code>, or if it is not the correct pause capability\nof the isolate identified by <a href=\"dart-isolate\/Isolate\/controlPort.html\">controlPort<\/a>,\nthen calls to <a href=\"dart-isolate\/Isolate\/pause.html\">pause<\/a> will have no effect.<\/p>\n<p>If the isolate is spawned in a paused state, use this capability as\nargument to the <a href=\"dart-isolate\/Isolate\/resume.html\">resume<\/a> method in order to resume the paused isolate.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Capability pauseCapability\n\n<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/pauseCapability.html",
                    "name": "pauseCapability",
                    "isDeprecated": false,
                    "type": "dart:isolate.Capability",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                },
                {
                    "desc": "<p>Capability granting the ability to terminate the isolate.<\/p>\n<p>This capability is required by <a href=\"dart-isolate\/Isolate\/kill.html\">kill<\/a> and <a href=\"dart-isolate\/Isolate\/setErrorsFatal.html\">setErrorsFatal<\/a>.\nIf the capability is <code>null<\/code>, or if it is not the correct termination\ncapability of the isolate identified by <a href=\"dart-isolate\/Isolate\/controlPort.html\">controlPort<\/a>,\nthen calls to those methods will have no effect.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Capability terminateCapability\n\n<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/Isolate\/terminateCapability.html",
                    "name": "terminateCapability",
                    "isDeprecated": false,
                    "type": "dart:isolate.Capability",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.Isolate",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Thrown when an isolate cannot be created.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/IsolateSpawnException-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.IsolateSpawnException",
            "shortname": "IsolateSpawnException",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@pragma(\"vm:entry-point\")\nIsolateSpawnException(this.message);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/IsolateSpawnException\/IsolateSpawnException.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IsolateSpawnException",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.IsolateSpawnException",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; \"IsolateSpawnException: $message\";<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/IsolateSpawnException\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.IsolateSpawnException",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Error message reported by the spawn operation.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/IsolateSpawnException\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.IsolateSpawnException",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/RawReceivePort-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.RawReceivePort",
            "shortname": "RawReceivePort",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Opens a long-lived port for receiving messages.<\/p>\n<p>A <a href=\"dart-isolate\/RawReceivePort-class.html\">RawReceivePort<\/a> is low level and does not work with <a href=\"dart-async\/Zone-class.html\">Zone<\/a>s. It\ncan not be paused. The data-handler must be set before the first\nevent is received.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory RawReceivePort([Function handler]);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/RawReceivePort\/RawReceivePort.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RawReceivePort",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.RawReceivePort",
                    "params": [
                        {
                            "name": "handler",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Function"
                        }
                    ]
                },
                {
                    "desc": "<p>Closes the port.<\/p>\n<p>After a call to this method any incoming message is silently dropped.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/RawReceivePort\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.RawReceivePort",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> that sends to this raw receive port.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SendPort get sendPort;<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/RawReceivePort\/sendPort.html",
                    "name": "sendPort",
                    "isDeprecated": false,
                    "type": "dart:isolate.SendPort",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.RawReceivePort",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Together with <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>, the only means of communication between isolates.<\/p>\n<p><a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>s have a <code>sendPort<\/code> getter which returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>.\nAny message that is sent through this <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>\nis delivered to the <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> it has been created from. There, the\nmessage is dispatched to the <code>ReceivePort<\/code>'s listener.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> is a non-broadcast stream. This means that it buffers\nincoming messages until a listener is registered. Only one listener can\nreceive messages. See <a href=\"dart-async\/Stream\/asBroadcastStream.html\">Stream.asBroadcastStream<\/a> for transforming the port\nto a broadcast stream.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> may have many <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/ReceivePort-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.ReceivePort",
            "shortname": "ReceivePort",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Opens a long-lived port for receiving messages.<\/p>\n<p>A <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a> is a non-broadcast stream. This means that it buffers\nincoming messages until a listener is registered. Only one listener can\nreceive messages. See <a href=\"dart-async\/Stream\/asBroadcastStream.html\">Stream.asBroadcastStream<\/a> for transforming the port\nto a broadcast stream.<\/p>\n<p>A receive port is closed by canceling its subscription.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">external factory ReceivePort();<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/ReceivePort\/ReceivePort.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "ReceivePort",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.ReceivePort",
                    "params": []
                },
                {
                    "desc": "<p>Closes <code>this<\/code>.<\/p>\n<p>If the stream has not been canceled yet, adds a close-event to the event\nqueue and discards any further incoming messages.<\/p>\n<p>If the stream has already been canceled this method has no effect.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void close();<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/ReceivePort\/close.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "close",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.ReceivePort",
                    "params": []
                },
                {
                    "desc": "<p>Inherited from <a href=\"dart-async\/Stream-class.html\">Stream<\/a>.<\/p>\n<p>Note that <code>onError<\/code> and <code>cancelOnError<\/code> are ignored since a ReceivePort\nwill never receive an error.<\/p>\n<p>The <code>onDone<\/code> handler will be called when the stream closes.\nThe stream closes when <a href=\"dart-isolate\/ReceivePort\/close.html\">close<\/a> is called.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">StreamSubscription listen(void onData(var message),\n    {Function onError, void onDone(), bool cancelOnError});<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/ReceivePort\/listen.html",
                    "isDeprecated": false,
                    "type": "dart:async.StreamSubscription",
                    "name": "listen",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.ReceivePort",
                    "params": [
                        {
                            "name": "cancelOnError",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "onDone",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<void>"
                        },
                        {
                            "name": "onError",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.Function"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> that sends to this receive port.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SendPort get sendPort;<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/ReceivePort\/sendPort.html",
                    "name": "sendPort",
                    "isDeprecated": false,
                    "type": "dart:isolate.SendPort",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.ReceivePort",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Description of an error from another isolate.<\/p>\n<p>This error has the same <code>toString()<\/code> and <code>stackTrace.toString()<\/code> behavior\nas the original error, but has no other features of the original error.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/RemoteError-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.RemoteError",
            "shortname": "RemoteError",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">RemoteError(String description, String stackDescription)\n    : _description = description,\n      stackTrace = new StackTrace.fromString(stackDescription);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/RemoteError\/RemoteError.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "RemoteError",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.RemoteError",
                    "params": [
                        {
                            "name": "description",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "stackDescription",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; _description;<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/RemoteError\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.RemoteError",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final StackTrace stackTrace\n\n<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/RemoteError\/stackTrace.html",
                    "name": "stackTrace",
                    "isDeprecated": false,
                    "type": "dart:core.StackTrace",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.RemoteError",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Sends messages to its <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>s.<\/p>\n<p><a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s are created from <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>s. Any message sent through\na <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a> is delivered to its corresponding <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>. There might be\nmany <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s for the same <a href=\"dart-isolate\/ReceivePort-class.html\">ReceivePort<\/a>.<\/p>\n<p><a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>s can be transmitted to other isolates, and they preserve equality\nwhen sent.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "dart-isolate\/SendPort-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "dart:isolate",
            "name": "dart:isolate.SendPort",
            "shortname": "SendPort",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "dart-isolate\/SendPort\/SendPort.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SendPort",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "dart:isolate.SendPort",
                    "params": []
                },
                {
                    "desc": "<p>Sends an asynchronous <code>message<\/code> through this send port, to its\ncorresponding <code>ReceivePort<\/code>.<\/p>\n<p>The content of <code>message<\/code> can be: primitive values (null, num, bool, double,\nString), instances of <a href=\"dart-isolate\/SendPort-class.html\">SendPort<\/a>, and lists and maps whose elements are any\nof these. List and maps are also allowed to be cyclic.<\/p>\n<p>In the special circumstances when two isolates share the same code and are\nrunning in the same process (e.g. isolates created via <a href=\"dart-isolate\/Isolate\/spawn.html\">Isolate.spawn<\/a>), it\nis also possible to send object instances (which would be copied in the\nprocess). This is currently only supported by the dartvm.  For now, the\ndart2js compiler only supports the restricted messages described above.<\/p>\n<p>The send happens immediately and doesn't block.  The corresponding receive\nport can receive the message as soon as its isolate's event loop is ready\nto deliver it, independently of what the sending isolate is doing.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void send(var message);<\/code><\/pre>\n    ",
                    "href": "dart-isolate\/SendPort\/send.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "send",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "dart:isolate.SendPort",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns an immutable hash code for this send port that is\nconsistent with the == operator.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode;<\/code><\/pre>\n        ",
                    "href": "dart-isolate\/SendPort\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "dart:isolate.SendPort",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}