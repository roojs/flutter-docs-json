{
    "class": [
        {
            "desc": "<p>An <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a> of <a href=\"quiver.iterables\/IndexedValue-class.html\">IndexedValue<\/a>s where the nth value holds the nth\nelement of <code>iterable<\/code> and its index. See <a href=\"quiver.iterables\/enumerate.html\">enumerate<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.iterables\/EnumerateIterable-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.iterables",
            "name": "quiver.iterables.EnumerateIterable",
            "shortname": "EnumerateIterable",
            "extends": [
                "quiver.iterables.IndexedValue",
                "dart:collection.IterableBase",
                "quiver.iterables.IndexedValue",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EnumerateIterable(this._iterable);<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/EnumerateIterable\/EnumerateIterable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "EnumerateIterable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": [
                        {
                            "name": "_iterable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterable"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the <code>index<\/code>th element.<\/p>\n<p>The <code>index<\/code> must be non-negative and less than <a href=\"quiver.iterables\/EnumerateIterable\/length.html\">length<\/a>.\nIndex zero represents the first element (so <code>iterable.elementAt(0)<\/code> is\nequivalent to <code>iterable.first<\/code>).<\/p>\n<p>May iterate through the elements in iteration order, ignoring the\nfirst <code>index<\/code> elements and then returning the next.\nSome iterables may have more a efficient way to find the element.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; elementAt(int index) =&gt;\n    new IndexedValue&lt;V&gt;(index, _iterable.elementAt(index));<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/EnumerateIterable\/elementAt.html",
                    "isDeprecated": false,
                    "type": "quiver.iterables.IndexedValue",
                    "name": "elementAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the first element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise returns the first element in the iteration order,\nequivalent to <code>this.elementAt(0)<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get first =&gt; new IndexedValue&lt;V&gt;(0, _iterable.first);<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterable\/first.html",
                    "name": "first",
                    "isDeprecated": false,
                    "type": "quiver.iterables.IndexedValue",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; _iterable.isEmpty;<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterable\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterator&lt;IndexedValue&lt;V&gt;&gt; get iterator =&gt;\n    new EnumerateIterator&lt;V&gt;(_iterable.iterator);<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterable\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator<quiver.iterables.IndexedValue>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the last element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty.\nOtherwise may iterate through the elements and returns the last one\nseen.\nSome iterables may have more efficient ways to find the last element\n(for example a list can directly access the last element,\nwithout iterating through the previous ones).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get last =&gt; new IndexedValue&lt;V&gt;(length - 1, _iterable.last);<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterable\/last.html",
                    "name": "last",
                    "isDeprecated": false,
                    "type": "quiver.iterables.IndexedValue",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"quiver.iterables\/EnumerateIterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; _iterable.length;<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterable\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": []
                },
                {
                    "desc": "<p>Checks that this iterable has only one element, and returns that element.<\/p>\n<p>Throws a <a href=\"dart-core\/StateError-class.html\">StateError<\/a> if <code>this<\/code> is empty or has more than one element.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get single =&gt; new IndexedValue&lt;V&gt;(0, _iterable.single);<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterable\/single.html",
                    "name": "single",
                    "isDeprecated": false,
                    "type": "quiver.iterables.IndexedValue",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterable",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>The <a href=\"dart-core\/Iterator-class.html\">Iterator<\/a> returned by <a href=\"quiver.iterables\/EnumerateIterable\/iterator.html\">EnumerateIterable.iterator<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.iterables\/EnumerateIterator-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.iterables",
            "name": "quiver.iterables.EnumerateIterator",
            "shortname": "EnumerateIterator",
            "extends": [
                "quiver.iterables.IndexedValue",
                "dart:core.Iterator",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">EnumerateIterator(this._iterator);<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/EnumerateIterator\/EnumerateIterator.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "EnumerateIterator",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.iterables.EnumerateIterator",
                    "params": [
                        {
                            "name": "_iterator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Iterator"
                        }
                    ]
                },
                {
                    "desc": "<p>Moves to the next element.<\/p>\n<p>Returns true if <a href=\"quiver.iterables\/EnumerateIterator\/current.html\">current<\/a> contains the next element.\nReturns false if no elements are left.<\/p>\n<p>It is safe to invoke <a href=\"quiver.iterables\/EnumerateIterator\/moveNext.html\">moveNext<\/a> even when the iterator is already\npositioned after the last element.\nIn this case <a href=\"quiver.iterables\/EnumerateIterator\/moveNext.html\">moveNext<\/a> returns false again and has no effect.<\/p>\n<p>A call to <code>moveNext<\/code> may throw if iteration has been broken by\nchanging the underlying collection.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool moveNext() {\n  if (_iterator.moveNext()) {\n    _current = new IndexedValue(_index++, _iterator.current);\n    return true;\n  }\n  _current = null;\n  return false;\n}<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/EnumerateIterator\/moveNext.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "moveNext",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.EnumerateIterator",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns the current element.<\/p>\n<p>Returns <code>null<\/code> if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved past the last element of the\n<a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The <code>current<\/code> getter should keep its value until the next call to\n<a href=\"quiver.iterables\/EnumerateIterator\/moveNext.html\">moveNext<\/a>, even if an underlying collection changes.\nAfter a successful call to <code>moveNext<\/code>, the user doesn't need to cache\nthe current value, but can keep reading it from the iterator.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue&lt;V&gt; get current =&gt; _current;<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/EnumerateIterator\/current.html",
                    "name": "current",
                    "isDeprecated": false,
                    "type": "quiver.iterables.IndexedValue",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.EnumerateIterator",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "quiver.iterables\/Extent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.iterables",
            "name": "quiver.iterables.Extent",
            "shortname": "Extent",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Extent(this.min, this.max);<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/Extent\/Extent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "Extent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.iterables.Extent",
                    "params": [
                        {
                            "name": "max",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        },
                        {
                            "name": "min",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<T>"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An Iterable whose first value is the result of <a href=\"quiver.iterables\/GeneratingIterable\/initial.html\">initial<\/a> and whose\nsubsequent values are generated by passing the current value to the <a href=\"quiver.iterables\/GeneratingIterable\/next.html\">next<\/a>\nfunction.<\/p>\n<p>The class is useful for creating lazy iterables from object hierarchies and\ngraphs.<\/p>\n<p>The initial value and <a href=\"quiver.iterables\/GeneratingIterable\/next.html\">next<\/a> function are required to generate a sequence\nthat eventually terminates, otherwise calling methods that expect a finite\nsequence, like <code>length<\/code> or <code>last<\/code>, will cause an infinite loop.<\/p>\n<p>Example:<\/p>\n<pre class=\"language-dart\"><code>class Node {\n  Node parent;\n\n  \/\/\/ An iterable of node and all ancestors up to the root.\n  Iterable&lt;Node&gt; ancestors =\n      new GeneratingIterable&lt;Node&gt;(() =&gt; this, (n) =&gt; n.parent);\n\n  \/\/\/ An iterable of the root and the path of nodes to this. The\n  \/\/\/ reverse of ancestors.\n  Iterable&lt;Node&gt; path = ancestors.toList().reversed();\n}\n<\/code><\/pre>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.iterables\/GeneratingIterable-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.iterables",
            "name": "quiver.iterables.GeneratingIterable",
            "shortname": "GeneratingIterable",
            "extends": [
                "dart:collection.IterableBase",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">GeneratingIterable(this.initial, this.next);<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/GeneratingIterable\/GeneratingIterable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "GeneratingIterable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.iterables.GeneratingIterable",
                    "params": [
                        {
                            "name": "initial",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<_Initial<T>>"
                        },
                        {
                            "name": "next",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<_Next<T>>"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns a new <code>Iterator<\/code> that allows iterating the elements of this\n<code>Iterable<\/code>.<\/p>\n<p>Iterable classes may specify the iteration order of their elements\n(for example <a href=\"dart-core\/List-class.html\">List<\/a> always iterate in index order),\nor they may leave it unspecified (for example a hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a>\nmay iterate in any order).<\/p>\n<p>Each time <code>iterator<\/code> is read, it returns a new iterator,\nwhich can be used to iterate through all the elements again.\nThe iterators of the same iterable can be stepped through independently,\nbut should return the same elements in the same order,\nas long as the underlying collection isn't changed.<\/p>\n<p>Modifying the collection may cause new iterators to produce\ndifferent elements, and may change the order of existing elements.\nA <a href=\"dart-core\/List-class.html\">List<\/a> specifies its iteration order precisely,\nso modifying the list changes the iteration order predictably.\nA hash-based <a href=\"dart-core\/Set-class.html\">Set<\/a> may change its iteration order completely\nwhen adding a new element to the set.<\/p>\n<p>Modifying the underlying collection after creating the new iterator\nmay cause an error the next time <a href=\"dart-core\/Iterator\/moveNext.html\">Iterator.moveNext<\/a> is called\non that iterator.\nAny <em>modifiable<\/em> iterable class should specify which operations will\nbreak iteration.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nIterator&lt;T&gt; get iterator =&gt; new _GeneratingIterator(initial(), next);<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/GeneratingIterable\/iterator.html",
                    "name": "iterator",
                    "isDeprecated": false,
                    "type": "dart:core.Iterator",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.GeneratingIterable",
                    "params": []
                }
            ]
        },
        {
            "desc": "",
            "dtype": "class",
            "example": "",
            "href": "quiver.iterables\/IndexedValue-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.iterables",
            "name": "quiver.iterables.IndexedValue",
            "shortname": "IndexedValue",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "quiver.iterables.EnumerateIterable",
                "quiver.iterables.EnumerateIterator"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">IndexedValue(this.index, this.value);<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/IndexedValue\/IndexedValue.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "IndexedValue",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.iterables.IndexedValue",
                    "params": [
                        {
                            "name": "index",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "<V>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String toString() =&gt; '($index, $value)';<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/IndexedValue\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.IndexedValue",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"quiver.iterables\/IndexedValue\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"quiver.iterables\/IndexedValue\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"quiver.iterables\/IndexedValue\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"quiver.iterables\/IndexedValue\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"quiver.iterables\/IndexedValue\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"quiver.iterables\/IndexedValue\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get hashCode =&gt; index * 31 + value.hashCode;<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/IndexedValue\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.IndexedValue",
                    "params": []
                },
                {
                    "desc": "",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int index\n\n<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/IndexedValue\/index.html",
                    "name": "index",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.IndexedValue",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A base class for <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>s of infinite length that throws\n<a href=\"dart-core\/UnsupportedError-class.html\">UnsupportedError<\/a> for methods that would require the Iterable to\nterminate.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "quiver.iterables\/InfiniteIterable-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "quiver.iterables",
            "name": "quiver.iterables.InfiniteIterable",
            "shortname": "InfiniteIterable",
            "extends": [
                "dart:collection.IterableBase",
                "dart:core.Iterable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "quiver.iterables\/InfiniteIterable\/InfiniteIterable.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "InfiniteIterable",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": []
                },
                {
                    "desc": "<p>Checks whether every element of this iterable satisfies <a href=\"flutter_test\/test.html\">test<\/a>.<\/p>\n<p>Checks every element in iteration order, and returns <code>false<\/code> if\nany of them make <a href=\"flutter_test\/test.html\">test<\/a> return <code>false<\/code>, otherwise returns <code>true<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool every(bool f(T element)) =&gt; throw new UnsupportedError('every');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/every.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "every",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value<\/p>\n<p>Uses <code>initialValue<\/code> as the initial value,\nthen iterates through the elements and updates the value with\neach element using the <code>combine<\/code> function, as if by:<\/p>\n<pre class=\"language-dart\"><code>var value = initialValue;\nfor (E element in this) {\n  value = combine(value, element);\n}\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.fold(0, (prev, element) =&gt; prev + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T1 fold&lt;T1&gt;(T1 initialValue, T1 combine(T1 previousValue, T element)) =&gt;\n    throw new UnsupportedError('fold');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/fold.html",
                    "isDeprecated": false,
                    "type": "<T1>",
                    "name": "fold",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "initialValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T1>"
                        },
                        {
                            "name": "previousValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T1>"
                        }
                    ]
                },
                {
                    "desc": "<p>Applies the function <code>f<\/code> to each element of this collection in iteration\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void forEach(void f(T element)) =&gt; throw new UnsupportedError('forEach');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/forEach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "forEach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Converts each element to a <a href=\"dart-core\/String-class.html\">String<\/a> and concatenates the strings.<\/p>\n<p>Iterates through elements of this iterable,\nconverts each one to a <a href=\"dart-core\/String-class.html\">String<\/a> by calling <a href=\"dart-core\/Iterable\/toString.html\">Object.toString<\/a>,\nand then concatenates the strings, with the\n<code>separator<\/code> string interleaved between the elements.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">String join([String separator = '']) =&gt; throw new UnsupportedError('join');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/join.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "join",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "separator",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the last element that satisfies the given predicate <code>test<\/code>.<\/p>\n<p>An iterable that can access its elements directly may check its\nelements in any order (for example a list starts by checking the\nlast element and then moves towards the start of the list).\nThe default implementation iterates elements in iteration order,\nchecks <code>test(element)<\/code> for each,\nand finally returns that last one that matched.<\/p>\n<p>If no element satisfies <code>test<\/code>, the result of invoking the <code>orElse<\/code>\nfunction is returned.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T lastWhere(bool test(T value), {T orElse()}) =&gt;\n    throw new UnsupportedError('lastWhere');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/lastWhere.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "lastWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Reduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.<\/p>\n<p>The iterable must have at least one element.\nIf it has only one element, that element is returned.<\/p>\n<p>Otherwise this method starts with the first element from the iterator,\nand then combines it with the remaining elements in iteration order,\nas if by:<\/p>\n<pre class=\"language-dart\"><code>E value = iterable.first;\niterable.skip(1).forEach((element) {\n  value = combine(value, element);\n});\nreturn value;\n<\/code><\/pre>\n<p>Example of calculating the sum of an iterable:<\/p>\n<pre class=\"language-dart\"><code>iterable.reduce((value, element) =&gt; value + element);\n<\/code><\/pre>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T reduce(T combine(T value, T element)) =&gt;\n    throw new UnsupportedError('reduce');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/reduce.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "reduce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "element",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the single element that satisfies <code>test<\/code>.<\/p>\n<p>Checks elements to see if <code>test(element)<\/code> returns true.\nIf exactly one element satisfies <code>test<\/code>, that element is returned.\nIf more than one matching element is found, throws <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.\nIf no matching element is found, returns the result of <code>orElse<\/code>.\nIf <code>orElse<\/code> is omitted, it defaults to throwing a <a href=\"dart-core\/StateError-class.html\">StateError<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">T singleWhere(bool test(T value), {T orElse()}) =&gt;\n    throw new UnsupportedError('singleWhere');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/singleWhere.html",
                    "isDeprecated": false,
                    "type": "<T>",
                    "name": "singleWhere",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "orElse",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<T>"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/List-class.html\">List<\/a> containing the elements of this <a href=\"dart-core\/Iterable-class.html\">Iterable<\/a>.<\/p>\n<p>The elements are in iteration order.\nThe list is fixed-length if <code>growable<\/code> is false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;T&gt; toList({bool growable: true}) =&gt; throw new UnsupportedError('toList');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/toList.html",
                    "isDeprecated": false,
                    "type": "dart:core.List",
                    "name": "toList",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": [
                        {
                            "name": "growable",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.bool"
                        }
                    ]
                },
                {
                    "desc": "<p>Creates a <a href=\"dart-core\/Set-class.html\">Set<\/a> containing the same elements as this iterable.<\/p>\n<p>The set may contain fewer elements than the iterable,\nif the iterable contains an element more than once,\nor it contains one or more elements that are equal.\nThe order of the elements in the set is not guaranteed to be the same\nas for the iterable.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;T&gt; toSet() =&gt; throw new UnsupportedError('toSet');<\/code><\/pre>\n    ",
                    "href": "quiver.iterables\/InfiniteIterable\/toSet.html",
                    "isDeprecated": false,
                    "type": "dart:core.Set",
                    "name": "toSet",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>Returns <code>true<\/code> if there are no elements in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>false<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEmpty =&gt; false;<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/InfiniteIterable\/isEmpty.html",
                    "name": "isEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns true if there is at least one element in this collection.<\/p>\n<p>May be computed by checking if <code>iterator.moveNext()<\/code> returns <code>true<\/code>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; true;<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/InfiniteIterable\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": []
                },
                {
                    "desc": "<p>Returns the number of elements in <a href=\"quiver.iterables\/InfiniteIterable-class.html\">this<\/a>.<\/p>\n<p>Counting all elements may involve iterating through all elements and can\ntherefore be slow.\nSome iterables have a more efficient way to find the number of elements.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get length =&gt; throw new UnsupportedError('length');<\/code><\/pre>\n        ",
                    "href": "quiver.iterables\/InfiniteIterable\/length.html",
                    "name": "length",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "quiver.iterables.InfiniteIterable",
                    "params": []
                }
            ]
        }
    ],
    "mixin": [],
    "enum": [],
    "typedef": []
}