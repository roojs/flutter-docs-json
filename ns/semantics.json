{
    "class": [
        {
            "desc": "<p>An event for a semantic announcement.<\/p>\n<p>This should be used for announcement that are not seamlessly announced by\nthe system as a result of a UI state change.<\/p>\n<p>For example a camera application can use this method to make accessibility\nannouncements regarding objects in the viewfinder.<\/p>\n<p>When possible, prefer using mechanisms like <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> to implicitly\ntrigger announcements over using this event.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/AnnounceSemanticsEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.AnnounceSemanticsEvent",
            "shortname": "AnnounceSemanticsEvent",
            "extends": [
                "semantics.SemanticsEvent",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs an event that triggers an announcement by the platform.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const AnnounceSemanticsEvent(this.message, this.textDirection)\n  : assert(message != null),\n    assert(textDirection != null),\n    super('announce');<\/code><\/pre>\n    ",
                    "href": "semantics\/AnnounceSemanticsEvent\/AnnounceSemanticsEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "AnnounceSemanticsEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.AnnounceSemanticsEvent",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "textDirection",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.TextDirection"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the event's data object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, dynamic&gt; getDataMap() {\n  return &lt;String, dynamic&gt;{\n    'message': message,\n    'textDirection': textDirection.index,\n  };\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/AnnounceSemanticsEvent\/getDataMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "getDataMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.AnnounceSemanticsEvent",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The message to announce.<\/p>\n<p>This property must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/AnnounceSemanticsEvent\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.AnnounceSemanticsEvent",
                    "params": []
                },
                {
                    "desc": "<p>Text direction for <a href=\"semantics\/AnnounceSemanticsEvent\/message.html\">message<\/a>.<\/p>\n<p>This property must not be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/AnnounceSemanticsEvent\/textDirection.html",
                    "name": "textDirection",
                    "isDeprecated": false,
                    "type": "dart:ui.TextDirection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.AnnounceSemanticsEvent",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An identifier of a custom semantics action.<\/p>\n<p>Custom semantics actions can be provided to make complex user\ninteractions more accessible. For instance, if an application has a\ndrag-and-drop list that requires the user to press and hold an item\nto move it, users interacting with the application using a hardware\nswitch may have difficulty. This can be made accessible by creating custom\nactions and pairing them with handlers that move a list item up or down in\nthe list.<\/p>\n<p>In Android, these actions are presented in the local context menu. In iOS,\nthese are presented in the radial context menu.<\/p>\n<p>Localization and text direction do not automatically apply to the provided\nlabel or hint.<\/p>\n<p>Instances of this class should either be instantiated with const or\nnew instances cached in static fields.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties-class.html\">SemanticsProperties<\/a>, where the handler for a custom action is provided.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "semantics\/CustomSemanticsAction-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.CustomSemanticsAction",
            "shortname": "CustomSemanticsAction",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>.<\/p>\n<p>The <code>label<\/code> must not be null or the empty string.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const CustomSemanticsAction({@required this.label})\n  : assert(label != null),\n    assert(label != ''),\n    hint = null,\n    action = null;<\/code><\/pre>\n    ",
                    "href": "semantics\/CustomSemanticsAction\/CustomSemanticsAction.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "CustomSemanticsAction",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": [
                        {
                            "name": "label",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Get the <code>action<\/code> for a given identifier.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static CustomSemanticsAction getAction(int id) {\n  return _actions[id];\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/CustomSemanticsAction\/getAction.html",
                    "isDeprecated": false,
                    "type": "semantics.CustomSemanticsAction",
                    "name": "getAction",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": [
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Get the identifier for a given <code>action<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static int getIdentifier(CustomSemanticsAction action) {\n  int result = _ids[action];\n  if (result == null) {\n    result = _nextId++;\n    _ids[action] = result;\n    _actions[result] = action;\n  }\n  return result;\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/CustomSemanticsAction\/getIdentifier.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "getIdentifier",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": [
                        {
                            "name": "action",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.CustomSemanticsAction"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  return 'CustomSemanticsAction(${_ids[this]}, label:$label, hint:$hint, action:$action)';\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/CustomSemanticsAction\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The standard semantics action this action replaces.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsAction action\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/CustomSemanticsAction\/action.html",
                    "name": "action",
                    "isDeprecated": false,
                    "type": "dart:ui.SemanticsAction",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": []
                },
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"semantics\/CustomSemanticsAction\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"semantics\/CustomSemanticsAction\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"semantics\/CustomSemanticsAction\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"semantics\/CustomSemanticsAction\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"semantics\/CustomSemanticsAction\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"semantics\/CustomSemanticsAction\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; ui.hashValues(label, hint, action);<\/code><\/pre>\n        ",
                    "href": "semantics\/CustomSemanticsAction\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": []
                },
                {
                    "desc": "<p>The hint description of this custom semantics action.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String hint\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/CustomSemanticsAction\/hint.html",
                    "name": "hint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": []
                },
                {
                    "desc": "<p>The user readable name of this custom semantics action.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String label\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/CustomSemanticsAction\/label.html",
                    "name": "label",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.CustomSemanticsAction",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An event which triggers long press semantic feedback.<\/p>\n<p>Currently only honored on Android. Triggers a long-press specific sound\nwhen TalkBack is enabled.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/LongPressSemanticsEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.LongPressSemanticsEvent",
            "shortname": "LongPressSemanticsEvent",
            "extends": [
                "semantics.SemanticsEvent",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs an event that triggers a long-press semantic feedback by the platform.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const LongPressSemanticsEvent() : super('longPress');<\/code><\/pre>\n    ",
                    "href": "semantics\/LongPressSemanticsEvent\/LongPressSemanticsEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "LongPressSemanticsEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.LongPressSemanticsEvent",
                    "params": []
                },
                {
                    "desc": "<p>Returns the event's data object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, dynamic&gt; getDataMap() =&gt; const &lt;String, dynamic&gt;{};<\/code><\/pre>\n    ",
                    "href": "semantics\/LongPressSemanticsEvent\/getDataMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "getDataMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.LongPressSemanticsEvent",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>A <a href=\"semantics\/SemanticsSortKey-class.html\">SemanticsSortKey<\/a> that sorts simply based on the <code>double<\/code> value it is\ngiven.<\/p>\n<p>The <a href=\"semantics\/OrdinalSortKey-class.html\">OrdinalSortKey<\/a> compares itself with other <a href=\"semantics\/OrdinalSortKey-class.html\">OrdinalSortKey<\/a>s\nto sort based on the order it is given.<\/p>\n<p>The ordinal value <code>order<\/code> is typically a whole number, though it can be\nfractional, e.g. in order to fit between two other consecutive whole\nnumbers. The value must be finite (it cannot be <a href=\"dart-core\/double\/nan-constant.html\">double.nan<\/a>,\n<a href=\"dart-core\/double\/infinity-constant.html\">double.infinity<\/a>, or <a href=\"dart-core\/double\/negativeInfinity-constant.html\">double.negativeInfinity<\/a>).<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/OrdinalSortKey-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.OrdinalSortKey",
            "shortname": "OrdinalSortKey",
            "extends": [
                "semantics.SemanticsSortKey",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a semantics sort key that uses a <a href=\"dart-core\/double-class.html\">double<\/a> as its key value.<\/p>\n<p>The <code>order<\/code> must be a finite number.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const OrdinalSortKey(\n  this.order, {\n  String name,\n}) : assert(order != null),\n     assert(order != double.nan),\n     assert(order &gt; double.negativeInfinity),\n     assert(order &lt; double.infinity),\n     super(name: name);<\/code><\/pre>\n    ",
                    "href": "semantics\/OrdinalSortKey\/OrdinalSortKey.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "OrdinalSortKey",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.OrdinalSortKey",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "order",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/OrdinalSortKey\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DoubleProperty('order', order, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/OrdinalSortKey\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.OrdinalSortKey",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>The implementation of <a href=\"semantics\/SemanticsSortKey\/compareTo.html\">compareTo<\/a>.<\/p>\n<p>The argument is guaranteed to be of the same type as this object and have\nthe same <a href=\"semantics\/SemanticsSortKey\/name.html\">name<\/a>.<\/p>\n<p>The method should return a negative number if this object comes earlier in\nthe sort order than the argument; and a positive number if it comes later\nin the sort order. Returning zero causes the system to use default sort\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint doCompare(OrdinalSortKey other) {\n  if (other.order == null || order == null || other.order == order)\n    return 0;\n  return order.compareTo(other.order);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/OrdinalSortKey\/doCompare.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "doCompare",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.OrdinalSortKey",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.OrdinalSortKey"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>Determines the placement of this key in a sequence of keys that defines\nthe order in which this node is traversed by the platform's accessibility\nservices.<\/p>\n<p>Lower values will be traversed first.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double order\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/OrdinalSortKey\/order.html",
                    "name": "order",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.OrdinalSortKey",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Describes the semantic information associated with the owning\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>The information provided in the configuration is used to generate the\nsemantics tree.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsConfiguration-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsConfiguration",
            "shortname": "SemanticsConfiguration",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/copy.html\">SemanticsAction.copy<\/a>.<\/p>\n<p>This is a request to copy the current selection to the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onCopy =&gt; _onCopy;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onCopy.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onCopy",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/cut-constant.html\">SemanticsAction.cut<\/a>.<\/p>\n<p>This is a request to cut the current selection and place it in the\nclipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onCut =&gt; _onCut;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onCut.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onCut",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/p>\n<p>This is a request to decrease the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsConfiguration\/onDecrease.html\">onDecrease<\/a> must ensure that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume down button.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDecrease =&gt; _onDecrease;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onDecrease.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDecrease",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didGainAccessibilityFocus-constant.html\">SemanticsAction.didGainAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler gains\nthe accessibility focus. The accessibility focus is the\ngreen (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/onDidLoseAccessibilityFocus.html\">onDidLoseAccessibilityFocus<\/a>, which is invoked when the accessibility\nfocus is removed from the node.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDidGainAccessibilityFocus =&gt; _onDidGainAccessibilityFocus;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onDidGainAccessibilityFocus.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDidGainAccessibilityFocus",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didLoseAccessibilityFocus-constant.html\">SemanticsAction.didLoseAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler\nloses the accessibility focus. The accessibility focus is\nthe green (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/onDidGainAccessibilityFocus.html\">onDidGainAccessibilityFocus<\/a>, which is invoked when the node gains\naccessibility focus.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDidLoseAccessibilityFocus =&gt; _onDidLoseAccessibilityFocus;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onDidLoseAccessibilityFocus.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDidLoseAccessibilityFocus",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/dismiss-constant.html\">SemanticsAction.dismiss<\/a>.<\/p>\n<p>This is a request to dismiss the currently focused node.<\/p>\n<p>TalkBack users on Android can trigger this action in the local context\nmenu, and VoiceOver users on iOS can trigger this action with a standard\ngesture or menu option.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onDismiss =&gt; _onDismiss;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onDismiss.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDismiss",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/p>\n<p>This is a request to increase the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsConfiguration\/onIncrease.html\">onIncrease<\/a> must ensure that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume up button.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onIncrease =&gt; _onIncrease;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onIncrease.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onIncrease",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/longPress-constant.html\">SemanticsAction.longPress<\/a>.<\/p>\n<p>This is the semantic equivalent of a user pressing and holding the screen\nwith the finger for a few seconds without moving it.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen without lifting the finger after the\nsecond tap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onLongPress =&gt; _onLongPress;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onLongPress.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onLongPress",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorBackwardByCharacter.html\">SemanticsAction.onMoveCursorBackwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorBackwardByCharacter =&gt; _onMoveCursorBackwardByCharacter;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onMoveCursorBackwardByCharacter.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorBackwardByCharacter",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorBackwardByWord.html\">SemanticsAction.onMoveCursorBackwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorBackwardByWord =&gt; _onMoveCursorBackwardByWord;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onMoveCursorBackwardByWord.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorBackwardByWord",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorForwardByCharacter.html\">SemanticsAction.onMoveCursorForwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field forward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume up key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorForwardByCharacter =&gt; _onMoveCursorForwardByCharacter;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onMoveCursorForwardByCharacter.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorForwardByCharacter",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsConfiguration\/onMoveCursorForwardByWord.html\">SemanticsAction.onMoveCursorForwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">MoveCursorHandler get onMoveCursorForwardByWord =&gt; _onMoveCursorForwardByWord;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onMoveCursorForwardByWord.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorForwardByWord",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/paste-constant.html\">SemanticsAction.paste<\/a>.<\/p>\n<p>This is a request to paste the current content of the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onPaste =&gt; _onPaste;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onPaste.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onPaste",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollDown-constant.html\">SemanticsAction.scrollDown<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from top to bottom. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollDown =&gt; _onScrollDown;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onScrollDown.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollDown",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollLeft-constant.html\">SemanticsAction.scrollLeft<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from right to left. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping left with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollLeft =&gt; _onScrollLeft;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onScrollLeft.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollLeft",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollRight-constant.html\">SemanticsAction.scrollRight<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from left to right. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping right with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollRight =&gt; _onScrollRight;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onScrollRight.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollRight",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollUp-constant.html\">SemanticsAction.scrollUp<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from bottom to top. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsConfiguration\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsConfiguration\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onScrollUp =&gt; _onScrollUp;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onScrollUp.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollUp",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/setSelection-constant.html\">SemanticsAction.setSelection<\/a>.<\/p>\n<p>This handler is invoked when the user either wants to change the currently\nselected text in a text field or change the position of the cursor.<\/p>\n<p>TalkBack users can trigger this handler by selecting \"Move cursor to\nbeginning\/end\" or \"Select all\" from the local context menu.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SetSelectionHandler get onSetSelection =&gt; _onSetSelection;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onSetSelection.html",
                    "isDeprecated": false,
                    "type": "semantics.SetSelectionHandler",
                    "name": "onSetSelection",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/showOnScreen-constant.html\">SemanticsAction.showOnScreen<\/a>.<\/p>\n<p>A request to fully show the semantics node on screen. For example, this\naction might be send to a node in a scrollable list that is partially off\nscreen to bring it on screen.<\/p>\n<p>For elements in a scrollable list the framework provides a default\nimplementation for this action and it is not advised to provide a\ncustom one via this setter.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onShowOnScreen =&gt; _onShowOnScreen;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onShowOnScreen.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onShowOnScreen",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/tap-constant.html\">SemanticsAction.tap<\/a>.<\/p>\n<p>This is the semantic equivalent of a user briefly tapping the screen with\nthe finger without moving it. For example, a button should implement this\naction.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen while an element is focused.<\/p>\n<p>On Android prior to Android Oreo a double-tap on the screen while an\nelement with an <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handler is focused will not call the registered\nhandler. Instead, Android will simulate a pointer down and up event at the\ncenter of the focused element. Those pointer events will get dispatched\njust like a regular tap with TalkBack disabled would: The events will get\nprocessed by any <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> listening for gestures in the center of\nthe focused element. Therefore, to ensure that <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handlers work\nproperly on Android versions prior to Oreo, a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> with an\nonTap handler should always be wrapping an element that defines a\nsemantic <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handler. By default a <a href=\"widgets\/GestureDetector-class.html\">GestureDetector<\/a> will register its\nown semantic <a href=\"semantics\/SemanticsConfiguration\/onTap.html\">onTap<\/a> handler that follows this principle.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">VoidCallback get onTap =&gt; _onTap;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/onTap.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onTap",
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "semantics\/SemanticsConfiguration\/SemanticsConfiguration.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsConfiguration",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Absorb the semantic information from <code>child<\/code> into this configuration.<\/p>\n<p>This adds the semantic information of both configurations and saves the\nresult in this configuration.<\/p>\n<p>The <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> owning the <code>child<\/code> configuration must be a descendant\nof the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> that owns this configuration.<\/p>\n<p>Only configurations that have <a href=\"semantics\/SemanticsConfiguration\/explicitChildNodes.html\">explicitChildNodes<\/a> set to false can\nabsorb other configurations and it is recommended to only absorb compatible\nconfigurations as determined by <a href=\"semantics\/SemanticsConfiguration\/isCompatibleWith.html\">isCompatibleWith<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void absorb(SemanticsConfiguration child) {\n  assert(!explicitChildNodes);\n\n  if (!child.hasBeenAnnotated)\n    return;\n\n  _actions.addAll(child._actions);\n  _customSemanticsActions.addAll(child._customSemanticsActions);\n  _actionsAsBits |= child._actionsAsBits;\n  _flags |= child._flags;\n  _textSelection ??= child._textSelection;\n  _scrollPosition ??= child._scrollPosition;\n  _scrollExtentMax ??= child._scrollExtentMax;\n  _scrollExtentMin ??= child._scrollExtentMin;\n  _hintOverrides ??= child._hintOverrides;\n  _indexInParent ??= child.indexInParent;\n  _scrollIndex ??= child._scrollIndex;\n  _scrollChildCount ??= child._scrollChildCount;\n  _platformViewId ??= child._platformViewId;\n\n  textDirection ??= child.textDirection;\n  _sortKey ??= child._sortKey;\n  _label = _concatStrings(\n    thisString: _label,\n    thisTextDirection: textDirection,\n    otherString: child._label,\n    otherTextDirection: child.textDirection,\n  );\n  if (_decreasedValue == '' || _decreasedValue == null)\n    _decreasedValue = child._decreasedValue;\n  if (_value == '' || _value == null)\n    _value = child._value;\n  if (_increasedValue == '' || _increasedValue == null)\n    _increasedValue = child._increasedValue;\n  _hint = _concatStrings(\n    thisString: _hint,\n    thisTextDirection: textDirection,\n    otherString: child._hint,\n    otherTextDirection: child.textDirection,\n  );\n\n  _thickness = math.max(_thickness, child._thickness + child._elevation);\n\n  _hasBeenAnnotated = _hasBeenAnnotated || child._hasBeenAnnotated;\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsConfiguration\/absorb.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "absorb",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": [
                        {
                            "name": "child",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsConfiguration"
                        }
                    ]
                },
                {
                    "desc": "<p>Specifies a <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a> that this configuration wants to apply to all\nchild <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>The tag is added to all <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> that pass through the\n<a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> owning this configuration while looking to be attached to a\nparent <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>Tags are used to communicate to a parent <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> that a child\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> was passed through a particular <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>. The parent\ncan use this information to determine the shape of the semantics tree.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>RenderSemanticsGestureHandler.excludeFromScrolling<\/code> for an example of\nhow tags are used.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void addTagForChildren(SemanticsTag tag) {\n  _tagsForChildren ??= &lt;SemanticsTag&gt;{};\n  _tagsForChildren.add(tag);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsConfiguration\/addTagForChildren.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "addTagForChildren",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": [
                        {
                            "name": "tag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsTag"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns an exact copy of this configuration.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsConfiguration copy() {\n  return SemanticsConfiguration()\n    .._isSemanticBoundary = _isSemanticBoundary\n    ..explicitChildNodes = explicitChildNodes\n    ..isBlockingSemanticsOfPreviouslyPaintedNodes = isBlockingSemanticsOfPreviouslyPaintedNodes\n    .._hasBeenAnnotated = _hasBeenAnnotated\n    .._isMergingSemanticsOfDescendants = _isMergingSemanticsOfDescendants\n    .._textDirection = _textDirection\n    .._sortKey = _sortKey\n    .._label = _label\n    .._increasedValue = _increasedValue\n    .._value = _value\n    .._decreasedValue = _decreasedValue\n    .._hint = _hint\n    .._hintOverrides = _hintOverrides\n    .._elevation = _elevation\n    .._thickness = _thickness\n    .._flags = _flags\n    .._tagsForChildren = _tagsForChildren\n    .._textSelection = _textSelection\n    .._scrollPosition = _scrollPosition\n    .._scrollExtentMax = _scrollExtentMax\n    .._scrollExtentMin = _scrollExtentMin\n    .._actionsAsBits = _actionsAsBits\n    .._indexInParent = indexInParent\n    .._scrollIndex = _scrollIndex\n    .._scrollChildCount = _scrollChildCount\n    .._platformViewId = _platformViewId\n    .._actions.addAll(_actions)\n    .._customSemanticsActions.addAll(_customSemanticsActions);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsConfiguration\/copy.html",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsConfiguration",
                    "name": "copy",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Returns the action handler registered for <code>action<\/code> or null if none was\nregistered.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>addAction<\/code> to add an action.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">_SemanticsActionHandler getActionHandler(SemanticsAction action) =&gt; _actions[action];<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsConfiguration\/getActionHandler.html",
                    "isDeprecated": false,
                    "type": "<_SemanticsActionHandler>",
                    "name": "getActionHandler",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": [
                        {
                            "name": "action",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.SemanticsAction"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether this configuration is compatible with the provided <code>other<\/code>\nconfiguration.<\/p>\n<p>Two configurations are said to be compatible if they can be added to the\nsame <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> without losing any semantics information.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isCompatibleWith(SemanticsConfiguration other) {\n  if (other == null || !other.hasBeenAnnotated || !hasBeenAnnotated)\n    return true;\n  if (_actionsAsBits &amp; other._actionsAsBits != 0)\n    return false;\n  if ((_flags &amp; other._flags) != 0)\n    return false;\n  if (_platformViewId != null &amp;&amp; other._platformViewId != null) {\n    return false;\n  }\n  if (_value != null &amp;&amp; _value.isNotEmpty &amp;&amp; other._value != null &amp;&amp; other._value.isNotEmpty)\n    return false;\n  return true;\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsConfiguration\/isCompatibleWith.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isCompatibleWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsConfiguration"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The handlers for each supported <a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>.<\/p>\n<p>Whenever a custom accessibility action is added to a node, the action\n<code>SemanticAction.customAction<\/code> is automatically added. A handler is\ncreated which uses the passed argument to lookup the custom action\nhandler from this map and invoke it, if present.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;CustomSemanticsAction, VoidCallback&gt; get customSemanticsActions =&gt; _customSemanticsActions;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/customSemanticsActions.html",
                    "name": "customSemanticsActions",
                    "isDeprecated": false,
                    "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will have after performing a\n<a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action.<\/p>\n<p>This must be set if a handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> is provided\nand <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get decreasedValue =&gt; _decreasedValue;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/decreasedValue.html",
                    "name": "decreasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The elevation in z-direction at which the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is\nlocated relative to its parent.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get elevation =&gt; _elevation;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/elevation.html",
                    "name": "elevation",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the configuration forces all children of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nthat want to contribute semantic information to the semantics tree to do\nso in the form of explicit <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>When set to false children of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> are allowed to\nannotate <code>SemanticNode<\/code>s of their parent with the semantic information\nthey want to contribute to the semantic tree.\nWhen set to true the only way for children of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nto contribute semantic information to the semantic tree is to introduce\nnew explicit <code>SemanticNode<\/code>s to the tree.<\/p>\n<p>This setting is often used in combination with <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a> to\ncreate semantic boundaries that are either writable or not for children.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool explicitChildNodes = false\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/explicitChildNodes.html",
                    "name": "explicitChildNodes",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether this configuration is empty.<\/p>\n<p>An empty configuration doesn't contain any semantic information that it\nwants to contribute to the semantics tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasBeenAnnotated =&gt; _hasBeenAnnotated;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/hasBeenAnnotated.html",
                    "name": "hasBeenAnnotated",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the platform can scroll the semantics node when the user attempts\nto move focus to an offscreen child.<\/p>\n<p>For example, a <a href=\"widgets\/ListView-class.html\">ListView<\/a> widget has implicit scrolling so that users can\neasily move to the next visible set of children. A <a href=\"material\/TabBar-class.html\">TabBar<\/a> widget does\nnot have implicit scrolling, so that users can navigate into the tab\nbody when reaching the end of the tab bar.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasImplicitScrolling =&gt; _hasFlag(SemanticsFlag.hasImplicitScrolling);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/hasImplicitScrolling.html",
                    "name": "hasImplicitScrolling",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>A brief description of the result of performing an action on this node.<\/p>\n<p>On iOS this is used for the <code>accessibilityHint<\/code> property defined in the\n<code>UIAccessibility<\/code> Protocol. On Android it is concatenated together with\n<a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a> and <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> in the following order: <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>.\nThe concatenated value is then used as the <code>Text<\/code> description.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get hint =&gt; _hint;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/hint.html",
                    "name": "hint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Provides hint values which override the default hints on supported\nplatforms.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsHintOverrides get hintOverrides =&gt; _hintOverrides;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/hintOverrides.html",
                    "name": "hintOverrides",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsHintOverrides",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will have after performing a\n<a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> action.<\/p>\n<p>This must be set if a handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> is provided\nand <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> is set.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get increasedValue =&gt; _increasedValue;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/increasedValue.html",
                    "name": "increasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The index of this node within the parent's list of semantic children.<\/p>\n<p>This includes all semantic nodes, not just those currently in the\nchild list. For example, if a scrollable has five children but the first\ntwo are not visible (and thus not included in the list of children), then\nthe index of the last node will still be 4.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get indexInParent =&gt; _indexInParent;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/indexInParent.html",
                    "name": "indexInParent",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> makes other <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s previously\npainted within the same semantic boundary unreachable for accessibility\npurposes.<\/p>\n<p>If set to true, the semantic information for all siblings and cousins of\nthis node, that are earlier in a depth-first pre-order traversal, are\ndropped from the semantics tree up until a semantic boundary (as defined\nby <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a>) is reached.<\/p>\n<p>If <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a> and <a href=\"semantics\/SemanticsConfiguration\/isBlockingSemanticsOfPreviouslyPaintedNodes.html\">isBlockingSemanticsOfPreviouslyPaintedNodes<\/a>\nis set on the same node, all previously painted siblings and cousins up\nuntil the next ancestor that is a semantic boundary are dropped.<\/p>\n<p>Paint order as established by <a href=\"rendering\/RenderObject\/visitChildrenForSemantics.html\">RenderObject.visitChildrenForSemantics<\/a> is\nused to determine if a node is previous to this one.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool isBlockingSemanticsOfPreviouslyPaintedNodes = false\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isBlockingSemanticsOfPreviouslyPaintedNodes.html",
                    "name": "isBlockingSemanticsOfPreviouslyPaintedNodes",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is a button (true) or not (false).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isButton =&gt; _hasFlag(SemanticsFlag.isButton);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isButton.html",
                    "name": "isButton",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>If this node has Boolean state that can be controlled by the user, whether\nthat state is checked or unchecked, corresponding to true and false,\nrespectively.<\/p>\n<p>Do not call the setter for this field if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> doesn't\nhave checked\/unchecked state that can be controlled by the user.<\/p>\n<p>The getter returns null if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> does not have\nchecked\/unchecked state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isChecked =&gt; _hasFlag(SemanticsFlag.hasCheckedState) ? _hasFlag(SemanticsFlag.isChecked) : null;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isChecked.html",
                    "name": "isChecked",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is currently enabled.<\/p>\n<p>A disabled object does not respond to user interactions. Only objects that\nusually respond to user interactions, but which currently do not (like a\ndisabled button) should be marked as disabled.<\/p>\n<p>The setter should not be called for objects (like static text) that never\nrespond to user interactions.<\/p>\n<p>The getter will return null if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> doesn't support\nthe concept of being enabled\/disabled.<\/p>\n<p>This property does not control whether semantics are enabled. If you wish to\ndisable semantics for a particular widget, you should use an <a href=\"widgets\/ExcludeSemantics-class.html\">ExcludeSemantics<\/a>\nwidget.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isEnabled =&gt; _hasFlag(SemanticsFlag.hasEnabledState) ? _hasFlag(SemanticsFlag.isEnabled) : null;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isEnabled.html",
                    "name": "isEnabled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> currently holds the user's focus.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isFocused =&gt; _hasFlag(SemanticsFlag.isFocused);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isFocused.html",
                    "name": "isFocused",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is a header (true) or not (false).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isHeader =&gt; _hasFlag(SemanticsFlag.isHeader);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isHeader.html",
                    "name": "isHeader",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is considered hidden.<\/p>\n<p>Hidden elements are currently not visible on screen. They may be covered\nby other elements or positioned outside of the visible area of a viewport.<\/p>\n<p>Hidden elements cannot gain accessibility focus though regular touch. The\nonly way they can be focused is by moving the focus to them via linear\nnavigation.<\/p>\n<p>Platforms are free to completely ignore hidden elements and new platforms\nare encouraged to do so.<\/p>\n<p>Instead of marking an element as hidden it should usually be excluded from\nthe semantics tree altogether. Hidden elements are only included in the\nsemantics tree to work around platform limitations and they are mainly\nused to implement accessibility scrolling on iOS.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isHidden =&gt; _hasFlag(SemanticsFlag.isHidden);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isHidden.html",
                    "name": "isHidden",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the semantics node represents an image.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isImage =&gt; _hasFlag(SemanticsFlag.isImage);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isImage.html",
                    "name": "isImage",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning RenderObject corresponds to UI that allows the user to\npick one of several mutually exclusive options.<\/p>\n<p>For example, a <a href=\"material\/Radio-class.html\">Radio<\/a> button is in a mutually exclusive group because\nonly one radio button in that group can be marked as <a href=\"semantics\/SemanticsConfiguration\/isChecked.html\">isChecked<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInMutuallyExclusiveGroup =&gt; _hasFlag(SemanticsFlag.isInMutuallyExclusiveGroup);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isInMutuallyExclusiveGroup.html",
                    "name": "isInMutuallyExclusiveGroup",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the semantic information provided by the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> and\nall of its descendants should be treated as one logical entity.<\/p>\n<p>If set to true, the descendants of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>'s\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> will merge their semantic information into the\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> representing the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>Setting this to true requires that <a href=\"semantics\/SemanticsConfiguration\/isSemanticBoundary.html\">isSemanticBoundary<\/a> is also true.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMergingSemanticsOfDescendants =&gt; _isMergingSemanticsOfDescendants;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isMergingSemanticsOfDescendants.html",
                    "name": "isMergingSemanticsOfDescendants",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> should be obscured.<\/p>\n<p>This option is usually set in combination with <code>textField<\/code> to indicate\nthat the text field contains a password (or other sensitive information).\nDoing so instructs screen readers to not read out the <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isObscured =&gt; _hasFlag(SemanticsFlag.isObscured);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isObscured.html",
                    "name": "isObscured",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is selected (true) or not (false).<\/p>\n<p>This is different from having accessibility focus. The element that is\naccessibility focused may or may not be selected; e.g. a <a href=\"material\/ListTile-class.html\">ListTile<\/a> can have\naccessibility focus but have its <a href=\"material\/ListTile\/selected.html\">ListTile.selected<\/a> property set to false,\nin which case it will not be flagged as selected.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isSelected =&gt; _hasFlag(SemanticsFlag.isSelected);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isSelected.html",
                    "name": "isSelected",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> owner of this configuration wants to own its\nown <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>When set to true semantic information associated with the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nowner of this configuration or any of its descendants will not leak into\nparents. The <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> generated out of this configuration will\nact as a boundary.<\/p>\n<p>Whether descendants of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> can add their semantic\ninformation to the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> introduced by this configuration\nis controlled by <a href=\"semantics\/SemanticsConfiguration\/explicitChildNodes.html\">explicitChildNodes<\/a>.<\/p>\n<p>This has to be true if <code>isMergingDescendantsIntoOneNode<\/code> is also true.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isSemanticBoundary =&gt; _isSemanticBoundary;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isSemanticBoundary.html",
                    "name": "isSemanticBoundary",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> is a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isTextField =&gt; _hasFlag(SemanticsFlag.isTextField);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isTextField.html",
                    "name": "isTextField",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>If this node has Boolean state that can be controlled by the user, whether\nthat state is on or off, corresponding to true and false, respectively.<\/p>\n<p>Do not call the setter for this field if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> doesn't\nhave on\/off state that can be controlled by the user.<\/p>\n<p>The getter returns null if the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> does not have\non\/off state.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isToggled =&gt; _hasFlag(SemanticsFlag.hasToggledState) ? _hasFlag(SemanticsFlag.isToggled) : null;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/isToggled.html",
                    "name": "isToggled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>A textual description of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>On iOS this is used for the <code>accessibilityLabel<\/code> property defined in the\n<code>UIAccessibility<\/code> Protocol. On Android it is concatenated together with\n<a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> and <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a> in the following order: <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>.\nThe concatenated value is then used as the <code>Text<\/code> description.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get label =&gt; _label;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/label.html",
                    "name": "label",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the semantics node is a live region.<\/p>\n<p>On Android, when a live region semantics node is first created TalkBack\nwill make a polite announcement of the current label. This announcement\noccurs even if the node is not focused. Subsequent polite announcements\ncan be made by sending a <a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a> semantics event. The\nannouncement will only be made if the node's label has changed since the\nlast update.<\/p>\n<p>An example of a live region is the <code>Snackbar<\/code> widget. When it appears\non the screen it may be difficult to focus to read the label. A live\nregion causes an initial polite announcement to be generated\nautomatically.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"dart-ui\/SemanticsFlag\/isLiveRegion-constant.html\">SemanticsFlag.isLiveRegion<\/a>, the semantics flag that this setting controls.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get liveRegion =&gt; _hasFlag(SemanticsFlag.isLiveRegion);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/liveRegion.html",
                    "name": "liveRegion",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the semantics node contains the label of a route.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/namesRoute.html\">SemanticsFlag.namesRoute<\/a>, for a full description of route naming.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get namesRoute =&gt; _hasFlag(SemanticsFlag.namesRoute);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/namesRoute.html",
                    "name": "namesRoute",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The id of the platform view, whose semantics nodes will be added as\nchildren to this node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get platformViewId =&gt; _platformViewId;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/platformViewId.html",
                    "name": "platformViewId",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Whether the semantics node is the root of a subtree for which values\nshould be announced.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/scopesRoute.html\">SemanticsFlag.scopesRoute<\/a>, for a full description of route scoping.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get scopesRoute =&gt; _hasFlag(SemanticsFlag.scopesRoute);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/scopesRoute.html",
                    "name": "scopesRoute",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The total number of scrollable children that contribute to semantics.<\/p>\n<p>If the number of children are unknown or unbounded, this value will be\nnull.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get scrollChildCount =&gt; _scrollChildCount;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/scrollChildCount.html",
                    "name": "scrollChildCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the maximum in-range value for <a href=\"semantics\/SemanticsConfiguration\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/maxScrollExtent.html\">ScrollPosition.maxScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollExtentMax =&gt; _scrollExtentMax;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/scrollExtentMax.html",
                    "name": "scrollExtentMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the minimum in-range value for <a href=\"semantics\/SemanticsConfiguration\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/minScrollExtent.html\">ScrollPosition.minScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollExtentMin =&gt; _scrollExtentMin;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/scrollExtentMin.html",
                    "name": "scrollExtentMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The index of the first visible scrollable child that contributes to\nsemantics.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get scrollIndex =&gt; _scrollIndex;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/scrollIndex.html",
                    "name": "scrollIndex",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the current scrolling position in logical pixels if the node is\nscrollable.<\/p>\n<p>The properties <a href=\"semantics\/SemanticsConfiguration\/scrollExtentMin.html\">scrollExtentMin<\/a> and <a href=\"semantics\/SemanticsConfiguration\/scrollExtentMax.html\">scrollExtentMax<\/a> indicate the valid\nin-range values for this property. The value for <a href=\"semantics\/SemanticsConfiguration\/scrollPosition.html\">scrollPosition<\/a> may\n(temporarily) be outside that range, e.g. during an overscroll.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollPosition =&gt; _scrollPosition;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/scrollPosition.html",
                    "name": "scrollPosition",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>Determines the position of this node among its siblings in the traversal\nsort order.<\/p>\n<p>This is used to describe the order in which the semantic node should be\ntraversed by the accessibility services on the platform (e.g. VoiceOver\non iOS and TalkBack on Android).<\/p>\n<p>Whether this sort key has an effect on the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> sort order is\nsubject to how this configuration is used. For example, the <a href=\"semantics\/SemanticsConfiguration\/absorb.html\">absorb<\/a>\nmethod may decide to not use this key when it combines multiple\n<a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> objects.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsSortKey get sortKey =&gt; _sortKey;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/sortKey.html",
                    "name": "sortKey",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsSortKey",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The set of tags that this configuration wants to add to all child\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsConfiguration\/addTagForChildren.html\">addTagForChildren<\/a> to add a tag and for more information about their\nusage.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Iterable&lt;SemanticsTag&gt; get tagsForChildren =&gt; _tagsForChildren;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/tagsForChildren.html",
                    "name": "tagsForChildren",
                    "isDeprecated": false,
                    "type": "dart:core.Iterable<semantics.SemanticsTag>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The reading direction for the text in <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>,\n<a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a>, and <a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/textDirection.html",
                    "name": "textDirection",
                    "isDeprecated": false,
                    "type": "dart:ui.TextDirection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The currently selected text (or the position of the cursor) within <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>\nif this node represents a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection get textSelection =&gt; _textSelection;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/textSelection.html",
                    "name": "textSelection",
                    "isDeprecated": false,
                    "type": "services.TextSelection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>The extend that the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a> occupies in z-direction starting\nat <a href=\"semantics\/SemanticsConfiguration\/elevation.html\">elevation<\/a>.<\/p>\n<p>It's extremely rare to set this value directly. Instead, it is calculated\nimplicitly when other <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a>s are merged into this one\nvia <a href=\"semantics\/SemanticsConfiguration\/absorb.html\">absorb<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get thickness =&gt; _thickness;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/thickness.html",
                    "name": "thickness",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                },
                {
                    "desc": "<p>A textual description for the current value of the owning <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>.<\/p>\n<p>On iOS this is used for the <code>accessibilityValue<\/code> property defined in the\n<code>UIAccessibility<\/code> Protocol. On Android it is concatenated together with\n<a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a> and <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a> in the following order: <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsConfiguration\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsConfiguration\/hint.html\">hint<\/a>.\nThe concatenated value is then used as the <code>Text<\/code> description.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsConfiguration\/textDirection.html\">textDirection<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/decreasedValue.html\">decreasedValue<\/a>, describes what <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be after performing\n<a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/li>\n<li>\n<a href=\"semantics\/SemanticsConfiguration\/increasedValue.html\">increasedValue<\/a>, describes what <a href=\"semantics\/SemanticsConfiguration\/value.html\">value<\/a> will be after performing\n<a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get value =&gt; _value;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsConfiguration\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsConfiguration",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Summary information about a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> object.<\/p>\n<p>A semantics node might <a href=\"semantics\/SemanticsNode\/mergeAllDescendantsIntoThisNode.html\">SemanticsNode.mergeAllDescendantsIntoThisNode<\/a>,\nwhich means the individual fields on the semantics node don't fully describe\nthe semantics at that node. This data structure contains the full semantics\nfor the node.<\/p>\n<p>Typically obtained from <a href=\"semantics\/SemanticsNode\/getSemanticsData.html\">SemanticsNode.getSemanticsData<\/a>.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsData-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsData",
            "shortname": "SemanticsData",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a semantics data object.<\/p>\n<p>The <code>flags<\/code>, <code>actions<\/code>, <code>label<\/code>, and <a href=\"dart-ui\/Rect-class.html\">Rect<\/a> arguments must not be null.<\/p>\n<p>If <code>label<\/code> is not empty, then <code>textDirection<\/code> must also not be null.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsData({\n  @required this.flags,\n  @required this.actions,\n  @required this.label,\n  @required this.increasedValue,\n  @required this.value,\n  @required this.decreasedValue,\n  @required this.hint,\n  @required this.textDirection,\n  @required this.rect,\n  @required this.elevation,\n  @required this.thickness,\n  @required this.textSelection,\n  @required this.scrollIndex,\n  @required this.scrollChildCount,\n  @required this.scrollPosition,\n  @required this.scrollExtentMax,\n  @required this.scrollExtentMin,\n  @required this.platformViewId,\n  this.tags,\n  this.transform,\n  this.customSemanticsActionIds,\n}) : assert(flags != null),\n     assert(actions != null),\n     assert(label != null),\n     assert(value != null),\n     assert(decreasedValue != null),\n     assert(increasedValue != null),\n     assert(hint != null),\n     assert(label == '' || textDirection != null, 'A SemanticsData object with label \"$label\" had a null textDirection.'),\n     assert(value == '' || textDirection != null, 'A SemanticsData object with value \"$value\" had a null textDirection.'),\n     assert(hint == '' || textDirection != null, 'A SemanticsData object with hint \"$hint\" had a null textDirection.'),\n     assert(decreasedValue == '' || textDirection != null, 'A SemanticsData object with decreasedValue \"$decreasedValue\" had a null textDirection.'),\n     assert(increasedValue == '' || textDirection != null, 'A SemanticsData object with increasedValue \"$increasedValue\" had a null textDirection.'),\n     assert(rect != null);<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsData\/SemanticsData.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsData",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": [
                        {
                            "name": "actions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "customSemanticsActionIds",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.List<dart:core.int>"
                        },
                        {
                            "name": "decreasedValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "elevation",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "flags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "hint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "increasedValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "label",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "platformViewId",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "rect",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.Rect"
                        },
                        {
                            "name": "scrollChildCount",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "scrollExtentMax",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "scrollExtentMin",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "scrollIndex",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.int"
                        },
                        {
                            "name": "scrollPosition",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "tags",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Set<semantics.SemanticsTag>"
                        },
                        {
                            "name": "textDirection",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.TextDirection"
                        },
                        {
                            "name": "textSelection",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "services.TextSelection"
                        },
                        {
                            "name": "thickness",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.double"
                        },
                        {
                            "name": "transform",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "vector_math_64.Matrix4"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsData\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;Rect&gt;('rect', rect, showName: false));\n  properties.add(TransformProperty('transform', transform, showName: false, defaultValue: null));\n  properties.add(DoubleProperty('elevation', elevation, defaultValue: 0.0));\n  properties.add(DoubleProperty('thickness', thickness, defaultValue: 0.0));\n  final List&lt;String&gt; actionSummary = &lt;String&gt;[];\n  for (SemanticsAction action in SemanticsAction.values.values) {\n    if ((actions &amp; action.index) != 0)\n      actionSummary.add(describeEnum(action));\n  }\n  final List&lt;String&gt; customSemanticsActionSummary = customSemanticsActionIds\n    .map&lt;String&gt;((int actionId) =&gt; CustomSemanticsAction.getAction(actionId).label)\n    .toList();\n  properties.add(IterableProperty&lt;String&gt;('actions', actionSummary, ifEmpty: null));\n  properties.add(IterableProperty&lt;String&gt;('customActions', customSemanticsActionSummary, ifEmpty: null));\n\n  final List&lt;String&gt; flagSummary = &lt;String&gt;[];\n  for (SemanticsFlag flag in SemanticsFlag.values.values) {\n    if ((flags &amp; flag.index) != 0)\n      flagSummary.add(describeEnum(flag));\n  }\n  properties.add(IterableProperty&lt;String&gt;('flags', flagSummary, ifEmpty: null));\n  properties.add(StringProperty('label', label, defaultValue: ''));\n  properties.add(StringProperty('value', value, defaultValue: ''));\n  properties.add(StringProperty('increasedValue', increasedValue, defaultValue: ''));\n  properties.add(StringProperty('decreasedValue', decreasedValue, defaultValue: ''));\n  properties.add(StringProperty('hint', hint, defaultValue: ''));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  if (textSelection?.isValid == true)\n    properties.add(MessageProperty('textSelection', '[${textSelection.start}, ${textSelection.end}]'));\n  properties.add(IntProperty('platformViewId', platformViewId, defaultValue: null));\n  properties.add(IntProperty('scrollChildren', scrollChildCount, defaultValue: null));\n  properties.add(IntProperty('scrollIndex', scrollIndex, defaultValue: null));\n  properties.add(DoubleProperty('scrollExtentMin', scrollExtentMin, defaultValue: null));\n  properties.add(DoubleProperty('scrollPosition', scrollPosition, defaultValue: null));\n  properties.add(DoubleProperty('scrollExtentMax', scrollExtentMax, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsData\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether <a href=\"semantics\/SemanticsData\/actions.html\">actions<\/a> contains the given action.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasAction(SemanticsAction action) =&gt; (actions &amp; action.index) != 0;<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsData\/hasAction.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "hasAction",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": [
                        {
                            "name": "action",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.SemanticsAction"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether <a href=\"semantics\/SemanticsData\/flags.html\">flags<\/a> contains the given flag.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasFlag(SemanticsFlag flag) =&gt; (flags &amp; flag.index) != 0;<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsData\/hasFlag.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "hasFlag",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": [
                        {
                            "name": "flag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.SemanticsFlag"
                        }
                    ]
                },
                {
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"semantics\/SemanticsData\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsData\/toStringShort.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringShort",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>A bit field of <a href=\"dart-ui\/SemanticsAction-class.html\">SemanticsAction<\/a>s that apply to this node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int actions\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/actions.html",
                    "name": "actions",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The identifiers for the custom semantics actions and standard action\noverrides for this node.<\/p>\n<p>The list must be sorted in increasing order.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>, for an explanation of custom actions.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final List&lt;int&gt; customSemanticsActionIds\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/customSemanticsActionIds.html",
                    "name": "customSemanticsActionIds",
                    "isDeprecated": false,
                    "type": "dart:core.List<dart:core.int>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsData\/value.html\">value<\/a> will become after performing a\n<a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String decreasedValue\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/decreasedValue.html",
                    "name": "decreasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The elevation of this node relative to the parent semantics node.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsData\/elevation.html\">SemanticsConfiguration.elevation<\/a> for a detailed discussion regarding\nelevation and semantics.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double elevation\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/elevation.html",
                    "name": "elevation",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>A bit field of <a href=\"dart-ui\/SemanticsFlag-class.html\">SemanticsFlag<\/a>s that apply to this node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int flags\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/flags.html",
                    "name": "flags",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"semantics\/SemanticsData\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"semantics\/SemanticsData\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode {\n  return ui.hashValues(\n    ui.hashValues(\n      flags,\n      actions,\n      label,\n      value,\n      increasedValue,\n      decreasedValue,\n      hint,\n      textDirection,\n      rect,\n      tags,\n      textSelection,\n      scrollChildCount,\n      scrollIndex,\n      scrollPosition,\n      scrollExtentMax,\n      scrollExtentMin,\n      platformViewId,\n      transform,\n      elevation,\n      thickness,\n    ),\n    ui.hashList(customSemanticsActionIds),\n  );\n}<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>A brief description of the result of performing an action on this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String hint\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/hint.html",
                    "name": "hint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsData\/value.html\">value<\/a> will become after performing a\n<a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> action.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String increasedValue\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/increasedValue.html",
                    "name": "increasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>A textual description of this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String label\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/label.html",
                    "name": "label",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The id of the platform view, whose semantics nodes will be added as\nchildren to this node.<\/p>\n<p>If this value is non-null, the SemanticsNode must not have any children\nas those would be replaced by the semantics nodes of the referenced\nplatform view.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a>, which is the platform view for Android.<\/li>\n<li>\n<a href=\"widgets\/UiKitView-class.html\">UiKitView<\/a>, which is the platform view for iOS.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int platformViewId\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/platformViewId.html",
                    "name": "platformViewId",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The bounding box for this node in its coordinate system.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Rect rect\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/rect.html",
                    "name": "rect",
                    "isDeprecated": false,
                    "type": "dart:ui.Rect",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The total number of scrollable children that contribute to semantics.<\/p>\n<p>If the number of children are unknown or unbounded, this value will be\nnull.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int scrollChildCount\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/scrollChildCount.html",
                    "name": "scrollChildCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the maximum in-range value for <a href=\"semantics\/SemanticsData\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/maxScrollExtent.html\">ScrollPosition.maxScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollExtentMax\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/scrollExtentMax.html",
                    "name": "scrollExtentMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the minimum in-range value for <a href=\"semantics\/SemanticsData\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/minScrollExtent.html\">ScrollPosition.minScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollExtentMin\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/scrollExtentMin.html",
                    "name": "scrollExtentMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The index of the first visible semantic child of a scroll node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int scrollIndex\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/scrollIndex.html",
                    "name": "scrollIndex",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the current scrolling position in logical pixels if the node is\nscrollable.<\/p>\n<p>The properties <a href=\"semantics\/SemanticsData\/scrollExtentMin.html\">scrollExtentMin<\/a> and <a href=\"semantics\/SemanticsData\/scrollExtentMax.html\">scrollExtentMax<\/a> indicate the valid\nin-range values for this property. The value for <a href=\"semantics\/SemanticsData\/scrollPosition.html\">scrollPosition<\/a> may\n(temporarily) be outside that range, e.g. during an overscroll.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double scrollPosition\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/scrollPosition.html",
                    "name": "scrollPosition",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The set of <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a>s associated with this node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Set&lt;SemanticsTag&gt; tags\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/tags.html",
                    "name": "tags",
                    "isDeprecated": false,
                    "type": "dart:core.Set<semantics.SemanticsTag>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The reading direction for the text in <a href=\"semantics\/SemanticsData\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsData\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsData\/hint.html\">hint<\/a>,\n<a href=\"semantics\/SemanticsData\/increasedValue.html\">increasedValue<\/a>, and <a href=\"semantics\/SemanticsData\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/textDirection.html",
                    "name": "textDirection",
                    "isDeprecated": false,
                    "type": "dart:ui.TextDirection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The currently selected text (or the position of the cursor) within <a href=\"semantics\/SemanticsData\/value.html\">value<\/a>\nif this node represents a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextSelection textSelection\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/textSelection.html",
                    "name": "textSelection",
                    "isDeprecated": false,
                    "type": "services.TextSelection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The extent of this node along the z-axis beyond its <a href=\"semantics\/SemanticsData\/elevation.html\">elevation<\/a><\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsData\/thickness.html\">SemanticsConfiguration.thickness<\/a> for a more detailed definition.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final double thickness\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/thickness.html",
                    "name": "thickness",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>The transform from this node's coordinate system to its parent's coordinate system.<\/p>\n<p>By default, the transform is null, which represents the identity\ntransformation (i.e., that this node has the same coordinate system as its\nparent).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Matrix4 transform\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/transform.html",
                    "name": "transform",
                    "isDeprecated": false,
                    "type": "vector_math_64.Matrix4",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                },
                {
                    "desc": "<p>A textual description for the current value of the node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsData\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String value\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsData\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsData",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An event sent by the application to notify interested listeners that\nsomething happened to the user interface (e.g. a view scrolled).<\/p>\n<p>These events are usually interpreted by assistive technologies to give the\nuser additional clues about the current state of the UI.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsEvent-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsEvent",
            "shortname": "SemanticsEvent",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "semantics.AnnounceSemanticsEvent",
                "semantics.LongPressSemanticsEvent",
                "semantics.TapSemanticEvent",
                "semantics.TooltipSemanticsEvent",
                "semantics.UpdateLiveRegionEvent"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Initializes internal fields.<\/p>\n<p><code>type<\/code> is a string that identifies this class of <a href=\"semantics\/SemanticsEvent-class.html\">SemanticsEvent<\/a>s.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsEvent(this.type);<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsEvent\/SemanticsEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsEvent",
                    "params": [
                        {
                            "name": "type",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the event's data object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; getDataMap();<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsEvent\/getDataMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "getDataMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsEvent",
                    "params": []
                },
                {
                    "desc": "<p>Converts this event to a Map that can be encoded with\n<a href=\"services\/StandardMessageCodec-class.html\">StandardMessageCodec<\/a>.<\/p>\n<p><code>nodeId<\/code> is the unique identifier of the semantics node associated with\nthe event, or null if the event is not associated with a semantics node.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">Map&lt;String, dynamic&gt; toMap({ int nodeId }) {\n  final Map&lt;String, dynamic&gt; event = &lt;String, dynamic&gt;{\n    'type': type,\n    'data': getDataMap(),\n  };\n  if (nodeId != null)\n    event['nodeId'] = nodeId;\n\n  return event;\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsEvent\/toMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "toMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsEvent",
                    "params": [
                        {
                            "name": "nodeId",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() {\n  final List&lt;String&gt; pairs = &lt;String&gt;[];\n  final Map&lt;String, dynamic&gt; dataMap = getDataMap();\n  final List&lt;String&gt; sortedKeys = dataMap.keys.toList()..sort();\n  for (String key in sortedKeys)\n    pairs.add('$key: ${dataMap[key]}');\n  return '$runtimeType(${pairs.join(', ')})';\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsEvent\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsEvent",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The type of this event.<\/p>\n<p>The type is used by the engine to translate this event into the\nappropriate native event (<code>UIAccessibility*Notification<\/code> on iOS and\n<code>AccessibilityEvent<\/code> on Android).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String type\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsEvent\/type.html",
                    "name": "type",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsEvent",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Provides hint values which override the default hints on supported\nplatforms.<\/p>\n<p>On iOS, these values are always ignored.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsHintOverrides-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsHintOverrides",
            "shortname": "SemanticsHintOverrides",
            "extends": [
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a semantics hint overrides.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsHintOverrides({\n  this.onTapHint,\n  this.onLongPressHint,\n}) : assert(onTapHint != ''),\n     assert(onLongPressHint != '');<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsHintOverrides\/SemanticsHintOverrides.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsHintOverrides",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsHintOverrides",
                    "params": [
                        {
                            "name": "onLongPressHint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "onTapHint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsHintOverrides\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(StringProperty('onTapHint', onTapHint, defaultValue: null));\n  properties.add(StringProperty('onLongPressHint', onLongPressHint, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsHintOverrides\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsHintOverrides",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The hash code for this object.<\/p>\n<p>A hash code is a single integer which represents the state of the object\nthat affects <a href=\"semantics\/SemanticsHintOverrides\/operator_equals.html\">operator ==<\/a> comparisons.<\/p>\n<p>All objects have hash codes.\nThe default hash code represents only the identity of the object,\nthe same way as the default <a href=\"semantics\/SemanticsHintOverrides\/operator_equals.html\">operator ==<\/a> implementation only considers objects\nequal if they are identical (see <a href=\"dart-core\/identityHashCode.html\">identityHashCode<\/a>).<\/p>\n<p>If <a href=\"semantics\/SemanticsHintOverrides\/operator_equals.html\">operator ==<\/a> is overridden to use the object state instead,\nthe hash code must also be changed to represent that state.<\/p>\n<p>Hash codes must be the same for objects that are equal to each other\naccording to <a href=\"semantics\/SemanticsHintOverrides\/operator_equals.html\">operator ==<\/a>.\nThe hash code of an object should only change if the object changes\nin a way that affects equality.\nThere are no further requirements for the hash codes.\nThey need not be consistent between executions of the same program\nand there are no distribution guarantees.<\/p>\n<p>Objects that are not equal are allowed to have the same hash code,\nit is even technically allowed that all instances have the same hash code,\nbut if clashes happen too often, it may reduce the efficiency of hash-based\ndata structures like <a href=\"dart-collection\/HashSet-class.html\">HashSet<\/a> or <a href=\"dart-collection\/HashMap-class.html\">HashMap<\/a>.<\/p>\n<p>If a subclass overrides <a href=\"semantics\/SemanticsHintOverrides\/hashCode.html\">hashCode<\/a>, it should override the\n<a href=\"semantics\/SemanticsHintOverrides\/operator_equals.html\">operator ==<\/a> operator as well to maintain consistency.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint get hashCode =&gt; ui.hashValues(onTapHint, onLongPressHint);<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsHintOverrides\/hashCode.html",
                    "name": "hashCode",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsHintOverrides",
                    "params": []
                },
                {
                    "desc": "<p>Whether there are any non-null hint values.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isNotEmpty =&gt; onTapHint != null || onLongPressHint != null;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsHintOverrides\/isNotEmpty.html",
                    "name": "isNotEmpty",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsHintOverrides",
                    "params": []
                },
                {
                    "desc": "<p>The hint text for a long press action.<\/p>\n<p>If null, the standard hint is used instead.<\/p>\n<p>The hint should describe what happens when a long press occurs, not\nthe manner in which the long press is accomplished.<\/p>\n<p>Bad: 'Double tap and hold to show tooltip'.\nGood: 'show tooltip'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String onLongPressHint\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsHintOverrides\/onLongPressHint.html",
                    "name": "onLongPressHint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsHintOverrides",
                    "params": []
                },
                {
                    "desc": "<p>The hint text for a tap action.<\/p>\n<p>If null, the standard hint is used instead.<\/p>\n<p>The hint should describe what happens when a tap occurs, not the\nmanner in which a tap is accomplished.<\/p>\n<p>Bad: 'Double tap to show movies'.\nGood: 'show movies'.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String onTapHint\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsHintOverrides\/onTapHint.html",
                    "name": "onTapHint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsHintOverrides",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A node that represents some semantic data.<\/p>\n<p>The semantics tree is maintained during the semantics phase of the pipeline\n(i.e., during <a href=\"rendering\/PipelineOwner\/flushSemantics.html\">PipelineOwner.flushSemantics<\/a>), which happens after\ncompositing. The semantics tree is then uploaded into the engine for use\nby assistive technology.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsNode-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsNode",
            "shortname": "SemanticsNode",
            "extends": [
                "foundation.AbstractNode",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a semantic node.<\/p>\n<p>Each semantic node has a unique identifier that is assigned when the node\nis created.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsNode({\n  this.key,\n  VoidCallback showOnScreen,\n}) : id = _generateNewId(),\n     _showOnScreen = showOnScreen;<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/SemanticsNode.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsNode",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "key",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "foundation.Key"
                        },
                        {
                            "name": "showOnScreen",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        }
                    ]
                },
                {
                    "desc": "<p>Mark this node as attached to the given owner.<\/p>\n<p>Typically called only from the <a href=\"semantics\/SemanticsNode\/parent.html\">parent<\/a>'s <a href=\"semantics\/SemanticsNode\/attach.html\">attach<\/a> method, and by the\n<code>owner<\/code> to mark the root of a tree as attached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"semantics\/SemanticsNode\/attach.html\">attach<\/a> method, and then <a href=\"semantics\/SemanticsNode\/attach.html\">attach<\/a> all their children to the\nsame <code>owner<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid attach(SemanticsOwner owner) {\n  super.attach(owner);\n  assert(!owner._nodes.containsKey(id));\n  owner._nodes[id] = this;\n  owner._detachedNodes.remove(this);\n  if (_dirty) {\n    _dirty = false;\n    _markDirty();\n  }\n  if (_children != null) {\n    for (SemanticsNode child in _children)\n      child.attach(owner);\n  }\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/attach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "attach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "owner",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsOwner"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a list of <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects describing this node's\nchildren.<\/p>\n<p>Children that are offstage should be added with <code>style<\/code> set to\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that they are offstage.<\/p>\n<p>The list must not contain any null entries. If there are explicit null\nchildren to report, consider <a href=\"foundation\/DiagnosticsNode\/DiagnosticsNode.message.html\">new DiagnosticsNode.message<\/a> or\n<a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty&lt;Object&gt;<\/a> as possible <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> objects to\nprovide.<\/p>\n<p>Used by <a href=\"semantics\/SemanticsNode\/toStringDeep.html\">toStringDeep<\/a>, <a href=\"semantics\/SemanticsNode\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toStringShallow.html\">toStringShallow<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsNode\/debugDescribeChildren.html\">RenderTable.debugDescribeChildren<\/a>, which provides high quality custom\ndescriptions for its child nodes.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nList&lt;DiagnosticsNode&gt; debugDescribeChildren({ DebugSemanticsDumpOrder childOrder = DebugSemanticsDumpOrder.inverseHitTest }) {\n  return debugListChildrenInOrder(childOrder)\n    .map&lt;DiagnosticsNode&gt;((SemanticsNode node) =&gt; node.toDiagnosticsNode(childOrder: childOrder))\n    .toList();\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/debugDescribeChildren.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<foundation.DiagnosticsNode>",
                    "name": "debugDescribeChildren",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "childOrder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.DebugSemanticsDumpOrder"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsNode\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"semantics\/SemanticsNode\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  bool hideOwner = true;\n  if (_dirty) {\n    final bool inDirtyNodes = owner != null &amp;&amp; owner._dirtyNodes.contains(this);\n    properties.add(FlagProperty('inDirtyNodes', value: inDirtyNodes, ifTrue: 'dirty', ifFalse: 'STALE'));\n    hideOwner = inDirtyNodes;\n  }\n  properties.add(DiagnosticsProperty&lt;SemanticsOwner&gt;('owner', owner, level: hideOwner ? DiagnosticLevel.hidden : DiagnosticLevel.info));\n  properties.add(FlagProperty('isMergedIntoParent', value: isMergedIntoParent, ifTrue: 'merged up \u2b06\ufe0f'));\n  properties.add(FlagProperty('mergeAllDescendantsIntoThisNode', value: mergeAllDescendantsIntoThisNode, ifTrue: 'merge boundary \u26d4\ufe0f'));\n  final Offset offset = transform != null ? MatrixUtils.getAsTranslation(transform) : null;\n  if (offset != null) {\n    properties.add(DiagnosticsProperty&lt;Rect&gt;('rect', rect.shift(offset), showName: false));\n  } else {\n    final double scale = transform != null ? MatrixUtils.getAsScale(transform) : null;\n    String description;\n    if (scale != null) {\n      description = '$rect scaled by ${scale.toStringAsFixed(1)}x';\n    } else if (transform != null &amp;&amp; !MatrixUtils.isIdentity(transform)) {\n      final String matrix = transform.toString().split('\\n').take(4).map&lt;String&gt;((String line) =&gt; line.substring(4)).join('; ');\n      description = '$rect with transform [$matrix]';\n    }\n    properties.add(DiagnosticsProperty&lt;Rect&gt;('rect', rect, description: description, showName: false));\n  }\n  final List&lt;String&gt; actions = _actions.keys.map&lt;String&gt;((SemanticsAction action) =&gt; describeEnum(action)).toList()..sort();\n  final List&lt;String&gt; customSemanticsActions = _customSemanticsActions.keys\n    .map&lt;String&gt;((CustomSemanticsAction action) =&gt; action.label)\n    .toList();\n  properties.add(IterableProperty&lt;String&gt;('actions', actions, ifEmpty: null));\n  properties.add(IterableProperty&lt;String&gt;('customActions', customSemanticsActions, ifEmpty: null));\n  final List&lt;String&gt; flags = SemanticsFlag.values.values.where((SemanticsFlag flag) =&gt; hasFlag(flag)).map((SemanticsFlag flag) =&gt; flag.toString().substring('SemanticsFlag.'.length)).toList();\n  properties.add(IterableProperty&lt;String&gt;('flags', flags, ifEmpty: null));\n  properties.add(FlagProperty('isInvisible', value: isInvisible, ifTrue: 'invisible'));\n  properties.add(FlagProperty('isHidden', value: hasFlag(SemanticsFlag.isHidden), ifTrue: 'HIDDEN'));\n  properties.add(StringProperty('label', _label, defaultValue: ''));\n  properties.add(StringProperty('value', _value, defaultValue: ''));\n  properties.add(StringProperty('increasedValue', _increasedValue, defaultValue: ''));\n  properties.add(StringProperty('decreasedValue', _decreasedValue, defaultValue: ''));\n  properties.add(StringProperty('hint', _hint, defaultValue: ''));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', _textDirection, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;SemanticsSortKey&gt;('sortKey', sortKey, defaultValue: null));\n  if (_textSelection?.isValid == true)\n    properties.add(MessageProperty('text selection', '[${_textSelection.start}, ${_textSelection.end}]'));\n  properties.add(IntProperty('platformViewId', platformViewId, defaultValue: null));\n  properties.add(IntProperty('scrollChildren', scrollChildCount, defaultValue: null));\n  properties.add(IntProperty('scrollIndex', scrollIndex, defaultValue: null));\n  properties.add(DoubleProperty('scrollExtentMin', scrollExtentMin, defaultValue: null));\n  properties.add(DoubleProperty('scrollPosition', scrollPosition, defaultValue: null));\n  properties.add(DoubleProperty('scrollExtentMax', scrollExtentMax, defaultValue: null));\n  properties.add(DoubleProperty('elevation', elevation, defaultValue: 0.0));\n  properties.add(DoubleProperty('thicknes', thickness, defaultValue: 0.0));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the list of direct children of this node in the specified order.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">List&lt;SemanticsNode&gt; debugListChildrenInOrder(DebugSemanticsDumpOrder childOrder) {\n  assert(childOrder != null);\n  if (_children == null)\n    return const &lt;SemanticsNode&gt;[];\n\n  switch (childOrder) {\n    case DebugSemanticsDumpOrder.inverseHitTest:\n      return _children;\n    case DebugSemanticsDumpOrder.traversalOrder:\n      return _childrenInTraversalOrder();\n  }\n  assert(false);\n  return null;\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/debugListChildrenInOrder.html",
                    "isDeprecated": false,
                    "type": "dart:core.List<semantics.SemanticsNode>",
                    "name": "debugListChildrenInOrder",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "childOrder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.DebugSemanticsDumpOrder"
                        }
                    ]
                },
                {
                    "desc": "<p>Mark this node as detached.<\/p>\n<p>Typically called only from the <a href=\"semantics\/SemanticsNode\/parent.html\">parent<\/a>'s <a href=\"semantics\/SemanticsNode\/detach.html\">detach<\/a>, and by the <a href=\"semantics\/SemanticsNode\/owner.html\">owner<\/a> to\nmark the root of a tree as detached.<\/p>\n<p>Subclasses with children should override this method to first call their\ninherited <a href=\"semantics\/SemanticsNode\/detach.html\">detach<\/a> method, and then <a href=\"semantics\/SemanticsNode\/detach.html\">detach<\/a> all their children.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid detach() {\n  assert(owner._nodes.containsKey(id));\n  assert(!owner._detachedNodes.contains(this));\n  owner._nodes.remove(id);\n  owner._detachedNodes.add(this);\n  super.detach();\n  assert(owner == null);\n  if (_children != null) {\n    for (SemanticsNode child in _children) {\n      \/\/ The list of children may be stale and may contain nodes that have\n      \/\/ been assigned to a different parent.\n      if (child.parent == this)\n        child.detach();\n    }\n  }\n  \/\/ The other side will have forgotten this node if we ever send\n  \/\/ it again, so make sure to mark it dirty so that it'll get\n  \/\/ sent if it is resurrected.\n  _markDirty();\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/detach.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "detach",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Returns a summary of the semantics for this node.<\/p>\n<p>If this node has <a href=\"semantics\/SemanticsNode\/mergeAllDescendantsIntoThisNode.html\">mergeAllDescendantsIntoThisNode<\/a>, then the returned data\nincludes the information from this node's descendants. Otherwise, the\nreturned data matches the data on this node.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsData getSemanticsData() {\n  int flags = _flags;\n  int actions = _actionsAsBits;\n  String label = _label;\n  String hint = _hint;\n  String value = _value;\n  String increasedValue = _increasedValue;\n  String decreasedValue = _decreasedValue;\n  TextDirection textDirection = _textDirection;\n  Set&lt;SemanticsTag&gt; mergedTags = tags == null ? null : Set&lt;SemanticsTag&gt;.from(tags);\n  TextSelection textSelection = _textSelection;\n  int scrollChildCount = _scrollChildCount;\n  int scrollIndex = _scrollIndex;\n  double scrollPosition = _scrollPosition;\n  double scrollExtentMax = _scrollExtentMax;\n  double scrollExtentMin = _scrollExtentMin;\n  int platformViewId = _platformViewId;\n  final double elevation = _elevation;\n  double thickness = _thickness;\n  final Set&lt;int&gt; customSemanticsActionIds = &lt;int&gt;{};\n  for (CustomSemanticsAction action in _customSemanticsActions.keys)\n    customSemanticsActionIds.add(CustomSemanticsAction.getIdentifier(action));\n  if (hintOverrides != null) {\n    if (hintOverrides.onTapHint != null) {\n      final CustomSemanticsAction action = CustomSemanticsAction.overridingAction(\n        hint: hintOverrides.onTapHint,\n        action: SemanticsAction.tap,\n      );\n      customSemanticsActionIds.add(CustomSemanticsAction.getIdentifier(action));\n    }\n    if (hintOverrides.onLongPressHint != null) {\n      final CustomSemanticsAction action = CustomSemanticsAction.overridingAction(\n        hint: hintOverrides.onLongPressHint,\n        action: SemanticsAction.longPress,\n      );\n      customSemanticsActionIds.add(CustomSemanticsAction.getIdentifier(action));\n    }\n  }\n\n  if (mergeAllDescendantsIntoThisNode) {\n    _visitDescendants((SemanticsNode node) {\n      assert(node.isMergedIntoParent);\n      flags |= node._flags;\n      actions |= node._actionsAsBits;\n      textDirection ??= node._textDirection;\n      textSelection ??= node._textSelection;\n      scrollChildCount ??= node._scrollChildCount;\n      scrollIndex ??= node._scrollIndex;\n      scrollPosition ??= node._scrollPosition;\n      scrollExtentMax ??= node._scrollExtentMax;\n      scrollExtentMin ??= node._scrollExtentMin;\n      platformViewId ??= node._platformViewId;\n      if (value == '' || value == null)\n        value = node._value;\n      if (increasedValue == '' || increasedValue == null)\n        increasedValue = node._increasedValue;\n      if (decreasedValue == '' || decreasedValue == null)\n        decreasedValue = node._decreasedValue;\n      if (node.tags != null) {\n        mergedTags ??= &lt;SemanticsTag&gt;{};\n        mergedTags.addAll(node.tags);\n      }\n      if (node._customSemanticsActions != null) {\n        for (CustomSemanticsAction action in _customSemanticsActions.keys)\n          customSemanticsActionIds.add(CustomSemanticsAction.getIdentifier(action));\n      }\n      if (node.hintOverrides != null) {\n        if (node.hintOverrides.onTapHint != null) {\n          final CustomSemanticsAction action = CustomSemanticsAction.overridingAction(\n            hint: node.hintOverrides.onTapHint,\n            action: SemanticsAction.tap,\n          );\n          customSemanticsActionIds.add(CustomSemanticsAction.getIdentifier(action));\n        }\n        if (node.hintOverrides.onLongPressHint != null) {\n          final CustomSemanticsAction action = CustomSemanticsAction.overridingAction(\n            hint: node.hintOverrides.onLongPressHint,\n            action: SemanticsAction.longPress,\n          );\n          customSemanticsActionIds.add(CustomSemanticsAction.getIdentifier(action));\n        }\n      }\n      label = _concatStrings(\n        thisString: label,\n        thisTextDirection: textDirection,\n        otherString: node._label,\n        otherTextDirection: node._textDirection,\n      );\n      hint = _concatStrings(\n        thisString: hint,\n        thisTextDirection: textDirection,\n        otherString: node._hint,\n        otherTextDirection: node._textDirection,\n      );\n\n      thickness = math.max(thickness, node._thickness + node._elevation);\n\n      return true;\n    });\n  }\n\n  return SemanticsData(\n    flags: flags,\n    actions: actions,\n    label: label,\n    value: value,\n    increasedValue: increasedValue,\n    decreasedValue: decreasedValue,\n    hint: hint,\n    textDirection: textDirection,\n    rect: rect,\n    transform: transform,\n    elevation: elevation,\n    thickness: thickness,\n    tags: mergedTags,\n    textSelection: textSelection,\n    scrollChildCount: scrollChildCount,\n    scrollIndex: scrollIndex,\n    scrollPosition: scrollPosition,\n    scrollExtentMax: scrollExtentMax,\n    scrollExtentMin: scrollExtentMin,\n    platformViewId: platformViewId,\n    customSemanticsActionIds: customSemanticsActionIds.toList()..sort(),\n  );\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/getSemanticsData.html",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsData",
                    "name": "getSemanticsData",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Whether this node currently has a given <a href=\"dart-ui\/SemanticsFlag-class.html\">SemanticsFlag<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool hasFlag(SemanticsFlag flag) =&gt; _flags &amp; flag.index != 0;<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/hasFlag.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "hasFlag",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "flag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.SemanticsFlag"
                        }
                    ]
                },
                {
                    "desc": "<p>Whether this node is tagged with <code>tag<\/code>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">bool isTagged(SemanticsTag tag) =&gt; tags != null &amp;&amp; tags.contains(tag);<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/isTagged.html",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "name": "isTagged",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "tag",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsTag"
                        }
                    ]
                },
                {
                    "desc": "<p>Adjust the <a href=\"foundation\/AbstractNode\/depth.html\">depth<\/a> of this node's children, if any.<\/p>\n<p>Override this method in subclasses with child nodes to call <a href=\"foundation\/AbstractNode\/redepthChild.html\">redepthChild<\/a>\nfor each child. Do not call this method directly.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid redepthChildren() {\n  _children?.forEach(redepthChild);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/redepthChildren.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "redepthChildren",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Sends a <a href=\"semantics\/SemanticsEvent-class.html\">SemanticsEvent<\/a> associated with this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>Semantics events should be sent to inform interested parties (like\nthe accessibility system of the operating system) about changes to the UI.<\/p>\n<p>For example, if this semantics node represents a scrollable list, a\n<code>ScrollCompletedSemanticsEvent<\/code> should be sent after a scroll action is completed.\nThat way, the operating system can give additional feedback to the user\nabout the state of the UI (e.g. on Android a ping sound is played to\nindicate a successful scroll in accessibility mode).<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sendEvent(SemanticsEvent event) {\n  if (!attached)\n    return;\n  SystemChannels.accessibility.send(event.toMap(nodeId: id));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/sendEvent.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "sendEvent",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "event",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsEvent"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a debug representation of the object that is used by debugging\ntools and by <a href=\"semantics\/SemanticsNode\/toStringDeep.html\">DiagnosticsNode.toStringDeep<\/a>.<\/p>\n<p>Leave <code>name<\/code> as null if there is not a meaningful description of the\nrelationship between the this node and its parent.<\/p>\n<p>Typically the <code>style<\/code> argument is only specified to indicate an atypical\nrelationship between the parent and the node. For example, pass\n<a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle.offstage<\/a> to indicate that a node is offstage.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nDiagnosticsNode toDiagnosticsNode({\n  String name,\n  DiagnosticsTreeStyle style = DiagnosticsTreeStyle.sparse,\n  DebugSemanticsDumpOrder childOrder = DebugSemanticsDumpOrder.traversalOrder,\n}) {\n  return _SemanticsDiagnosticableNode(\n    name: name,\n    value: this,\n    style: style,\n    childOrder: childOrder,\n  );\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/toDiagnosticsNode.html",
                    "isDeprecated": false,
                    "type": "foundation.DiagnosticsNode",
                    "name": "toDiagnosticsNode",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "childOrder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.DebugSemanticsDumpOrder"
                        },
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "style",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticsTreeStyle"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this node and its descendants.<\/p>\n<p>The order in which the children of the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> will be printed is\ncontrolled by the <code>childOrder<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringDeep({\n  String prefixLineOne = '',\n  String prefixOtherLines,\n  DiagnosticLevel minLevel = DiagnosticLevel.debug,\n  DebugSemanticsDumpOrder childOrder = DebugSemanticsDumpOrder.traversalOrder,\n}) {\n  assert(childOrder != null);\n  return toDiagnosticsNode(childOrder: childOrder).toStringDeep(prefixLineOne: prefixLineOne, prefixOtherLines: prefixOtherLines, minLevel: minLevel);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/toStringDeep.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringDeep",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "childOrder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.DebugSemanticsDumpOrder"
                        },
                        {
                            "name": "minLevel",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticLevel"
                        },
                        {
                            "name": "prefixLineOne",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "prefixOtherLines",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/DiagnosticableTreeMixin\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType#$id';<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/toStringShort.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringShort",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Reconfigures the properties of this object to describe the configuration\nprovided in the <code>config<\/code> argument and the children listed in the\n<code>childrenInInversePaintOrder<\/code> argument.<\/p>\n<p>The arguments may be null; this represents an empty configuration (all\nvalues at their defaults, no children).<\/p>\n<p>No reference is kept to the <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a> object, but the child\nlist is used as-is and should therefore not be changed after this call.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void updateWith({\n  @required SemanticsConfiguration config,\n  List&lt;SemanticsNode&gt; childrenInInversePaintOrder,\n}) {\n  config ??= _kEmptyConfig;\n  if (_isDifferentFromCurrentSemanticAnnotation(config))\n    _markDirty();\n\n  assert(\n    config.platformViewId == null || childrenInInversePaintOrder.isEmpty,\n    'SemanticsNodes with children must not specify a platformViewId.'\n  );\n\n  _label = config.label;\n  _decreasedValue = config.decreasedValue;\n  _value = config.value;\n  _increasedValue = config.increasedValue;\n  _hint = config.hint;\n  _hintOverrides = config.hintOverrides;\n  _elevation = config.elevation;\n  _thickness = config.thickness;\n  _flags = config._flags;\n  _textDirection = config.textDirection;\n  _sortKey = config.sortKey;\n  _actions = Map&lt;SemanticsAction, _SemanticsActionHandler&gt;.from(config._actions);\n  _customSemanticsActions = Map&lt;CustomSemanticsAction, VoidCallback&gt;.from(config._customSemanticsActions);\n  _actionsAsBits = config._actionsAsBits;\n  _textSelection = config._textSelection;\n  _scrollPosition = config._scrollPosition;\n  _scrollExtentMax = config._scrollExtentMax;\n  _scrollExtentMin = config._scrollExtentMin;\n  _mergeAllDescendantsIntoThisNode = config.isMergingSemanticsOfDescendants;\n  _scrollChildCount = config.scrollChildCount;\n  _scrollIndex = config.scrollIndex;\n  indexInParent = config.indexInParent;\n  _platformViewId = config._platformViewId;\n  _replaceChildren(childrenInInversePaintOrder ?? const &lt;SemanticsNode&gt;[]);\n\n  assert(\n    !_canPerformAction(SemanticsAction.increase) || (_value == '') == (_increasedValue == ''),\n    'A SemanticsNode with action \"increase\" needs to be annotated with either both \"value\" and \"increasedValue\" or neither',\n  );\n  assert(\n    !_canPerformAction(SemanticsAction.decrease) || (_value == '') == (_decreasedValue == ''),\n    'A SemanticsNode with action \"increase\" needs to be annotated with either both \"value\" and \"decreasedValue\" or neither',\n  );\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/updateWith.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "updateWith",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "childrenInInversePaintOrder",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.List<semantics.SemanticsNode>"
                        },
                        {
                            "name": "config",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsConfiguration"
                        }
                    ]
                },
                {
                    "desc": "<p>Visits the immediate children of this node.<\/p>\n<p>This function calls visitor for each immediate child until visitor returns\nfalse. Returns true if all the visitor calls returned true, otherwise\nreturns false.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void visitChildren(SemanticsNodeVisitor visitor) {\n  if (_children != null) {\n    for (SemanticsNode child in _children) {\n      if (!visitor(child))\n        return;\n    }\n  }\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsNode\/visitChildren.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "visitChildren",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": [
                        {
                            "name": "visitor",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsNodeVisitor"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>The number of children this node has.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get childrenCount =&gt; hasChildren ? _children.length : 0;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/childrenCount.html",
                    "name": "childrenCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsNode\/value.html\">value<\/a> will have after a <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action\nhas been performed.<\/p>\n<p>This property is only valid if the <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a> action is\navailable on this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsNode\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get decreasedValue =&gt; _decreasedValue;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/decreasedValue.html",
                    "name": "decreasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The elevation along the z-axis at which the <a href=\"semantics\/SemanticsNode\/rect.html\">rect<\/a> of this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>\nis located above its parent.<\/p>\n<p>The value is relative to the parent's <a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a>. The sum of the\n<a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a>s of all ancestor node plus this value determines the absolute\nelevation of this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsNode\/thickness.html\">thickness<\/a>, which describes how much space in z-direction this\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> occupies starting at this <a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a>.<\/li>\n<li>\n<a href=\"semantics\/SemanticsNode\/elevationAdjustment.html\">elevationAdjustment<\/a>, which has been used to calculate this value.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get elevation =&gt; _elevation;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/elevation.html",
                    "name": "elevation",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The elevation adjustment that the parent imposes on this node.<\/p>\n<p>The <a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a> property is relative to the elevation of the parent\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>. However, as <a href=\"semantics\/SemanticsConfiguration-class.html\">SemanticsConfiguration<\/a>s from various\nascending <code>RenderObjects<\/code> are merged into each other to form that\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> the parent\u2019s elevation may change. This requires an\nadjustment of the child\u2019s relative elevation which is represented by this\nvalue.<\/p>\n<p>The value is rarely accessed directly. Instead, for most use cases the\n<a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a> value should be used, which includes this adjustment.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a>, the actual elevation of this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double elevationAdjustment\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/elevationAdjustment.html",
                    "name": "elevationAdjustment",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Whether this node has a non-zero number of children.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get hasChildren =&gt; _children?.isNotEmpty ?? false;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/hasChildren.html",
                    "name": "hasChildren",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>A brief description of the result of performing an action on this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsNode\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get hint =&gt; _hint;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/hint.html",
                    "name": "hint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Provides hint values which override the default hints on supported\nplatforms.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsHintOverrides get hintOverrides =&gt; _hintOverrides;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/hintOverrides.html",
                    "name": "hintOverrides",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsHintOverrides",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The unique identifier for this node.<\/p>\n<p>The root node has an id of zero. Other nodes are given a unique id when\nthey are created.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final int id\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/id.html",
                    "name": "id",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsNode\/value.html\">value<\/a> will have after a <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> action\nhas been performed.<\/p>\n<p>This property is only valid if the <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a> action is\navailable on this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsNode\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get increasedValue =&gt; _increasedValue;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/increasedValue.html",
                    "name": "increasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The index of this node within the parent's list of semantic children.<\/p>\n<p>This includes all semantic nodes, not just those currently in the\nchild list. For example, if a scrollable has five children but the first\ntwo are not visible (and thus not included in the list of children), then\nthe index of the last node will still be 4.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int indexInParent\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/indexInParent.html",
                    "name": "indexInParent",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Whether the node is invisible.<\/p>\n<p>A node whose <a href=\"semantics\/SemanticsNode\/rect.html\">rect<\/a> is outside of the bounds of the screen and hence not\nreachable for users is considered invisible if its semantic information\nis not merged into a (partially) visible parent as indicated by\n<a href=\"semantics\/SemanticsNode\/isMergedIntoParent.html\">isMergedIntoParent<\/a>.<\/p>\n<p>An invisible node can be safely dropped from the semantic tree without\nloosing semantic information that is relevant for describing the content\ncurrently shown on screen.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isInvisible =&gt; !isMergedIntoParent &amp;&amp; rect.isEmpty;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/isInvisible.html",
                    "name": "isInvisible",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Whether this node merges its semantic information into an ancestor node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isMergedIntoParent =&gt; _isMergedIntoParent;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/isMergedIntoParent.html",
                    "name": "isMergedIntoParent",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Whether this node is taking part in a merge of semantic information.<\/p>\n<p>This returns true if the node is either merged into an ancestor node or if\ndecedent nodes are merged into this node.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"semantics\/SemanticsNode\/isMergedIntoParent.html\">isMergedIntoParent<\/a><\/li>\n<li><a href=\"semantics\/SemanticsNode\/mergeAllDescendantsIntoThisNode.html\">mergeAllDescendantsIntoThisNode<\/a><\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get isPartOfNodeMerging =&gt; mergeAllDescendantsIntoThisNode || isMergedIntoParent;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/isPartOfNodeMerging.html",
                    "name": "isPartOfNodeMerging",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Uniquely identifies this node in the list of sibling nodes.<\/p>\n<p>Keys are used during the construction of the semantics tree. They are not\ntransferred to the engine.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Key key\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/key.html",
                    "name": "key",
                    "isDeprecated": false,
                    "type": "foundation.Key",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>A textual description of this node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsNode\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get label =&gt; _label;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/label.html",
                    "name": "label",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Whether this node and all of its descendants should be treated as one logical entity.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">bool get mergeAllDescendantsIntoThisNode =&gt; _mergeAllDescendantsIntoThisNode;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/mergeAllDescendantsIntoThisNode.html",
                    "name": "mergeAllDescendantsIntoThisNode",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The owner for this node (null if unattached).<\/p>\n<p>The entire subtree that this node belongs to will have the same owner.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSemanticsOwner get owner =&gt; super.owner;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/owner.html",
                    "name": "owner",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsOwner",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The parent of this node in the tree.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">@override\nSemanticsNode get parent =&gt; super.parent;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/parent.html",
                    "name": "parent",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsNode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The paint clip from an ancestor that was applied to this node.<\/p>\n<p>Expressed in the coordinate system of the node. May be null if no clip has\nbeen applied.<\/p>\n<p>Descendant <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s that are positioned outside of this rect will\neither be excluded from the semantics tree (if they have no overlap with\n<a href=\"semantics\/SemanticsNode\/parentSemanticsClipRect.html\">parentSemanticsClipRect<\/a>) or they will be included and marked as hidden\n(if they are overlapping with <a href=\"semantics\/SemanticsNode\/parentSemanticsClipRect.html\">parentSemanticsClipRect<\/a>).<\/p>\n<p>This rect is completely enclosed by <a href=\"semantics\/SemanticsNode\/parentSemanticsClipRect.html\">parentSemanticsClipRect<\/a>.<\/p>\n<p>If this rect is null <a href=\"semantics\/SemanticsNode\/parentSemanticsClipRect.html\">parentSemanticsClipRect<\/a> also has to be null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect parentPaintClipRect\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/parentPaintClipRect.html",
                    "name": "parentPaintClipRect",
                    "isDeprecated": false,
                    "type": "dart:ui.Rect",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The semantic clip from an ancestor that was applied to this node.<\/p>\n<p>Expressed in the coordinate system of the node. May be null if no clip has\nbeen applied.<\/p>\n<p>Descendant <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s that are positioned outside of this rect will\nbe excluded from the semantics tree. Descendant <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s that are\noverlapping with this rect, but are outside of <a href=\"semantics\/SemanticsNode\/parentPaintClipRect.html\">parentPaintClipRect<\/a> will\nbe included in the tree, but they will be marked as hidden because they\nare assumed to be not visible on screen.<\/p>\n<p>If this rect is null, all descendant <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s outside of\n<a href=\"semantics\/SemanticsNode\/parentPaintClipRect.html\">parentPaintClipRect<\/a> will be excluded from the tree.<\/p>\n<p>If this rect is non-null it has to completely enclose\n<a href=\"semantics\/SemanticsNode\/parentPaintClipRect.html\">parentPaintClipRect<\/a>. If <a href=\"semantics\/SemanticsNode\/parentPaintClipRect.html\">parentPaintClipRect<\/a> is null this property is\nalso null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect parentSemanticsClipRect\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/parentSemanticsClipRect.html",
                    "name": "parentSemanticsClipRect",
                    "isDeprecated": false,
                    "type": "dart:ui.Rect",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The id of the platform view, whose semantics nodes will be added as\nchildren to this node.<\/p>\n<p>If this value is non-null, the SemanticsNode must not have any children\nas those would be replaced by the semantics nodes of the referenced\nplatform view.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"widgets\/AndroidView-class.html\">AndroidView<\/a>, which is the platform view for Android.<\/li>\n<li>\n<a href=\"widgets\/UiKitView-class.html\">UiKitView<\/a>, which is the platform view for iOS.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get platformViewId =&gt; _platformViewId;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/platformViewId.html",
                    "name": "platformViewId",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The bounding box for this node in its coordinate system.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Rect get rect =&gt; _rect;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/rect.html",
                    "name": "rect",
                    "isDeprecated": false,
                    "type": "dart:ui.Rect",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The total number of scrollable children that contribute to semantics.<\/p>\n<p>If the number of children are unknown or unbounded, this value will be\nnull.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get scrollChildCount =&gt; _scrollChildCount;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/scrollChildCount.html",
                    "name": "scrollChildCount",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the maximum in-range value for <a href=\"semantics\/SemanticsNode\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/maxScrollExtent.html\">ScrollPosition.maxScrollExtent<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollExtentMax =&gt; _scrollExtentMax;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/scrollExtentMax.html",
                    "name": "scrollExtentMax",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the minimum in-range value for <a href=\"semantics\/SemanticsNode\/scrollPosition.html\">scrollPosition<\/a> if the node is\nscrollable.<\/p>\n<p>This value may be infinity if the scroll is unbound.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/minScrollExtent.html\">ScrollPosition.minScrollExtent<\/a> from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollExtentMin =&gt; _scrollExtentMin;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/scrollExtentMin.html",
                    "name": "scrollExtentMin",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The index of the first visible semantic child of a scroll node.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">int get scrollIndex =&gt; _scrollIndex;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/scrollIndex.html",
                    "name": "scrollIndex",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Indicates the current scrolling position in logical pixels if the node is\nscrollable.<\/p>\n<p>The properties <a href=\"semantics\/SemanticsNode\/scrollExtentMin.html\">scrollExtentMin<\/a> and <a href=\"semantics\/SemanticsNode\/scrollExtentMax.html\">scrollExtentMax<\/a> indicate the valid\nin-range values for this property. The value for <a href=\"semantics\/SemanticsNode\/scrollPosition.html\">scrollPosition<\/a> may\n(temporarily) be outside that range, e.g. during an overscroll.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"widgets\/ScrollPosition\/pixels.html\">ScrollPosition.pixels<\/a>, from where this value is usually taken.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get scrollPosition =&gt; _scrollPosition;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/scrollPosition.html",
                    "name": "scrollPosition",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Determines the position of this node among its siblings in the traversal\nsort order.<\/p>\n<p>This is used to describe the order in which the semantic node should be\ntraversed by the accessibility services on the platform (e.g. VoiceOver\non iOS and TalkBack on Android).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsSortKey get sortKey =&gt; _sortKey;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/sortKey.html",
                    "name": "sortKey",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsSortKey",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a>s this node is tagged with.<\/p>\n<p>Tags are used during the construction of the semantics tree. They are not\ntransferred to the engine.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Set&lt;SemanticsTag&gt; tags\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/tags.html",
                    "name": "tags",
                    "isDeprecated": false,
                    "type": "dart:core.Set<semantics.SemanticsTag>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The reading direction for <a href=\"semantics\/SemanticsNode\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsNode\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsNode\/hint.html\">hint<\/a>, <a href=\"semantics\/SemanticsNode\/increasedValue.html\">increasedValue<\/a>, and\n<a href=\"semantics\/SemanticsNode\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextDirection get textDirection =&gt; _textDirection;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/textDirection.html",
                    "name": "textDirection",
                    "isDeprecated": false,
                    "type": "dart:ui.TextDirection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The currently selected text (or the position of the cursor) within <a href=\"semantics\/SemanticsNode\/value.html\">value<\/a>\nif this node represents a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">TextSelection get textSelection =&gt; _textSelection;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/textSelection.html",
                    "name": "textSelection",
                    "isDeprecated": false,
                    "type": "services.TextSelection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>Describes how much space the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> takes up along the z-axis.<\/p>\n<p>A <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> represents multiple <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s, which can be\nlocated at various elevations in 3D. The <a href=\"semantics\/SemanticsNode\/thickness.html\">thickness<\/a> is the difference\nbetween the absolute elevations of the lowest and highest <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>\nrepresented by this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>. In other words, the thickness\ndescribes how high the box is that this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> occupies in three\ndimensional space. The two other dimensions are defined by <a href=\"semantics\/SemanticsNode\/rect.html\">rect<\/a>.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThe following code stacks three <a href=\"widgets\/PhysicalModel-class.html\">PhysicalModel<\/a>s on top of each other\nseparated by non-zero elevations.\n<p><a href=\"widgets\/PhysicalModel-class.html\">PhysicalModel<\/a> C is elevated 10.0 above <a href=\"widgets\/PhysicalModel-class.html\">PhysicalModel<\/a> B, which in turn\nis elevated 5.0 above <a href=\"widgets\/PhysicalModel-class.html\">PhysicalModel<\/a> A. The side view of this\nconstellation looks as follows:<\/p>\n<p><img alt=\"A diagram illustrating the elevations of three PhysicalModels and their\ncorresponding SemanticsNodes.\" src=\"https:\/\/flutter.github.io\/assets-for-api-docs\/assets\/semantics\/SemanticsNode.thickness.png\"><\/p>\n<p>In this example the <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s for <a href=\"widgets\/PhysicalModel-class.html\">PhysicalModel<\/a> C and B share one\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> Y. Given the elevations of those <a href=\"rendering\/RenderObject-class.html\">RenderObject<\/a>s, this\n<a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> has a <a href=\"semantics\/SemanticsNode\/thickness.html\">thickness<\/a> of 10.0 and an elevation of 5.0 over\nits parent <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> X.\n<\/p>\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">PhysicalModel( \/\/ A\n  color: Colors.amber,\n  elevation: 0.0,\n  child: Semantics(\n    explicitChildNodes: true,\n    child: PhysicalModel( \/\/ B\n      color: Colors.brown,\n      elevation: 5.0,\n      child: PhysicalModel( \/\/ C\n        color: Colors.cyan,\n        elevation: 10.0,\n        child: Placeholder(),\n      ),\n    ),\n  ),\n)<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsNode\/elevation.html\">elevation<\/a>, which describes the elevation of the box defined by\n<a href=\"semantics\/SemanticsNode\/thickness.html\">thickness<\/a> and <a href=\"semantics\/SemanticsNode\/rect.html\">rect<\/a> relative to the parent of this <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">double get thickness =&gt; _thickness;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/thickness.html",
                    "name": "thickness",
                    "isDeprecated": false,
                    "type": "dart:core.double",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>The transform from this node's coordinate system to its parent's coordinate system.<\/p>\n<p>By default, the transform is null, which represents the identity\ntransformation (i.e., that this node has the same coordinate system as its\nparent).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">Matrix4 get transform =&gt; _transform;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/transform.html",
                    "name": "transform",
                    "isDeprecated": false,
                    "type": "vector_math_64.Matrix4",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                },
                {
                    "desc": "<p>A textual description for the current value of the node.<\/p>\n<p>The reading direction is given by <a href=\"semantics\/SemanticsNode\/textDirection.html\">textDirection<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">String get value =&gt; _value;<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsNode\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsNode",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Owns <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> objects and notifies listeners of changes to the\nrender tree semantics.<\/p>\n<p>To listen for semantic updates, call <a href=\"rendering\/PipelineOwner\/ensureSemantics.html\">PipelineOwner.ensureSemantics<\/a> to\nobtain a <a href=\"rendering\/SemanticsHandle-class.html\">SemanticsHandle<\/a>. This will create a <a href=\"semantics\/SemanticsOwner-class.html\">SemanticsOwner<\/a> if\nnecessary.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsOwner-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsOwner",
            "shortname": "SemanticsOwner",
            "extends": [
                "foundation.ChangeNotifier",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "",
                    "example": "",
                    "href": "semantics\/SemanticsOwner\/SemanticsOwner.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsOwner",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": []
                },
                {
                    "desc": "<p>Discards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\n<a href=\"foundation\/ChangeNotifier\/addListener.html\">addListener<\/a> and <a href=\"foundation\/ChangeNotifier\/removeListener.html\">removeListener<\/a> will throw after the object is\ndisposed).<\/p>\n<p>This method should only be called by the object's owner.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid dispose() {\n  _dirtyNodes.clear();\n  _nodes.clear();\n  _detachedNodes.clear();\n  super.dispose();\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsOwner\/dispose.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "dispose",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": []
                },
                {
                    "desc": "<p>Asks the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> with the given id to perform the given action.<\/p>\n<p>If the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> has not indicated that it can perform the action,\nthis function does nothing.<\/p>\n<p>If the given <code>action<\/code> requires arguments they need to be passed in via\nthe <code>args<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void performAction(int id, SemanticsAction action, [ dynamic args ]) {\n  assert(action != null);\n  final _SemanticsActionHandler handler = _getSemanticsActionHandlerForId(id, action);\n  if (handler != null) {\n    handler(args);\n    return;\n  }\n\n  \/\/ Default actions if no [handler] was provided.\n  if (action == SemanticsAction.showOnScreen &amp;&amp; _nodes[id]._showOnScreen != null)\n    _nodes[id]._showOnScreen();\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsOwner\/performAction.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "performAction",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": [
                        {
                            "name": "action",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.SemanticsAction"
                        },
                        {
                            "name": "args",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "id",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.int"
                        }
                    ]
                },
                {
                    "desc": "<p>Asks the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> at the given position to perform the given action.<\/p>\n<p>If the <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> has not indicated that it can perform the action,\nthis function does nothing.<\/p>\n<p>If the given <code>action<\/code> requires arguments they need to be passed in via\nthe <code>args<\/code> parameter.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void performActionAt(Offset position, SemanticsAction action, [ dynamic args ]) {\n  assert(action != null);\n  final SemanticsNode node = rootSemanticsNode;\n  if (node == null)\n    return;\n  final _SemanticsActionHandler handler = _getSemanticsActionHandlerForPosition(node, position, action);\n  if (handler != null)\n    handler(args);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsOwner\/performActionAt.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "performActionAt",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": [
                        {
                            "name": "action",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.SemanticsAction"
                        },
                        {
                            "name": "args",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "<dynamic>"
                        },
                        {
                            "name": "position",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.Offset"
                        }
                    ]
                },
                {
                    "desc": "<p>Update the semantics using <a href=\"dart-ui\/Window\/updateSemantics.html\">Window.updateSemantics<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">void sendSemanticsUpdate() {\n  if (_dirtyNodes.isEmpty)\n    return;\n  final Set&lt;int&gt; customSemanticsActionIds = &lt;int&gt;{};\n  final List&lt;SemanticsNode&gt; visitedNodes = &lt;SemanticsNode&gt;[];\n  while (_dirtyNodes.isNotEmpty) {\n    final List&lt;SemanticsNode&gt; localDirtyNodes = _dirtyNodes.where((SemanticsNode node) =&gt; !_detachedNodes.contains(node)).toList();\n    _dirtyNodes.clear();\n    _detachedNodes.clear();\n    localDirtyNodes.sort((SemanticsNode a, SemanticsNode b) =&gt; a.depth - b.depth);\n    visitedNodes.addAll(localDirtyNodes);\n    for (SemanticsNode node in localDirtyNodes) {\n      assert(node._dirty);\n      assert(node.parent == null || !node.parent.isPartOfNodeMerging || node.isMergedIntoParent);\n      if (node.isPartOfNodeMerging) {\n        assert(node.mergeAllDescendantsIntoThisNode || node.parent != null);\n        \/\/ if we're merged into our parent, make sure our parent is added to the dirty list\n        if (node.parent != null &amp;&amp; node.parent.isPartOfNodeMerging)\n          node.parent._markDirty(); \/\/ this can add the node to the dirty list\n      }\n    }\n  }\n  visitedNodes.sort((SemanticsNode a, SemanticsNode b) =&gt; a.depth - b.depth);\n  final ui.SemanticsUpdateBuilder builder = ui.SemanticsUpdateBuilder();\n  for (SemanticsNode node in visitedNodes) {\n    assert(node.parent?._dirty != true); \/\/ could be null (no parent) or false (not dirty)\n    \/\/ The _serialize() method marks the node as not dirty, and\n    \/\/ recurses through the tree to do a deep serialization of all\n    \/\/ contiguous dirty nodes. This means that when we return here,\n    \/\/ it's quite possible that subsequent nodes are no longer\n    \/\/ dirty. We skip these here.\n    \/\/ We also skip any nodes that were reset and subsequently\n    \/\/ dropped entirely (RenderObject.markNeedsSemanticsUpdate()\n    \/\/ calls reset() on its SemanticsNode if onlyChanges isn't set,\n    \/\/ which happens e.g. when the node is no longer contributing\n    \/\/ semantics).\n    if (node._dirty &amp;&amp; node.attached)\n      node._addToUpdate(builder, customSemanticsActionIds);\n  }\n  _dirtyNodes.clear();\n  for (int actionId in customSemanticsActionIds) {\n    final CustomSemanticsAction action = CustomSemanticsAction.getAction(actionId);\n    builder.updateCustomAction(id: actionId, label: action.label, hint: action.hint, overrideId: action.action?.index ?? -1);\n  }\n  SemanticsBinding.instance.window.updateSemantics(builder.build());\n  notifyListeners();\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsOwner\/sendSemanticsUpdate.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "sendSemanticsUpdate",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": []
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; describeIdentity(this);<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsOwner\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The root node of the semantics tree, if any.<\/p>\n<p>If the semantics tree is empty, returns null.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">SemanticsNode get rootSemanticsNode =&gt; _nodes[0];<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsOwner\/rootSemanticsNode.html",
                    "name": "rootSemanticsNode",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsNode",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsOwner",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Contains properties used by assistive technologies to make the application\nmore accessible.<\/p>\n<p>The properties of this class are used to generate a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s in the\nsemantics tree.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsProperties-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsProperties",
            "shortname": "SemanticsProperties",
            "extends": [
                "foundation.DiagnosticableTree",
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/copy-constant.html\">SemanticsAction.copy<\/a>.<\/p>\n<p>This is a request to copy the current selection to the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onCopy\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onCopy.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onCopy",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/cut-constant.html\">SemanticsAction.cut<\/a>.<\/p>\n<p>This is a request to cut the current selection and place it in the\nclipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onCut\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onCut.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onCut",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>.<\/p>\n<p>This is a request to decrease the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">decreasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsProperties\/onDecrease.html\">onDecrease<\/a> must ensure that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume down button.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDecrease\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onDecrease.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDecrease",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didGainAccessibilityFocus-constant.html\">SemanticsAction.didGainAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler gains\nthe accessibility focus. The accessibility focus is the\ngreen (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsProperties\/onDidLoseAccessibilityFocus.html\">onDidLoseAccessibilityFocus<\/a>, which is invoked when the accessibility\nfocus is removed from the node.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDidGainAccessibilityFocus\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onDidGainAccessibilityFocus.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDidGainAccessibilityFocus",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/didLoseAccessibilityFocus-constant.html\">SemanticsAction.didLoseAccessibilityFocus<\/a>.<\/p>\n<p>This handler is invoked when the node annotated with this handler\nloses the accessibility focus. The accessibility focus is\nthe green (on Android with TalkBack) or black (on iOS with VoiceOver)\nrectangle shown on screen to indicate what element an accessibility\nuser is currently interacting with.<\/p>\n<p>The accessibility focus is different from the input focus. The input focus\nis usually held by the element that currently responds to keyboard inputs.\nAccessibility focus and input focus can be held by two different nodes!<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsProperties\/onDidGainAccessibilityFocus.html\">onDidGainAccessibilityFocus<\/a>, which is invoked when the node gains\naccessibility focus.<\/li>\n<li>\n<a href=\"widgets\/FocusNode-class.html\">FocusNode<\/a>, <a href=\"widgets\/FocusScope-class.html\">FocusScope<\/a>, <a href=\"widgets\/FocusManager-class.html\">FocusManager<\/a>, which manage the input focus.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDidLoseAccessibilityFocus\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onDidLoseAccessibilityFocus.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDidLoseAccessibilityFocus",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/dismiss-constant.html\">SemanticsAction.dismiss<\/a>.<\/p>\n<p>This is a request to dismiss the currently focused node.<\/p>\n<p>TalkBack users on Android can trigger this action in the local context\nmenu, and VoiceOver users on iOS can trigger this action with a standard\ngesture or menu option.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onDismiss\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onDismiss.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onDismiss",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>.<\/p>\n<p>This is a request to increase the value represented by the widget. For\nexample, this action might be recognized by a slider control.<\/p>\n<p>If a <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> is set, <a href=\"semantics\/SemanticsProperties\/increasedValue.html\">increasedValue<\/a> must also be provided and\n<a href=\"semantics\/SemanticsProperties\/onIncrease.html\">onIncrease<\/a> must ensure that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will be set to <a href=\"semantics\/SemanticsProperties\/increasedValue.html\">increasedValue<\/a>.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with one\nfinger. TalkBack users on Android can trigger this action by pressing the\nvolume up button.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onIncrease\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onIncrease.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onIncrease",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/longPress-constant.html\">SemanticsAction.longPress<\/a>.<\/p>\n<p>This is the semantic equivalent of a user pressing and holding the screen\nwith the finger for a few seconds without moving it.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen without lifting the finger after the\nsecond tap.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onLongPress\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onLongPress.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onLongPress",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorBackwardByCharacter.html\">SemanticsAction.onMoveCursorBackwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorBackwardByCharacter\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onMoveCursorBackwardByCharacter.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorBackwardByCharacter",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorBackwardByWord.html\">SemanticsAction.onMoveCursorBackwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorBackwardByWord\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onMoveCursorBackwardByWord.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorBackwardByWord",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorForwardByCharacter.html\">SemanticsAction.onMoveCursorForwardByCharacter<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field forward by one character.<\/p>\n<p>TalkBack users can trigger this by pressing the volume up key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorForwardByCharacter\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onMoveCursorForwardByCharacter.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorForwardByCharacter",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"semantics\/SemanticsProperties\/onMoveCursorForwardByWord.html\">SemanticsAction.onMoveCursorForwardByWord<\/a>.<\/p>\n<p>This handler is invoked when the user wants to move the cursor in a\ntext field backward by one word.<\/p>\n<p>TalkBack users can trigger this by pressing the volume down key while the\ninput focus is in a text field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final MoveCursorHandler onMoveCursorForwardByWord\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onMoveCursorForwardByWord.html",
                    "isDeprecated": false,
                    "type": "semantics.MoveCursorHandler",
                    "name": "onMoveCursorForwardByWord",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/paste-constant.html\">SemanticsAction.paste<\/a>.<\/p>\n<p>This is a request to paste the current content of the clipboard.<\/p>\n<p>TalkBack users on Android can trigger this action from the local context\nmenu of a text field, for example.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onPaste\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onPaste.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onPaste",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollDown-constant.html\">SemanticsAction.scrollDown<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from top to bottom. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping down with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollDown\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onScrollDown.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollDown",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollLeft-constant.html\">SemanticsAction.scrollLeft<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from right to left. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping left with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollLeft\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onScrollLeft.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollLeft",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollRight-constant.html\">SemanticsAction.scrollRight<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from left to right. It should be recognized by controls that are\nhorizontally scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping right with three\nfingers. TalkBack users on Android can trigger this action by swiping\nleft and then right in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollDown.html\">onScrollDown<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollRight.html\">onScrollRight<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollRight\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onScrollRight.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollRight",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/scrollUp-constant.html\">SemanticsAction.scrollUp<\/a>.<\/p>\n<p>This is the semantic equivalent of a user moving their finger across the\nscreen from bottom to top. It should be recognized by controls that are\nvertically scrollable.<\/p>\n<p>VoiceOver users on iOS can trigger this action by swiping up with three\nfingers. TalkBack users on Android can trigger this action by swiping\nright and then left in one motion path. On Android, <a href=\"semantics\/SemanticsProperties\/onScrollUp.html\">onScrollUp<\/a> and\n<a href=\"semantics\/SemanticsProperties\/onScrollLeft.html\">onScrollLeft<\/a> share the same gesture. Therefore, only on of them should\nbe provided.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onScrollUp\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onScrollUp.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onScrollUp",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/setSelection-constant.html\">SemanticsAction.setSelection<\/a>.<\/p>\n<p>This handler is invoked when the user either wants to change the currently\nselected text in a text field or change the position of the cursor.<\/p>\n<p>TalkBack users can trigger this handler by selecting \"Move cursor to\nbeginning\/end\" or \"Select all\" from the local context menu.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SetSelectionHandler onSetSelection\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onSetSelection.html",
                    "isDeprecated": false,
                    "type": "semantics.SetSelectionHandler",
                    "name": "onSetSelection",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The handler for <a href=\"dart-ui\/SemanticsAction\/tap-constant.html\">SemanticsAction.tap<\/a>.<\/p>\n<p>This is the semantic equivalent of a user briefly tapping the screen with\nthe finger without moving it. For example, a button should implement this\naction.<\/p>\n<p>VoiceOver users on iOS and TalkBack users on Android can trigger this\naction by double-tapping the screen while an element is focused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final VoidCallback onTap\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/onTap.html",
                    "isDeprecated": false,
                    "type": "dart:ui.VoidCallback",
                    "name": "onTap",
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                }
            ],
            "methods": [
                {
                    "desc": "<p>Creates a semantic annotation.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsProperties({\n  this.enabled,\n  this.checked,\n  this.selected,\n  this.toggled,\n  this.button,\n  this.header,\n  this.textField,\n  this.focused,\n  this.inMutuallyExclusiveGroup,\n  this.hidden,\n  this.obscured,\n  this.scopesRoute,\n  this.namesRoute,\n  this.image,\n  this.liveRegion,\n  this.label,\n  this.value,\n  this.increasedValue,\n  this.decreasedValue,\n  this.hint,\n  this.hintOverrides,\n  this.textDirection,\n  this.sortKey,\n  this.onTap,\n  this.onLongPress,\n  this.onScrollLeft,\n  this.onScrollRight,\n  this.onScrollUp,\n  this.onScrollDown,\n  this.onIncrease,\n  this.onDecrease,\n  this.onCopy,\n  this.onCut,\n  this.onPaste,\n  this.onMoveCursorForwardByCharacter,\n  this.onMoveCursorBackwardByCharacter,\n  this.onMoveCursorForwardByWord,\n  this.onMoveCursorBackwardByWord,\n  this.onSetSelection,\n  this.onDidGainAccessibilityFocus,\n  this.onDidLoseAccessibilityFocus,\n  this.onDismiss,\n  this.customSemanticsActions,\n});<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsProperties\/SemanticsProperties.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsProperties",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": [
                        {
                            "name": "button",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "checked",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "customSemanticsActions",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>"
                        },
                        {
                            "name": "decreasedValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "enabled",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "focused",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "header",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "hidden",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "hint",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "hintOverrides",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.SemanticsHintOverrides"
                        },
                        {
                            "name": "image",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "inMutuallyExclusiveGroup",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "increasedValue",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "label",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "liveRegion",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "namesRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "obscured",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "onCopy",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onCut",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onDecrease",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onDidGainAccessibilityFocus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onDidLoseAccessibilityFocus",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onDismiss",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onIncrease",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onLongPress",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onMoveCursorBackwardByCharacter",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.MoveCursorHandler"
                        },
                        {
                            "name": "onMoveCursorBackwardByWord",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.MoveCursorHandler"
                        },
                        {
                            "name": "onMoveCursorForwardByCharacter",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.MoveCursorHandler"
                        },
                        {
                            "name": "onMoveCursorForwardByWord",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.MoveCursorHandler"
                        },
                        {
                            "name": "onPaste",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onScrollDown",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onScrollLeft",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onScrollRight",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onScrollUp",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "onSetSelection",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.SetSelectionHandler"
                        },
                        {
                            "name": "onTap",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.VoidCallback"
                        },
                        {
                            "name": "scopesRoute",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "selected",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "sortKey",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "semantics.SemanticsSortKey"
                        },
                        {
                            "name": "textDirection",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:ui.TextDirection"
                        },
                        {
                            "name": "textField",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "toggled",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.bool"
                        },
                        {
                            "name": "value",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsProperties\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/DiagnosticableTree\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(DiagnosticsProperty&lt;bool&gt;('checked', checked, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;bool&gt;('selected', selected, defaultValue: null));\n  properties.add(StringProperty('label', label, defaultValue: ''));\n  properties.add(StringProperty('value', value));\n  properties.add(StringProperty('hint', hint));\n  properties.add(EnumProperty&lt;TextDirection&gt;('textDirection', textDirection, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;SemanticsSortKey&gt;('sortKey', sortKey, defaultValue: null));\n  properties.add(DiagnosticsProperty&lt;SemanticsHintOverrides&gt;('hintOverrides', hintOverrides));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsProperties\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>A brief description of this object, usually just the <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a> and the\n<a href=\"dart-core\/Object\/hashCode.html\">hashCode<\/a>.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>, for a detailed description of the object.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toStringShort() =&gt; '$runtimeType';<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsProperties\/toStringShort.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toStringShort",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>If non-null, indicates that this subtree represents a button.<\/p>\n<p>TalkBack\/VoiceOver provides users with the hint \"button\" when a button\nis focused.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool button\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/button.html",
                    "name": "button",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, indicates that this subtree represents a checkbox\nor similar widget with a \"checked\" state, and what its current\nstate is.<\/p>\n<p>This is mutually exclusive with <a href=\"semantics\/SemanticsProperties\/toggled.html\">toggled<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool checked\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/checked.html",
                    "name": "checked",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>A map from each supported <a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a> to a provided handler.<\/p>\n<p>The handler associated with each custom action is called whenever a\nsemantics event of type <code>SemanticsEvent.customEvent<\/code> is received. The\nprovided argument will be an identifier used to retrieve an instance of\na custom action which can then retrieve the correct handler from this map.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/CustomSemanticsAction-class.html\">CustomSemanticsAction<\/a>, for an explanation of custom actions.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final Map&lt;CustomSemanticsAction, VoidCallback&gt; customSemanticsActions\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/customSemanticsActions.html",
                    "name": "customSemanticsActions",
                    "isDeprecated": false,
                    "type": "dart:core.Map<semantics.CustomSemanticsAction<dart:ui.VoidCallback>>",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will become after a <a href=\"dart-ui\/SemanticsAction\/decrease-constant.html\">SemanticsAction.decrease<\/a>\naction has been performed on this widget.<\/p>\n<p>If a value is provided, <a href=\"semantics\/SemanticsProperties\/onDecrease.html\">onDecrease<\/a> must also be set and there must\neither be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> or an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a>\nmust be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">SemanticsConfiguration.decreasedValue<\/a> for a description of how this\nis exposed in TalkBack and VoiceOver.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String decreasedValue\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/decreasedValue.html",
                    "name": "decreasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, indicates that this subtree represents something that can be\nin an enabled or disabled state.<\/p>\n<p>For example, a button that a user can currently interact with would set\nthis field to true. A button that currently does not respond to user\ninteractions would set this field to false.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool enabled\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/enabled.html",
                    "name": "enabled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether the node currently holds input focus.<\/p>\n<p>At most one node in the tree should hold input focus at any point in time.<\/p>\n<p>Input focus (indicates that the node will receive keyboard events) is not\nto be confused with accessibility focus. Accessibility focus is the\ngreen\/black rectangular that TalkBack\/VoiceOver on the screen and is\nseparate from input focus.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool focused\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/focused.html",
                    "name": "focused",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, indicates that this subtree represents a header.<\/p>\n<p>A header divides into sections. For example, an address book application\nmight define headers A, B, C, etc. to divide the list of alphabetically\nsorted contacts into sections.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool header\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/header.html",
                    "name": "header",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether the node is considered hidden.<\/p>\n<p>Hidden elements are currently not visible on screen. They may be covered\nby other elements or positioned outside of the visible area of a viewport.<\/p>\n<p>Hidden elements cannot gain accessibility focus though regular touch. The\nonly way they can be focused is by moving the focus to them via linear\nnavigation.<\/p>\n<p>Platforms are free to completely ignore hidden elements and new platforms\nare encouraged to do so.<\/p>\n<p>Instead of marking an element as hidden it should usually be excluded from\nthe semantics tree altogether. Hidden elements are only included in the\nsemantics tree to work around platform limitations and they are mainly\nused to implement accessibility scrolling on iOS.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool hidden\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/hidden.html",
                    "name": "hidden",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>Provides a brief textual description of the result of an action performed\non the widget.<\/p>\n<p>If a hint is provided, there must either be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nor an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a> should be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/hint.html\">SemanticsConfiguration.hint<\/a> for a description of how this is exposed\nin TalkBack and VoiceOver.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String hint\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/hint.html",
                    "name": "hint",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>Provides hint values which override the default hints on supported\nplatforms.<\/p>\n<p>On Android, If no hint overrides are used then default <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a> will be\ncombined with the <a href=\"semantics\/SemanticsProperties\/label.html\">label<\/a>. Otherwise, the <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a> will be ignored as long\nas there as at least one non-null hint override.<\/p>\n<p>On iOS, these are always ignored and the default <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a> is used instead.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsHintOverrides hintOverrides\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/hintOverrides.html",
                    "name": "hintOverrides",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsHintOverrides",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether the node represents an image.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/image.html\">SemanticsFlag.image<\/a>, for the flag this setting controls.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool image\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/image.html",
                    "name": "image",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether a semantic node is in a mutually exclusive group.<\/p>\n<p>For example, a radio button is in a mutually exclusive group because only\none radio button in that group can be marked as <a href=\"semantics\/SemanticsProperties\/checked.html\">checked<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool inMutuallyExclusiveGroup\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/inMutuallyExclusiveGroup.html",
                    "name": "inMutuallyExclusiveGroup",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The value that <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> will become after a <a href=\"dart-ui\/SemanticsAction\/increase-constant.html\">SemanticsAction.increase<\/a>\naction has been performed on this widget.<\/p>\n<p>If a value is provided, <a href=\"semantics\/SemanticsProperties\/onIncrease.html\">onIncrease<\/a> must also be set and there must\neither be an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a> or an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a>\nmust be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/increasedValue.html\">SemanticsConfiguration.increasedValue<\/a> for a description of how this\nis exposed in TalkBack and VoiceOver.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String increasedValue\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/increasedValue.html",
                    "name": "increasedValue",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>Provides a textual description of the widget.<\/p>\n<p>If a label is provided, there must either by an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nor an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a> should be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/label.html\">SemanticsConfiguration.label<\/a> for a description of how this is exposed\nin TalkBack and VoiceOver.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String label\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/label.html",
                    "name": "label",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether the node should be considered a live region.<\/p>\n<p>On Android, when a live region semantics node is first created TalkBack\nwill make a polite announcement of the current label. This announcement\noccurs even if the node is not focused. Subsequent polite announcements\ncan be made by sending a <a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a> semantics event. The\nannouncement will only be made if the node's label has changed since the\nlast update.<\/p>\n<p>On iOS, no announcements are made but the node is marked as\n<code>UIAccessibilityTraitUpdatesFrequently<\/code>.<\/p>\n<p>An example of a live region is the <code>Snackbar<\/code> widget. When it appears\non the screen it may be difficult to focus to read the label. A live\nregion causes an initial polite announcement to be generated\nautomatically.<\/p>\n<p>See also:<\/p>\n<ul>\n<li>\n<a href=\"semantics\/SemanticsProperties\/liveRegion.html\">SemanticsFlag.liveRegion<\/a>, the semantics flag this setting controls.<\/li>\n<li>\n<a href=\"semantics\/SemanticsProperties\/liveRegion.html\">SemanticsConfiguration.liveRegion<\/a>, for a full description of a live region.<\/li>\n<li>\n<a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a>, to trigger a polite announcement of a live region.<\/li>\n<\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool liveRegion\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/liveRegion.html",
                    "name": "liveRegion",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether the node contains the semantic label for a route.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/namesRoute.html\">SemanticsFlag.namesRoute<\/a> for a description of how the name is used.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool namesRoute\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/namesRoute.html",
                    "name": "namesRoute",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a> should be obscured.<\/p>\n<p>This option is usually set in combination with <a href=\"semantics\/SemanticsProperties\/textField.html\">textField<\/a> to indicate\nthat the text field contains a password (or other sensitive information).\nDoing so instructs screen readers to not read out the <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool obscured\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/obscured.html",
                    "name": "obscured",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, whether the node corresponds to the root of a subtree for\nwhich a route name should be announced.<\/p>\n<p>Generally, this is set in combination with <code>explicitChildNodes<\/code>, since\nnodes with this flag are not considered focusable by Android or iOS.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/scopesRoute.html\">SemanticsFlag.scopesRoute<\/a> for a description of how the announced\nvalue is selected.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool scopesRoute\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/scopesRoute.html",
                    "name": "scopesRoute",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null indicates that this subtree represents something that can be\nin a selected or unselected state, and what its current state is.<\/p>\n<p>The active tab in a tab bar for example is considered \"selected\", whereas\nall other tabs are unselected.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool selected\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/selected.html",
                    "name": "selected",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>Determines the position of this node among its siblings in the traversal\nsort order.<\/p>\n<p>This is used to describe the order in which the semantic node should be\ntraversed by the accessibility services on the platform (e.g. VoiceOver\non iOS and TalkBack on Android).<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final SemanticsSortKey sortKey\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/sortKey.html",
                    "name": "sortKey",
                    "isDeprecated": false,
                    "type": "semantics.SemanticsSortKey",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>The reading direction of the <a href=\"semantics\/SemanticsProperties\/label.html\">label<\/a>, <a href=\"semantics\/SemanticsProperties\/value.html\">value<\/a>, <a href=\"semantics\/SemanticsProperties\/hint.html\">hint<\/a>, <a href=\"semantics\/SemanticsProperties\/increasedValue.html\">increasedValue<\/a>,\nand <a href=\"semantics\/SemanticsProperties\/decreasedValue.html\">decreasedValue<\/a>.<\/p>\n<p>Defaults to the ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final TextDirection textDirection\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/textDirection.html",
                    "name": "textDirection",
                    "isDeprecated": false,
                    "type": "dart:ui.TextDirection",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, indicates that this subtree represents a text field.<\/p>\n<p>TalkBack\/VoiceOver provide special affordances to enter text into a\ntext field.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool textField\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/textField.html",
                    "name": "textField",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>If non-null, indicates that this subtree represents a toggle switch\nor similar widget with an \"on\" state, and what its current\nstate is.<\/p>\n<p>This is mutually exclusive with <a href=\"semantics\/SemanticsProperties\/checked.html\">checked<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final bool toggled\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/toggled.html",
                    "name": "toggled",
                    "isDeprecated": false,
                    "type": "dart:core.bool",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                },
                {
                    "desc": "<p>Provides a textual description of the value of the widget.<\/p>\n<p>If a value is provided, there must either by an ambient <a href=\"widgets\/Directionality-class.html\">Directionality<\/a>\nor an explicit <a href=\"semantics\/SemanticsProperties\/textDirection.html\">textDirection<\/a> should be provided.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<a href=\"semantics\/SemanticsProperties\/value.html\">SemanticsConfiguration.value<\/a> for a description of how this is exposed\nin TalkBack and VoiceOver.<\/li><\/ul>",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String value\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsProperties\/value.html",
                    "name": "value",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsProperties",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>Allows access to the platform's accessibility services.<\/p>\n<p>Events sent by this service are handled by the platform-specific\naccessibility bridge in Flutter's engine.<\/p>\n<p>When possible, prefer using mechanisms like <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> to implicitly\ntrigger announcements over using this event.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsService-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsService",
            "shortname": "SemanticsService",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Sends a semantic announcement.<\/p>\n<p>This should be used for announcement that are not seamlessly announced by\nthe system as a result of a UI state change.<\/p>\n<p>For example a camera application can use this method to make accessibility\nannouncements regarding objects in the viewfinder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; announce(String message, TextDirection textDirection) async {\n  final AnnounceSemanticsEvent event = AnnounceSemanticsEvent(message, textDirection);\n  await SystemChannels.accessibility.send(event.toMap());\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsService\/announce.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future",
                    "name": "announce",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsService",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        },
                        {
                            "name": "textDirection",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:ui.TextDirection"
                        }
                    ]
                },
                {
                    "desc": "<p>Sends a semantic announcement of a tooltip.<\/p>\n<p>Currently only honored on Android. The contents of <code>message<\/code> will be\nread by TalkBack.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">static Future&lt;void&gt; tooltip(String message) async {\n  final TooltipSemanticsEvent event = TooltipSemanticsEvent(message);\n  await SystemChannels.accessibility.send(event.toMap());\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsService\/tooltip.html",
                    "isDeprecated": false,
                    "type": "dart:async.Future",
                    "name": "tooltip",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsService",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "dart:core.String"
                        }
                    ]
                }
            ],
            "props": []
        },
        {
            "desc": "<p>Base class for all sort keys for <a href=\"widgets\/Semantics-class.html\">Semantics<\/a> accessibility traversal order\nsorting.<\/p>\n<p>Only keys of the same type and having matching <a href=\"semantics\/SemanticsSortKey\/name.html\">name<\/a>s are compared. If a\nlist of sibling <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>s contains keys that are not comparable with\neach other the list is first sorted using the default sorting algorithm.\nThen the nodes are broken down into groups by moving comparable nodes\ntowards the <em>earliest<\/em> node in the group. Finally each group is sorted by\nsort key and the resulting list is made by concatenating the sorted groups\nback.<\/p>\n<p>For example, let's take nodes (C, D, B, E, A, F). Let's assign node A key 1,\nnode B key 2, node C key 3. Let's also assume that the default sort order\nleaves the original list intact. Because nodes A, B, and C, have comparable\nsort key, they will form a group by pulling all nodes towards the earliest\nnode, which is C. The result is group (C, B, A). The remaining nodes D, E,\nF, form a second group with sort key being <code>null<\/code>. The first group is sorted\nusing their sort keys becoming (A, B, C). The second group is left as is\nbecause it does not specify sort keys. Then we concatenate the two groups -\n(A, B, C) and (D, E, F) - into the final (A, B, C, D, E, F).<\/p>\n<p>Because of the complexity introduced by incomparable sort keys among sibling\nnodes, it is recommended to either use comparable keys for all nodes, or\nuse null for all of them, leaving the sort order to the default algorithm.<\/p>\n<p>See Also:<\/p>\n<ul><li>\n<a href=\"semantics\/OrdinalSortKey-class.html\">OrdinalSortKey<\/a> for a sort key that sorts using an ordinal.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsSortKey-class.html",
            "isAbstract": true,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsSortKey",
            "shortname": "SemanticsSortKey",
            "extends": [
                "foundation.Diagnosticable",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [
                "semantics.OrdinalSortKey"
            ],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Abstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsSortKey({this.name});<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsSortKey\/SemanticsSortKey.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsSortKey",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsSortKey",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Compares this object to another <a href=\"dart-core\/Comparable-class.html\">Comparable<\/a><\/p>\n<p>Returns a value like a <a href=\"dart-core\/Comparator.html\">Comparator<\/a> when comparing <code>this<\/code> to <code>other<\/code>.\nThat is, it returns a negative integer if <code>this<\/code> is ordered before <code>other<\/code>,\na positive integer if <code>this<\/code> is ordered after <code>other<\/code>,\nand zero if <code>this<\/code> and <code>other<\/code> are ordered together.<\/p>\n<p>The <code>other<\/code> argument must be a value that is comparable to this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nint compareTo(SemanticsSortKey other) {\n  \/\/ The sorting algorithm must not compare incomparable keys.\n  assert(runtimeType == other.runtimeType);\n  assert(name == other.name);\n  return doCompare(other);\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsSortKey\/compareTo.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "compareTo",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsSortKey",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsSortKey"
                        }
                    ]
                },
                {
                    "desc": "<p>Add additional properties associated with the node.<\/p>\n<p>Use the most specific <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> existing subclass to describe\neach property instead of the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> base class. There are\nonly a small number of <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses each covering a\ncommon use case. Consider what values a property is relevant for users\ndebugging as users debugging large trees are overloaded with information.\nCommon named parameters in <a href=\"foundation\/DiagnosticsNode-class.html\">DiagnosticsNode<\/a> subclasses help filter when\nand how properties are displayed.<\/p>\n<p><code>defaultValue<\/code>, <code>showName<\/code>, <code>showSeparator<\/code>, and <code>level<\/code> keep string\nrepresentations of diagnostics terse and hide properties when they are not\nvery useful.<\/p>\n<ul>\n<li>Use <code>defaultValue<\/code> any time the default value of a property is\nuninteresting. For example, specify a default value of null any time\na property being null does not indicate an error.<\/li>\n<li>Avoid specifying the <code>level<\/code> parameter unless the result you want\ncannot be achieved by using the <code>defaultValue<\/code> parameter or using\nthe <a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a> class to conditionally display the property\nas a flag.<\/li>\n<li>Specify <code>showName<\/code> and <code>showSeparator<\/code> in rare cases where the string\noutput would look clumsy if they were not set.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;Object&gt;('child(3, 4)', null, ifNull: 'is null', showSeparator: false).toString()\n<\/code><\/pre>Shows using <code>showSeparator<\/code> to get output <code>child(3, 4) is null<\/code> which\nis more polished than <code>child(3, 4): is null<\/code>.\n<pre class=\"language-dart\"><code class=\"language-dart\">DiagnosticsProperty&lt;IconData&gt;('icon', icon, ifNull: '&lt;empty&gt;', showName: false)).toString()\n<\/code><\/pre>Shows using <code>showName<\/code> to omit the property name as in this context the\nproperty name does not add useful information.<\/li>\n<\/ul>\n<p><code>ifNull<\/code>, <code>ifEmpty<\/code>, <code>unit<\/code>, and <code>tooltip<\/code> make property\ndescriptions clearer. The examples in the code sample below illustrate\ngood uses of all of these parameters.<\/p>\n<h2 id=\"diagnosticsproperty-subclasses-for-primitive-types\">DiagnosticsProperty subclasses for primitive types<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/StringProperty-class.html\">StringProperty<\/a>, which supports automatically enclosing a <a href=\"dart-core\/String-class.html\">String<\/a>\nvalue in quotes.<\/li>\n<li>\n<a href=\"foundation\/DoubleProperty-class.html\">DoubleProperty<\/a>, which supports specifying a unit of measurement for\na <a href=\"dart-core\/double-class.html\">double<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/PercentProperty-class.html\">PercentProperty<\/a>, which clamps a <a href=\"dart-core\/double-class.html\">double<\/a> to between 0 and 1 and\nformats it as a percentage.<\/li>\n<li>\n<a href=\"foundation\/IntProperty-class.html\">IntProperty<\/a>, which supports specifying a unit of measurement for an\n<a href=\"dart-core\/int-class.html\">int<\/a> value.<\/li>\n<li>\n<a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a>, which formats a <a href=\"dart-core\/bool-class.html\">bool<\/a> value as one or more flags.\nDepending on the use case it is better to format a bool as\n<code>DiagnosticsProperty&lt;bool&gt;<\/code> instead of using <a href=\"foundation\/FlagProperty-class.html\">FlagProperty<\/a> as the\noutput is more verbose but unambiguous.<\/li>\n<\/ul>\n<h2 id=\"other-important-diagnosticsproperty-variants\">Other important <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> variants<\/h2>\n<ul>\n<li>\n<a href=\"foundation\/EnumProperty-class.html\">EnumProperty<\/a>, which provides terse descriptions of enum values\nworking around limitations of the <code>toString<\/code> implementation for Dart\nenum types.<\/li>\n<li>\n<a href=\"foundation\/IterableProperty-class.html\">IterableProperty<\/a>, which handles iterable values with display\ncustomizable depending on the <a href=\"foundation\/DiagnosticsTreeStyle-class.html\">DiagnosticsTreeStyle<\/a> used.<\/li>\n<li>\n<a href=\"foundation\/ObjectFlagProperty-class.html\">ObjectFlagProperty<\/a>, which provides terse descriptions of whether a\nproperty value is present or not. For example, whether an <code>onClick<\/code>\ncallback is specified or an animation is in progress.<\/li>\n<\/ul>\n<p>If none of these subclasses apply, use the <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nconstructor or in rare cases create your own <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\nsubclass as in the case for <a href=\"painting\/TransformProperty-class.html\">TransformProperty<\/a> which handles <a href=\"vector_math_64\/Matrix4-class.html\">Matrix4<\/a>\nthat represent transforms. Generally any property value with a good\n<code>toString<\/code> method implementation works fine using <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a>\ndirectly.<\/p>\n<p>\n<\/p>\n<div class=\"snippet-buttons\">\n  <button id=\"shortSnippetButton\" selected>Sample<\/button>\n<\/div>\n<div class=\"snippet-container\">\n  <div class=\"snippet\">\n<div class=\"snippet-description\">\nThis example shows best practices for implementing <a href=\"semantics\/SemanticsSortKey\/debugFillProperties.html\">debugFillProperties<\/a>\nillustrating use of all common <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> subclasses and all\ncommon <a href=\"foundation\/DiagnosticsProperty-class.html\">DiagnosticsProperty<\/a> parameters.\n<\/div>\n    <div class=\"copyable-container\">\n      <button class=\"copy-button-overlay copy-button\" title=\"Copy to clipboard\" onclick=\"copyTextToClipboard(findSiblingWithId(this, 'sample-code'));\">\n        <i class=\"material-icons copy-image\">assignment<\/i>\n      <\/button>\n      <pre class=\"language-dart\" id=\"sample-code\"><code class=\"language-dart\">class ExampleObject extends ExampleSuperclass {\n\n  \/\/ ...various members and properties...\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    \/\/ Always add properties from the base class first.\n    super.debugFillProperties(properties);\n\n    \/\/ Omit the property name 'message' when displaying this String property\n    \/\/ as it would just add visual noise.\n    properties.add(StringProperty('message', message, showName: false));\n\n    properties.add(DoubleProperty('stepWidth', stepWidth));\n\n    \/\/ A scale of 1.0 does nothing so should be hidden.\n    properties.add(DoubleProperty('scale', scale, defaultValue: 1.0));\n\n    \/\/ If the hitTestExtent matches the paintExtent, it is just set to its\n    \/\/ default value so is not relevant.\n    properties.add(DoubleProperty('hitTestExtent', hitTestExtent, defaultValue: paintExtent));\n\n    \/\/ maxWidth of double.infinity indicates the width is unconstrained and\n    \/\/ so maxWidth has no impact.,\n    properties.add(DoubleProperty('maxWidth', maxWidth, defaultValue: double.infinity));\n\n    \/\/ Progress is a value between 0 and 1 or null. Showing it as a\n    \/\/ percentage makes the meaning clear enough that the name can be\n    \/\/ hidden.\n    properties.add(PercentProperty(\n      'progress',\n      progress,\n      showName: false,\n      ifNull: '&lt;indeterminate&gt;',\n    ));\n\n    \/\/ Most text fields have maxLines set to 1.\n    properties.add(IntProperty('maxLines', maxLines, defaultValue: 1));\n\n    \/\/ Specify the unit as otherwise it would be unclear that time is in\n    \/\/ milliseconds.\n    properties.add(IntProperty('duration', duration.inMilliseconds, unit: 'ms'));\n\n    \/\/ Tooltip is used instead of unit for this case as a unit should be a\n    \/\/ terse description appropriate to display directly after a number\n    \/\/ without a space.\n    properties.add(DoubleProperty(\n      'device pixel ratio',\n      ui.window.devicePixelRatio,\n      tooltip: 'physical pixels per logical pixel',\n    ));\n\n    \/\/ Displaying the depth value would be distracting. Instead only display\n    \/\/ if the depth value is missing.\n    properties.add(ObjectFlagProperty&lt;int&gt;('depth', depth, ifNull: 'no depth'));\n\n    \/\/ bool flag that is only shown when the value is true.\n    properties.add(FlagProperty('using primary controller', value: primary));\n\n    properties.add(FlagProperty(\n      'isCurrent',\n      value: isCurrent,\n      ifTrue: 'active',\n      ifFalse: 'inactive',\n      showName: false,\n    ));\n\n    properties.add(DiagnosticsProperty&lt;bool&gt;('keepAlive', keepAlive));\n\n    \/\/ FlagProperty could have also been used in this case.\n    \/\/ This option results in the text \"obscureText: true\" instead\n    \/\/ of \"obscureText\" which is a bit more verbose but a bit clearer.\n    properties.add(DiagnosticsProperty&lt;bool&gt;('obscureText', obscureText, defaultValue: false));\n\n    properties.add(EnumProperty&lt;TextAlign&gt;('textAlign', textAlign, defaultValue: null));\n    properties.add(EnumProperty&lt;ImageRepeat&gt;('repeat', repeat, defaultValue: ImageRepeat.noRepeat));\n\n    \/\/ Warn users when the widget is missing but do not show the value.\n    properties.add(ObjectFlagProperty&lt;Widget&gt;('widget', widget, ifNull: 'no widget'));\n\n    properties.add(IterableProperty&lt;BoxShadow&gt;(\n      'boxShadow',\n      boxShadow,\n      defaultValue: null,\n      style: style,\n    ));\n\n    \/\/ Getting the value of size throws an exception unless hasSize is true.\n    properties.add(DiagnosticsProperty&lt;Size&gt;.lazy(\n      'size',\n      () =&gt; size,\n      description: '${ hasSize ? size : \"MISSING\" }',\n    ));\n\n    \/\/ If the `toString` method for the property value does not provide a\n    \/\/ good terse description, write a DiagnosticsProperty subclass as in\n    \/\/ the case of TransformProperty which displays a nice debugging view\n    \/\/ of a Matrix4 that represents a transform.\n    properties.add(TransformProperty('transform', transform));\n\n    \/\/ If the value class has a good `toString` method, use\n    \/\/ DiagnosticsProperty&lt;YourValueType&gt;. Specifying the value type ensures\n    \/\/ that debugging tools always know the type of the field and so can\n    \/\/ provide the right UI affordances. For example, in this case even\n    \/\/ if color is null, a debugging tool still knows the value is a Color\n    \/\/ and can display relevant color related UI.\n    properties.add(DiagnosticsProperty&lt;Color&gt;('color', color));\n\n    \/\/ Use a custom description to generate a more terse summary than the\n    \/\/ `toString` method on the map class.\n    properties.add(DiagnosticsProperty&lt;Map&lt;Listenable, VoidCallback&gt;&gt;(\n      'handles',\n      handles,\n      description: handles != null ?\n      '${handles.length} active client${ handles.length == 1 ? \"\" : \"s\" }' :\n      null,\n      ifNull: 'no notifications ever received',\n      showName: false,\n    ));\n  }\n}<\/code><\/pre>\n    <\/div>\n  <\/div>\n<\/div>\n\n<p>Used by <a href=\"foundation\/Diagnosticable\/toDiagnosticsNode.html\">toDiagnosticsNode<\/a> and <a href=\"foundation\/Diagnosticable\/toString.html\">toString<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nvoid debugFillProperties(DiagnosticPropertiesBuilder properties) {\n  super.debugFillProperties(properties);\n  properties.add(StringProperty('name', name, defaultValue: null));\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsSortKey\/debugFillProperties.html",
                    "isDeprecated": false,
                    "type": "<void>",
                    "name": "debugFillProperties",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsSortKey",
                    "params": [
                        {
                            "name": "properties",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "foundation.DiagnosticPropertiesBuilder"
                        }
                    ]
                },
                {
                    "desc": "<p>The implementation of <a href=\"semantics\/SemanticsSortKey\/compareTo.html\">compareTo<\/a>.<\/p>\n<p>The argument is guaranteed to be of the same type as this object and have\nthe same <a href=\"semantics\/SemanticsSortKey\/name.html\">name<\/a>.<\/p>\n<p>The method should return a negative number if this object comes earlier in\nthe sort order than the argument; and a positive number if it comes later\nin the sort order. Returning zero causes the system to use default sort\norder.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@protected\nint doCompare(covariant SemanticsSortKey other);<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsSortKey\/doCompare.html",
                    "isDeprecated": false,
                    "type": "dart:core.int",
                    "name": "doCompare",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsSortKey",
                    "params": [
                        {
                            "name": "other",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": false,
                            "type": "semantics.SemanticsSortKey"
                        }
                    ]
                }
            ],
            "props": [
                {
                    "desc": "<p>An optional name that will make this sort key only order itself\nwith respect to other sort keys of the same <a href=\"semantics\/SemanticsSortKey\/name.html\">name<\/a>, as long as\nthey are of the same <a href=\"dart-core\/Object\/runtimeType.html\">runtimeType<\/a>.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsSortKey\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsSortKey",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>A tag for a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>.<\/p>\n<p>Tags can be interpreted by the parent of a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a>\nand depending on the presence of a tag the parent can for example decide\nhow to add the tagged node as a child. Tags are not sent to the engine.<\/p>\n<p>As an example, the <a href=\"rendering\/RenderSemanticsGestureHandler-class.html\">RenderSemanticsGestureHandler<\/a> uses tags to determine\nif a child node should be excluded from the scrollable area for semantic\npurposes.<\/p>\n<p>The provided <a href=\"semantics\/SemanticsTag\/name.html\">name<\/a> is only used for debugging. Two tags created with the\nsame <a href=\"semantics\/SemanticsTag\/name.html\">name<\/a> and the <code>new<\/code> operator are not considered identical. However,\ntwo tags created with the same <a href=\"semantics\/SemanticsTag\/name.html\">name<\/a> and the <code>const<\/code> operator are always\nidentical.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/SemanticsTag-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsTag",
            "shortname": "SemanticsTag",
            "extends": [],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a <a href=\"semantics\/SemanticsTag-class.html\">SemanticsTag<\/a>.<\/p>\n<p>The provided <code>name<\/code> is only used for debugging. Two tags created with the\nsame <code>name<\/code> and the <code>new<\/code> operator are not considered identical. However,\ntwo tags created with the same <code>name<\/code> and the <code>const<\/code> operator are always\nidentical.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const SemanticsTag(this.name);<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsTag\/SemanticsTag.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "SemanticsTag",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.SemanticsTag",
                    "params": [
                        {
                            "name": "name",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns a string representation of this object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nString toString() =&gt; '$runtimeType($name)';<\/code><\/pre>\n    ",
                    "href": "semantics\/SemanticsTag\/toString.html",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "name": "toString",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.SemanticsTag",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>A human-readable name for this tag used for debugging.<\/p>\n<p>This string is not used to determine if two tags are identical.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String name\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/SemanticsTag\/name.html",
                    "name": "name",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.SemanticsTag",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An event which triggers tap semantic feedback.<\/p>\n<p>Currently only honored on Android. Triggers a tap specific sound when\nTalkBack is enabled.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/TapSemanticEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.TapSemanticEvent",
            "shortname": "TapSemanticEvent",
            "extends": [
                "semantics.SemanticsEvent",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs an event that triggers a long-press semantic feedback by the platform.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TapSemanticEvent() : super('tap');<\/code><\/pre>\n    ",
                    "href": "semantics\/TapSemanticEvent\/TapSemanticEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TapSemanticEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.TapSemanticEvent",
                    "params": []
                },
                {
                    "desc": "<p>Returns the event's data object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, dynamic&gt; getDataMap() =&gt; const &lt;String, dynamic&gt;{};<\/code><\/pre>\n    ",
                    "href": "semantics\/TapSemanticEvent\/getDataMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "getDataMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.TapSemanticEvent",
                    "params": []
                }
            ],
            "props": []
        },
        {
            "desc": "<p>An event for a semantic announcement of a tooltip.<\/p>\n<p>This is only used by Android to announce tooltip values.<\/p>\n    ",
            "dtype": "class",
            "example": "",
            "href": "semantics\/TooltipSemanticsEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.TooltipSemanticsEvent",
            "shortname": "TooltipSemanticsEvent",
            "extends": [
                "semantics.SemanticsEvent",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Constructs an event that triggers a tooltip announcement by the platform.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const TooltipSemanticsEvent(this.message) : super('tooltip');<\/code><\/pre>\n    ",
                    "href": "semantics\/TooltipSemanticsEvent\/TooltipSemanticsEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "TooltipSemanticsEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.TooltipSemanticsEvent",
                    "params": [
                        {
                            "name": "message",
                            "desc": "",
                            "example": "",
                            "href": "",
                            "isDeprecated": false,
                            "isOptional": true,
                            "type": "dart:core.String"
                        }
                    ]
                },
                {
                    "desc": "<p>Returns the event's data object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, dynamic&gt; getDataMap() {\n  return &lt;String, dynamic&gt;{\n    'message': message,\n  };\n}<\/code><\/pre>\n    ",
                    "href": "semantics\/TooltipSemanticsEvent\/getDataMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "getDataMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.TooltipSemanticsEvent",
                    "params": []
                }
            ],
            "props": [
                {
                    "desc": "<p>The text content of the tooltip.<\/p>\n        ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n          <pre class=\"language-dart\"><code class=\"language-dart\">final String message\n\n<\/code><\/pre>\n        ",
                    "href": "semantics\/TooltipSemanticsEvent\/message.html",
                    "name": "message",
                    "isDeprecated": false,
                    "type": "dart:core.String",
                    "dtype": "property",
                    "isStatic": false,
                    "isConstant": false,
                    "memberOf": "semantics.TooltipSemanticsEvent",
                    "params": []
                }
            ]
        },
        {
            "desc": "<p>An event which triggers a polite announcement of a live region.<\/p>\n<p>This requires that the semantics node has already been marked as a live\nregion. On Android, TalkBack will make a verbal announcement, as long as\nthe label of the semantics node has changed since the last live region\nupdate. iOS does not currently support this event.<\/p>\n<p>See also:<\/p>\n<ul><li>\n<code>SemanticsFlag.liveRegion<\/code>, for a description of live regions.<\/li><\/ul>",
            "dtype": "class",
            "example": "",
            "href": "semantics\/UpdateLiveRegionEvent-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.UpdateLiveRegionEvent",
            "shortname": "UpdateLiveRegionEvent",
            "extends": [
                "semantics.SemanticsEvent",
                "dart:core.Object"
            ],
            "is_enum": false,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [
                {
                    "desc": "<p>Creates a new <a href=\"semantics\/UpdateLiveRegionEvent-class.html\">UpdateLiveRegionEvent<\/a>.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">const UpdateLiveRegionEvent() : super('updateLiveRegion');<\/code><\/pre>\n    ",
                    "href": "semantics\/UpdateLiveRegionEvent\/UpdateLiveRegionEvent.html",
                    "isDeprecated": false,
                    "type": "",
                    "name": "UpdateLiveRegionEvent",
                    "dtype": "constructor",
                    "isConstructor": true,
                    "static": false,
                    "memberOf": "semantics.UpdateLiveRegionEvent",
                    "params": []
                },
                {
                    "desc": "<p>Returns the event's data object.<\/p>\n    ",
                    "example": "<h2><span>Implementation<\/span><\/h2>\n      <pre class=\"language-dart\"><code class=\"language-dart\">@override\nMap&lt;String, dynamic&gt; getDataMap() =&gt; const &lt;String, dynamic&gt;{};<\/code><\/pre>\n    ",
                    "href": "semantics\/UpdateLiveRegionEvent\/getDataMap.html",
                    "isDeprecated": false,
                    "type": "dart:core.Map<dart:core.String>",
                    "name": "getDataMap",
                    "dtype": "method",
                    "isConstructor": false,
                    "static": false,
                    "memberOf": "semantics.UpdateLiveRegionEvent",
                    "params": []
                }
            ],
            "props": []
        }
    ],
    "mixin": [
        {
            "desc": "<p>The glue between the semantics layer and the Flutter engine.<\/p>\n    ",
            "dtype": "mixin",
            "example": "",
            "href": "semantics\/SemanticsBinding-mixin.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.SemanticsBinding",
            "shortname": "SemanticsBinding",
            "extends": [],
            "is_enum": false,
            "is_mixin": true,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": []
        }
    ],
    "enum": [
        {
            "desc": "<p>Used by <a href=\"rendering\/debugDumpSemanticsTree.html\">debugDumpSemanticsTree<\/a> to specify the order in which child nodes\nare printed.<\/p>\n    ",
            "dtype": "enum",
            "example": "",
            "href": "semantics\/DebugSemanticsDumpOrder-class.html",
            "isAbstract": false,
            "isConstant": false,
            "isDeprecated": false,
            "memberOf": "semantics",
            "name": "semantics.DebugSemanticsDumpOrder",
            "shortname": "DebugSemanticsDumpOrder",
            "extends": [],
            "is_enum": true,
            "is_mixin": false,
            "realImplementors": [],
            "events": [],
            "methods": [],
            "props": [
                {
                    "desc": "\n          <p>Print nodes in inverse hit test order.<\/p>\n<p>In inverse hit test order, the last child of a <a href=\"semantics\/SemanticsNode-class.html\">SemanticsNode<\/a> will be\nasked first if it wants to respond to a user's interaction, followed by\nthe second last, etc. until a taker is found.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DebugSemanticsDumpOrder(0)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "inverseHitTest",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "semantics.DebugSemanticsDumpOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>Print nodes in semantic traversal order.<\/p>\n<p>This is the order in which a user would navigate the UI using the \"next\"\nand \"previous\" gestures.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const DebugSemanticsDumpOrder(1)<\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "traversalOrder",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "semantics.DebugSemanticsDumpOrder",
                    "params": []
                },
                {
                    "desc": "\n          <p>A constant List of the values in this enum, in order of their declaration.<\/p>\n                  \n  <div>\n            <span class=\"signature\"><code>const List&lt;<wbr><span class=\"type-parameter\">DebugSemanticsDumpOrder<\/span>&gt;<\/wbr><\/code><\/span>\n          <\/div>\n        ",
                    "example": "",
                    "href": "",
                    "name": "values",
                    "isDeprecated": false,
                    "type": "",
                    "dtype": "enum-value",
                    "isStatic": true,
                    "isConstant": true,
                    "memberOf": "semantics.DebugSemanticsDumpOrder",
                    "params": []
                }
            ]
        }
    ],
    "typedef": []
}